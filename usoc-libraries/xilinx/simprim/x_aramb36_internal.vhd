-- $Header: /devl/xcs/repo/env/Databases/CAEInterfaces/vhdsclibs/data/simprims/rainier/VITAL/Attic/x_aramb36_internal.vhd,v 1.28.12.1 2008/02/21 00:26:06 wloo Exp $
-------------------------------------------------------------------------------
-- Copyright (c) 1995/2005 Xilinx, Inc.
-- All Right Reserved.
-------------------------------------------------------------------------------
--   ____  ____
--  /   /\/   /
-- /___/  \  /    Vendor : Xilinx
-- \   \   \/     Version : 10.1i
--  \   \         Description : This is not an user primitive.
--  /   /                  Xilinx Timing Simulation Library Component 32K-Bit Data and 4K-Bit Parity Dual Port Block RAM
-- /___/   /\     Filename : X_ARAMB36_INTERNAL.vhd
-- \   \  /  \    Timestamp : Tues October 18 16:43:59 PST 2005
--  \___\/\___\
--
-- Revision:
--    10/18/05 - Initial version.
--    12/14/05 - Clean up generic checking.
--    05/30/06 - Added collision feature support.
--    07/10/06 - Added 2 dimensional memory array support for Virtex 4 block ram.
--    08/21/06 - Fixed the collision error message when the address is unknown (CR 233726/344429).
--    10/09/06 - Fixed collision case when READ_WIDTH_A/B = 16 (CR 424558).
--    11/01/06 - Fixed collision (CR 427720).
--    11/02/06 - Fixed sbiterr and dbiterr of ECC (CR 427509).
--    12/06/06 - Added DRC to prevent usage of EN_ECC_SCRUB = TRUE (CR 427875).
--    12/07/06 - Updated functional warning for Virtex 4 byte write feature (CR 428207).
--    12/22/06 - Added attribute VITAL_LEVEL0 for ModelSim 6.2* (CR 431025).
--    01/02/07 - Fixed parity bit for Virtex 4 byte write feature (CR 431585).
--    01/04/07 - Added support of memory file to initialize memory and parity (CR 431584).
--    02/21/07 - Added attribute check for SIM_COLLISION_CHECK (CR 433445).
--    03/01/07 - Fixed attribute check for SIM_COLLISION_CHECK (CR 435304).
--    03/14/07 - Removed attribute INITP_FILE (CR 436003).
--    03/28/07 - Disabled V4 byte write warning when READ_WIDTH_* = 0 (CR 429400).
--    04/03/07 - Changed INIT_FILE = "NONE" as default (CR 436812).
--    06/20/07 - Fixed collision address when cascaded block rams (CR 440250).
--    08/15/07 - Updated SSR as not supported feature in output register mode for ramb16 (CR 445314).
--    08/17/07 - Supported new memory file format (SLIB_M2.3).
--    09/05/07 - Fixed unable to open file "NONE" error (CR 448005).
--    09/18/07 - Fixed DRC check for V4 ramb16 (CR 448739).
--    10/01/07 - Added conditional statement for SSRA in cascade mode (CR 449340).
--    02/20/08 - Updated collison address when cascaded block rams (CR 451722).
-- End Revision

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.STD_LOGIC_SIGNED.all;
use IEEE.STD_LOGIC_ARITH.all;
use IEEE.STD_LOGIC_TEXTIO.all;

library STD;
use STD.TEXTIO.all;

library IEEE;
use IEEE.VITAL_Timing.all;

library simprim;
use simprim.Vcomponents.all;
use simprim.VPACKAGE.all;

entity X_ARAMB36_INTERNAL is

  generic (

    BRAM_MODE : string := "TRUE_DUAL_PORT";
    BRAM_SIZE : integer := 36;
    DOA_REG : integer := 0;
    DOB_REG : integer := 0;
    EN_ECC_READ : boolean := FALSE;
    EN_ECC_SCRUB : boolean := FALSE;
    EN_ECC_WRITE : boolean := FALSE;    
    INITP_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INITP_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INITP_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INITP_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INITP_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INITP_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INITP_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INITP_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INITP_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INITP_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INITP_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INITP_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INITP_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INITP_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INITP_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INITP_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_40 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_41 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_42 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_43 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_44 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_45 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_46 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_47 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_48 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_49 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_4A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_4B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_4C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_4D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_4E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_4F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_50 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_51 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_52 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_53 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_54 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_55 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_56 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_57 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_58 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_59 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_5A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_5B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_5C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_5D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_5E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_5F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_60 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_61 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_62 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_63 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_64 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_65 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_66 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_67 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_68 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_69 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_6A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_6B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_6C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_6D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_6E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_6F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_70 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_71 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_72 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_73 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_74 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_75 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_76 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_77 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_78 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_79 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_7A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_7B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_7C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_7D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_7E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_7F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_A : bit_vector := X"000000000000000000";
    INIT_B : bit_vector := X"000000000000000000";
    INIT_FILE : string := "NONE";
    RAM_EXTENSION_A : string := "NONE";
    RAM_EXTENSION_B : string := "NONE";
    READ_WIDTH_A : integer := 0;
    READ_WIDTH_B : integer := 0;
    SETUP_ALL : time := 1000 ps;
    SETUP_READ_FIRST : time := 3000 ps;
    SIM_COLLISION_CHECK : string := "ALL";
    SRVAL_A : bit_vector := X"000000000000000000";
    SRVAL_B : bit_vector := X"000000000000000000";
    WRITE_MODE_A : string := "WRITE_FIRST";
    WRITE_MODE_B : string := "WRITE_FIRST";
    WRITE_WIDTH_A : integer := 0;
    WRITE_WIDTH_B : integer := 0

    );

  port (

    CASCADEOUTLATA : out std_ulogic;
    CASCADEOUTLATB : out std_ulogic;
    CASCADEOUTREGA : out std_ulogic;
    CASCADEOUTREGB : out std_ulogic;
    DBITERR : out std_ulogic;
    DOA : out std_logic_vector(63 downto 0);
    DOB : out std_logic_vector(63 downto 0);
    DOPA : out std_logic_vector(7 downto 0);
    DOPB : out std_logic_vector(7 downto 0);
    ECCPARITY : out std_logic_vector(7 downto 0);
    SBITERR : out std_ulogic;
    
    ADDRA : in std_logic_vector(15 downto 0);
    ADDRB : in std_logic_vector(15 downto 0);
    CASCADEINLATA : in std_ulogic;
    CASCADEINLATB : in std_ulogic;
    CASCADEINREGA : in std_ulogic;
    CASCADEINREGB : in std_ulogic;
    CLKA : in std_ulogic;
    CLKB : in std_ulogic;
    DIA : in std_logic_vector(63 downto 0);
    DIB : in std_logic_vector(63 downto 0);
    DIPA : in std_logic_vector(7 downto 0);
    DIPB : in std_logic_vector(7 downto 0);
    ENA : in std_ulogic;
    ENB : in std_ulogic;
    REGCEA : in std_ulogic;
    REGCEB : in std_ulogic;
    REGCLKA : in std_ulogic;
    REGCLKB : in std_ulogic;
    SSRA : in std_ulogic;
    SSRB : in std_ulogic;
    WEA : in std_logic_vector(7 downto 0);
    WEB : in std_logic_vector(7 downto 0)

  );

    attribute VITAL_LEVEL0 of
      X_ARAMB36_INTERNAL : entity is true;

end X_ARAMB36_INTERNAL;

-- Architecture body --

architecture X_ARAMB36_INTERNAL_V of X_ARAMB36_INTERNAL is

    attribute VITAL_LEVEL0 of
      X_ARAMB36_INTERNAL_V : architecture is true;
    
    signal ADDRA_dly    : std_logic_vector(15 downto 0) := (others => 'X');
    signal CLKA_dly     : std_ulogic                    := 'X';
    signal DIA_dly      : std_logic_vector(63 downto 0) := (others => 'X');
    signal DIPA_dly     : std_logic_vector(7 downto 0)  := (others => 'X');
    signal ENA_dly      : std_ulogic                    := 'X';
    signal REGCEA_dly   : std_ulogic                    := 'X';
    signal SSRA_dly     : std_ulogic                    := 'X';
    signal WEA_dly      : std_logic_vector(7 downto 0)  := (others => 'X');
    signal CASCADEINLATA_dly      : std_ulogic          := 'X';
    signal CASCADEINREGA_dly      : std_ulogic          := 'X';
    signal ADDRB_dly    : std_logic_vector(15 downto 0) := (others => 'X');
    signal CLKB_dly     : std_ulogic                    := 'X';
    signal DIB_dly      : std_logic_vector(63 downto 0) := (others => 'X');
    signal DIPB_dly     : std_logic_vector(7 downto 0)  := (others => 'X');
    signal ENB_dly      : std_ulogic                    := 'X';
    signal REGCEB_dly   : std_ulogic                    := 'X';
    signal REGCLKA_dly   : std_ulogic                    := 'X';
    signal REGCLKB_dly   : std_ulogic                    := 'X';
    signal SSRB_dly     : std_ulogic                    := 'X';
    signal WEB_dly      : std_logic_vector(7 downto 0)  := (others => 'X');
    signal CASCADEINLATB_dly      : std_ulogic          := 'X';
    signal CASCADEINREGB_dly      : std_ulogic          := 'X';

    signal sbiterr_out : std_ulogic := '0';
    signal dbiterr_out : std_ulogic := '0';
    signal sbiterr_outreg : std_ulogic := '0';
    signal dbiterr_outreg : std_ulogic := '0';
    signal sbiterr_out_out : std_ulogic := '0';
    signal dbiterr_out_out : std_ulogic := '0';
    signal doa_out : std_logic_vector(63 downto 0) := (others => '0');
    signal dopa_out : std_logic_vector(7 downto 0) := (others => '0');
    signal doa_outreg : std_logic_vector(63 downto 0) := (others => '0');
    signal dopa_outreg : std_logic_vector(7 downto 0) := (others => '0');
    signal dob_outreg : std_logic_vector(63 downto 0) := (others => '0');
    signal dopb_outreg : std_logic_vector(7 downto 0) := (others => '0');
    signal dob_out : std_logic_vector(63 downto 0) := (others => '0');
    signal dopb_out : std_logic_vector(7 downto 0) := (others => '0');

    signal doa_out_mux : std_logic_vector(63 downto 0) := (others => '0');
    signal dopa_out_mux : std_logic_vector(7 downto 0) := (others => '0');
    signal doa_outreg_mux : std_logic_vector(63 downto 0) := (others => '0');
    signal dopa_outreg_mux : std_logic_vector(7 downto 0) := (others => '0');
    signal dob_outreg_mux : std_logic_vector(63 downto 0) := (others => '0');
    signal dopb_outreg_mux : std_logic_vector(7 downto 0) := (others => '0');
    signal dob_out_mux : std_logic_vector(63 downto 0) := (others => '0');
    signal dopb_out_mux : std_logic_vector(7 downto 0) := (others => '0');
    
    signal doa_out_out : std_logic_vector(63 downto 0) := (others => '0');
    signal dopa_out_out : std_logic_vector(7 downto 0) := (others => '0');
    signal dob_out_out : std_logic_vector(63 downto 0) := (others => '0');
    signal dopb_out_out : std_logic_vector(7 downto 0) := (others => '0');    
    signal addra_dly_15_reg : std_logic := '0';
    signal addrb_dly_15_reg : std_logic := '0';
    signal addra_dly_15_reg1 : std_logic := '0';
    signal addrb_dly_15_reg1 : std_logic := '0';
    signal cascade_a : std_logic_vector(1 downto 0) := (others => '0');
    signal cascade_b : std_logic_vector(1 downto 0) := (others => '0');
    signal GSR_dly : std_ulogic := 'X';
    signal eccparity_out : std_logic_vector(7 downto 0) := (others => 'X');
    signal SRVAL_A_STD : std_logic_vector(SRVAL_A'length-1 downto 0) := To_StdLogicVector(SRVAL_A);
    signal SRVAL_B_STD : std_logic_vector(SRVAL_B'length-1 downto 0) := To_StdLogicVector(SRVAL_B);
    signal INIT_A_STD : std_logic_vector(INIT_A'length-1 downto 0) := To_StdLogicVector(INIT_A);
    signal INIT_B_STD : std_logic_vector(INIT_B'length-1 downto 0) := To_StdLogicVector(INIT_B);
    signal di_x : std_logic_vector(63 downto 0) := (others => 'X');

  function GetWidestWidth (
    wr_width_a : in integer;
    rd_width_a : in integer;
    wr_width_b : in integer;
    rd_width_b : in integer
    ) return integer is
    variable func_widest_width : integer;
  begin
    if ((wr_width_a >= wr_width_b) and (wr_width_a >= rd_width_a) and (wr_width_a >= rd_width_b)) then
      func_widest_width := wr_width_a;
    elsif ((wr_width_b >= wr_width_a) and (wr_width_b >= rd_width_a) and (wr_width_b >= rd_width_b)) then
      func_widest_width := wr_width_b;
    elsif ((rd_width_a >= wr_width_a) and (rd_width_a >= wr_width_b) and (rd_width_a >= rd_width_b)) then
      func_widest_width := rd_width_a;
    elsif ((rd_width_b >= wr_width_a) and (rd_width_b >= wr_width_b) and (rd_width_b >= rd_width_a)) then
      func_widest_width := rd_width_b;
    end if;
    return func_widest_width;
  end;

    
  function GetWidth (
    rdwr_width : in integer
    ) return integer is
    variable func_width : integer;
  begin
    case rdwr_width is
      when 1 => func_width := 1;
      when 2 => func_width := 2;
      when 4 => func_width := 4;
      when 9 => func_width := 8;
      when 18 => func_width := 16;
      when 36 => func_width := 32;
      when 72 => func_width := 64;
      when others => func_width := 1;
    end case;
    return func_width;
  end;

    
  function GetWidthINITF (
    rdwr_width_initf : in integer
    ) return integer is
    variable func_width_initf : integer;
  begin
    case rdwr_width_initf is
      when 1 => func_width_initf := 4;
      when 2 => func_width_initf := 4;
      when 4 => func_width_initf := 4;
      when 9 => func_width_initf := 12;
      when 18 => func_width_initf := 20;
      when 36 => func_width_initf := 36;
      when 72 => func_width_initf := 72;
      when others => func_width_initf := 1;
    end case;
    return func_width_initf;
  end;

    
  function GetWidthp (
    rdwr_widthp : in integer
    ) return integer is
    variable func_widthp : integer;
  begin
    case rdwr_widthp is
      when 9 => func_widthp := 1;
      when 18 => func_widthp := 2;
      when 36 => func_widthp := 4;
      when 72 => func_widthp := 8;
--      when others => func_widthp := 1;
      when others => func_widthp := 0;
    end case;
    return func_widthp;
  end;

    
  function GetWidthpINITF (
    rdwr_widthp_initf : in integer
    ) return integer is
    variable func_widthp_initf : integer;
  begin
    case rdwr_widthp_initf is
      when 9 => func_widthp_initf := 4;
      when 18 => func_widthp_initf := 4;
      when 36 => func_widthp_initf := 4;
      when 72 => func_widthp_initf := 8;
      when others => func_widthp_initf := 1;
    end case;
    return func_widthp_initf;
  end;


  function GetWidthpTmpWidthp (
    rdwr_tmp_widthp : in integer
    ) return integer is
    variable func_widthp_tmp : integer;
  begin
    case rdwr_tmp_widthp is
      when 1 | 2 | 4 => func_widthp_tmp := 0;
      when 9 => func_widthp_tmp := 1;
      when 18 => func_widthp_tmp := 2;
      when 36 => func_widthp_tmp := 4;
      when 72 => func_widthp_tmp := 8;
      when others => func_widthp_tmp := 8;
    end case;
    return func_widthp_tmp;
  end;

    
  function GetMemoryDepth (
    rdwr_width : in integer;
    func_bram_size : in integer
    ) return integer is
    variable func_mem_depth : integer;
  begin
    case rdwr_width is
      when 1 => if (func_bram_size = 18) then
                  func_mem_depth := 16384;
                else
                  func_mem_depth := 32768;
                end if;
      when 2 => if (func_bram_size = 18) then
                  func_mem_depth := 8192;
                else
                  func_mem_depth := 16384;
                end if;
      when 4 => if (func_bram_size = 18) then
                  func_mem_depth := 4096;
                else
                  func_mem_depth := 8192;
                end if;
      when 9 => if (func_bram_size = 18) then
                  func_mem_depth := 2048;
                else
                  func_mem_depth := 4096;
                end if;
      when 18 => if (func_bram_size = 18) then
                   func_mem_depth := 1024;
                 else
                   func_mem_depth := 2048;
                 end if;
      when 36 => if (func_bram_size = 18) then
                   func_mem_depth := 512;
                 else
                   func_mem_depth := 1024;
                 end if;
      when 72 => if (func_bram_size = 18) then
                   func_mem_depth := 0;
                 else
                   func_mem_depth := 512;
                 end if;
      when others => func_mem_depth := 32768;
    end case;
    return func_mem_depth;
  end;

  
  function GetMemoryDepthP (
    rdwr_width : in integer;
    func_bram_size : in integer
    ) return integer is
    variable func_memp_depth : integer;
  begin
    case rdwr_width is
      when 9 => if (func_bram_size = 18) then
                  func_memp_depth := 2048;
                else
                  func_memp_depth := 4096;
                end if;
      when 18 => if (func_bram_size = 18) then
                   func_memp_depth := 1024;
                 else
                   func_memp_depth := 2048;
                 end if;
      when 36 => if (func_bram_size = 18) then
                   func_memp_depth := 512;
                 else
                   func_memp_depth := 1024;
                 end if;
      when 72 => if (func_bram_size = 18) then
                   func_memp_depth := 0;
                 else
                   func_memp_depth := 512;
                 end if;
      when others => func_memp_depth := 4096;
    end case;
    return func_memp_depth;
  end;

  
  function GetAddrBitLSB (
    rdwr_width : in integer
    ) return integer is
    variable func_lsb : integer;
  begin
    case rdwr_width is
      when 1 => func_lsb := 0;
      when 2 => func_lsb := 1;
      when 4 => func_lsb := 2;
      when 9 => func_lsb := 3;
      when 18 => func_lsb := 4;
      when 36 => func_lsb := 5;
      when 72 => func_lsb := 6;
      when others => func_lsb := 10;
    end case;
    return func_lsb;
  end;

    
  function GetAddrBit124 (
    rdwr_width : in integer;
    w_width : in integer
    ) return integer is
    variable func_widest_width : integer;
  begin
    case rdwr_width is
      when 1 => case w_width is
                  when 2 => func_widest_width := 0;
                  when 4 => func_widest_width := 1;
                  when 9 => func_widest_width := 2;
                  when 18 => func_widest_width := 3;
                  when 36 => func_widest_width := 4;
                  when 72 => func_widest_width := 5;
                  when others => func_widest_width := 10;
                end case;
      when 2 => case w_width is
                  when 4 => func_widest_width := 1;
                  when 9 => func_widest_width := 2;
                  when 18 => func_widest_width := 3;
                  when 36 => func_widest_width := 4;
                  when 72 => func_widest_width := 5;
                  when others => func_widest_width := 10;
                end case;
      when 4 => case w_width is
                  when 9 => func_widest_width := 2;
                  when 18 => func_widest_width := 3;
                  when 36 => func_widest_width := 4;
                  when 72 => func_widest_width := 5;
                  when others => func_widest_width := 10;
                end case;
      when others => func_widest_width := 10;
    end case;
    return func_widest_width;
  end;

  
  function GetAddrBit8 (
    rdwr_width : in integer;
    w_width : in integer
    ) return integer is
    variable func_widest_width : integer;
  begin
    case rdwr_width is
      when 9 => case w_width is
                  when 18 => func_widest_width := 3;
                  when 36 => func_widest_width := 4;
                  when 72 => func_widest_width := 5;
                  when others => func_widest_width := 10;
                end case;
      when others => func_widest_width := 10;
    end case;
    return func_widest_width;
  end;

  
  function GetAddrBit16 (
    rdwr_width : in integer;
    w_width : in integer
    ) return integer is
    variable func_widest_width : integer;
  begin
    case rdwr_width is
      when 18 => case w_width is
                  when 36 => func_widest_width := 4;
                  when 72 => func_widest_width := 5;
                  when others => func_widest_width := 10;
                end case;
      when others => func_widest_width := 10;
    end case;
    return func_widest_width;
  end;

  
  function GetAddrBit32 (
    rdwr_width : in integer;
    w_width : in integer
    ) return integer is
    variable func_widest_width : integer;
  begin
    case rdwr_width is
      when 36 => case w_width is
                  when 72 => func_widest_width := 5;
                  when others => func_widest_width := 10;
                end case;
      when others => func_widest_width := 10;
    end case;
    return func_widest_width;
  end;

  ---------------------------------------------------------------------------
  -- Function SLV_X_TO_HEX returns a hex string version of the std_logic_vector
  -- argument.
  ---------------------------------------------------------------------------
  function SLV_X_TO_HEX (
    SLV : in std_logic_vector;
    string_length : in integer
    ) return string is

    variable i : integer := 1;
    variable j : integer := 1;
    variable STR : string(string_length downto 1);
    variable nibble : std_logic_vector(3 downto 0) := "0000";
    variable full_nibble_count : integer := 0;
    variable remaining_bits : integer := 0;

  begin
    full_nibble_count := SLV'length/4;
    remaining_bits := SLV'length mod 4;
    for i in 1 to full_nibble_count loop
      nibble := SLV(((4*i) - 1) downto ((4*i) - 4));
      if (((nibble(0) xor nibble(1) xor nibble (2) xor nibble(3)) /= '1') and
          (nibble(0) xor nibble(1) xor nibble (2) xor nibble(3)) /= '0')  then
        STR(j) := 'x';
      elsif (nibble = "0000")  then
        STR(j) := '0';
      elsif (nibble = "0001")  then
        STR(j) := '1';
      elsif (nibble = "0010")  then
        STR(j) := '2';
      elsif (nibble = "0011")  then
        STR(j) := '3';
      elsif (nibble = "0100")  then
        STR(j) := '4';
      elsif (nibble = "0101")  then
        STR(j) := '5';
      elsif (nibble = "0110")  then
        STR(j) := '6';
      elsif (nibble = "0111")  then
        STR(j) := '7';
      elsif (nibble = "1000")  then
        STR(j) := '8';
      elsif (nibble = "1001")  then
        STR(j) := '9';
      elsif (nibble = "1010")  then
        STR(j) := 'a';
      elsif (nibble = "1011")  then
        STR(j) := 'b';
      elsif (nibble = "1100")  then
        STR(j) := 'c';
      elsif (nibble = "1101")  then
        STR(j) := 'd';
      elsif (nibble = "1110")  then
        STR(j) := 'e';
      elsif (nibble = "1111")  then
        STR(j) := 'f';
      end if;
      j := j + 1;
    end loop;
    
    if (remaining_bits /= 0) then
      nibble := "0000";
      nibble((remaining_bits -1) downto 0) := SLV((SLV'length -1) downto (SLV'length - remaining_bits));
      if (((nibble(0) xor nibble(1) xor nibble (2) xor nibble(3)) /= '1') and
          (nibble(0) xor nibble(1) xor nibble (2) xor nibble(3)) /= '0')  then
        STR(j) := 'x';
      elsif (nibble = "0000")  then
        STR(j) := '0';
      elsif (nibble = "0001")  then
        STR(j) := '1';
      elsif (nibble = "0010")  then
        STR(j) := '2';
      elsif (nibble = "0011")  then
        STR(j) := '3';
      elsif (nibble = "0100")  then
        STR(j) := '4';
      elsif (nibble = "0101")  then
        STR(j) := '5';
      elsif (nibble = "0110")  then
        STR(j) := '6';
      elsif (nibble = "0111")  then
        STR(j) := '7';
      elsif (nibble = "1000")  then
        STR(j) := '8';
      elsif (nibble = "1001")  then
        STR(j) := '9';
      elsif (nibble = "1010")  then
        STR(j) := 'a';
      elsif (nibble = "1011")  then
        STR(j) := 'b';
      elsif (nibble = "1100")  then
        STR(j) := 'c';
      elsif (nibble = "1101")  then
        STR(j) := 'd';
      elsif (nibble = "1110")  then
        STR(j) := 'e';
      elsif (nibble = "1111")  then
        STR(j) := 'f';
      end if;
    end if;    
    return STR;
  end SLV_X_TO_HEX;
    
  constant widest_width : integer := GetWidestWidth(WRITE_WIDTH_A, READ_WIDTH_A, WRITE_WIDTH_B, READ_WIDTH_B);
  constant mem_depth : integer := GetMemoryDepth(widest_width, BRAM_SIZE);
  constant memp_depth : integer := GetMemoryDepthP(widest_width, BRAM_SIZE);
  constant width : integer := GetWidth(widest_width);
  constant widthp : integer := GetWidthp(widest_width);
  constant width_initf : integer := GetWidthINITF(widest_width);
  constant widthp_initf : integer := GetWidthpINITF(widest_width);  
  constant wa_width : integer := GetWidth(WRITE_WIDTH_A);
  constant wb_width : integer := GetWidth(WRITE_WIDTH_B);
  constant ra_width : integer := GetWidth(READ_WIDTH_A);
  constant rb_width : integer := GetWidth(READ_WIDTH_B);
  constant wa_widthp : integer := GetWidthp(WRITE_WIDTH_A);
  constant wb_widthp : integer := GetWidthp(WRITE_WIDTH_B);
  constant ra_widthp : integer := GetWidthp(READ_WIDTH_A);
  constant rb_widthp : integer := GetWidthp(READ_WIDTH_B);
  constant r_addra_lbit_124 : integer := GetAddrBitLSB(READ_WIDTH_A);
  constant r_addrb_lbit_124 : integer := GetAddrBitLSB(READ_WIDTH_B);
  constant w_addra_lbit_124 : integer := GetAddrBitLSB(WRITE_WIDTH_A);
  constant w_addrb_lbit_124 : integer := GetAddrBitLSB(WRITE_WIDTH_B);
  constant w_addra_bit_124 : integer := GetAddrBit124(WRITE_WIDTH_A, widest_width);
  constant r_addra_bit_124 : integer := GetAddrBit124(READ_WIDTH_A, widest_width);
  constant w_addrb_bit_124 : integer := GetAddrBit124(WRITE_WIDTH_B, widest_width);
  constant r_addrb_bit_124 : integer := GetAddrBit124(READ_WIDTH_B, widest_width);
  constant w_addra_bit_8 : integer := GetAddrBit8(WRITE_WIDTH_A, widest_width);
  constant r_addra_bit_8 : integer := GetAddrBit8(READ_WIDTH_A, widest_width);
  constant w_addrb_bit_8 : integer := GetAddrBit8(WRITE_WIDTH_B, widest_width);
  constant r_addrb_bit_8 : integer := GetAddrBit8(READ_WIDTH_B, widest_width);
  constant w_addra_bit_16 : integer := GetAddrBit16(WRITE_WIDTH_A, widest_width);
  constant r_addra_bit_16 : integer := GetAddrBit16(READ_WIDTH_A, widest_width);
  constant w_addrb_bit_16 : integer := GetAddrBit16(WRITE_WIDTH_B, widest_width);
  constant r_addrb_bit_16 : integer := GetAddrBit16(READ_WIDTH_B, widest_width);
  constant w_addra_bit_32 : integer := GetAddrBit32(WRITE_WIDTH_A, widest_width);
  constant r_addra_bit_32 : integer := GetAddrBit32(READ_WIDTH_A, widest_width);
  constant w_addrb_bit_32 : integer := GetAddrBit32(WRITE_WIDTH_B, widest_width);
  constant r_addrb_bit_32 : integer := GetAddrBit32(READ_WIDTH_B, widest_width);
  constant col_addr_lsb : integer := GetAddrBitLSB(widest_width);
  constant tmp_widthp : integer := GetWidthpTmpWidthp(widest_width);

  type Two_D_array_type_tmp_mem is array ((mem_depth -  1) downto 0) of std_logic_vector((widest_width - 1) downto 0);
    
  type Two_D_array_type is array ((mem_depth -  1) downto 0) of std_logic_vector((width - 1) downto 0);
  type Two_D_parity_array_type is array ((memp_depth - 1) downto 0) of std_logic_vector((widthp -1) downto 0);

  type Two_D_array_type_initf is array ((mem_depth -  1) downto 0) of std_logic_vector((width_initf - 1) downto 0);
  type Two_D_parity_array_type_initf is array ((memp_depth - 1) downto 0) of std_logic_vector((widthp_initf -1) downto 0);

    
  function slv_to_two_D_array(
    slv_length : integer;
    slv_width : integer;
    SLV : in std_logic_vector
    )
    return two_D_array_type is
    variable two_D_array : two_D_array_type;
    variable intermediate : std_logic_vector((slv_width - 1) downto 0);
  begin
    for i in 0 to (slv_length - 1) loop
      intermediate := SLV(((i*slv_width) + (slv_width - 1)) downto (i* slv_width));
      two_D_array(i) := intermediate; 
    end loop;
    return two_D_array;
  end;

    
  function slv_to_two_D_parity_array(
    slv_length : integer;
    slv_width : integer;
    SLV : in std_logic_vector
    )
    return two_D_parity_array_type is
    variable two_D_parity_array : two_D_parity_array_type;
    variable intermediate : std_logic_vector((slv_width - 1) downto 0);
  begin
    for i in 0 to (slv_length - 1)loop
      intermediate := SLV(((i*slv_width) + (slv_width - 1)) downto (i* slv_width));
      two_D_parity_array(i) := intermediate; 
    end loop;
    return two_D_parity_array;
  end;

    
  function two_D_mem_initf(
    slv_width : integer
    )
    return two_D_array_type_tmp_mem is
      
    variable input_initf_tmp : Two_D_array_type_initf;
    variable input_initf : Two_D_array_type_tmp_mem;
    file int_infile : text;
    variable data_line, data_line_tmp, out_data_line : line;
    variable i : integer := 0;
    variable good_data : boolean := false;
    variable ignore_line : boolean := false;
    variable char_tmp : character;
    variable init_addr_slv : std_logic_vector(31 downto 0) := (others => '0');
    variable open_status : file_open_status;
    
  begin
    
    if (INIT_FILE /= "NONE") then

      file_open(open_status, int_infile, INIT_FILE, read_mode);

      while not endfile(int_infile) loop
          
        readline(int_infile, data_line);

        while (data_line /= null and data_line'length > 0) loop
          
          if (data_line(data_line'low to data_line'low + 1) = "//") then
            deallocate(data_line);

          elsif (data_line(data_line'low to data_line'low + 1) = "/*") then
            deallocate(data_line);
            ignore_line := true;

          elsif (ignore_line = true and data_line(data_line'high-1 to data_line'high) = "*/") then
            deallocate(data_line);
            ignore_line := false;


          elsif (ignore_line = false and data_line(data_line'low) = '@') then
            read(data_line, char_tmp);
            hread(data_line, init_addr_slv, good_data);

            i := SLV_TO_INT(init_addr_slv);

          elsif (ignore_line = false) then

            hread(data_line, input_initf_tmp(i), good_data);
            input_initf(i)(slv_width - 1 downto 0) := input_initf_tmp(i)(slv_width - 1 downto 0);
          
            if (good_data = true) then
              i := i + 1;             
            end if;
          else
            deallocate(data_line);
                     
          end if;
        
        end loop;
        
      end loop;

    end if;
    
    return input_initf;

  end;


  function two_D_mem_init(  
    slv_length : integer;
    slv_width : integer;
    SLV : in std_logic_vector;
    temp_mem : two_D_array_type_tmp_mem
    )
    return two_D_array_type is
    variable two_D_array_mem_init : two_D_array_type;
  begin
     if (INIT_FILE = "NONE") then
       two_D_array_mem_init := slv_to_two_D_array(slv_length, slv_width, SLV);
     else

       for i in 0 to (slv_length - 1) loop
         two_D_array_mem_init(i)(slv_width-1 downto 0) := temp_mem(i)(slv_width-1 downto 0);
       end loop;
         
     end if;
     return two_D_array_mem_init;
  end;

    
  function two_D_mem_initp(  
    slv_length : integer;
    slv_width : integer;
    SLV : in std_logic_vector;
    temp_mem : two_D_array_type_tmp_mem;
    mem_width : integer
    )
    return two_D_parity_array_type is
    variable two_D_array_mem_initp : two_D_parity_array_type;
  begin
     if (INIT_FILE = "NONE") then
       two_D_array_mem_initp := slv_to_two_D_parity_array(slv_length, slv_width, SLV);
     else

       if (slv_width > 0) then
         
         for i in 0 to (slv_length - 1) loop
           two_D_array_mem_initp(i)(slv_width-1 downto 0) := temp_mem(i)(mem_width + slv_width - 1 downto mem_width);
         end loop;

       end if;
     end if;
     return two_D_array_mem_initp;
  end;
    

  function fn_dip_ecc (
    encode : in std_logic;
    di_in : in std_logic_vector (63 downto 0);
    dip_in : in std_logic_vector (7 downto 0)
    ) return std_logic_vector is
    variable fn_dip_ecc : std_logic_vector (7 downto 0);
  begin

    fn_dip_ecc(0) := di_in(0) xor di_in(1) xor di_in(3) xor di_in(4) xor di_in(6) xor di_in(8)
                  xor di_in(10) xor di_in(11) xor di_in(13) xor di_in(15) xor di_in(17) xor di_in(19)
                  xor di_in(21) xor di_in(23) xor di_in(25) xor di_in(26) xor di_in(28)
                  xor di_in(30) xor di_in(32) xor di_in(34) xor di_in(36) xor di_in(38)
                  xor di_in(40) xor di_in(42) xor di_in(44) xor di_in(46) xor di_in(48)
                  xor di_in(50) xor di_in(52) xor di_in(54) xor di_in(56) xor di_in(57) xor di_in(59)
                  xor di_in(61) xor di_in(63);

    fn_dip_ecc(1) := di_in(0) xor di_in(2) xor di_in(3) xor di_in(5) xor di_in(6) xor di_in(9)
                     xor di_in(10) xor di_in(12) xor di_in(13) xor di_in(16) xor di_in(17)
                     xor di_in(20) xor di_in(21) xor di_in(24) xor di_in(25) xor di_in(27) xor di_in(28)
                     xor di_in(31) xor di_in(32) xor di_in(35) xor di_in(36) xor di_in(39)
                     xor di_in(40) xor di_in(43) xor di_in(44) xor di_in(47) xor di_in(48)
                     xor di_in(51) xor di_in(52) xor di_in(55) xor di_in(56) xor di_in(58) xor di_in(59)
                     xor di_in(62) xor di_in(63);

    fn_dip_ecc(2) := di_in(1) xor di_in(2) xor di_in(3) xor di_in(7) xor di_in(8) xor di_in(9)
                     xor di_in(10) xor di_in(14) xor di_in(15) xor di_in(16) xor di_in(17)
                     xor di_in(22) xor di_in(23) xor di_in(24) xor di_in(25) xor di_in(29)
                     xor di_in(30) xor di_in(31) xor di_in(32) xor di_in(37) xor di_in(38) xor di_in(39)
                     xor di_in(40) xor di_in(45) xor di_in(46) xor di_in(47) xor di_in(48)
                     xor di_in(53) xor di_in(54) xor di_in(55) xor di_in(56)
                     xor di_in(60) xor di_in(61) xor di_in(62) xor di_in(63);
	
    fn_dip_ecc(3) := di_in(4) xor di_in(5) xor di_in(6) xor di_in(7) xor di_in(8) xor di_in(9)
                     xor di_in(10) xor di_in(18) xor di_in(19)
                     xor di_in(20) xor di_in(21) xor di_in(22) xor di_in(23) xor di_in(24) xor di_in(25)
                     xor di_in(33) xor di_in(34) xor di_in(35) xor di_in(36) xor di_in(37) xor di_in(38) xor di_in(39)
                     xor di_in(40) xor di_in(49)
                     xor di_in(50) xor di_in(51) xor di_in(52) xor di_in(53) xor di_in(54) xor di_in(55) xor di_in(56);

    fn_dip_ecc(4) := di_in(11) xor di_in(12) xor di_in(13) xor di_in(14) xor di_in(15) xor di_in(16) xor di_in(17)
                     xor di_in(18) xor di_in(19) xor di_in(20) xor di_in(21) xor di_in(22) xor di_in(23) xor di_in(24)
                     xor di_in(25) xor di_in(41) xor di_in(42) xor di_in(43) xor di_in(44) xor di_in(45) xor di_in(46)
                     xor di_in(47) xor di_in(48) xor di_in(49) xor di_in(50) xor di_in(51) xor di_in(52) xor di_in(53)
                     xor di_in(54) xor di_in(55) xor di_in(56);


    fn_dip_ecc(5) := di_in(26) xor di_in(27) xor di_in(28) xor di_in(29)
                     xor di_in(30) xor di_in(31) xor di_in(32) xor di_in(33) xor di_in(34) xor di_in(35) xor di_in(36)
                     xor di_in(37) xor di_in(38) xor di_in(39) xor di_in(40) xor di_in(41) xor di_in(42) xor di_in(43)
                     xor di_in(44) xor di_in(45) xor di_in(46) xor di_in(47) xor di_in(48) xor di_in(49) xor di_in(50)
                     xor di_in(51) xor di_in(52) xor di_in(53) xor di_in(54) xor di_in(55) xor di_in(56);

    fn_dip_ecc(6) := di_in(57) xor di_in(58) xor di_in(59)
                     xor di_in(60) xor di_in(61) xor di_in(62) xor di_in(63);

    if (encode = '1') then

      fn_dip_ecc(7) := fn_dip_ecc(0) xor fn_dip_ecc(1) xor fn_dip_ecc(2) xor fn_dip_ecc(3) xor fn_dip_ecc(4) xor fn_dip_ecc(5)
                       xor fn_dip_ecc(6) xor di_in(0) xor di_in(1) xor di_in(2) xor di_in(3) xor di_in(4) xor di_in(5)
                       xor di_in(6) xor di_in(7) xor di_in(8) xor di_in(9) xor di_in(10) xor di_in(11) xor di_in(12)
                       xor di_in(13) xor di_in(14) xor di_in(15) xor di_in(16) xor di_in(17) xor di_in(18) xor di_in(19)
                       xor di_in(20) xor di_in(21) xor di_in(22) xor di_in(23) xor di_in(24) xor di_in(25) xor di_in(26)
                       xor di_in(27) xor di_in(28) xor di_in(29) xor di_in(30) xor di_in(31) xor di_in(32) xor di_in(33)
                       xor di_in(34) xor di_in(35) xor di_in(36) xor di_in(37) xor di_in(38) xor di_in(39) xor di_in(40)
                       xor di_in(41) xor di_in(42) xor di_in(43) xor di_in(44) xor di_in(45) xor di_in(46) xor di_in(47)
                       xor di_in(48) xor di_in(49) xor di_in(50) xor di_in(51) xor di_in(52) xor di_in(53) xor di_in(54)
                       xor di_in(55) xor di_in(56) xor di_in(57) xor di_in(58) xor di_in(59) xor di_in(60) xor di_in(61)
                       xor di_in(62) xor di_in(63);

    else

      fn_dip_ecc(7) := dip_in(0) xor dip_in(1) xor dip_in(2) xor dip_in(3) xor dip_in(4) xor dip_in(5)
                       xor dip_in(6) xor di_in(0) xor di_in(1) xor di_in(2) xor di_in(3) xor di_in(4) xor di_in(5)
                       xor di_in(6) xor di_in(7) xor di_in(8) xor di_in(9) xor di_in(10) xor di_in(11) xor di_in(12)
                       xor di_in(13) xor di_in(14) xor di_in(15) xor di_in(16) xor di_in(17) xor di_in(18) xor di_in(19)
                       xor di_in(20) xor di_in(21) xor di_in(22) xor di_in(23) xor di_in(24) xor di_in(25) xor di_in(26)
                       xor di_in(27) xor di_in(28) xor di_in(29) xor di_in(30) xor di_in(31) xor di_in(32) xor di_in(33)
                       xor di_in(34) xor di_in(35) xor di_in(36) xor di_in(37) xor di_in(38) xor di_in(39) xor di_in(40)
                       xor di_in(41) xor di_in(42) xor di_in(43) xor di_in(44) xor di_in(45) xor di_in(46) xor di_in(47)
                       xor di_in(48) xor di_in(49) xor di_in(50) xor di_in(51) xor di_in(52) xor di_in(53) xor di_in(54)
                       xor di_in(55) xor di_in(56) xor di_in(57) xor di_in(58) xor di_in(59) xor di_in(60) xor di_in(61)
                       xor di_in(62) xor di_in(63);
    end if;

    return fn_dip_ecc;
    
  end fn_dip_ecc;

    
  procedure prcd_chk_for_col_msg (
    constant wea_tmp : in std_ulogic;
    constant web_tmp : in std_ulogic;
    constant addra_tmp : in std_logic_vector (15 downto 0);
    constant addrb_tmp : in std_logic_vector (15 downto 0);
    variable col_wr_wr_msg : inout std_ulogic;
    variable col_wra_rdb_msg : inout std_ulogic;
    variable col_wrb_rda_msg : inout std_ulogic
    ) is
    
    variable string_length_1 : integer;
    variable string_length_2 : integer;
    variable message : LINE;
    constant MsgSeverity : severity_level := Error;

  begin
    
    if ((SIM_COLLISION_CHECK = "ALL" or SIM_COLLISION_CHECK = "WARNING_ONLY")
        and (not(((WRITE_MODE_B = "READ_FIRST" and web_tmp = '1' and wea_tmp = '0') and (not(rising_edge(clka_dly) and (not(rising_edge(clkb_dly))))))
              or ((WRITE_MODE_A = "READ_FIRST" and wea_tmp = '1' and web_tmp = '0') and (not(rising_edge(clkb_dly) and (not(rising_edge(clka_dly))))))))) then

      if ((addra_tmp'length mod 4) = 0) then
        string_length_1 := addra_tmp'length/4;
      elsif ((addra_tmp'length mod 4) > 0) then
        string_length_1 := addra_tmp'length/4 + 1;      
      end if;
      if ((addrb_tmp'length mod 4) = 0) then
        string_length_2 := addrb_tmp'length/4;
      elsif ((addrb_tmp'length mod 4) > 0) then
        string_length_2 := addrb_tmp'length/4 + 1;      
      end if;

      if (wea_tmp = '1' and web_tmp = '1' and col_wr_wr_msg = '1') then
        Write ( message, STRING'(" Memory Collision Error on X_ARAMB36_INTERNAL :"));
        Write ( message, STRING'(X_ARAMB36_INTERNAL'path_name));
        Write ( message, STRING'(" at simulation time "));
        Write ( message, now);
        Write ( message, STRING'("."));
        Write ( message, LF );
        Write ( message, STRING'(" A write was requested to the same address simultaneously at both Port A and Port B of the RAM."));
        Write ( message, STRING'(" The contents written to the RAM at address location "));      
        Write ( message, SLV_X_TO_HEX(addra_tmp, string_length_1));
        Write ( message, STRING'(" (hex) "));            
        Write ( message, STRING'("of Port A and address location "));
        Write ( message, SLV_X_TO_HEX(addrb_tmp, string_length_2));
        Write ( message, STRING'(" (hex) "));            
        Write ( message, STRING'("of Port B are unknown. "));
        ASSERT FALSE REPORT message.ALL SEVERITY MsgSeverity;
        DEALLOCATE (message);
        col_wr_wr_msg := '0';
        
      elsif (wea_tmp = '1' and web_tmp = '0' and col_wra_rdb_msg = '1') then
        Write ( message, STRING'(" Memory Collision Error on X_ARAMB36_INTERNAL :"));
        Write ( message, STRING'(X_ARAMB36_INTERNAL'path_name));
        Write ( message, STRING'(" at simulation time "));
        Write ( message, now);
        Write ( message, STRING'("."));
        Write ( message, LF );            
        Write ( message, STRING'(" A read was performed on address "));
        Write ( message, SLV_X_TO_HEX(addrb_tmp, string_length_2));
        Write ( message, STRING'(" (hex) "));            
        Write ( message, STRING'("of port B while a write was requested to the same address on Port A. "));
        Write ( message, STRING'(" The write will be successful however the read value on port B is unknown until the next CLKB cycle. "));
        ASSERT FALSE REPORT message.ALL SEVERITY MsgSeverity;
        DEALLOCATE (message);
        col_wra_rdb_msg := '0';
        
      elsif (wea_tmp = '0' and web_tmp = '1' and col_wrb_rda_msg = '1') then
        Write ( message, STRING'(" Memory Collision Error on X_ARAMB36_INTERNAL :"));
        Write ( message, STRING'(X_ARAMB36_INTERNAL'path_name));
        Write ( message, STRING'(" at simulation time "));
        Write ( message, now);
        Write ( message, STRING'("."));
        Write ( message, LF );            
        Write ( message, STRING'(" A read was performed on address "));
        Write ( message, SLV_X_TO_HEX(addra_tmp, string_length_1));
        Write ( message, STRING'(" (hex) "));            
        Write ( message, STRING'("of port A while a write was requested to the same address on Port B. "));
        Write ( message, STRING'(" The write will be successful however the read value on port A is unknown until the next CLKA cycle. "));
        ASSERT FALSE REPORT message.ALL SEVERITY MsgSeverity;
        DEALLOCATE (message);
        col_wrb_rda_msg := '0';
        
      end if;      

    end if;
    
  end prcd_chk_for_col_msg;

    
  procedure prcd_write_ram (
    constant we : in std_logic;
    constant di : in std_logic_vector;
    constant dip : in std_logic;
    variable mem_proc : inout std_logic_vector;
    variable memp_proc : inout std_logic
    ) is
    
    alias di_tmp : std_logic_vector (di'length-1 downto 0) is di;
    alias mem_proc_tmp : std_logic_vector (mem_proc'length-1 downto 0) is mem_proc;

    begin
      if (we = '1') then
        mem_proc_tmp := di_tmp;

        if (width >= 8) then
          memp_proc := dip;
        end if;
      end if;
  end prcd_write_ram;

    
  procedure prcd_write_ram_col (
    constant we_o : in std_logic;
    constant we : in std_logic;
    constant di : in std_logic_vector;
    constant dip : in std_logic;
    variable mem_proc : inout std_logic_vector;
    variable memp_proc : inout std_logic
    ) is
    
    alias di_tmp : std_logic_vector (di'length-1 downto 0) is di;
    alias mem_proc_tmp : std_logic_vector (mem_proc'length-1 downto 0) is mem_proc;
    variable i : integer := 0;
    
    begin
      if (we = '1') then

        for i in 0 to di'length-1 loop
          if ((mem_proc_tmp(i) /= 'X') or (not(we = we_o and we = '1'))) then
            mem_proc_tmp(i) := di_tmp(i);
          end if;
        end loop;

        if (width >= 8 and ((memp_proc /= 'X') or (not(we = we_o and we = '1')))) then
          memp_proc := dip;
        end if;

      end if;
  end prcd_write_ram_col;

  
  procedure prcd_x_buf (
    constant wr_rd_mode : in std_logic_vector (1 downto 0);
    constant do_uindex : in integer;
    constant do_lindex : in integer;
    constant dop_index : in integer;
    constant do_ltmp : in std_logic_vector (63 downto 0);
    variable do_tmp : inout std_logic_vector (63 downto 0);
    constant dop_ltmp : in std_logic_vector (7 downto 0);
    variable dop_tmp : inout std_logic_vector (7 downto 0)
    ) is
    
    variable i : integer;

    begin
      if (wr_rd_mode = "01") then
        for i in do_lindex to do_uindex loop
          if (do_ltmp(i) = 'X') then
            do_tmp(i) := 'X';
          end if;
        end loop;
        
        if (dop_ltmp(dop_index) = 'X') then
          dop_tmp(dop_index) := 'X';
        end if;
          
      else
        do_tmp(do_lindex + 7 downto do_lindex) := do_ltmp(do_lindex + 7 downto do_lindex);
        dop_tmp(dop_index) := dop_ltmp(dop_index);
      end if;

  end prcd_x_buf;

    
  procedure prcd_rd_ram_a (
    constant addra_tmp : in std_logic_vector (15 downto 0);
    variable doa_tmp : inout std_logic_vector (63 downto 0);
    variable dopa_tmp : inout std_logic_vector (7 downto 0);
    constant mem : in Two_D_array_type;
    constant memp : in Two_D_parity_array_type     
    ) is
    variable prcd_tmp_addra_dly_depth : integer;
    variable prcd_tmp_addra_dly_width : integer;

  begin
    
    case ra_width is

      when 1 | 2 | 4 => if (ra_width >= width) then
                          prcd_tmp_addra_dly_depth := SLV_TO_INT(addra_tmp(14 downto r_addra_lbit_124));
                          doa_tmp(ra_width-1 downto 0) := mem(prcd_tmp_addra_dly_depth);
                        else
                          prcd_tmp_addra_dly_depth := SLV_TO_INT(addra_tmp(14 downto r_addra_bit_124 + 1));
                          prcd_tmp_addra_dly_width := SLV_TO_INT(addra_tmp(r_addra_bit_124 downto r_addra_lbit_124));
                          doa_tmp(ra_width-1 downto 0) := mem(prcd_tmp_addra_dly_depth)((prcd_tmp_addra_dly_width * ra_width) + ra_width - 1 downto prcd_tmp_addra_dly_width * ra_width);
                        end if;

      when 8 => if (ra_width >= width) then
                  prcd_tmp_addra_dly_depth := SLV_TO_INT(addra_tmp(14 downto 3));
                  doa_tmp(7 downto 0) := mem(prcd_tmp_addra_dly_depth);
                  dopa_tmp(0 downto 0) := memp(prcd_tmp_addra_dly_depth);
                else
                  prcd_tmp_addra_dly_depth := SLV_TO_INT(addra_tmp(14 downto r_addra_bit_8 + 1));
                  prcd_tmp_addra_dly_width := SLV_TO_INT(addra_tmp(r_addra_bit_8 downto 3));
                  doa_tmp(7 downto 0) := mem(prcd_tmp_addra_dly_depth)((prcd_tmp_addra_dly_width * 8) + 7 downto prcd_tmp_addra_dly_width * 8);
                  dopa_tmp(0 downto 0) := memp(prcd_tmp_addra_dly_depth)(prcd_tmp_addra_dly_width downto prcd_tmp_addra_dly_width);
                end if;

      when 16 => if (ra_width >= width) then
                  prcd_tmp_addra_dly_depth := SLV_TO_INT(addra_tmp(14 downto 4));
                  doa_tmp(15 downto 0) := mem(prcd_tmp_addra_dly_depth);
                  dopa_tmp(1 downto 0) := memp(prcd_tmp_addra_dly_depth);
                 else
                  prcd_tmp_addra_dly_depth := SLV_TO_INT(addra_tmp(14 downto r_addra_bit_16 + 1));
                  prcd_tmp_addra_dly_width := SLV_TO_INT(addra_tmp(r_addra_bit_16 downto 4));
                  doa_tmp(15 downto 0) := mem(prcd_tmp_addra_dly_depth)((prcd_tmp_addra_dly_width * 16) + 15 downto prcd_tmp_addra_dly_width * 16);
                  dopa_tmp(1 downto 0) := memp(prcd_tmp_addra_dly_depth)((prcd_tmp_addra_dly_width * 2) + 1 downto prcd_tmp_addra_dly_width * 2);
                 end if;

      when 32 => if (ra_width >= width) then
                  prcd_tmp_addra_dly_depth := SLV_TO_INT(addra_tmp(14 downto 5));
                  doa_tmp(31 downto 0) := mem(prcd_tmp_addra_dly_depth);
                  dopa_tmp(3 downto 0) := memp(prcd_tmp_addra_dly_depth);
                end if;

      when 64 => if (ra_width >= width) then
                  prcd_tmp_addra_dly_depth := SLV_TO_INT(addra_tmp(14 downto 6));
                  doa_tmp(63 downto 0) := mem(prcd_tmp_addra_dly_depth);
                  dopa_tmp(7 downto 0) := memp(prcd_tmp_addra_dly_depth);
                end if;
                 
      when others => null;

    end case;

  end prcd_rd_ram_a;

  
  procedure prcd_rd_ram_b (
    constant addrb_tmp : in std_logic_vector (15 downto 0);
    variable dob_tmp : inout std_logic_vector (63 downto 0);
    variable dopb_tmp : inout std_logic_vector (7 downto 0);
    constant mem : in Two_D_array_type;
    constant memp : in Two_D_parity_array_type     
    ) is
    variable prcd_tmp_addrb_dly_depth : integer;
    variable prcd_tmp_addrb_dly_width : integer;

  begin
    
    case rb_width is

      when 1 | 2 | 4 => if (rb_width >= width) then
                          prcd_tmp_addrb_dly_depth := SLV_TO_INT(addrb_tmp(14 downto r_addrb_lbit_124));
                          dob_tmp(rb_width-1 downto 0) := mem(prcd_tmp_addrb_dly_depth);
                        else
                          prcd_tmp_addrb_dly_depth := SLV_TO_INT(addrb_tmp(14 downto r_addrb_bit_124 + 1));
                          prcd_tmp_addrb_dly_width := SLV_TO_INT(addrb_tmp(r_addrb_bit_124 downto r_addrb_lbit_124));
                          dob_tmp(rb_width-1 downto 0) := mem(prcd_tmp_addrb_dly_depth)((prcd_tmp_addrb_dly_width * rb_width) + rb_width - 1 downto prcd_tmp_addrb_dly_width * rb_width);
                        end if;

      when 8 => if (rb_width >= width) then
                  prcd_tmp_addrb_dly_depth := SLV_TO_INT(addrb_tmp(14 downto 3));
                  dob_tmp(7 downto 0) := mem(prcd_tmp_addrb_dly_depth);
                  dopb_tmp(0 downto 0) := memp(prcd_tmp_addrb_dly_depth);
                else
                  prcd_tmp_addrb_dly_depth := SLV_TO_INT(addrb_tmp(14 downto r_addrb_bit_8 + 1));
                  prcd_tmp_addrb_dly_width := SLV_TO_INT(addrb_tmp(r_addrb_bit_8 downto 3));
                  dob_tmp(7 downto 0) := mem(prcd_tmp_addrb_dly_depth)((prcd_tmp_addrb_dly_width * 8) + 7 downto prcd_tmp_addrb_dly_width * 8);
                  dopb_tmp(0 downto 0) := memp(prcd_tmp_addrb_dly_depth)(prcd_tmp_addrb_dly_width downto prcd_tmp_addrb_dly_width);
                end if;

      when 16 => if (rb_width >= width) then
                  prcd_tmp_addrb_dly_depth := SLV_TO_INT(addrb_tmp(14 downto 4));
                  dob_tmp(15 downto 0) := mem(prcd_tmp_addrb_dly_depth);
                  dopb_tmp(1 downto 0) := memp(prcd_tmp_addrb_dly_depth);
                 else
                  prcd_tmp_addrb_dly_depth := SLV_TO_INT(addrb_tmp(14 downto r_addrb_bit_16 + 1));
                  prcd_tmp_addrb_dly_width := SLV_TO_INT(addrb_tmp(r_addrb_bit_16 downto 4));
                  dob_tmp(15 downto 0) := mem(prcd_tmp_addrb_dly_depth)((prcd_tmp_addrb_dly_width * 16) + 15 downto prcd_tmp_addrb_dly_width * 16);
                  dopb_tmp(1 downto 0) := memp(prcd_tmp_addrb_dly_depth)((prcd_tmp_addrb_dly_width * 2) + 1 downto prcd_tmp_addrb_dly_width * 2);
                 end if;

      when 32 => if (rb_width >= width) then
                  prcd_tmp_addrb_dly_depth := SLV_TO_INT(addrb_tmp(14 downto 5));
                  dob_tmp(31 downto 0) := mem(prcd_tmp_addrb_dly_depth);
                  dopb_tmp(3 downto 0) := memp(prcd_tmp_addrb_dly_depth);
                end if;

      when others => null;

    end case;

  end prcd_rd_ram_b;


  procedure prcd_col_wr_ram_a (
    constant seq : in std_logic_vector (1 downto 0);
    constant web_tmp : in std_logic_vector (7 downto 0);
    constant wea_tmp : in std_logic_vector (7 downto 0);
    constant dia_tmp : in std_logic_vector (63 downto 0);
    constant dipa_tmp : in std_logic_vector (7 downto 0);
    constant addrb_tmp : in std_logic_vector (15 downto 0);
    constant addra_tmp : in std_logic_vector (15 downto 0);
    variable mem : inout Two_D_array_type;
    variable memp : inout Two_D_parity_array_type;
    variable col_wr_wr_msg : inout std_ulogic;
    variable col_wra_rdb_msg : inout std_ulogic;
    variable col_wrb_rda_msg : inout std_ulogic
    ) is
    variable prcd_tmp_addra_dly_depth : integer;
    variable prcd_tmp_addra_dly_width : integer;
    variable junk : std_ulogic;

  begin
    
    case wa_width is

      when 1 | 2 | 4 => if (not(wea_tmp(0) = '1' and web_tmp(0) = '1' and wa_width > wb_width) or seq = "10") then
                          if (wa_width >= width) then
                            prcd_tmp_addra_dly_depth := SLV_TO_INT(addra_tmp(14 downto w_addra_lbit_124));
                            prcd_write_ram_col (web_tmp(0), wea_tmp(0), dia_tmp(wa_width-1 downto 0), '0', mem(prcd_tmp_addra_dly_depth), junk);
                          else
                            prcd_tmp_addra_dly_depth := SLV_TO_INT(addra_tmp(14 downto w_addra_bit_124 + 1));
                            prcd_tmp_addra_dly_width := SLV_TO_INT(addra_tmp(w_addra_bit_124 downto w_addra_lbit_124));
                            prcd_write_ram_col (web_tmp(0), wea_tmp(0), dia_tmp(wa_width-1 downto 0), '0', mem(prcd_tmp_addra_dly_depth)((prcd_tmp_addra_dly_width * wa_width) + wa_width - 1 downto (prcd_tmp_addra_dly_width * wa_width)), junk);
                          end if;

                          if (seq = "00") then
                            prcd_chk_for_col_msg (wea_tmp(0), web_tmp(0), addra_tmp, addrb_tmp, col_wr_wr_msg, col_wra_rdb_msg, col_wrb_rda_msg);
                          end if;
                        end if;
      
      when 8 => if (not(wea_tmp(0) = '1' and web_tmp(0) = '1' and wa_width > wb_width) or seq = "10") then
                  if (wa_width >= width) then
                    prcd_tmp_addra_dly_depth := SLV_TO_INT(addra_tmp(14 downto 3));
                    prcd_write_ram_col (web_tmp(0), wea_tmp(0), dia_tmp(7 downto 0), dipa_tmp(0), mem(prcd_tmp_addra_dly_depth), memp(prcd_tmp_addra_dly_depth)(0));
                  else
                    prcd_tmp_addra_dly_depth := SLV_TO_INT(addra_tmp(14 downto w_addra_bit_8 + 1));
                    prcd_tmp_addra_dly_width := SLV_TO_INT(addra_tmp(w_addra_bit_8 downto 3));
                    prcd_write_ram_col (web_tmp(0), wea_tmp(0), dia_tmp(7 downto 0), dipa_tmp(0), mem(prcd_tmp_addra_dly_depth)((prcd_tmp_addra_dly_width * 8) + 7 downto (prcd_tmp_addra_dly_width * 8)), memp(prcd_tmp_addra_dly_depth)((prcd_tmp_addra_dly_width)));
                  end if;
  
                  if (seq = "00") then
                    prcd_chk_for_col_msg (wea_tmp(0), web_tmp(0), addra_tmp, addrb_tmp, col_wr_wr_msg, col_wra_rdb_msg, col_wrb_rda_msg);
                  end if;
                end if;

      when 16 => if (not(wea_tmp(0) = '1' and web_tmp(0) = '1' and wa_width > wb_width) or seq = "10") then
                  if (wa_width >= width) then
                    prcd_tmp_addra_dly_depth := SLV_TO_INT(addra_tmp(14 downto 4));
                    prcd_write_ram_col (web_tmp(0), wea_tmp(0), dia_tmp(7 downto 0), dipa_tmp(0), mem(prcd_tmp_addra_dly_depth)(7 downto 0), memp(prcd_tmp_addra_dly_depth)(0));
                  else
                    prcd_tmp_addra_dly_depth := SLV_TO_INT(addra_tmp(14 downto w_addra_bit_16 + 1));
                    prcd_tmp_addra_dly_width := SLV_TO_INT(addra_tmp(w_addra_bit_16 downto 4));
                    prcd_write_ram_col (web_tmp(0), wea_tmp(0), dia_tmp(7 downto 0), dipa_tmp(0), mem(prcd_tmp_addra_dly_depth)((prcd_tmp_addra_dly_width * 16) + 7 downto (prcd_tmp_addra_dly_width * 16)), memp(prcd_tmp_addra_dly_depth)((prcd_tmp_addra_dly_width * 2)));
                  end if;

                  if (seq = "00") then
                    prcd_chk_for_col_msg (wea_tmp(0), web_tmp(0), addra_tmp, addrb_tmp, col_wr_wr_msg, col_wra_rdb_msg, col_wrb_rda_msg);
                  end if;
                 
                  if (wa_width >= width) then
                    prcd_tmp_addra_dly_depth := SLV_TO_INT(addra_tmp(14 downto 4));
                    prcd_write_ram_col (web_tmp(1), wea_tmp(1), dia_tmp(15 downto 8), dipa_tmp(1), mem(prcd_tmp_addra_dly_depth)(15 downto 8), memp(prcd_tmp_addra_dly_depth)(1));
                  else
                    prcd_tmp_addra_dly_depth := SLV_TO_INT(addra_tmp(14 downto w_addra_bit_16 + 1));
                    prcd_tmp_addra_dly_width := SLV_TO_INT(addra_tmp(w_addra_bit_16 downto 4));
                    prcd_write_ram_col (web_tmp(1), wea_tmp(1), dia_tmp(15 downto 8), dipa_tmp(1), mem(prcd_tmp_addra_dly_depth)((prcd_tmp_addra_dly_width * 16) + 15 downto (prcd_tmp_addra_dly_width * 16) + 8), memp(prcd_tmp_addra_dly_depth)((prcd_tmp_addra_dly_width * 2) + 1));
                  end if;

                  if (seq = "00") then
                    prcd_chk_for_col_msg (wea_tmp(1), web_tmp(1), addra_tmp, addrb_tmp, col_wr_wr_msg, col_wra_rdb_msg, col_wrb_rda_msg);
                  end if;
                 
                end if;

      when 32 => if (not(wea_tmp(0) = '1' and web_tmp(0) = '1' and wa_width > wb_width) or seq = "10") then

                   prcd_tmp_addra_dly_depth := SLV_TO_INT(addra_tmp(14 downto 5));
                   prcd_write_ram_col (web_tmp(0), wea_tmp(0), dia_tmp(7 downto 0), dipa_tmp(0), mem(prcd_tmp_addra_dly_depth)(7 downto 0), memp(prcd_tmp_addra_dly_depth)(0));

                   if (seq = "00") then
                     prcd_chk_for_col_msg (wea_tmp(0), web_tmp(0), addra_tmp, addrb_tmp, col_wr_wr_msg, col_wra_rdb_msg, col_wrb_rda_msg);
                   end if;

                   prcd_write_ram_col (web_tmp(1), wea_tmp(1), dia_tmp(15 downto 8), dipa_tmp(1), mem(prcd_tmp_addra_dly_depth)(15 downto 8), memp(prcd_tmp_addra_dly_depth)(1));

                   if (seq = "00") then
                     prcd_chk_for_col_msg (wea_tmp(1), web_tmp(1), addra_tmp, addrb_tmp, col_wr_wr_msg, col_wra_rdb_msg, col_wrb_rda_msg);
                   end if;
                   
                   prcd_write_ram_col (web_tmp(2), wea_tmp(2), dia_tmp(23 downto 16), dipa_tmp(2), mem(prcd_tmp_addra_dly_depth)(23 downto 16), memp(prcd_tmp_addra_dly_depth)(2));

                   if (seq = "00") then
                     prcd_chk_for_col_msg (wea_tmp(2), web_tmp(2), addra_tmp, addrb_tmp, col_wr_wr_msg, col_wra_rdb_msg, col_wrb_rda_msg);
                   end if;

                   prcd_write_ram_col (web_tmp(3), wea_tmp(3), dia_tmp(31 downto 24), dipa_tmp(3), mem(prcd_tmp_addra_dly_depth)(31 downto 24), memp(prcd_tmp_addra_dly_depth)(3));

                   if (seq = "00") then
                     prcd_chk_for_col_msg (wea_tmp(3), web_tmp(3), addra_tmp, addrb_tmp, col_wr_wr_msg, col_wra_rdb_msg, col_wrb_rda_msg);
                   end if;

                 end if;
      when 64 => null;
--                   prcd_tmp_addra_dly_depth := SLV_TO_INT(addra_tmp(14 downto 6));
--                   prcd_write_ram_col ('0', '1', dia_tmp(7 downto 0), dipa_tmp(0), mem(prcd_tmp_addra_dly_depth)(7 downto 0), memp(prcd_tmp_addra_dly_depth)(0));
----                          if (seq = "00")
----                            prcd_chk_for_col_msg (wea_tmp(0), web_tmp(0), addra_tmp, addrb_tmp);
--
--                   prcd_write_ram_col ('0', '1', dia_tmp(15 downto 8), dipa_tmp(1), mem(prcd_tmp_addra_dly_depth)(15 downto 8), memp(prcd_tmp_addra_dly_depth)(1));
----                          if (seq = "00")
----                            prcd_chk_for_col_msg (wea_tmp(1), web_tmp(1), addra_tmp, addrb_tmp);
--                   
--                   prcd_write_ram_col ('0', '1', dia_tmp(23 downto 16), dipa_tmp(2), mem(prcd_tmp_addra_dly_depth)(23 downto 16), memp(prcd_tmp_addra_dly_depth)(2));
----                          if (seq = "00")
----                            prcd_chk_for_col_msg (wea_tmp(2), web_tmp(2), addra_tmp, addrb_tmp);
--
--                   prcd_write_ram_col ('0', '1', dia_tmp(31 downto 24), dipa_tmp(3), mem(prcd_tmp_addra_dly_depth)(31 downto 24), memp(prcd_tmp_addra_dly_depth)(3));
----                          if (seq = "00")
----                            prcd_chk_for_col_msg (wea_tmp(3), web_tmp(3), addra_tmp, addrb_tmp);
--  
--                   prcd_write_ram_col ('0', '1', dia_tmp(39 downto 32), dipa_tmp(4), mem(prcd_tmp_addra_dly_depth)(39 downto 32), memp(prcd_tmp_addra_dly_depth)(4));
----                          if (seq = "00")
----                            prcd_chk_for_col_msg (wea_tmp(4), web_tmp(4), addra_tmp, addrb_tmp);
--
--                   prcd_write_ram_col ('0', '1', dia_tmp(47 downto 40), dipa_tmp(5), mem(prcd_tmp_addra_dly_depth)(47 downto 40), memp(prcd_tmp_addra_dly_depth)(5));
----                          if (seq = "00")
----                            prcd_chk_for_col_msg (wea_tmp(5), web_tmp(5), addra_tmp, addrb_tmp);
--
--                   prcd_write_ram_col ('0', '1', dia_tmp(55 downto 48), dipa_tmp(6), mem(prcd_tmp_addra_dly_depth)(55 downto 48), memp(prcd_tmp_addra_dly_depth)(6));
----                          if (seq = "00")
----                            prcd_chk_for_col_msg (wea_tmp(6), web_tmp(6), addra_tmp, addrb_tmp);
--
--                   prcd_write_ram_col ('0', '1', dia_tmp(63 downto 56), dipa_tmp(7), mem(prcd_tmp_addra_dly_depth)(63 downto 56), memp(prcd_tmp_addra_dly_depth)(7));
----                          if (seq = "00")
----                            prcd_chk_for_col_msg (wea_tmp(7), web_tmp(7), addra_tmp, addrb_tmp);  
--
      when others => null;

    end case;

  end prcd_col_wr_ram_a;

  
  procedure prcd_col_wr_ram_b (
    constant seq : in std_logic_vector (1 downto 0);
    constant wea_tmp : in std_logic_vector (7 downto 0);
    constant web_tmp : in std_logic_vector (7 downto 0);
    constant dib_tmp : in std_logic_vector (63 downto 0);
    constant dipb_tmp : in std_logic_vector (7 downto 0);
    constant addra_tmp : in std_logic_vector (15 downto 0);
    constant addrb_tmp : in std_logic_vector (15 downto 0);
    variable mem : inout Two_D_array_type;
    variable memp : inout Two_D_parity_array_type;
    variable col_wr_wr_msg : inout std_ulogic;
    variable col_wra_rdb_msg : inout std_ulogic;
    variable col_wrb_rda_msg : inout std_ulogic
    ) is
    variable prcd_tmp_addrb_dly_depth : integer;
    variable prcd_tmp_addrb_dly_width : integer;
    variable junk : std_ulogic;

  begin
    
    case wb_width is

      when 1 | 2 | 4 => if (not(wea_tmp(0) = '1' and web_tmp(0) = '1' and wb_width > wa_width) or seq = "10") then
                          if (wb_width >= width) then
                            prcd_tmp_addrb_dly_depth := SLV_TO_INT(addrb_tmp(14 downto w_addrb_lbit_124));
                            prcd_write_ram_col (wea_tmp(0), web_tmp(0), dib_tmp(wb_width-1 downto 0), '0', mem(prcd_tmp_addrb_dly_depth), junk);
                          else
                            prcd_tmp_addrb_dly_depth := SLV_TO_INT(addrb_tmp(14 downto w_addrb_bit_124 + 1));
                            prcd_tmp_addrb_dly_width := SLV_TO_INT(addrb_tmp(w_addrb_bit_124 downto w_addrb_lbit_124));
                            prcd_write_ram_col (wea_tmp(0), web_tmp(0), dib_tmp(wb_width-1 downto 0), '0', mem(prcd_tmp_addrb_dly_depth)((prcd_tmp_addrb_dly_width * wb_width) + wb_width - 1 downto (prcd_tmp_addrb_dly_width * wb_width)), junk);
                          end if;

                          if (seq = "00") then
                            prcd_chk_for_col_msg (wea_tmp(0), web_tmp(0), addra_tmp, addrb_tmp, col_wr_wr_msg, col_wra_rdb_msg, col_wrb_rda_msg);
                          end if;
                        end if;

      when 8 => if (not(wea_tmp(0) = '1' and web_tmp(0) = '1' and wb_width > wa_width) or seq = "10") then
                  if (wb_width >= width) then
                    prcd_tmp_addrb_dly_depth := SLV_TO_INT(addrb_tmp(14 downto 3));
                    prcd_write_ram_col (wea_tmp(0), web_tmp(0), dib_tmp(7 downto 0), dipb_tmp(0), mem(prcd_tmp_addrb_dly_depth), memp(prcd_tmp_addrb_dly_depth)(0));
                  else
                    prcd_tmp_addrb_dly_depth := SLV_TO_INT(addrb_tmp(14 downto w_addrb_bit_8 + 1));
                    prcd_tmp_addrb_dly_width := SLV_TO_INT(addrb_tmp(w_addrb_bit_8 downto 3));
                    prcd_write_ram_col (wea_tmp(0), web_tmp(0), dib_tmp(7 downto 0), dipb_tmp(0), mem(prcd_tmp_addrb_dly_depth)((prcd_tmp_addrb_dly_width * 8) + 7 downto (prcd_tmp_addrb_dly_width * 8)), memp(prcd_tmp_addrb_dly_depth)((prcd_tmp_addrb_dly_width)));
                  end if;
    
                  if (seq = "00") then
                    prcd_chk_for_col_msg (wea_tmp(0), web_tmp(0), addra_tmp, addrb_tmp, col_wr_wr_msg, col_wra_rdb_msg, col_wrb_rda_msg);
                  end if; 
                end if;

      when 16 => if (not(wea_tmp(0) = '1' and web_tmp(0) = '1' and wb_width > wa_width) or seq = "10") then
                  if (wb_width >= width) then
                    prcd_tmp_addrb_dly_depth := SLV_TO_INT(addrb_tmp(14 downto 4));
                    prcd_write_ram_col (wea_tmp(0), web_tmp(0), dib_tmp(7 downto 0), dipb_tmp(0), mem(prcd_tmp_addrb_dly_depth)(7 downto 0), memp(prcd_tmp_addrb_dly_depth)(0));
                  else
                    prcd_tmp_addrb_dly_depth := SLV_TO_INT(addrb_tmp(14 downto w_addrb_bit_16 + 1));
                    prcd_tmp_addrb_dly_width := SLV_TO_INT(addrb_tmp(w_addrb_bit_16 downto 4));
                    prcd_write_ram_col (wea_tmp(0), web_tmp(0), dib_tmp(7 downto 0), dipb_tmp(0), mem(prcd_tmp_addrb_dly_depth)((prcd_tmp_addrb_dly_width * 16) + 7 downto (prcd_tmp_addrb_dly_width * 16)), memp(prcd_tmp_addrb_dly_depth)((prcd_tmp_addrb_dly_width * 2)));
                  end if;

                  if (seq = "00") then
                    prcd_chk_for_col_msg (wea_tmp(0), web_tmp(0), addra_tmp, addrb_tmp, col_wr_wr_msg, col_wra_rdb_msg, col_wrb_rda_msg);
                  end if;

                  if (wb_width >= width) then
                    prcd_tmp_addrb_dly_depth := SLV_TO_INT(addrb_tmp(14 downto 4));
                    prcd_write_ram_col (wea_tmp(1), web_tmp(1), dib_tmp(15 downto 8), dipb_tmp(1), mem(prcd_tmp_addrb_dly_depth)(15 downto 8), memp(prcd_tmp_addrb_dly_depth)(1));
                  else
                    prcd_tmp_addrb_dly_depth := SLV_TO_INT(addrb_tmp(14 downto w_addrb_bit_16 + 1));
                    prcd_tmp_addrb_dly_width := SLV_TO_INT(addrb_tmp(w_addrb_bit_16 downto 4));
                    prcd_write_ram_col (wea_tmp(1), web_tmp(1), dib_tmp(15 downto 8), dipb_tmp(1), mem(prcd_tmp_addrb_dly_depth)((prcd_tmp_addrb_dly_width * 16) + 15 downto (prcd_tmp_addrb_dly_width * 16) + 8), memp(prcd_tmp_addrb_dly_depth)((prcd_tmp_addrb_dly_width * 2) + 1));
                  end if;

                  if (seq = "00") then
                    prcd_chk_for_col_msg (wea_tmp(1), web_tmp(1), addra_tmp, addrb_tmp, col_wr_wr_msg, col_wra_rdb_msg, col_wrb_rda_msg);
                  end if;

                end if;
      when 32 => if (not(wea_tmp(0) = '1' and web_tmp(0) = '1' and wb_width > wa_width) or seq = "10") then

                   prcd_tmp_addrb_dly_depth := SLV_TO_INT(addrb_tmp(14 downto 5));
                   prcd_write_ram_col (wea_tmp(0), web_tmp(0), dib_tmp(7 downto 0), dipb_tmp(0), mem(prcd_tmp_addrb_dly_depth)(7 downto 0), memp(prcd_tmp_addrb_dly_depth)(0));
                   if (seq = "00") then
                     prcd_chk_for_col_msg (wea_tmp(0), web_tmp(0), addra_tmp, addrb_tmp, col_wr_wr_msg, col_wra_rdb_msg, col_wrb_rda_msg);
                   end if;

                   prcd_write_ram_col (wea_tmp(1), web_tmp(1), dib_tmp(15 downto 8), dipb_tmp(1), mem(prcd_tmp_addrb_dly_depth)(15 downto 8), memp(prcd_tmp_addrb_dly_depth)(1));
                   if (seq = "00") then
                     prcd_chk_for_col_msg (wea_tmp(1), web_tmp(1), addra_tmp, addrb_tmp, col_wr_wr_msg, col_wra_rdb_msg, col_wrb_rda_msg);
                   end if;
                   
                   prcd_write_ram_col (wea_tmp(2), web_tmp(2), dib_tmp(23 downto 16), dipb_tmp(2), mem(prcd_tmp_addrb_dly_depth)(23 downto 16), memp(prcd_tmp_addrb_dly_depth)(2));
                   if (seq = "00") then
                     prcd_chk_for_col_msg (wea_tmp(2), web_tmp(2), addra_tmp, addrb_tmp, col_wr_wr_msg, col_wra_rdb_msg, col_wrb_rda_msg);
                   end if;

                   prcd_write_ram_col (wea_tmp(3), web_tmp(3), dib_tmp(31 downto 24), dipb_tmp(3), mem(prcd_tmp_addrb_dly_depth)(31 downto 24), memp(prcd_tmp_addrb_dly_depth)(3));
                   if (seq = "00") then
                     prcd_chk_for_col_msg (wea_tmp(3), web_tmp(3), addra_tmp, addrb_tmp, col_wr_wr_msg, col_wra_rdb_msg, col_wrb_rda_msg);
                   end if;

                 end if;
      when 64 =>
                   prcd_tmp_addrb_dly_depth := SLV_TO_INT(addrb_tmp(14 downto 6));
                   prcd_write_ram_col (wea_tmp(0), web_tmp(0), dib_tmp(7 downto 0), dipb_tmp(0), mem(prcd_tmp_addrb_dly_depth)(7 downto 0), memp(prcd_tmp_addrb_dly_depth)(0));
                   if (seq = "00") then
                     prcd_chk_for_col_msg (wea_tmp(0), web_tmp(0), addra_tmp, addrb_tmp, col_wr_wr_msg, col_wra_rdb_msg, col_wrb_rda_msg);
                   end if;

                   prcd_write_ram_col (wea_tmp(1), web_tmp(1), dib_tmp(15 downto 8), dipb_tmp(1), mem(prcd_tmp_addrb_dly_depth)(15 downto 8), memp(prcd_tmp_addrb_dly_depth)(1));
                   if (seq = "00") then
                     prcd_chk_for_col_msg (wea_tmp(1), web_tmp(1), addra_tmp, addrb_tmp, col_wr_wr_msg, col_wra_rdb_msg, col_wrb_rda_msg);
                   end if;
                   
                   prcd_write_ram_col (wea_tmp(2), web_tmp(2), dib_tmp(23 downto 16), dipb_tmp(2), mem(prcd_tmp_addrb_dly_depth)(23 downto 16), memp(prcd_tmp_addrb_dly_depth)(2));
                   if (seq = "00") then
                     prcd_chk_for_col_msg (wea_tmp(2), web_tmp(2), addra_tmp, addrb_tmp, col_wr_wr_msg, col_wra_rdb_msg, col_wrb_rda_msg);
                   end if;

                   prcd_write_ram_col (wea_tmp(3), web_tmp(3), dib_tmp(31 downto 24), dipb_tmp(3), mem(prcd_tmp_addrb_dly_depth)(31 downto 24), memp(prcd_tmp_addrb_dly_depth)(3));
                   if (seq = "00") then
                     prcd_chk_for_col_msg (wea_tmp(3), web_tmp(3), addra_tmp, addrb_tmp, col_wr_wr_msg, col_wra_rdb_msg, col_wrb_rda_msg);
                   end if;
  
                   prcd_write_ram_col (wea_tmp(4), web_tmp(4), dib_tmp(39 downto 32), dipb_tmp(4), mem(prcd_tmp_addrb_dly_depth)(39 downto 32), memp(prcd_tmp_addrb_dly_depth)(4));
                   if (seq = "00") then
                     prcd_chk_for_col_msg (wea_tmp(4), web_tmp(4), addra_tmp, addrb_tmp, col_wr_wr_msg, col_wra_rdb_msg, col_wrb_rda_msg);
                   end if;

                   prcd_write_ram_col (wea_tmp(5), web_tmp(5), dib_tmp(47 downto 40), dipb_tmp(5), mem(prcd_tmp_addrb_dly_depth)(47 downto 40), memp(prcd_tmp_addrb_dly_depth)(5));
                   if (seq = "00") then
                     prcd_chk_for_col_msg (wea_tmp(5), web_tmp(5), addra_tmp, addrb_tmp, col_wr_wr_msg, col_wra_rdb_msg, col_wrb_rda_msg);
                   end if;

                   prcd_write_ram_col (wea_tmp(6), web_tmp(6), dib_tmp(55 downto 48), dipb_tmp(6), mem(prcd_tmp_addrb_dly_depth)(55 downto 48), memp(prcd_tmp_addrb_dly_depth)(6));
                   if (seq = "00") then
                     prcd_chk_for_col_msg (wea_tmp(6), web_tmp(6), addra_tmp, addrb_tmp, col_wr_wr_msg, col_wra_rdb_msg, col_wrb_rda_msg);
                   end if;

                   prcd_write_ram_col (wea_tmp(7), web_tmp(7), dib_tmp(63 downto 56), dipb_tmp(7), mem(prcd_tmp_addrb_dly_depth)(63 downto 56), memp(prcd_tmp_addrb_dly_depth)(7));
                   if (seq = "00") then
                     prcd_chk_for_col_msg (wea_tmp(7), web_tmp(7), addra_tmp, addrb_tmp, col_wr_wr_msg, col_wra_rdb_msg, col_wrb_rda_msg);
                   end if;

      when others => null;

    end case;

  end prcd_col_wr_ram_b;


  procedure prcd_col_rd_ram_a (
    constant viol_type_tmp : in std_logic_vector (1 downto 0);
    constant seq : in std_logic_vector (1 downto 0);
    constant web_tmp : in std_logic_vector (7 downto 0);
    constant wea_tmp : in std_logic_vector (7 downto 0);
    constant addra_tmp : in std_logic_vector (15 downto 0);
    variable doa_tmp : inout std_logic_vector (63 downto 0);
    variable dopa_tmp : inout std_logic_vector (7 downto 0);
    constant mem : in Two_D_array_type;
    constant memp : in Two_D_parity_array_type;
    constant wr_mode_a_tmp : in std_logic_vector (1 downto 0)

    ) is
    variable prcd_tmp_addra_dly_depth : integer;
    variable prcd_tmp_addra_dly_width : integer;
    variable junk : std_ulogic;
    variable doa_ltmp : std_logic_vector (63 downto 0);
    variable dopa_ltmp : std_logic_vector (7 downto 0);
    
  begin

    doa_ltmp := (others => '0');
    dopa_ltmp := (others => '0');
    
    case ra_width is
      
      when 1 | 2 | 4 => if ((web_tmp(0) = '1' and wea_tmp(0) = '1') or (seq = "01" and web_tmp(0) = '1' and wea_tmp(0) = '0' and viol_type_tmp = "10") or (seq = "01" and WRITE_MODE_A /= "READ_FIRST" and WRITE_MODE_B /= "READ_FIRST") or (seq = "01" and WRITE_MODE_A = "READ_FIRST" and WRITE_MODE_B /= "READ_FIRST" and web_tmp(0) = '1') or (seq = "11" and WRITE_MODE_A = "WRITE_FIRST" and web_tmp(0) /= '1')) then

                          if (ra_width >= width) then
                            prcd_tmp_addra_dly_depth := SLV_TO_INT(addra_tmp(14 downto r_addra_lbit_124));
                            doa_ltmp(ra_width-1 downto 0) := mem(prcd_tmp_addra_dly_depth);
                          else
                            prcd_tmp_addra_dly_depth := SLV_TO_INT(addra_tmp(14 downto r_addra_bit_124 + 1));
                            prcd_tmp_addra_dly_width := SLV_TO_INT(addra_tmp(r_addra_bit_124 downto r_addra_lbit_124));
                            doa_ltmp(ra_width-1 downto 0) := mem(prcd_tmp_addra_dly_depth)(((prcd_tmp_addra_dly_width * ra_width) + ra_width - 1) downto (prcd_tmp_addra_dly_width * ra_width));

                          end if;
                          prcd_x_buf (wr_mode_a_tmp, 3, 0, 0, doa_ltmp, doa_tmp, dopa_ltmp, dopa_tmp);
                        end if;

      when 8 => if ((web_tmp(0) = '1' and wea_tmp(0) = '1') or (seq = "01" and web_tmp(0) = '1' and wea_tmp(0) = '0' and viol_type_tmp = "10") or (seq = "01" and WRITE_MODE_A /= "READ_FIRST" and WRITE_MODE_B /= "READ_FIRST") or (seq = "01" and WRITE_MODE_A = "READ_FIRST" and WRITE_MODE_B /= "READ_FIRST" and web_tmp(0) = '1') or (seq = "11" and WRITE_MODE_A = "WRITE_FIRST" and web_tmp(0) /= '1')) then

                  if (ra_width >= width) then
                    prcd_tmp_addra_dly_depth := SLV_TO_INT(addra_tmp(14 downto 3));
                    doa_ltmp(7 downto 0) := mem(prcd_tmp_addra_dly_depth);
                    dopa_ltmp(0) := memp(prcd_tmp_addra_dly_depth)(0);
                  else
                    prcd_tmp_addra_dly_depth := SLV_TO_INT(addra_tmp(14 downto r_addra_bit_8 + 1));
                    prcd_tmp_addra_dly_width := SLV_TO_INT(addra_tmp(r_addra_bit_8 downto 3));
                    doa_ltmp(7 downto 0) := mem(prcd_tmp_addra_dly_depth)(((prcd_tmp_addra_dly_width * 8) + 7) downto (prcd_tmp_addra_dly_width * 8));
                    dopa_ltmp(0) := memp(prcd_tmp_addra_dly_depth)(prcd_tmp_addra_dly_width);
                  end if;
                  prcd_x_buf (wr_mode_a_tmp, 7, 0, 0, doa_ltmp, doa_tmp, dopa_ltmp, dopa_tmp);

                end if;

      when 16 => if ((web_tmp(0) = '1' and wea_tmp(0) = '1') or (seq = "01" and web_tmp(0) = '1' and wea_tmp(0) = '0' and viol_type_tmp = "10") or (seq = "01" and WRITE_MODE_A /= "READ_FIRST" and WRITE_MODE_B /= "READ_FIRST") or (seq = "01" and WRITE_MODE_A = "READ_FIRST" and WRITE_MODE_B /= "READ_FIRST" and web_tmp(0) = '1') or (seq = "11" and WRITE_MODE_A = "WRITE_FIRST" and web_tmp(0) /= '1')) then

                  if (ra_width >= width) then
                    prcd_tmp_addra_dly_depth := SLV_TO_INT(addra_tmp(14 downto 4));
                    doa_ltmp(7 downto 0) := mem(prcd_tmp_addra_dly_depth)(7 downto 0);
                    dopa_ltmp(0) := memp(prcd_tmp_addra_dly_depth)(0);
                  else
                    prcd_tmp_addra_dly_depth := SLV_TO_INT(addra_tmp(14 downto r_addra_bit_16 + 1));
                    prcd_tmp_addra_dly_width := SLV_TO_INT(addra_tmp(r_addra_bit_16 downto 4));

                    doa_ltmp(7 downto 0) := mem(prcd_tmp_addra_dly_depth)(((prcd_tmp_addra_dly_width * 16) + 7) downto (prcd_tmp_addra_dly_width * 16));                    
                    dopa_ltmp(0) := memp(prcd_tmp_addra_dly_depth)(prcd_tmp_addra_dly_width * 2);
                  end if;
                  prcd_x_buf (wr_mode_a_tmp, 7, 0, 0, doa_ltmp, doa_tmp, dopa_ltmp, dopa_tmp);

                end if;

                if ((web_tmp(1) = '1' and wea_tmp(1) = '1') or (seq = "01" and web_tmp(1) = '1' and wea_tmp(1) = '0' and viol_type_tmp = "10") or (seq = "01" and WRITE_MODE_A /= "READ_FIRST" and WRITE_MODE_B /= "READ_FIRST") or (seq = "01" and WRITE_MODE_A = "READ_FIRST" and WRITE_MODE_B /= "READ_FIRST" and web_tmp(1) = '1') or (seq = "11" and WRITE_MODE_A = "WRITE_FIRST" and web_tmp(1) /= '1')) then

                  if (ra_width >= width) then
                    prcd_tmp_addra_dly_depth := SLV_TO_INT(addra_tmp(14 downto 4));
                    doa_ltmp(15 downto 8) := mem(prcd_tmp_addra_dly_depth)(15 downto 8);
                    dopa_ltmp(1) := memp(prcd_tmp_addra_dly_depth)(1);
                  else
                    prcd_tmp_addra_dly_depth := SLV_TO_INT(addra_tmp(14 downto r_addra_bit_16 + 1));
                    prcd_tmp_addra_dly_width := SLV_TO_INT(addra_tmp(r_addra_bit_16 downto 4));

                    doa_ltmp(15 downto 8) := mem(prcd_tmp_addra_dly_depth)(((prcd_tmp_addra_dly_width * 16) + 15) downto ((prcd_tmp_addra_dly_width * 16) + 8));
                    dopa_ltmp(1) := memp(prcd_tmp_addra_dly_depth)((prcd_tmp_addra_dly_width * 2) + 1);
                  end if;
                  prcd_x_buf (wr_mode_a_tmp, 15, 8, 1, doa_ltmp, doa_tmp, dopa_ltmp, dopa_tmp);
                  
                end if;

      when 32 => if (ra_width >= width) then

                   prcd_tmp_addra_dly_depth := SLV_TO_INT(addra_tmp(14 downto 5));

                   if ((web_tmp(0) = '1' and wea_tmp(0) = '1') or (seq = "01" and web_tmp(0) = '1' and wea_tmp(0) = '0' and viol_type_tmp = "10") or (seq = "01" and WRITE_MODE_A /= "READ_FIRST" and WRITE_MODE_B /= "READ_FIRST") or (seq = "01" and WRITE_MODE_A = "READ_FIRST" and WRITE_MODE_B /= "READ_FIRST" and web_tmp(0) = '1') or (seq = "11" and WRITE_MODE_A = "WRITE_FIRST" and web_tmp(0) /= '1')) then

                     doa_ltmp(7 downto 0) := mem(prcd_tmp_addra_dly_depth)(7 downto 0);
                     dopa_ltmp(0) := memp(prcd_tmp_addra_dly_depth)(0);
                     prcd_x_buf (wr_mode_a_tmp, 7, 0, 0, doa_ltmp, doa_tmp, dopa_ltmp, dopa_tmp);

                   end if;

                   if ((web_tmp(1) = '1' and wea_tmp(1) = '1') or (seq = "01" and web_tmp(1) = '1' and wea_tmp(1) = '0' and viol_type_tmp = "10") or (seq = "01" and WRITE_MODE_A /= "READ_FIRST" and WRITE_MODE_B /= "READ_FIRST") or (seq = "01" and WRITE_MODE_A = "READ_FIRST" and WRITE_MODE_B /= "READ_FIRST" and web_tmp(1) = '1') or (seq = "11" and WRITE_MODE_A = "WRITE_FIRST" and web_tmp(1) /= '1')) then

                     doa_ltmp(15 downto 8) := mem(prcd_tmp_addra_dly_depth)(15 downto 8);
                     dopa_ltmp(1) := memp(prcd_tmp_addra_dly_depth)(1);
                     prcd_x_buf (wr_mode_a_tmp, 15, 8, 1, doa_ltmp, doa_tmp, dopa_ltmp, dopa_tmp);

                   end if;

                   if ((web_tmp(2) = '1' and wea_tmp(2) = '1') or (seq = "01" and web_tmp(2) = '1' and wea_tmp(2) = '0' and viol_type_tmp = "10") or (seq = "01" and WRITE_MODE_A /= "READ_FIRST" and WRITE_MODE_B /= "READ_FIRST") or (seq = "01" and WRITE_MODE_A = "READ_FIRST" and WRITE_MODE_B /= "READ_FIRST" and web_tmp(2) = '1') or (seq = "11" and WRITE_MODE_A = "WRITE_FIRST" and web_tmp(2) /= '1')) then

                     doa_ltmp(23 downto 16) := mem(prcd_tmp_addra_dly_depth)(23 downto 16);
                     dopa_ltmp(2) := memp(prcd_tmp_addra_dly_depth)(2);
                     prcd_x_buf (wr_mode_a_tmp, 23, 16, 2, doa_ltmp, doa_tmp, dopa_ltmp, dopa_tmp);

                   end if;

                   if ((web_tmp(3) = '1' and wea_tmp(3) = '1') or (seq = "01" and web_tmp(3) = '1' and wea_tmp(3) = '0' and viol_type_tmp = "10") or (seq = "01" and WRITE_MODE_A /= "READ_FIRST" and WRITE_MODE_B /= "READ_FIRST") or (seq = "01" and WRITE_MODE_A = "READ_FIRST" and WRITE_MODE_B /= "READ_FIRST" and web_tmp(3) = '1') or (seq = "11" and WRITE_MODE_A = "WRITE_FIRST" and web_tmp(3) /= '1')) then

                     doa_ltmp(31 downto 24) := mem(prcd_tmp_addra_dly_depth)(31 downto 24);
                     dopa_ltmp(3) := memp(prcd_tmp_addra_dly_depth)(3);
                     prcd_x_buf (wr_mode_a_tmp, 31, 24, 3, doa_ltmp, doa_tmp, dopa_ltmp, dopa_tmp);

                   end if;
  
                end if;
  
      when 64 =>
                   prcd_tmp_addra_dly_depth := SLV_TO_INT(addra_tmp(14 downto 6));

                   if ((web_tmp(0) = '1' and wea_tmp(0) = '1') or (seq = "01" and web_tmp(0) = '1' and wea_tmp(0) = '0' and viol_type_tmp = "10") or (seq = "01" and WRITE_MODE_A /= "READ_FIRST" and WRITE_MODE_B /= "READ_FIRST") or (seq = "01" and WRITE_MODE_A = "READ_FIRST" and WRITE_MODE_B /= "READ_FIRST" and web_tmp(0) = '1') or (seq = "11" and WRITE_MODE_A = "WRITE_FIRST" and web_tmp(0) /= '1')) then

                     doa_ltmp(7 downto 0) := mem(prcd_tmp_addra_dly_depth)(7 downto 0);
                     dopa_ltmp(0) := memp(prcd_tmp_addra_dly_depth)(0);
                     prcd_x_buf (wr_mode_a_tmp, 7, 0, 0, doa_ltmp, doa_tmp, dopa_ltmp, dopa_tmp);

                   end if;

                   if ((web_tmp(1) = '1' and wea_tmp(1) = '1') or (seq = "01" and web_tmp(1) = '1' and wea_tmp(1) = '0' and viol_type_tmp = "10") or (seq = "01" and WRITE_MODE_A /= "READ_FIRST" and WRITE_MODE_B /= "READ_FIRST") or (seq = "01" and WRITE_MODE_A = "READ_FIRST" and WRITE_MODE_B /= "READ_FIRST" and web_tmp(1) = '1') or (seq = "11" and WRITE_MODE_A = "WRITE_FIRST" and web_tmp(1) /= '1')) then

                     doa_ltmp(15 downto 8) := mem(prcd_tmp_addra_dly_depth)(15 downto 8);
                     dopa_ltmp(1) := memp(prcd_tmp_addra_dly_depth)(1);
                     prcd_x_buf (wr_mode_a_tmp, 15, 8, 1, doa_ltmp, doa_tmp, dopa_ltmp, dopa_tmp);

                   end if;

                   if ((web_tmp(2) = '1' and wea_tmp(2) = '1') or (seq = "01" and web_tmp(2) = '1' and wea_tmp(2) = '0' and viol_type_tmp = "10") or (seq = "01" and WRITE_MODE_A /= "READ_FIRST" and WRITE_MODE_B /= "READ_FIRST") or (seq = "01" and WRITE_MODE_A = "READ_FIRST" and WRITE_MODE_B /= "READ_FIRST" and web_tmp(2) = '1') or (seq = "11" and WRITE_MODE_A = "WRITE_FIRST" and web_tmp(2) /= '1')) then

                     doa_ltmp(23 downto 16) := mem(prcd_tmp_addra_dly_depth)(23 downto 16);
                     dopa_ltmp(2) := memp(prcd_tmp_addra_dly_depth)(2);
                     prcd_x_buf (wr_mode_a_tmp, 23, 16, 2, doa_ltmp, doa_tmp, dopa_ltmp, dopa_tmp);

                   end if;

                   if ((web_tmp(3) = '1' and wea_tmp(3) = '1') or (seq = "01" and web_tmp(3) = '1' and wea_tmp(3) = '0' and viol_type_tmp = "10") or (seq = "01" and WRITE_MODE_A /= "READ_FIRST" and WRITE_MODE_B /= "READ_FIRST") or (seq = "01" and WRITE_MODE_A = "READ_FIRST" and WRITE_MODE_B /= "READ_FIRST" and web_tmp(3) = '1') or (seq = "11" and WRITE_MODE_A = "WRITE_FIRST" and web_tmp(3) /= '1')) then

                     doa_ltmp(31 downto 24) := mem(prcd_tmp_addra_dly_depth)(31 downto 24);
                     dopa_ltmp(3) := memp(prcd_tmp_addra_dly_depth)(3);
                     prcd_x_buf (wr_mode_a_tmp, 31, 24, 3, doa_ltmp, doa_tmp, dopa_ltmp, dopa_tmp);

                   end if;

                   if ((web_tmp(4) = '1' and wea_tmp(4) = '1') or (seq = "01" and web_tmp(4) = '1' and wea_tmp(4) = '0' and viol_type_tmp = "10") or (seq = "01" and WRITE_MODE_A /= "READ_FIRST" and WRITE_MODE_B /= "READ_FIRST") or (seq = "01" and WRITE_MODE_A = "READ_FIRST" and WRITE_MODE_B /= "READ_FIRST" and web_tmp(4) = '1') or (seq = "11" and WRITE_MODE_A = "WRITE_FIRST" and web_tmp(4) /= '1')) then

                     doa_ltmp(39 downto 32) := mem(prcd_tmp_addra_dly_depth)(39 downto 32);
                     dopa_ltmp(4) := memp(prcd_tmp_addra_dly_depth)(4);
                     prcd_x_buf (wr_mode_a_tmp, 39, 32, 4, doa_ltmp, doa_tmp, dopa_ltmp, dopa_tmp);

                   end if;

                   if ((web_tmp(5) = '1' and wea_tmp(5) = '1') or (seq = "01" and web_tmp(5) = '1' and wea_tmp(5) = '0' and viol_type_tmp = "10") or (seq = "01" and WRITE_MODE_A /= "READ_FIRST" and WRITE_MODE_B /= "READ_FIRST") or (seq = "01" and WRITE_MODE_A = "READ_FIRST" and WRITE_MODE_B /= "READ_FIRST" and web_tmp(5) = '1') or (seq = "11" and WRITE_MODE_A = "WRITE_FIRST" and web_tmp(5) /= '1')) then

                     doa_ltmp(47 downto 40) := mem(prcd_tmp_addra_dly_depth)(47 downto 40);
                     dopa_ltmp(5) := memp(prcd_tmp_addra_dly_depth)(5);
                     prcd_x_buf (wr_mode_a_tmp, 47, 40, 5, doa_ltmp, doa_tmp, dopa_ltmp, dopa_tmp);

                   end if;

                   if ((web_tmp(6) = '1' and wea_tmp(6) = '1') or (seq = "01" and web_tmp(6) = '1' and wea_tmp(6) = '0' and viol_type_tmp = "10") or (seq = "01" and WRITE_MODE_A /= "READ_FIRST" and WRITE_MODE_B /= "READ_FIRST") or (seq = "01" and WRITE_MODE_A = "READ_FIRST" and WRITE_MODE_B /= "READ_FIRST" and web_tmp(6) = '1') or (seq = "11" and WRITE_MODE_A = "WRITE_FIRST" and web_tmp(6) /= '1')) then

                     doa_ltmp(55 downto 48) := mem(prcd_tmp_addra_dly_depth)(55 downto 48);
                     dopa_ltmp(6) := memp(prcd_tmp_addra_dly_depth)(6);
                     prcd_x_buf (wr_mode_a_tmp, 55, 48, 6, doa_ltmp, doa_tmp, dopa_ltmp, dopa_tmp);

                   end if;

                   if ((web_tmp(7) = '1' and wea_tmp(7) = '1') or (seq = "01" and web_tmp(7) = '1' and wea_tmp(7) = '0' and viol_type_tmp = "10") or (seq = "01" and WRITE_MODE_A /= "READ_FIRST" and WRITE_MODE_B /= "READ_FIRST") or (seq = "01" and WRITE_MODE_A = "READ_FIRST" and WRITE_MODE_B /= "READ_FIRST" and web_tmp(7) = '1') or (seq = "11" and WRITE_MODE_A = "WRITE_FIRST" and web_tmp(7) /= '1')) then

                     doa_ltmp(63 downto 56) := mem(prcd_tmp_addra_dly_depth)(63 downto 56);
                     dopa_ltmp(7) := memp(prcd_tmp_addra_dly_depth)(7);
                     prcd_x_buf (wr_mode_a_tmp, 63, 56, 7, doa_ltmp, doa_tmp, dopa_ltmp, dopa_tmp);

                   end if;
    
      when others => null;

    end case;

  end prcd_col_rd_ram_a;


  procedure prcd_col_rd_ram_b (
    constant viol_type_tmp : in std_logic_vector (1 downto 0);
    constant seq : in std_logic_vector (1 downto 0);
    constant wea_tmp : in std_logic_vector (7 downto 0);
    constant web_tmp : in std_logic_vector (7 downto 0);
    constant addrb_tmp : in std_logic_vector (15 downto 0);
    variable dob_tmp : inout std_logic_vector (63 downto 0);
    variable dopb_tmp : inout std_logic_vector (7 downto 0);
    constant mem : in Two_D_array_type;
    constant memp : in Two_D_parity_array_type;
    constant wr_mode_b_tmp : in std_logic_vector (1 downto 0)

    ) is
    variable prcd_tmp_addrb_dly_depth : integer;
    variable prcd_tmp_addrb_dly_width : integer;
    variable junk : std_ulogic;
    variable dob_ltmp : std_logic_vector (63 downto 0);
    variable dopb_ltmp : std_logic_vector (7 downto 0);
    
  begin

    dob_ltmp := (others => '0');
    dopb_ltmp := (others => '0');
    
    case rb_width is
      
      when 1 | 2 | 4 => if ((web_tmp(0) = '1' and wea_tmp(0) = '1') or (seq = "01" and wea_tmp(0) = '1' and web_tmp(0) = '0' and viol_type_tmp = "11") or (seq = "01" and WRITE_MODE_B /= "READ_FIRST" and WRITE_MODE_A /= "READ_FIRST") or (seq = "01" and WRITE_MODE_B = "READ_FIRST" and WRITE_MODE_A /= "READ_FIRST" and wea_tmp(0) = '1') or (seq = "11" and WRITE_MODE_B = "WRITE_FIRST" and wea_tmp(0) /= '1')) then

                          if (rb_width >= width) then
                            prcd_tmp_addrb_dly_depth := SLV_TO_INT(addrb_tmp(14 downto r_addrb_lbit_124));
                            dob_ltmp(rb_width-1 downto 0) := mem(prcd_tmp_addrb_dly_depth);
                          else
                            prcd_tmp_addrb_dly_depth := SLV_TO_INT(addrb_tmp(14 downto r_addrb_bit_124 + 1));
                            prcd_tmp_addrb_dly_width := SLV_TO_INT(addrb_tmp(r_addrb_bit_124 downto r_addrb_lbit_124));
                            dob_ltmp(rb_width-1 downto 0) := mem(prcd_tmp_addrb_dly_depth)(((prcd_tmp_addrb_dly_width * rb_width) + rb_width - 1) downto (prcd_tmp_addrb_dly_width * rb_width));
                          end if;
                          prcd_x_buf (wr_mode_b_tmp, 3, 0, 0, dob_ltmp, dob_tmp, dopb_ltmp, dopb_tmp);

                        end if;

      when 8 => if ((web_tmp(0) = '1' and wea_tmp(0) = '1') or (seq = "01" and wea_tmp(0) = '1' and web_tmp(0) = '0' and viol_type_tmp = "11") or (seq = "01" and WRITE_MODE_B /= "READ_FIRST" and WRITE_MODE_A /= "READ_FIRST") or (seq = "01" and WRITE_MODE_B = "READ_FIRST" and WRITE_MODE_A /= "READ_FIRST" and wea_tmp(0) = '1') or (seq = "11" and WRITE_MODE_B = "WRITE_FIRST" and wea_tmp(0) /= '1')) then

                  if (rb_width >= width) then
                    prcd_tmp_addrb_dly_depth := SLV_TO_INT(addrb_tmp(14 downto 3));
                    dob_ltmp(7 downto 0) := mem(prcd_tmp_addrb_dly_depth);
                    dopb_ltmp(0) := memp(prcd_tmp_addrb_dly_depth)(0);
                  else
                    prcd_tmp_addrb_dly_depth := SLV_TO_INT(addrb_tmp(14 downto r_addrb_bit_8 + 1));
                    prcd_tmp_addrb_dly_width := SLV_TO_INT(addrb_tmp(r_addrb_bit_8 downto 3));
                    dob_ltmp(7 downto 0) := mem(prcd_tmp_addrb_dly_depth)(((prcd_tmp_addrb_dly_width * 8) + 7) downto (prcd_tmp_addrb_dly_width * 8));
                    dopb_ltmp(0) := memp(prcd_tmp_addrb_dly_depth)(prcd_tmp_addrb_dly_width);
                  end if;
                  prcd_x_buf (wr_mode_b_tmp, 7, 0, 0, dob_ltmp, dob_tmp, dopb_ltmp, dopb_tmp);

                end if;

      when 16 => if ((web_tmp(0) = '1' and wea_tmp(0) = '1') or (seq = "01" and wea_tmp(0) = '1' and web_tmp(0) = '0' and viol_type_tmp = "11") or (seq = "01" and WRITE_MODE_B /= "READ_FIRST" and WRITE_MODE_A /= "READ_FIRST") or (seq = "01" and WRITE_MODE_B = "READ_FIRST" and WRITE_MODE_A /= "READ_FIRST" and wea_tmp(0) = '1') or (seq = "11" and WRITE_MODE_B = "WRITE_FIRST" and wea_tmp(0) /= '1')) then

                  if (rb_width >= width) then
                    prcd_tmp_addrb_dly_depth := SLV_TO_INT(addrb_tmp(14 downto 4));
                    dob_ltmp(7 downto 0) := mem(prcd_tmp_addrb_dly_depth)(7 downto 0);
                    dopb_ltmp(0) := memp(prcd_tmp_addrb_dly_depth)(0);
                  else
                    prcd_tmp_addrb_dly_depth := SLV_TO_INT(addrb_tmp(14 downto r_addrb_bit_16 + 1));
                    prcd_tmp_addrb_dly_width := SLV_TO_INT(addrb_tmp(r_addrb_bit_16 downto 4));

                    dob_ltmp(7 downto 0) := mem(prcd_tmp_addrb_dly_depth)(((prcd_tmp_addrb_dly_width * 16) + 7) downto (prcd_tmp_addrb_dly_width * 16));
                    dopb_ltmp(0) := memp(prcd_tmp_addrb_dly_depth)(prcd_tmp_addrb_dly_width * 2);
                  end if;
                  prcd_x_buf (wr_mode_b_tmp, 7, 0, 0, dob_ltmp, dob_tmp, dopb_ltmp, dopb_tmp);

                end if;


                if ((web_tmp(1) = '1' and wea_tmp(1) = '1') or (seq = "01" and wea_tmp(1) = '1' and web_tmp(1) = '0' and viol_type_tmp = "11") or (seq = "01" and WRITE_MODE_B /= "READ_FIRST" and WRITE_MODE_A /= "READ_FIRST") or (seq = "01" and WRITE_MODE_B = "READ_FIRST" and WRITE_MODE_A /= "READ_FIRST" and wea_tmp(1) = '1') or (seq = "11" and WRITE_MODE_B = "WRITE_FIRST" and wea_tmp(1) /= '1')) then

                  if (rb_width >= width) then
                    prcd_tmp_addrb_dly_depth := SLV_TO_INT(addrb_tmp(14 downto 4));
                    dob_ltmp(15 downto 8) := mem(prcd_tmp_addrb_dly_depth)(15 downto 8);
                    dopb_ltmp(1) := memp(prcd_tmp_addrb_dly_depth)(1);
                  else
                    prcd_tmp_addrb_dly_depth := SLV_TO_INT(addrb_tmp(14 downto r_addrb_bit_16 + 1));
                    prcd_tmp_addrb_dly_width := SLV_TO_INT(addrb_tmp(r_addrb_bit_16 downto 4));

                    dob_ltmp(15 downto 8) := mem(prcd_tmp_addrb_dly_depth)(((prcd_tmp_addrb_dly_width * 16) + 15) downto ((prcd_tmp_addrb_dly_width * 16) + 8));
                    dopb_ltmp(1) := memp(prcd_tmp_addrb_dly_depth)((prcd_tmp_addrb_dly_width * 2) + 1);
                  end if;
                  prcd_x_buf (wr_mode_b_tmp, 15, 8, 1, dob_ltmp, dob_tmp, dopb_ltmp, dopb_tmp);

                end if;

      when 32 => if (rb_width >= width) then

                   prcd_tmp_addrb_dly_depth := SLV_TO_INT(addrb_tmp(14 downto 5));

                   if ((web_tmp(0) = '1' and wea_tmp(0) = '1') or (seq = "01" and wea_tmp(0) = '1' and web_tmp(0) = '0' and viol_type_tmp = "11") or (seq = "01" and WRITE_MODE_B /= "READ_FIRST" and WRITE_MODE_A /= "READ_FIRST") or (seq = "01" and WRITE_MODE_B = "READ_FIRST" and WRITE_MODE_A /= "READ_FIRST" and wea_tmp(0) = '1') or (seq = "11" and WRITE_MODE_B = "WRITE_FIRST" and wea_tmp(0) /= '1')) then

                     dob_ltmp(7 downto 0) := mem(prcd_tmp_addrb_dly_depth)(7 downto 0);
                     dopb_ltmp(0) := memp(prcd_tmp_addrb_dly_depth)(0);
                     prcd_x_buf (wr_mode_b_tmp, 7, 0, 0, dob_ltmp, dob_tmp, dopb_ltmp, dopb_tmp);

                   end if;

                   if ((web_tmp(1) = '1' and wea_tmp(1) = '1') or (seq = "01" and wea_tmp(1) = '1' and web_tmp(1) = '0' and viol_type_tmp = "11") or (seq = "01" and WRITE_MODE_B /= "READ_FIRST" and WRITE_MODE_A /= "READ_FIRST") or (seq = "01" and WRITE_MODE_B = "READ_FIRST" and WRITE_MODE_A /= "READ_FIRST" and wea_tmp(1) = '1') or (seq = "11" and WRITE_MODE_B = "WRITE_FIRST" and wea_tmp(1) /= '1')) then

                     dob_ltmp(15 downto 8) := mem(prcd_tmp_addrb_dly_depth)(15 downto 8);
                     dopb_ltmp(1) := memp(prcd_tmp_addrb_dly_depth)(1);
                     prcd_x_buf (wr_mode_b_tmp, 15, 8, 1, dob_ltmp, dob_tmp, dopb_ltmp, dopb_tmp);

                   end if;

                   if ((web_tmp(2) = '1' and wea_tmp(2) = '1') or (seq = "01" and wea_tmp(2) = '1' and web_tmp(2) = '0' and viol_type_tmp = "11") or (seq = "01" and WRITE_MODE_B /= "READ_FIRST" and WRITE_MODE_A /= "READ_FIRST") or (seq = "01" and WRITE_MODE_B = "READ_FIRST" and WRITE_MODE_A /= "READ_FIRST" and wea_tmp(2) = '1') or (seq = "11" and WRITE_MODE_B = "WRITE_FIRST" and wea_tmp(2) /= '1')) then

                     dob_ltmp(23 downto 16) := mem(prcd_tmp_addrb_dly_depth)(23 downto 16);
                     dopb_ltmp(2) := memp(prcd_tmp_addrb_dly_depth)(2);
                     prcd_x_buf (wr_mode_b_tmp, 23, 16, 2, dob_ltmp, dob_tmp, dopb_ltmp, dopb_tmp);

                   end if;
  
                   if ((web_tmp(3) = '1' and wea_tmp(3) = '1') or (seq = "01" and wea_tmp(3) = '1' and web_tmp(3) = '0' and viol_type_tmp = "11") or (seq = "01" and WRITE_MODE_B /= "READ_FIRST" and WRITE_MODE_A /= "READ_FIRST") or (seq = "01" and WRITE_MODE_B = "READ_FIRST" and WRITE_MODE_A /= "READ_FIRST" and wea_tmp(3) = '1') or (seq = "11" and WRITE_MODE_B = "WRITE_FIRST" and wea_tmp(3) /= '1')) then

                     dob_ltmp(31 downto 24) := mem(prcd_tmp_addrb_dly_depth)(31 downto 24);
                     dopb_ltmp(3) := memp(prcd_tmp_addrb_dly_depth)(3);
                     prcd_x_buf (wr_mode_b_tmp, 31, 24, 3, dob_ltmp, dob_tmp, dopb_ltmp, dopb_tmp);

                   end if;
  
                end if;
  
      when 64 =>
                   prcd_tmp_addrb_dly_depth := SLV_TO_INT(addrb_tmp(14 downto 6));

                   if ((web_tmp(0) = '1' and wea_tmp(0) = '1') or (seq = "01" and wea_tmp(0) = '1' and web_tmp(0) = '0' and viol_type_tmp = "11") or (seq = "01" and WRITE_MODE_B /= "READ_FIRST" and WRITE_MODE_A /= "READ_FIRST") or (seq = "01" and WRITE_MODE_B = "READ_FIRST" and WRITE_MODE_A /= "READ_FIRST" and wea_tmp(0) = '1') or (seq = "11" and WRITE_MODE_B = "WRITE_FIRST" and wea_tmp(0) /= '1')) then

                     dob_ltmp(7 downto 0) := mem(prcd_tmp_addrb_dly_depth)(7 downto 0);
                     dopb_ltmp(0) := memp(prcd_tmp_addrb_dly_depth)(0);
                     prcd_x_buf (wr_mode_b_tmp, 7, 0, 0, dob_ltmp, dob_tmp, dopb_ltmp, dopb_tmp);

                   end if;

                   if ((web_tmp(1) = '1' and wea_tmp(1) = '1') or (seq = "01" and wea_tmp(1) = '1' and web_tmp(1) = '0' and viol_type_tmp = "11") or (seq = "01" and WRITE_MODE_B /= "READ_FIRST" and WRITE_MODE_A /= "READ_FIRST") or (seq = "01" and WRITE_MODE_B = "READ_FIRST" and WRITE_MODE_A /= "READ_FIRST" and wea_tmp(1) = '1') or (seq = "11" and WRITE_MODE_B = "WRITE_FIRST" and wea_tmp(1) /= '1')) then

                     dob_ltmp(15 downto 8) := mem(prcd_tmp_addrb_dly_depth)(15 downto 8);
                     dopb_ltmp(1) := memp(prcd_tmp_addrb_dly_depth)(1);
                     prcd_x_buf (wr_mode_b_tmp, 15, 8, 1, dob_ltmp, dob_tmp, dopb_ltmp, dopb_tmp);

                   end if;

                   if ((web_tmp(2) = '1' and wea_tmp(2) = '1') or (seq = "01" and wea_tmp(2) = '1' and web_tmp(2) = '0' and viol_type_tmp = "11") or (seq = "01" and WRITE_MODE_B /= "READ_FIRST" and WRITE_MODE_A /= "READ_FIRST") or (seq = "01" and WRITE_MODE_B = "READ_FIRST" and WRITE_MODE_A /= "READ_FIRST" and wea_tmp(2) = '1') or (seq = "11" and WRITE_MODE_B = "WRITE_FIRST" and wea_tmp(2) /= '1')) then

                     dob_ltmp(23 downto 16) := mem(prcd_tmp_addrb_dly_depth)(23 downto 16);
                     dopb_ltmp(2) := memp(prcd_tmp_addrb_dly_depth)(2);
                     prcd_x_buf (wr_mode_b_tmp, 23, 16, 2, dob_ltmp, dob_tmp, dopb_ltmp, dopb_tmp);

                   end if;

                   if ((web_tmp(3) = '1' and wea_tmp(3) = '1') or (seq = "01" and wea_tmp(3) = '1' and web_tmp(3) = '0' and viol_type_tmp = "11") or (seq = "01" and WRITE_MODE_B /= "READ_FIRST" and WRITE_MODE_A /= "READ_FIRST") or (seq = "01" and WRITE_MODE_B = "READ_FIRST" and WRITE_MODE_A /= "READ_FIRST" and wea_tmp(3) = '1') or (seq = "11" and WRITE_MODE_B = "WRITE_FIRST" and wea_tmp(3) /= '1')) then

                     dob_ltmp(31 downto 24) := mem(prcd_tmp_addrb_dly_depth)(31 downto 24);
                     dopb_ltmp(3) := memp(prcd_tmp_addrb_dly_depth)(3);
                     prcd_x_buf (wr_mode_b_tmp, 31, 24, 3, dob_ltmp, dob_tmp, dopb_ltmp, dopb_tmp);

                   end if;

                   if ((web_tmp(4) = '1' and wea_tmp(4) = '1') or (seq = "01" and wea_tmp(4) = '1' and web_tmp(4) = '0' and viol_type_tmp = "11") or (seq = "01" and WRITE_MODE_B /= "READ_FIRST" and WRITE_MODE_A /= "READ_FIRST") or (seq = "01" and WRITE_MODE_B = "READ_FIRST" and WRITE_MODE_A /= "READ_FIRST" and wea_tmp(4) = '1') or (seq = "11" and WRITE_MODE_B = "WRITE_FIRST" and wea_tmp(4) /= '1')) then

                     dob_ltmp(39 downto 32) := mem(prcd_tmp_addrb_dly_depth)(39 downto 32);
                     dopb_ltmp(4) := memp(prcd_tmp_addrb_dly_depth)(4);
                     prcd_x_buf (wr_mode_b_tmp, 39, 32, 4, dob_ltmp, dob_tmp, dopb_ltmp, dopb_tmp);

                   end if;
  
                   if ((web_tmp(5) = '1' and wea_tmp(5) = '1') or (seq = "01" and wea_tmp(5) = '1' and web_tmp(5) = '0' and viol_type_tmp = "11") or (seq = "01" and WRITE_MODE_B /= "READ_FIRST" and WRITE_MODE_A /= "READ_FIRST") or (seq = "01" and WRITE_MODE_B = "READ_FIRST" and WRITE_MODE_A /= "READ_FIRST" and wea_tmp(5) = '1') or (seq = "11" and WRITE_MODE_B = "WRITE_FIRST" and wea_tmp(5) /= '1')) then

                     dob_ltmp(47 downto 40) := mem(prcd_tmp_addrb_dly_depth)(47 downto 40);
                     dopb_ltmp(5) := memp(prcd_tmp_addrb_dly_depth)(5);
                     prcd_x_buf (wr_mode_b_tmp, 47, 40, 5, dob_ltmp, dob_tmp, dopb_ltmp, dopb_tmp);

                   end if;

                   if ((web_tmp(6) = '1' and wea_tmp(6) = '1') or (seq = "01" and wea_tmp(6) = '1' and web_tmp(6) = '0' and viol_type_tmp = "11") or (seq = "01" and WRITE_MODE_B /= "READ_FIRST" and WRITE_MODE_A /= "READ_FIRST") or (seq = "01" and WRITE_MODE_B = "READ_FIRST" and WRITE_MODE_A /= "READ_FIRST" and wea_tmp(6) = '1') or (seq = "11" and WRITE_MODE_B = "WRITE_FIRST" and wea_tmp(6) /= '1')) then

                     dob_ltmp(55 downto 48) := mem(prcd_tmp_addrb_dly_depth)(55 downto 48);
                     dopb_ltmp(6) := memp(prcd_tmp_addrb_dly_depth)(6);
                     prcd_x_buf (wr_mode_b_tmp, 55, 48, 6, dob_ltmp, dob_tmp, dopb_ltmp, dopb_tmp);

                   end if;
  
                   if ((web_tmp(7) = '1' and wea_tmp(7) = '1') or (seq = "01" and wea_tmp(7) = '1' and web_tmp(7) = '0' and viol_type_tmp = "11") or (seq = "01" and WRITE_MODE_B /= "READ_FIRST" and WRITE_MODE_A /= "READ_FIRST") or (seq = "01" and WRITE_MODE_B = "READ_FIRST" and WRITE_MODE_A /= "READ_FIRST" and wea_tmp(7) = '1') or (seq = "11" and WRITE_MODE_B = "WRITE_FIRST" and wea_tmp(7) /= '1')) then

                     dob_ltmp(63 downto 56) := mem(prcd_tmp_addrb_dly_depth)(63 downto 56);
                     dopb_ltmp(7) := memp(prcd_tmp_addrb_dly_depth)(7);
                     prcd_x_buf (wr_mode_b_tmp, 63, 56, 7, dob_ltmp, dob_tmp, dopb_ltmp, dopb_tmp);

                   end if;
    
      when others => null;

    end case;

  end prcd_col_rd_ram_b;


  procedure prcd_wr_ram_a (
    constant wea_tmp : in std_logic_vector (7 downto 0);
    constant dia_tmp : in std_logic_vector (63 downto 0);
    constant dipa_tmp : in std_logic_vector (7 downto 0);
    constant addra_tmp : in std_logic_vector (15 downto 0);
    variable mem : inout Two_D_array_type;
    variable memp : inout Two_D_parity_array_type;
    constant syndrome_tmp : in std_logic_vector (7 downto 0)
    ) is
    variable prcd_tmp_addra_dly_depth : integer;
    variable prcd_tmp_addra_dly_width : integer;
    variable junk : std_ulogic;

  begin
    
    case wa_width is

      when 1 | 2 | 4 =>
                          if (wa_width >= width) then
                            prcd_tmp_addra_dly_depth := SLV_TO_INT(addra_tmp(14 downto w_addra_lbit_124));
                            prcd_write_ram (wea_tmp(0), dia_tmp(wa_width-1 downto 0), '0', mem(prcd_tmp_addra_dly_depth), junk);
                          else
                            prcd_tmp_addra_dly_depth := SLV_TO_INT(addra_tmp(14 downto w_addra_bit_124 + 1));
                            prcd_tmp_addra_dly_width := SLV_TO_INT(addra_tmp(w_addra_bit_124 downto w_addra_lbit_124));
                            prcd_write_ram (wea_tmp(0), dia_tmp(wa_width-1 downto 0), '0', mem(prcd_tmp_addra_dly_depth)((prcd_tmp_addra_dly_width * wa_width) + wa_width - 1 downto (prcd_tmp_addra_dly_width * wa_width)), junk);
                          end if;

      when 8 =>
                  if (wa_width >= width) then
                    prcd_tmp_addra_dly_depth := SLV_TO_INT(addra_tmp(14 downto 3));
                    prcd_write_ram (wea_tmp(0), dia_tmp(7 downto 0), dipa_tmp(0), mem(prcd_tmp_addra_dly_depth), memp(prcd_tmp_addra_dly_depth)(0));
                  else
                    prcd_tmp_addra_dly_depth := SLV_TO_INT(addra_tmp(14 downto w_addra_bit_8 + 1));
                    prcd_tmp_addra_dly_width := SLV_TO_INT(addra_tmp(w_addra_bit_8 downto 3));
                    prcd_write_ram (wea_tmp(0), dia_tmp(7 downto 0), dipa_tmp(0), mem(prcd_tmp_addra_dly_depth)((prcd_tmp_addra_dly_width * 8) + 7 downto (prcd_tmp_addra_dly_width * 8)), memp(prcd_tmp_addra_dly_depth)((prcd_tmp_addra_dly_width)));
                  end if;
  
      when 16 =>
                  if (wa_width >= width) then
                    prcd_tmp_addra_dly_depth := SLV_TO_INT(addra_tmp(14 downto 4));
                    prcd_write_ram (wea_tmp(0), dia_tmp(7 downto 0), dipa_tmp(0), mem(prcd_tmp_addra_dly_depth)(7 downto 0), memp(prcd_tmp_addra_dly_depth)(0));
                    prcd_write_ram (wea_tmp(1), dia_tmp(15 downto 8), dipa_tmp(1), mem(prcd_tmp_addra_dly_depth)(15 downto 8), memp(prcd_tmp_addra_dly_depth)(1));
                  else
                    prcd_tmp_addra_dly_depth := SLV_TO_INT(addra_tmp(14 downto w_addra_bit_16 + 1));
                    prcd_tmp_addra_dly_width := SLV_TO_INT(addra_tmp(w_addra_bit_16 downto 4));
                    prcd_write_ram (wea_tmp(0), dia_tmp(7 downto 0), dipa_tmp(0), mem(prcd_tmp_addra_dly_depth)((prcd_tmp_addra_dly_width * 16) + 7 downto (prcd_tmp_addra_dly_width * 16)), memp(prcd_tmp_addra_dly_depth)((prcd_tmp_addra_dly_width * 2)));
                    prcd_write_ram (wea_tmp(1), dia_tmp(15 downto 8), dipa_tmp(1), mem(prcd_tmp_addra_dly_depth)((prcd_tmp_addra_dly_width * 16) + 15 downto (prcd_tmp_addra_dly_width * 16) + 8), memp(prcd_tmp_addra_dly_depth)((prcd_tmp_addra_dly_width * 2) + 1));
                  end if;

      when 32 =>
                   prcd_tmp_addra_dly_depth := SLV_TO_INT(addra_tmp(14 downto 5));

                   prcd_write_ram (wea_tmp(0), dia_tmp(7 downto 0), dipa_tmp(0), mem(prcd_tmp_addra_dly_depth)(7 downto 0), memp(prcd_tmp_addra_dly_depth)(0));
                   prcd_write_ram (wea_tmp(1), dia_tmp(15 downto 8), dipa_tmp(1), mem(prcd_tmp_addra_dly_depth)(15 downto 8), memp(prcd_tmp_addra_dly_depth)(1));
                   prcd_write_ram (wea_tmp(2), dia_tmp(23 downto 16), dipa_tmp(2), mem(prcd_tmp_addra_dly_depth)(23 downto 16), memp(prcd_tmp_addra_dly_depth)(2));
                   prcd_write_ram (wea_tmp(3), dia_tmp(31 downto 24), dipa_tmp(3), mem(prcd_tmp_addra_dly_depth)(31 downto 24), memp(prcd_tmp_addra_dly_depth)(3));

      when 64 => if (syndrome_tmp /= "00000000" and syndrome_tmp(7) = '1' and EN_ECC_SCRUB = TRUE) then

                   prcd_tmp_addra_dly_depth := SLV_TO_INT(addra_tmp(14 downto 6));
                   prcd_write_ram ('1', dia_tmp(7 downto 0), dipa_tmp(0), mem(prcd_tmp_addra_dly_depth)(7 downto 0), memp(prcd_tmp_addra_dly_depth)(0));
                   prcd_write_ram ('1', dia_tmp(15 downto 8), dipa_tmp(1), mem(prcd_tmp_addra_dly_depth)(15 downto 8), memp(prcd_tmp_addra_dly_depth)(1));
                   prcd_write_ram ('1', dia_tmp(23 downto 16), dipa_tmp(2), mem(prcd_tmp_addra_dly_depth)(23 downto 16), memp(prcd_tmp_addra_dly_depth)(2));
                   prcd_write_ram ('1', dia_tmp(31 downto 24), dipa_tmp(3), mem(prcd_tmp_addra_dly_depth)(31 downto 24), memp(prcd_tmp_addra_dly_depth)(3));
                   prcd_write_ram ('1', dia_tmp(39 downto 32), dipa_tmp(4), mem(prcd_tmp_addra_dly_depth)(39 downto 32), memp(prcd_tmp_addra_dly_depth)(4));
                   prcd_write_ram ('1', dia_tmp(47 downto 40), dipa_tmp(5), mem(prcd_tmp_addra_dly_depth)(47 downto 40), memp(prcd_tmp_addra_dly_depth)(5));
                   prcd_write_ram ('1', dia_tmp(55 downto 48), dipa_tmp(6), mem(prcd_tmp_addra_dly_depth)(55 downto 48), memp(prcd_tmp_addra_dly_depth)(6));
                   prcd_write_ram ('1', dia_tmp(63 downto 56), dipa_tmp(7), mem(prcd_tmp_addra_dly_depth)(63 downto 56), memp(prcd_tmp_addra_dly_depth)(7));

                 end if;

      when others => null;

    end case;

  end prcd_wr_ram_a;


  procedure prcd_wr_ram_b (
    constant web_tmp : in std_logic_vector (7 downto 0);
    constant dib_tmp : in std_logic_vector (63 downto 0);
    constant dipb_tmp : in std_logic_vector (7 downto 0);
    constant addrb_tmp : in std_logic_vector (15 downto 0);
    variable mem : inout Two_D_array_type;
    variable memp : inout Two_D_parity_array_type     
    ) is
    variable prcd_tmp_addrb_dly_depth : integer;
    variable prcd_tmp_addrb_dly_width : integer;
    variable junk : std_ulogic;

  begin
    
    case wb_width is

      when 1 | 2 | 4 =>
                          if (wb_width >= width) then
                            prcd_tmp_addrb_dly_depth := SLV_TO_INT(addrb_tmp(14 downto w_addrb_lbit_124));
                            prcd_write_ram (web_tmp(0), dib_tmp(wb_width-1 downto 0), '0', mem(prcd_tmp_addrb_dly_depth), junk);
                          else
                            prcd_tmp_addrb_dly_depth := SLV_TO_INT(addrb_tmp(14 downto w_addrb_bit_124 + 1));
                            prcd_tmp_addrb_dly_width := SLV_TO_INT(addrb_tmp(w_addrb_bit_124 downto w_addrb_lbit_124));
                            prcd_write_ram (web_tmp(0), dib_tmp(wb_width-1 downto 0), '0', mem(prcd_tmp_addrb_dly_depth)((prcd_tmp_addrb_dly_width * wb_width) + wb_width - 1 downto (prcd_tmp_addrb_dly_width * wb_width)), junk);
                          end if;

      when 8 => 
                  if (wb_width >= width) then
                    prcd_tmp_addrb_dly_depth := SLV_TO_INT(addrb_tmp(14 downto 3));
                    prcd_write_ram (web_tmp(0), dib_tmp(7 downto 0), dipb_tmp(0), mem(prcd_tmp_addrb_dly_depth), memp(prcd_tmp_addrb_dly_depth)(0));
                  else
                    prcd_tmp_addrb_dly_depth := SLV_TO_INT(addrb_tmp(14 downto w_addrb_bit_8 + 1));
                    prcd_tmp_addrb_dly_width := SLV_TO_INT(addrb_tmp(w_addrb_bit_8 downto 3));
                    prcd_write_ram (web_tmp(0), dib_tmp(7 downto 0), dipb_tmp(0), mem(prcd_tmp_addrb_dly_depth)((prcd_tmp_addrb_dly_width * 8) + 7 downto (prcd_tmp_addrb_dly_width * 8)), memp(prcd_tmp_addrb_dly_depth)((prcd_tmp_addrb_dly_width)));
                  end if;
  
      when 16 =>
                  if (wb_width >= width) then
                    prcd_tmp_addrb_dly_depth := SLV_TO_INT(addrb_tmp(14 downto 4));
                    prcd_write_ram (web_tmp(0), dib_tmp(7 downto 0), dipb_tmp(0), mem(prcd_tmp_addrb_dly_depth)(7 downto 0), memp(prcd_tmp_addrb_dly_depth)(0));
                    prcd_write_ram (web_tmp(1), dib_tmp(15 downto 8), dipb_tmp(1), mem(prcd_tmp_addrb_dly_depth)(15 downto 8), memp(prcd_tmp_addrb_dly_depth)(1));
                  else
                    prcd_tmp_addrb_dly_depth := SLV_TO_INT(addrb_tmp(14 downto w_addrb_bit_16 + 1));
                    prcd_tmp_addrb_dly_width := SLV_TO_INT(addrb_tmp(w_addrb_bit_16 downto 4));
                    prcd_write_ram (web_tmp(0), dib_tmp(7 downto 0), dipb_tmp(0), mem(prcd_tmp_addrb_dly_depth)((prcd_tmp_addrb_dly_width * 16) + 7 downto (prcd_tmp_addrb_dly_width * 16)), memp(prcd_tmp_addrb_dly_depth)((prcd_tmp_addrb_dly_width * 2)));
                    prcd_write_ram (web_tmp(1), dib_tmp(15 downto 8), dipb_tmp(1), mem(prcd_tmp_addrb_dly_depth)((prcd_tmp_addrb_dly_width * 16) + 15 downto (prcd_tmp_addrb_dly_width * 16) + 8), memp(prcd_tmp_addrb_dly_depth)((prcd_tmp_addrb_dly_width * 2) + 1));
                  end if;

      when 32 =>
                   prcd_tmp_addrb_dly_depth := SLV_TO_INT(addrb_tmp(14 downto 5));
                   prcd_write_ram (web_tmp(0), dib_tmp(7 downto 0), dipb_tmp(0), mem(prcd_tmp_addrb_dly_depth)(7 downto 0), memp(prcd_tmp_addrb_dly_depth)(0));
                   prcd_write_ram (web_tmp(1), dib_tmp(15 downto 8), dipb_tmp(1), mem(prcd_tmp_addrb_dly_depth)(15 downto 8), memp(prcd_tmp_addrb_dly_depth)(1));
                   prcd_write_ram (web_tmp(2), dib_tmp(23 downto 16), dipb_tmp(2), mem(prcd_tmp_addrb_dly_depth)(23 downto 16), memp(prcd_tmp_addrb_dly_depth)(2));
                   prcd_write_ram (web_tmp(3), dib_tmp(31 downto 24), dipb_tmp(3), mem(prcd_tmp_addrb_dly_depth)(31 downto 24), memp(prcd_tmp_addrb_dly_depth)(3));

      when 64 =>
                   prcd_tmp_addrb_dly_depth := SLV_TO_INT(addrb_tmp(14 downto 6));
                   prcd_write_ram (web_tmp(0), dib_tmp(7 downto 0), dipb_tmp(0), mem(prcd_tmp_addrb_dly_depth)(7 downto 0), memp(prcd_tmp_addrb_dly_depth)(0));
                   prcd_write_ram (web_tmp(1), dib_tmp(15 downto 8), dipb_tmp(1), mem(prcd_tmp_addrb_dly_depth)(15 downto 8), memp(prcd_tmp_addrb_dly_depth)(1));
                   prcd_write_ram (web_tmp(2), dib_tmp(23 downto 16), dipb_tmp(2), mem(prcd_tmp_addrb_dly_depth)(23 downto 16), memp(prcd_tmp_addrb_dly_depth)(2));
                   prcd_write_ram (web_tmp(3), dib_tmp(31 downto 24), dipb_tmp(3), mem(prcd_tmp_addrb_dly_depth)(31 downto 24), memp(prcd_tmp_addrb_dly_depth)(3));
                   prcd_write_ram (web_tmp(4), dib_tmp(39 downto 32), dipb_tmp(4), mem(prcd_tmp_addrb_dly_depth)(39 downto 32), memp(prcd_tmp_addrb_dly_depth)(4));
                   prcd_write_ram (web_tmp(5), dib_tmp(47 downto 40), dipb_tmp(5), mem(prcd_tmp_addrb_dly_depth)(47 downto 40), memp(prcd_tmp_addrb_dly_depth)(5));
                   prcd_write_ram (web_tmp(6), dib_tmp(55 downto 48), dipb_tmp(6), mem(prcd_tmp_addrb_dly_depth)(55 downto 48), memp(prcd_tmp_addrb_dly_depth)(6));
                   prcd_write_ram (web_tmp(7), dib_tmp(63 downto 56), dipb_tmp(7), mem(prcd_tmp_addrb_dly_depth)(63 downto 56), memp(prcd_tmp_addrb_dly_depth)(7));

      when others => null;

    end case;

  end prcd_wr_ram_b;
    
    
  procedure prcd_col_ecc_read (

    variable do_tmp : inout std_logic_vector (63 downto 0);
    variable dop_tmp : inout std_logic_vector (7 downto 0);
    constant addr_tmp : in std_logic_vector (15 downto 0);
    variable dbiterr_tmp : inout std_logic;
    variable sbiterr_tmp : inout std_logic;
    variable mem : inout Two_D_array_type;
    variable memp : inout Two_D_parity_array_type;
    variable prcd_syndrome : inout std_logic_vector (7 downto 0)
    ) is

    variable prcd_ecc_bit_position : std_logic_vector (71 downto 0);
    variable prcd_dopr_ecc : std_logic_vector (7 downto 0);
    variable prcd_di_dly_ecc_corrected : std_logic_vector (63 downto 0);
    variable prcd_dip_dly_ecc_corrected : std_logic_vector (7 downto 0);
    variable prcd_tmp_syndrome_int : integer := 0;
    
  begin

    prcd_dopr_ecc := fn_dip_ecc('0', do_tmp, dop_tmp);

    prcd_syndrome := prcd_dopr_ecc xor dop_tmp;

    if (prcd_syndrome /= "00000000") then

      if (prcd_syndrome(7) = '1') then  -- dectect single bit error

        prcd_ecc_bit_position := do_tmp(63 downto 57) & dop_tmp(6) & do_tmp(56 downto 26) & dop_tmp(5) & do_tmp(25 downto 11) & dop_tmp(4) & do_tmp(10 downto 4) & dop_tmp(3) & do_tmp(3 downto 1) & dop_tmp(2) & do_tmp(0) & dop_tmp(1 downto 0) & dop_tmp(7);

        prcd_tmp_syndrome_int := SLV_TO_INT(prcd_syndrome(6 downto 0));
        prcd_ecc_bit_position(prcd_tmp_syndrome_int) := not prcd_ecc_bit_position(prcd_tmp_syndrome_int); -- correct single bit error in the output 

        prcd_di_dly_ecc_corrected := prcd_ecc_bit_position(71 downto 65) & prcd_ecc_bit_position(63 downto 33) & prcd_ecc_bit_position(31 downto 17) & prcd_ecc_bit_position(15 downto 9) & prcd_ecc_bit_position(7 downto 5) & prcd_ecc_bit_position(3); -- correct single bit error in the memory

        do_tmp := prcd_di_dly_ecc_corrected;
			
        prcd_dip_dly_ecc_corrected := prcd_ecc_bit_position(0) & prcd_ecc_bit_position(64) & prcd_ecc_bit_position(32) & prcd_ecc_bit_position(16) & prcd_ecc_bit_position(8) & prcd_ecc_bit_position(4) & prcd_ecc_bit_position(2 downto 1); -- correct single bit error in the parity memory
                
        dop_tmp := prcd_dip_dly_ecc_corrected;
                
        dbiterr_tmp := '0';
        sbiterr_tmp := '1';

      elsif (prcd_syndrome(7) = '0') then  -- double bit error
        sbiterr_tmp := '0';
        dbiterr_tmp := '1';
      end if;
    else
      dbiterr_tmp := '0';
      sbiterr_tmp := '0';
    end if;
    
    if (ssra_dly = '1') then  -- ssra reset 
      dbiterr_tmp := '0';
      sbiterr_tmp := '0';    
    end if;
    
    if (prcd_syndrome /= "00000000" and prcd_syndrome(7) = '1' and EN_ECC_SCRUB = TRUE) then
      prcd_wr_ram_a ("11111111", prcd_di_dly_ecc_corrected, prcd_dip_dly_ecc_corrected, addr_tmp, mem, memp, prcd_syndrome);
    end if;
    
  end prcd_col_ecc_read;

  
  begin

  ---------------------
  --  INPUT PATH DELAYs
  --------------------

    addra_dly      	 <= ADDRA          	after 0 ps;
    addrb_dly      	 <= ADDRB          	after 0 ps;
    cascadeinlata_dly 	 <= CASCADEINLATA     	after 0 ps;
    cascadeinlatb_dly 	 <= CASCADEINLATB     	after 0 ps;
    cascadeinrega_dly 	 <= CASCADEINREGA     	after 0 ps;
    cascadeinregb_dly 	 <= CASCADEINREGB     	after 0 ps;
    clka_dly       	 <= CLKA           	after 0 ps;
    clkb_dly       	 <= CLKB           	after 0 ps;
    dia_dly        	 <= DIA            	after 0 ps;
    dib_dly        	 <= DIB            	after 0 ps;
    dipa_dly       	 <= DIPA           	after 0 ps;
    dipb_dly       	 <= DIPB           	after 0 ps;
    ena_dly        	 <= ENA            	after 0 ps;
    enb_dly        	 <= ENB            	after 0 ps;
    regcea_dly     	 <= REGCEA         	after 0 ps;
    regceb_dly     	 <= REGCEB         	after 0 ps;
    ssra_dly       	 <= SSRA           	after 0 ps;
    ssrb_dly       	 <= SSRB           	after 0 ps;
    wea_dly        	 <= WEA            	after 0 ps;
    web_dly        	 <= WEB            	after 0 ps;
    gsr_dly        	 <= GSR            	after 0 ps;
    regclka_dly        	 <= REGCLKA            	after 0 ps;
    regclkb_dly        	 <= REGCLKB            	after 0 ps;    

  --------------------
  --  BEHAVIOR SECTION
  --------------------

  prcs_clk: process (clka_dly, clkb_dly, gsr_dly)

    variable mem_slv : std_logic_vector(32767 downto 0) := To_StdLogicVector(INIT_7F) &
                                                       To_StdLogicVector(INIT_7E) &
                                                       To_StdLogicVector(INIT_7D) &
                                                       To_StdLogicVector(INIT_7C) &
                                                       To_StdLogicVector(INIT_7B) &
                                                       To_StdLogicVector(INIT_7A) &
                                                       To_StdLogicVector(INIT_79) &
                                                       To_StdLogicVector(INIT_78) &
                                                       To_StdLogicVector(INIT_77) &
                                                       To_StdLogicVector(INIT_76) &
                                                       To_StdLogicVector(INIT_75) &
                                                       To_StdLogicVector(INIT_74) &
                                                       To_StdLogicVector(INIT_73) &
                                                       To_StdLogicVector(INIT_72) &
                                                       To_StdLogicVector(INIT_71) &
                                                       To_StdLogicVector(INIT_70) &
                                                       To_StdLogicVector(INIT_6F) &
                                                       To_StdLogicVector(INIT_6E) &
                                                       To_StdLogicVector(INIT_6D) &
                                                       To_StdLogicVector(INIT_6C) &
                                                       To_StdLogicVector(INIT_6B) &
                                                       To_StdLogicVector(INIT_6A) &
                                                       To_StdLogicVector(INIT_69) &
                                                       To_StdLogicVector(INIT_68) &
                                                       To_StdLogicVector(INIT_67) &
                                                       To_StdLogicVector(INIT_66) &
                                                       To_StdLogicVector(INIT_65) &
                                                       To_StdLogicVector(INIT_64) &
                                                       To_StdLogicVector(INIT_63) &
                                                       To_StdLogicVector(INIT_62) &
                                                       To_StdLogicVector(INIT_61) &
                                                       To_StdLogicVector(INIT_60) &
                                                       To_StdLogicVector(INIT_5F) &
                                                       To_StdLogicVector(INIT_5E) &
                                                       To_StdLogicVector(INIT_5D) &
                                                       To_StdLogicVector(INIT_5C) &
                                                       To_StdLogicVector(INIT_5B) &
                                                       To_StdLogicVector(INIT_5A) &
                                                       To_StdLogicVector(INIT_59) &
                                                       To_StdLogicVector(INIT_58) &
                                                       To_StdLogicVector(INIT_57) &
                                                       To_StdLogicVector(INIT_56) &
                                                       To_StdLogicVector(INIT_55) &
                                                       To_StdLogicVector(INIT_54) &
                                                       To_StdLogicVector(INIT_53) &
                                                       To_StdLogicVector(INIT_52) &
                                                       To_StdLogicVector(INIT_51) &
                                                       To_StdLogicVector(INIT_50) &
                                                       To_StdLogicVector(INIT_4F) &
                                                       To_StdLogicVector(INIT_4E) &
                                                       To_StdLogicVector(INIT_4D) &
                                                       To_StdLogicVector(INIT_4C) &
                                                       To_StdLogicVector(INIT_4B) &
                                                       To_StdLogicVector(INIT_4A) &
                                                       To_StdLogicVector(INIT_49) &
                                                       To_StdLogicVector(INIT_48) &
                                                       To_StdLogicVector(INIT_47) &
                                                       To_StdLogicVector(INIT_46) &
                                                       To_StdLogicVector(INIT_45) &
                                                       To_StdLogicVector(INIT_44) &
                                                       To_StdLogicVector(INIT_43) &
                                                       To_StdLogicVector(INIT_42) &
                                                       To_StdLogicVector(INIT_41) &
                                                       To_StdLogicVector(INIT_40) &
                                                       To_StdLogicVector(INIT_3F) &
                                                       To_StdLogicVector(INIT_3E) &
                                                       To_StdLogicVector(INIT_3D) &
                                                       To_StdLogicVector(INIT_3C) &
                                                       To_StdLogicVector(INIT_3B) &
                                                       To_StdLogicVector(INIT_3A) &
                                                       To_StdLogicVector(INIT_39) &
                                                       To_StdLogicVector(INIT_38) &
                                                       To_StdLogicVector(INIT_37) &
                                                       To_StdLogicVector(INIT_36) &
                                                       To_StdLogicVector(INIT_35) &
                                                       To_StdLogicVector(INIT_34) &
                                                       To_StdLogicVector(INIT_33) &
                                                       To_StdLogicVector(INIT_32) &
                                                       To_StdLogicVector(INIT_31) &
                                                       To_StdLogicVector(INIT_30) &
                                                       To_StdLogicVector(INIT_2F) &
                                                       To_StdLogicVector(INIT_2E) &
                                                       To_StdLogicVector(INIT_2D) &
                                                       To_StdLogicVector(INIT_2C) &
                                                       To_StdLogicVector(INIT_2B) &
                                                       To_StdLogicVector(INIT_2A) &
                                                       To_StdLogicVector(INIT_29) &
                                                       To_StdLogicVector(INIT_28) &
                                                       To_StdLogicVector(INIT_27) &
                                                       To_StdLogicVector(INIT_26) &
                                                       To_StdLogicVector(INIT_25) &
                                                       To_StdLogicVector(INIT_24) &
                                                       To_StdLogicVector(INIT_23) &
                                                       To_StdLogicVector(INIT_22) &
                                                       To_StdLogicVector(INIT_21) &
                                                       To_StdLogicVector(INIT_20) &
                                                       To_StdLogicVector(INIT_1F) &
                                                       To_StdLogicVector(INIT_1E) &
                                                       To_StdLogicVector(INIT_1D) &
                                                       To_StdLogicVector(INIT_1C) &
                                                       To_StdLogicVector(INIT_1B) &
                                                       To_StdLogicVector(INIT_1A) &
                                                       To_StdLogicVector(INIT_19) &
                                                       To_StdLogicVector(INIT_18) &
                                                       To_StdLogicVector(INIT_17) &
                                                       To_StdLogicVector(INIT_16) &
                                                       To_StdLogicVector(INIT_15) &
                                                       To_StdLogicVector(INIT_14) &
                                                       To_StdLogicVector(INIT_13) &
                                                       To_StdLogicVector(INIT_12) &
                                                       To_StdLogicVector(INIT_11) &
                                                       To_StdLogicVector(INIT_10) &
                                                       To_StdLogicVector(INIT_0F) &
                                                       To_StdLogicVector(INIT_0E) &
                                                       To_StdLogicVector(INIT_0D) &
                                                       To_StdLogicVector(INIT_0C) &
                                                       To_StdLogicVector(INIT_0B) &
                                                       To_StdLogicVector(INIT_0A) &
                                                       To_StdLogicVector(INIT_09) &
                                                       To_StdLogicVector(INIT_08) &
                                                       To_StdLogicVector(INIT_07) &
                                                       To_StdLogicVector(INIT_06) &
                                                       To_StdLogicVector(INIT_05) &
                                                       To_StdLogicVector(INIT_04) &
                                                       To_StdLogicVector(INIT_03) &
                                                       To_StdLogicVector(INIT_02) &
                                                       To_StdLogicVector(INIT_01) &
                                                       To_StdLogicVector(INIT_00);

    variable memp_slv : std_logic_vector(4095 downto 0) := To_StdLogicVector(INITP_0F) &
                                                       To_StdLogicVector(INITP_0E) &
                                                       To_StdLogicVector(INITP_0D) &
                                                       To_StdLogicVector(INITP_0C) &
                                                       To_StdLogicVector(INITP_0B) &
                                                       To_StdLogicVector(INITP_0A) &
                                                       To_StdLogicVector(INITP_09) &
                                                       To_StdLogicVector(INITP_08) &
                                                       To_StdLogicVector(INITP_07) &
                                                       To_StdLogicVector(INITP_06) &
                                                       To_StdLogicVector(INITP_05) &
                                                       To_StdLogicVector(INITP_04) &
                                                       To_StdLogicVector(INITP_03) &
                                                       To_StdLogicVector(INITP_02) &
                                                       To_StdLogicVector(INITP_01) &
                                                       To_StdLogicVector(INITP_00);

    variable tmp_mem : Two_D_array_type_tmp_mem := two_D_mem_initf(widest_width);
    variable mem : Two_D_array_type := two_D_mem_init(mem_depth, width, mem_slv, tmp_mem);
    variable memp : Two_D_parity_array_type := two_D_mem_initp(memp_depth, widthp, memp_slv, tmp_mem, width);
    variable tmp_addra_dly_depth : integer;
    variable tmp_addra_dly_width : integer;
    variable tmp_addrb_dly_depth : integer;
    variable tmp_addrb_dly_width : integer;
    variable junk1 : std_logic;
    variable wr_mode_a : std_logic_vector(1 downto 0) := "00";
    variable wr_mode_b : std_logic_vector(1 downto 0) := "00";
    variable tmp_syndrome_int : integer;    
    variable doa_buf : std_logic_vector(63 downto 0) := (others => '0');
    variable dob_buf : std_logic_vector(63 downto 0) := (others => '0');
    variable dopa_buf : std_logic_vector(7 downto 0) := (others => '0');
    variable dopb_buf : std_logic_vector(7 downto 0) := (others => '0');    
    variable syndrome : std_logic_vector(7 downto 0) := (others => '0');
    variable dopr_ecc : std_logic_vector(7 downto 0) := (others => '0');        
    variable dia_dly_ecc_corrected : std_logic_vector(63 downto 0) := (others => '0');
    variable dipa_dly_ecc_corrected : std_logic_vector(7 downto 0) := (others => '0');
    variable dip_ecc : std_logic_vector(7 downto 0) := (others => '0');
    variable dipb_dly_ecc : std_logic_vector(7 downto 0) := (others => '0');        
    variable ecc_bit_position : std_logic_vector(71 downto 0) := (others => '0');
    variable addra_dly_15_reg_var : std_logic := '0';
    variable addrb_dly_15_reg_var : std_logic := '0';
    variable addra_dly_15_reg_bram_var : std_logic := '0';
    variable addrb_dly_15_reg_bram_var : std_logic := '0';
    variable FIRST_TIME : boolean := true;

    variable curr_time : time := 0 ps;
    variable prev_time : time := 0 ps;
    variable viol_time : integer := 0;
    variable viol_type : std_logic_vector(1 downto 0) := (others => '0');
    variable message : line;
    variable dip_ecc_col : std_logic_vector (7 downto 0) := (others => '0');
    variable dbiterr_out_var : std_ulogic := '0';
    variable sbiterr_out_var : std_ulogic := '0';

    variable dia_reg_dly : std_logic_vector(63 downto 0) := (others => '0');
    variable dipa_reg_dly : std_logic_vector(7 downto 0) := (others => '0');
    variable wea_reg_dly : std_logic_vector(7 downto 0) := (others => '0');
    variable addra_reg_dly : std_logic_vector(15 downto 0) := (others => '0');
    variable dib_reg_dly : std_logic_vector(63 downto 0) := (others => '0');
    variable dipb_reg_dly : std_logic_vector(7 downto 0) := (others => '0');
    variable web_reg_dly : std_logic_vector(7 downto 0) := (others => '0');
    variable addrb_reg_dly : std_logic_vector(15 downto 0) := (others => '0');
    variable col_wr_wr_msg : std_ulogic := '1';
    variable col_wra_rdb_msg : std_ulogic := '1';
    variable col_wrb_rda_msg : std_ulogic := '1';
    variable addr_col : std_logic := '0';
    
  begin  -- process prcs_clka    

    if (FIRST_TIME) then

      case READ_WIDTH_A is
        when 0 | 1 | 2 | 4 | 9 | 18 => null;
        when 36 => if (BRAM_SIZE = 18 and BRAM_MODE = "TRUE_DUAL_PORT") then
                       GenericValueCheckMessage
                        (  HeaderMsg            => " Attribute Syntax Error : ",
                           GenericName          => " READ_WIDTH_A ",
                           EntityName           => "X_ARAMB36_INTERNAL",
                           GenericValue         => READ_WIDTH_A,
                           Unit                 => "",
                           ExpectedValueMsg     => " The Legal values for this attribute are ",
                           ExpectedGenericValue => " 0, 1, 2, 4, 9 or 18.",
                           TailMsg              => "",
                           MsgSeverity          => failure
                           );
                   end if;
        when 72 => if (BRAM_SIZE = 18) then
                       GenericValueCheckMessage
                        (  HeaderMsg            => " Attribute Syntax Error : ",
                           GenericName          => " READ_WIDTH_A ",
                           EntityName           => "X_ARAMB36_INTERNAL",
                           GenericValue         => READ_WIDTH_A,
                           Unit                 => "",
                           ExpectedValueMsg     => " The Legal values for this attribute are ",
                           ExpectedGenericValue => " 0, 1, 2, 4, 9 or 18.",
                           TailMsg              => "",
                           MsgSeverity          => failure
                           );
                   elsif ((BRAM_SIZE = 16 or BRAM_SIZE = 36) and BRAM_MODE = "TRUE_DUAL_PORT") then
                       GenericValueCheckMessage
                        (  HeaderMsg            => " Attribute Syntax Error : ",
                           GenericName          => " READ_WIDTH_A ",
                           EntityName           => "X_ARAMB36_INTERNAL",
                           GenericValue         => READ_WIDTH_A,
                           Unit                 => "",
                           ExpectedValueMsg     => " The Legal values for this attribute are ",
                           ExpectedGenericValue => " 0, 1, 2, 4, 9, 18 or 36.",
                           TailMsg              => "",
                           MsgSeverity          => failure
                           );
                   end if;
        when others => if (BRAM_SIZE = 18) then
                         GenericValueCheckMessage
                           (  HeaderMsg            => " Attribute Syntax Error : ",
                              GenericName          => " READ_WIDTH_A ",
                              EntityName           => "X_ARAMB36_INTERNAL",
                              GenericValue         => READ_WIDTH_A,
                              Unit                 => "",
                              ExpectedValueMsg     => " The Legal values for this attribute are ",
                              ExpectedGenericValue => " 0, 1, 2, 4, 9 or 18.",
                              TailMsg              => "",
                              MsgSeverity          => failure
                              );
                       elsif (BRAM_SIZE = 16 or BRAM_SIZE = 36) then
                         GenericValueCheckMessage
                           (  HeaderMsg            => " Attribute Syntax Error : ",
                              GenericName          => " READ_WIDTH_A ",
                              EntityName           => "X_ARAMB36_INTERNAL",
                              GenericValue         => READ_WIDTH_A,
                              Unit                 => "",
                              ExpectedValueMsg     => " The Legal values for this attribute are ",
                              ExpectedGenericValue => " 0, 1, 2, 4, 9, 18 or 36.",
                              TailMsg              => "",
                              MsgSeverity          => failure
                              );
                       end if;
      end case;


      case READ_WIDTH_B is
        when 0 | 1 | 2 | 4 | 9 | 18 => null;
        when 36 => if (BRAM_SIZE = 18 and BRAM_MODE = "TRUE_DUAL_PORT") then
                       GenericValueCheckMessage
                        (  HeaderMsg            => " Attribute Syntax Error : ",
                           GenericName          => " READ_WIDTH_B ",
                           EntityName           => "X_ARAMB36_INTERNAL",
                           GenericValue         => READ_WIDTH_B,
                           Unit                 => "",
                           ExpectedValueMsg     => " The Legal values for this attribute are ",
                           ExpectedGenericValue => " 0, 1, 2, 4, 9 or 18.",
                           TailMsg              => "",
                           MsgSeverity          => failure
                           );
                   end if;
        when 72 => if (BRAM_SIZE = 18) then
                       GenericValueCheckMessage
                        (  HeaderMsg            => " Attribute Syntax Error : ",
                           GenericName          => " READ_WIDTH_B ",
                           EntityName           => "X_ARAMB36_INTERNAL",
                           GenericValue         => READ_WIDTH_B,
                           Unit                 => "",
                           ExpectedValueMsg     => " The Legal values for this attribute are ",
                           ExpectedGenericValue => " 0, 1, 2, 4, 9 or 18.",
                           TailMsg              => "",
                           MsgSeverity          => failure
                           );
                   elsif ((BRAM_SIZE = 16 or BRAM_SIZE = 36) and BRAM_MODE = "TRUE_DUAL_PORT") then
                       GenericValueCheckMessage
                        (  HeaderMsg            => " Attribute Syntax Error : ",
                           GenericName          => " READ_WIDTH_B ",
                           EntityName           => "X_ARAMB36_INTERNAL",
                           GenericValue         => READ_WIDTH_B,
                           Unit                 => "",
                           ExpectedValueMsg     => " The Legal values for this attribute are ",
                           ExpectedGenericValue => " 0, 1, 2, 4, 9, 18 or 36.",
                           TailMsg              => "",
                           MsgSeverity          => failure
                           );
                   end if;
        when others => if (BRAM_SIZE = 18) then
                         GenericValueCheckMessage
                           (  HeaderMsg            => " Attribute Syntax Error : ",
                              GenericName          => " READ_WIDTH_B ",
                              EntityName           => "X_ARAMB36_INTERNAL",
                              GenericValue         => READ_WIDTH_B,
                              Unit                 => "",
                              ExpectedValueMsg     => " The Legal values for this attribute are ",
                              ExpectedGenericValue => " 0, 1, 2, 4, 9 or 18.",
                              TailMsg              => "",
                              MsgSeverity          => failure
                              );
                       elsif (BRAM_SIZE = 16 or BRAM_SIZE = 36) then
                         GenericValueCheckMessage
                           (  HeaderMsg            => " Attribute Syntax Error : ",
                              GenericName          => " READ_WIDTH_B ",
                              EntityName           => "X_ARAMB36_INTERNAL",
                              GenericValue         => READ_WIDTH_B,
                              Unit                 => "",
                              ExpectedValueMsg     => " The Legal values for this attribute are ",
                              ExpectedGenericValue => " 0, 1, 2, 4, 9, 18 or 36.",
                              TailMsg              => "",
                              MsgSeverity          => failure
                              );
                       end if;
      end case;


      case WRITE_WIDTH_A is
        when 0 | 1 | 2 | 4 | 9 | 18 => null;
        when 36 => if (BRAM_SIZE = 18 and BRAM_MODE = "TRUE_DUAL_PORT") then
                       GenericValueCheckMessage
                        (  HeaderMsg            => " Attribute Syntax Error : ",
                           GenericName          => " WRITE_WIDTH_A ",
                           EntityName           => "X_ARAMB36_INTERNAL",
                           GenericValue         => WRITE_WIDTH_A,
                           Unit                 => "",
                           ExpectedValueMsg     => " The Legal values for this attribute are ",
                           ExpectedGenericValue => " 0, 1, 2, 4, 9 or 18.",
                           TailMsg              => "",
                           MsgSeverity          => failure
                           );
                   end if;
        when 72 => if (BRAM_SIZE = 18) then
                       GenericValueCheckMessage
                        (  HeaderMsg            => " Attribute Syntax Error : ",
                           GenericName          => " WRITE_WIDTH_A ",
                           EntityName           => "X_ARAMB36_INTERNAL",
                           GenericValue         => WRITE_WIDTH_A,
                           Unit                 => "",
                           ExpectedValueMsg     => " The Legal values for this attribute are ",
                           ExpectedGenericValue => " 0, 1, 2, 4, 9 or 18.",
                           TailMsg              => "",
                           MsgSeverity          => failure
                           );
                   elsif ((BRAM_SIZE = 16 or BRAM_SIZE = 36) and BRAM_MODE = "TRUE_DUAL_PORT") then
                       GenericValueCheckMessage
                        (  HeaderMsg            => " Attribute Syntax Error : ",
                           GenericName          => " WRITE_WIDTH_A ",
                           EntityName           => "X_ARAMB36_INTERNAL",
                           GenericValue         => WRITE_WIDTH_A,
                           Unit                 => "",
                           ExpectedValueMsg     => " The Legal values for this attribute are ",
                           ExpectedGenericValue => " 0, 1, 2, 4, 9, 18 or 36.",
                           TailMsg              => "",
                           MsgSeverity          => failure
                           );
                   end if;
        when others => if (BRAM_SIZE = 18) then
                         GenericValueCheckMessage
                           (  HeaderMsg            => " Attribute Syntax Error : ",
                              GenericName          => " WRITE_WIDTH_A ",
                              EntityName           => "X_ARAMB36_INTERNAL",
                              GenericValue         => WRITE_WIDTH_A,
                              Unit                 => "",
                              ExpectedValueMsg     => " The Legal values for this attribute are ",
                              ExpectedGenericValue => " 0, 1, 2, 4, 9 or 18.",
                              TailMsg              => "",
                              MsgSeverity          => failure
                              );
                       elsif (BRAM_SIZE = 16 or BRAM_SIZE = 36) then
                         GenericValueCheckMessage
                           (  HeaderMsg            => " Attribute Syntax Error : ",
                              GenericName          => " WRITE_WIDTH_A ",
                              EntityName           => "X_ARAMB36_INTERNAL",
                              GenericValue         => WRITE_WIDTH_A,
                              Unit                 => "",
                              ExpectedValueMsg     => " The Legal values for this attribute are ",
                              ExpectedGenericValue => " 0, 1, 2, 4, 9, 18 or 36.",
                              TailMsg              => "",
                              MsgSeverity          => failure
                              );
                       end if;
      end case;


      case WRITE_WIDTH_B is
        when 0 | 1 | 2 | 4 | 9 | 18 => null;
        when 36 => if (BRAM_SIZE = 18 and BRAM_MODE = "TRUE_DUAL_PORT") then
                       GenericValueCheckMessage
                        (  HeaderMsg            => " Attribute Syntax Error : ",
                           GenericName          => " WRITE_WIDTH_B ",
                           EntityName           => "X_ARAMB36_INTERNAL",
                           GenericValue         => WRITE_WIDTH_B,
                           Unit                 => "",
                           ExpectedValueMsg     => " The Legal values for this attribute are ",
                           ExpectedGenericValue => " 0, 1, 2, 4, 9 or 18.",
                           TailMsg              => "",
                           MsgSeverity          => failure
                           );
                   end if;
        when 72 => if (BRAM_SIZE = 18) then
                       GenericValueCheckMessage
                        (  HeaderMsg            => " Attribute Syntax Error : ",
                           GenericName          => " WRITE_WIDTH_B ",
                           EntityName           => "X_ARAMB36_INTERNAL",
                           GenericValue         => WRITE_WIDTH_B,
                           Unit                 => "",
                           ExpectedValueMsg     => " The Legal values for this attribute are ",
                           ExpectedGenericValue => " 0, 1, 2, 4, 9 or 18.",
                           TailMsg              => "",
                           MsgSeverity          => failure
                           );
                   elsif ((BRAM_SIZE = 16 or BRAM_SIZE = 36) and BRAM_MODE = "TRUE_DUAL_PORT") then
                       GenericValueCheckMessage
                        (  HeaderMsg            => " Attribute Syntax Error : ",
                           GenericName          => " WRITE_WIDTH_B ",
                           EntityName           => "X_ARAMB36_INTERNAL",
                           GenericValue         => WRITE_WIDTH_B,
                           Unit                 => "",
                           ExpectedValueMsg     => " The Legal values for this attribute are ",
                           ExpectedGenericValue => " 0, 1, 2, 4, 9, 18 or 36.",
                           TailMsg              => "",
                           MsgSeverity          => failure
                           );
                   end if;
        when others => if (BRAM_SIZE = 18) then
                         GenericValueCheckMessage
                           (  HeaderMsg            => " Attribute Syntax Error : ",
                              GenericName          => " WRITE_WIDTH_B ",
                              EntityName           => "X_ARAMB36_INTERNAL",
                              GenericValue         => WRITE_WIDTH_B,
                              Unit                 => "",
                              ExpectedValueMsg     => " The Legal values for this attribute are ",
                              ExpectedGenericValue => " 0, 1, 2, 4, 9 or 18.",
                              TailMsg              => "",
                              MsgSeverity          => failure
                              );
                       elsif (BRAM_SIZE = 16 or BRAM_SIZE = 36) then
                         GenericValueCheckMessage
                           (  HeaderMsg            => " Attribute Syntax Error : ",
                              GenericName          => " WRITE_WIDTH_B ",
                              EntityName           => "X_ARAMB36_INTERNAL",
                              GenericValue         => WRITE_WIDTH_B,
                              Unit                 => "",
                              ExpectedValueMsg     => " The Legal values for this attribute are ",
                              ExpectedGenericValue => " 0, 1, 2, 4, 9, 18 or 36.",
                              TailMsg              => "",
                              MsgSeverity          => failure
                              );
                       end if;
      end case;

      
      if (not(EN_ECC_READ = TRUE or EN_ECC_READ = FALSE)) then

        GenericValueCheckMessage
          ( HeaderMsg            => " Attribute Syntax Error : ",
            GenericName          => " EN_ECC_READ ",
            EntityName           => "X_ARAMB36_INTERNAL",
            GenericValue         => EN_ECC_READ,
            Unit                 => "",
            ExpectedValueMsg     => " The Legal values for this attribute are ",
            ExpectedGenericValue => " TRUE or FALSE ",
            TailMsg              => "",
            MsgSeverity          => failure
            );
      end if;

      if (not(EN_ECC_WRITE = TRUE or EN_ECC_WRITE = FALSE)) then

        GenericValueCheckMessage
          ( HeaderMsg            => " Attribute Syntax Error : ",
            GenericName          => " EN_ECC_WRITE ",
            EntityName           => "X_ARAMB36_INTERNAL",
            GenericValue         => EN_ECC_WRITE,
            Unit                 => "",
            ExpectedValueMsg     => " The Legal values for this attribute are ",
            ExpectedGenericValue => " TRUE or FALSE ",
            TailMsg              => "",
            MsgSeverity          => failure
            );
      end if;

      if (EN_ECC_SCRUB = TRUE) then
        assert false
          report "DRC Error : The attribute EN_ECC_SCRUB = TRUE is not supported on X_ARAMB36_INTERNAL instance."
          severity failure;
      end if;
      
      if (not(EN_ECC_SCRUB = TRUE or EN_ECC_SCRUB = FALSE)) then

        GenericValueCheckMessage
          ( HeaderMsg            => " Attribute Syntax Error : ",
            GenericName          => " EN_ECC_SCRUB ",
            EntityName           => "X_ARAMB36_INTERNAL",
            GenericValue         => EN_ECC_SCRUB,
            Unit                 => "",
            ExpectedValueMsg     => " The Legal values for this attribute are ",
            ExpectedGenericValue => " TRUE or FALSE ",
            TailMsg              => "",
            MsgSeverity          => failure
            );
      end if;

      
      if (EN_ECC_READ = FALSE and EN_ECC_SCRUB = TRUE) then
        assert false
        report "DRC Error : The attribute EN_ECC_SCRUB = TRUE is vaild only if the attribute EN_ECC_READ set to TRUE on X_ARAMB36_INTERNAL instance."
        severity failure;
      end if;

      
      if (READ_WIDTH_A = 0 and READ_WIDTH_B = 0) then
        assert false
        report "Attribute Syntax Error : Attributes READ_WIDTH_A and READ_WIDTH_B on X_ARAMB36_INTERNAL instance, both can not be 0."
        severity failure;
      end if;

      
      if (WRITE_MODE_A = "WRITE_FIRST") then
        wr_mode_a := "00";
      elsif (WRITE_MODE_A = "READ_FIRST") then
        wr_mode_a := "01";
      elsif (WRITE_MODE_A = "NO_CHANGE") then
        wr_mode_a := "10";
      else
        GenericValueCheckMessage
          ( HeaderMsg            => " Attribute Syntax Error : ",
            GenericName          => " WRITE_MODE_A ",
            EntityName           => "X_ARAMB36_INTERNAL",
            GenericValue         => WRITE_MODE_A,
            Unit                 => "",
            ExpectedValueMsg     => " The Legal values for this attribute are ",
            ExpectedGenericValue => " WRITE_FIRST, READ_FIRST or NO_CHANGE ",
            TailMsg              => "",
            MsgSeverity          => failure
            );
      end if;
    
      if (WRITE_MODE_B = "WRITE_FIRST") then
        wr_mode_b := "00";
      elsif (WRITE_MODE_B = "READ_FIRST") then
        wr_mode_b := "01";
      elsif (WRITE_MODE_B = "NO_CHANGE") then
        wr_mode_b := "10";
      else
        GenericValueCheckMessage
          ( HeaderMsg            => " Attribute Syntax Error : ",
            GenericName          => " WRITE_MODE_B ",
            EntityName           => "X_ARAMB36_INTERNAL",
            GenericValue         => WRITE_MODE_B,
            Unit                 => "",
            ExpectedValueMsg     => " The Legal values for this attribute are ",
            ExpectedGenericValue => " WRITE_FIRST, READ_FIRST or NO_CHANGE ",
            TailMsg              => "",
            MsgSeverity          => failure
            );
      end if;

    
      if (RAM_EXTENSION_A = "UPPER") then
        cascade_a <= "11";
      elsif (RAM_EXTENSION_A = "LOWER") then
        cascade_a <= "01";
      elsif (RAM_EXTENSION_A= "NONE") then
        cascade_a <= "00";
      else
        GenericValueCheckMessage
          ( HeaderMsg            => " Attribute Syntax Error : ",
            GenericName          => " RAM_EXTENSION_A ",
            EntityName           => "X_ARAMB36_INTERNAL",
            GenericValue         => RAM_EXTENSION_A,
            Unit                 => "",
            ExpectedValueMsg     => " The Legal values for this attribute are ",
            ExpectedGenericValue => " NONE, LOWER or UPPER ",
            TailMsg              => "",
            MsgSeverity          => failure
            );
      end if;

    
      if (RAM_EXTENSION_B = "UPPER") then
        cascade_b <= "11";
      elsif (RAM_EXTENSION_B = "LOWER") then
        cascade_b <= "01";
      elsif (RAM_EXTENSION_B= "NONE") then
        cascade_b <= "00";
      else
        GenericValueCheckMessage
          ( HeaderMsg            => " Attribute Syntax Error : ",
            GenericName          => " RAM_EXTENSION_B ",
            EntityName           => "X_ARAMB36_INTERNAL",
            GenericValue         => RAM_EXTENSION_A,
            Unit                 => "",
            ExpectedValueMsg     => " The Legal values for this attribute are ",
            ExpectedGenericValue => " NONE, LOWER or UPPER ",
            TailMsg              => "",
            MsgSeverity          => failure
            );
      end if;

      
      if( ((RAM_EXTENSION_A = "LOWER") or (RAM_EXTENSION_A = "UPPER")) and (READ_WIDTH_A /= 1)) then
        assert false
          report "Attribute Syntax Error: If RAM_EXTENSION_A is set to either LOWER or UPPER, then READ_WIDTH_A has to be set to 1."
          severity Failure;
      end if;
    
      if( ((RAM_EXTENSION_A = "LOWER") or (RAM_EXTENSION_A = "UPPER")) and (WRITE_WIDTH_A /= 1)) then
        assert false
          report "Attribute Syntax Error: If RAM_EXTENSION_A is set to either LOWER or UPPER, then WRITE_WIDTH_A has to be set to 1."
          severity Failure;
      end if;

      if( ((RAM_EXTENSION_B = "LOWER") or (RAM_EXTENSION_B = "UPPER")) and (READ_WIDTH_B /= 1)) then
        assert false
          report "Attribute Syntax Error: If RAM_EXTENSION_B is set to either LOWER or UPPER, then READ_WIDTH_B has to be set to 1."
          severity Failure;
      end if;
    
      if( ((RAM_EXTENSION_B = "LOWER") or (RAM_EXTENSION_B = "UPPER")) and (WRITE_WIDTH_B /= 1)) then
        assert false
          report "Attribute Syntax Error: If RAM_EXTENSION_B is set to either LOWER or UPPER, then WRITE_WIDTH_B has to be set to 1."
          severity Failure;
      end if;

      
      if (not ((SIM_COLLISION_CHECK = "NONE") or (SIM_COLLISION_CHECK = "WARNING_ONLY") or (SIM_COLLISION_CHECK = "GENERATE_X_ONLY") or (SIM_COLLISION_CHECK = "ALL"))) then
        GenericValueCheckMessage
          (HeaderMsg => "Attribute Syntax Error",
           GenericName => "SIM_COLLISION_CHECK",
           EntityName => "X_ARAMB36_INTERNAL",
           GenericValue => SIM_COLLISION_CHECK,
           Unit => "",
           ExpectedValueMsg => "Legal Values for this attribute are ALL, NONE, WARNING_ONLY or GENERATE_X_ONLY",
           ExpectedGenericValue => "",
           TailMsg => "",
           MsgSeverity => error
           );
      end if;

      
    end if;


    if (rising_edge(clka_dly)) then

      if (ena_dly = '1') then      
        prev_time := curr_time;
        curr_time := now;
        addra_reg_dly := addra_dly;
        wea_reg_dly := wea_dly;
        dia_reg_dly := dia_dly;
        dipa_reg_dly := dipa_dly;
      end if;
      
    end if;
    
    if (rising_edge(clkb_dly)) then

      if (enb_dly = '1') then
        prev_time := curr_time;
        curr_time := now;
        addrb_reg_dly := addrb_dly;
        web_reg_dly := web_dly;
        dib_reg_dly := dib_dly;
        dipb_reg_dly := dipb_dly;
      end if;
      
    end if;
    
    if (gsr_dly = '1' or FIRST_TIME) then

      doa_out(ra_width-1 downto 0) <= INIT_A_STD(ra_width-1 downto 0);

      if (ra_width >= 8) then
        dopa_out(ra_widthp-1 downto 0) <= INIT_A_STD((ra_width+ra_widthp)-1 downto ra_width);            
      end if;

      dob_out(rb_width-1 downto 0) <= INIT_B_STD(rb_width-1 downto 0);          

      if (rb_width >= 8) then
        dopb_out(rb_widthp-1 downto 0) <= INIT_B_STD((rb_width+rb_widthp)-1 downto rb_width);            
      end if;

      dbiterr_out <= '0';
      sbiterr_out <= '0';

      FIRST_TIME := false;
      
    elsif (gsr_dly = '0') then

      if (rising_edge(clka_dly)) then
       if (cascade_a(1) = '1') then
         addra_dly_15_reg_bram_var := not addra_dly(15);
       else
         addra_dly_15_reg_bram_var := addra_dly(15);
       end if;
      end if;

      if (rising_edge(clkb_dly)) then
       if (cascade_b(1) = '1') then
         addrb_dly_15_reg_bram_var := not addrb_dly(15);
       else
         addrb_dly_15_reg_bram_var := addrb_dly(15);
       end if;
      end if;
      
     if (rising_edge(clka_dly) or rising_edge(clkb_dly)) then

      if ((cascade_a = "00" or (addra_dly_15_reg_bram_var = '0' and cascade_a /= "00")) or (cascade_b = "00" or (addrb_dly_15_reg_bram_var = '0' and cascade_b /= "00"))) then
            
-------------------------------------------------------------------------------
-- Collision starts
-------------------------------------------------------------------------------

       if (SIM_COLLISION_CHECK /= "NONE") then

        
        if (curr_time - prev_time = 0 ps) then
          viol_time := 1;
        elsif (curr_time - prev_time <= SETUP_READ_FIRST) then
          viol_time := 2;
        end if;

        
        if (ena_dly = '0' or enb_dly = '0') then
          viol_time := 0;
        end if;

        
        if ((WRITE_WIDTH_A <= 9 and wea_dly(0) = '0') or (WRITE_WIDTH_A = 18 and wea_dly(1 downto 0) = "00") or ((WRITE_WIDTH_A = 36 or WRITE_WIDTH_A = 72) and wea_dly(3 downto 0) = "0000")) then
          if ((WRITE_WIDTH_B <= 9 and web_dly(0) = '0') or (WRITE_WIDTH_B = 18 and web_dly(1 downto 0) = "00") or (WRITE_WIDTH_B = 36 and web_dly(3 downto 0) = "0000") or (WRITE_WIDTH_B = 72 and web_dly(7 downto 0) = "00000000")) then
            viol_time := 0;
          end if;
        end if;

        
        if (viol_time /= 0) then

          
          if (cascade_a(0) = '1' or cascade_b(0) = '1') then
            if (addra_dly(15 downto col_addr_lsb) = addrb_dly(15 downto col_addr_lsb)) then
              addr_col := '1';
            else
              addr_col := '0';
            end if;
          else
            if (addra_dly(14 downto col_addr_lsb) = addrb_dly(14 downto col_addr_lsb)) then
              addr_col := '1';
            else
              addr_col := '0';
            end if;
          end if;	    

          
          if (rising_edge(clka_dly) and rising_edge(clkb_dly)) then
            if (addr_col = '1') then
			    
              viol_type := "01";

              prcd_rd_ram_a (addra_dly, doa_buf, dopa_buf, mem, memp);
              prcd_rd_ram_b (addrb_dly, dob_buf, dopb_buf, mem, memp);
              
              prcd_col_wr_ram_a ("00", web_dly, wea_dly, di_x, di_x(7 downto 0), addrb_dly, addra_dly, mem, memp, col_wr_wr_msg, col_wra_rdb_msg, col_wrb_rda_msg);
              prcd_col_wr_ram_b ("00", wea_dly, web_dly, di_x, di_x(7 downto 0), addra_dly, addrb_dly, mem, memp, col_wr_wr_msg, col_wra_rdb_msg, col_wrb_rda_msg);

              prcd_col_rd_ram_a (viol_type, "01", web_dly, wea_dly, addra_dly, doa_buf, dopa_buf, mem, memp, wr_mode_a);
              prcd_col_rd_ram_b (viol_type, "01", wea_dly, web_dly, addrb_dly, dob_buf, dopb_buf, mem, memp, wr_mode_b);

              prcd_col_wr_ram_a ("10", web_dly, wea_dly, dia_dly, dipa_dly, addrb_dly, addra_dly, mem, memp, col_wr_wr_msg, col_wra_rdb_msg, col_wrb_rda_msg);

              if (BRAM_MODE = "ECC" and EN_ECC_WRITE = TRUE and enb_dly = '1') then
                  
                dip_ecc_col := fn_dip_ecc('1', dib_dly, dipb_dly);				
                eccparity_out <= dip_ecc_col;
                prcd_col_wr_ram_b ("10", wea_dly, web_dly, dib_dly, dip_ecc_col, addra_dly, addrb_dly, mem, memp, col_wr_wr_msg, col_wra_rdb_msg, col_wrb_rda_msg);

              else
                
                prcd_col_wr_ram_b ("10", wea_dly, web_dly, dib_dly, dipb_dly, addra_dly, addrb_dly, mem, memp, col_wr_wr_msg, col_wra_rdb_msg, col_wrb_rda_msg);

              end if;
			    
              if (wr_mode_a /= "01") then
                prcd_col_rd_ram_a (viol_type, "11", web_dly, wea_dly, addra_dly, doa_buf, dopa_buf, mem, memp, wr_mode_a);
              end if;

              if (wr_mode_b /= "01") then
                prcd_col_rd_ram_b (viol_type, "11", wea_dly, web_dly, addrb_dly, dob_buf, dopb_buf, mem, memp, wr_mode_b);
              end if;

              if (BRAM_MODE = "ECC" and EN_ECC_READ = TRUE) then
                prcd_col_ecc_read (doa_buf, dopa_buf, addra_dly, dbiterr_out_var, sbiterr_out_var, mem, memp, syndrome);
              end if;
              
            else
              viol_time := 0;
              
            end if;

          elsif (rising_edge(clka_dly) and  (not(rising_edge(clkb_dly)))) then
            if (addr_col = '1') then
			    
              viol_type := "10";

              prcd_rd_ram_a (addra_dly, doa_buf, dopa_buf, mem, memp);

              prcd_col_wr_ram_a ("00", web_reg_dly, wea_dly, di_x, di_x(7 downto 0), addrb_reg_dly, addra_dly, mem, memp, col_wr_wr_msg, col_wra_rdb_msg, col_wrb_rda_msg);
              prcd_col_wr_ram_b ("00", wea_dly, web_reg_dly, di_x, di_x(7 downto 0), addra_dly, addrb_reg_dly, mem, memp, col_wr_wr_msg, col_wra_rdb_msg, col_wrb_rda_msg);

              prcd_col_rd_ram_a (viol_type, "01", web_reg_dly, wea_dly, addra_dly, doa_buf, dopa_buf, mem, memp, wr_mode_a);
              prcd_col_rd_ram_b (viol_type, "01", wea_dly, web_reg_dly, addrb_reg_dly, dob_buf, dopb_buf, mem, memp, wr_mode_b);

              prcd_col_wr_ram_a ("10", web_reg_dly, wea_dly, dia_dly, dipa_dly, addrb_reg_dly, addra_dly, mem, memp, col_wr_wr_msg, col_wra_rdb_msg, col_wrb_rda_msg);

              if (BRAM_MODE = "ECC" and EN_ECC_WRITE = TRUE and enb_dly = '1') then
                  
                dip_ecc_col := fn_dip_ecc('1', dib_reg_dly, dipb_reg_dly);				
                eccparity_out <= dip_ecc_col;
                prcd_col_wr_ram_b ("10", wea_dly, web_reg_dly, dib_reg_dly, dip_ecc_col, addra_dly, addrb_reg_dly, mem, memp, col_wr_wr_msg, col_wra_rdb_msg, col_wrb_rda_msg);

              else
                
                prcd_col_wr_ram_b ("10", wea_dly, web_reg_dly, dib_reg_dly, dipb_reg_dly, addra_dly, addrb_reg_dly, mem, memp, col_wr_wr_msg, col_wra_rdb_msg, col_wrb_rda_msg);

              end if;
			    
              if (wr_mode_a /= "01") then
                prcd_col_rd_ram_a (viol_type, "11", web_reg_dly, wea_dly, addra_dly, doa_buf, dopa_buf, mem, memp, wr_mode_a);
              end if;

              if (wr_mode_b /= "01") then
                prcd_col_rd_ram_b (viol_type, "11", wea_dly, web_reg_dly, addrb_reg_dly, dob_buf, dopb_buf, mem, memp, wr_mode_b);
              end if;

              if (BRAM_MODE = "ECC" and EN_ECC_READ = TRUE) then
                prcd_col_ecc_read (doa_buf, dopa_buf, addra_dly, dbiterr_out_var, sbiterr_out_var, mem, memp, syndrome);
              end if;
              
            else
              viol_time := 0;
              
            end if;

          elsif ((not(rising_edge(clka_dly))) and rising_edge(clkb_dly)) then
            if (addr_col = '1') then
			    
              viol_type := "11";

              prcd_rd_ram_b (addrb_dly, dob_buf, dopb_buf, mem, memp);

              prcd_col_wr_ram_a ("00", web_dly, wea_reg_dly, di_x, di_x(7 downto 0), addrb_dly, addra_reg_dly, mem, memp, col_wr_wr_msg, col_wra_rdb_msg, col_wrb_rda_msg);
              prcd_col_wr_ram_b ("00", wea_reg_dly, web_dly, di_x, di_x(7 downto 0), addra_reg_dly, addrb_dly, mem, memp, col_wr_wr_msg, col_wra_rdb_msg, col_wrb_rda_msg);

              prcd_col_rd_ram_a (viol_type, "01", web_dly, wea_reg_dly, addra_reg_dly, doa_buf, dopa_buf, mem, memp, wr_mode_a);
              prcd_col_rd_ram_b (viol_type, "01", wea_reg_dly, web_dly, addrb_dly, dob_buf, dopb_buf, mem, memp, wr_mode_b);

              prcd_col_wr_ram_a ("10", web_dly, wea_reg_dly, dia_reg_dly, dipa_reg_dly, addrb_dly, addra_reg_dly, mem, memp, col_wr_wr_msg, col_wra_rdb_msg, col_wrb_rda_msg);

              if (BRAM_MODE = "ECC" and EN_ECC_WRITE = TRUE and enb_dly = '1') then
                  
                dip_ecc_col := fn_dip_ecc('1', dib_dly, dipb_dly);				
                eccparity_out <= dip_ecc_col;
                prcd_col_wr_ram_b ("10", wea_reg_dly, web_dly, dib_dly, dip_ecc_col, addra_reg_dly, addrb_dly, mem, memp, col_wr_wr_msg, col_wra_rdb_msg, col_wrb_rda_msg);

              else
                
                prcd_col_wr_ram_b ("10", wea_reg_dly, web_dly, dib_dly, dipb_dly, addra_reg_dly, addrb_dly, mem, memp, col_wr_wr_msg, col_wra_rdb_msg, col_wrb_rda_msg);

              end if;
			    
              if (wr_mode_a /= "01") then
                prcd_col_rd_ram_a (viol_type, "11", web_dly, wea_reg_dly, addra_reg_dly, doa_buf, dopa_buf, mem, memp, wr_mode_a);
              end if;

              if (wr_mode_b /= "01") then
                prcd_col_rd_ram_b (viol_type, "11", wea_reg_dly, web_dly, addrb_dly, dob_buf, dopb_buf, mem, memp, wr_mode_b);
              end if;

              if (BRAM_MODE = "ECC" and EN_ECC_READ = TRUE) then
                prcd_col_ecc_read (doa_buf, dopa_buf, addra_reg_dly, dbiterr_out_var, sbiterr_out_var, mem, memp, syndrome);
              end if;
              
            else
              viol_time := 0;
              
            end if;
          end if;

          if (SIM_COLLISION_CHECK = "WARNING_ONLY") then
            viol_time := 0;
          end if;
          
        end if;
      end if;
-------------------------------------------------------------------------------
-- end collision
-------------------------------------------------------------------------------

    end if;
       
-------------------------------------------------------------------------------
-- Port A
-------------------------------------------------------------------------------        
    if (rising_edge(clka_dly)) then

      if (ssra_dly = '1' and BRAM_MODE = "ECC") then
        assert false
        report "DRC Warning : SET/RESET (SSR) is not supported in ECC mode."
        severity Warning;
      end if;

      if (ssra_dly = '1' and BRAM_SIZE = 16 and DOA_REG = 1) then
        assert false
        report "DRC Error : SET/RESET (SSR) is not supported when optional output registers are used."
        severity Failure;
      end if;
      
      -- registering addra_dly(15) the second time
      if (regcea_dly = '1') then
        addra_dly_15_reg1 <= addra_dly_15_reg_var;        
      end if;


      -- registering addra[15)
      if (ena_dly = '1' and (wr_mode_a /= "10" or wea_dly(0) = '0' or ssra_dly = '1')) then
        if (cascade_a(1) = '1') then
          addra_dly_15_reg_var :=  not addra_dly(15);
        else
          addra_dly_15_reg_var := addra_dly(15);
        end if;
      end if;

      
      addra_dly_15_reg <= addra_dly_15_reg_var;

      
      if (gsr_dly = '0' and ena_dly = '1' and (cascade_a = "00" or (addra_dly_15_reg_bram_var = '0' and cascade_a /= "00"))) then

        if (ssra_dly = '1' and DOA_REG = 0) then

          doa_buf(ra_width-1 downto 0) := SRVAL_A_STD(ra_width-1 downto 0);
          doa_out(ra_width-1 downto 0) <= SRVAL_A_STD(ra_width-1 downto 0);          

          if (ra_width >= 8) then
            dopa_buf(ra_widthp-1 downto 0) := SRVAL_A_STD((ra_width+ra_widthp)-1 downto ra_width);
            dopa_out(ra_widthp-1 downto 0) <= SRVAL_A_STD((ra_width+ra_widthp)-1 downto ra_width);            
          end if;

        end if;
      
        if (viol_time = 0) then
          -- read for rf
          if ((wr_mode_a = "01" and (ssra_dly = '0' or DOA_REG = 1)) or (BRAM_MODE = "ECC" and EN_ECC_READ = TRUE)) then
            prcd_rd_ram_a (addra_dly, doa_buf, dopa_buf, mem, memp);

          -- ECC decode  -- only port A
            if (BRAM_MODE = "ECC" and EN_ECC_READ = TRUE) then

              dopr_ecc := fn_dip_ecc('0', doa_buf, dopa_buf);

              syndrome := dopr_ecc xor dopa_buf;

              if (syndrome /= "00000000") then

                if (syndrome(7) = '1') then  -- dectect single bit error

                  ecc_bit_position := doa_buf(63 downto 57) & dopa_buf(6) & doa_buf(56 downto 26) & dopa_buf(5) & doa_buf(25 downto 11) & dopa_buf(4) & doa_buf(10 downto 4) & dopa_buf(3) & doa_buf(3 downto 1) & dopa_buf(2) & doa_buf(0) & dopa_buf(1 downto 0) & dopa_buf(7);

                  tmp_syndrome_int := SLV_TO_INT(syndrome(6 downto 0));
                  ecc_bit_position(tmp_syndrome_int) := not ecc_bit_position(tmp_syndrome_int); -- correct single bit error in the output 

                  dia_dly_ecc_corrected := ecc_bit_position(71 downto 65) & ecc_bit_position(63 downto 33) & ecc_bit_position(31 downto 17) & ecc_bit_position(15 downto 9) & ecc_bit_position(7 downto 5) & ecc_bit_position(3); -- correct single bit error in the memory

                  doa_buf := dia_dly_ecc_corrected;
			
                  dipa_dly_ecc_corrected := ecc_bit_position(0) & ecc_bit_position(64) & ecc_bit_position(32) & ecc_bit_position(16) & ecc_bit_position(8) & ecc_bit_position(4) & ecc_bit_position(2 downto 1); -- correct single bit error in the parity memory
                
                  dopa_buf := dipa_dly_ecc_corrected;
                
                  dbiterr_out_var := '0';
                  sbiterr_out_var := '1';

                elsif (syndrome(7) = '0') then  -- double bit error
                  sbiterr_out_var := '0';
                  dbiterr_out_var := '1';
                end if;
              else
                dbiterr_out_var := '0';
                sbiterr_out_var := '0';
              end if;

              if (ssra_dly = '1') then  -- ssra reset 
                dbiterr_out_var := '0';
                sbiterr_out_var := '0';    
              end if;

            end if;
          end if;

        

        if (syndrome /= "00000000" and syndrome(7) = '1' and EN_ECC_SCRUB = TRUE) then
          prcd_wr_ram_a ("11111111", dia_dly_ecc_corrected, dipa_dly_ecc_corrected, addra_dly, mem, memp, syndrome);
        else
          prcd_wr_ram_a (wea_dly, dia_dly, dipa_dly, addra_dly, mem, memp, syndrome);    
        end if;


        if ((wr_mode_a /= "01" and (ssra_dly = '0' or DOA_REG = 1)) and (not(BRAM_MODE = "ECC" and EN_ECC_READ = TRUE))) then
          prcd_rd_ram_a (addra_dly, doa_buf, dopa_buf, mem, memp);
        end if;

        
        end if;
      end if;
    end if;
    
-------------------------------------------------------------------------------
-- Port B
-------------------------------------------------------------------------------

    if (rising_edge(clkb_dly)) then

      -- DRC
      if (ssrb_dly = '1' and BRAM_MODE = "ECC") then
        assert false
        report "DRC Warning : SET/RESET (SSR) is not supported in ECC mode."
        severity Warning;
      end if;

      if (ssrb_dly = '1' and BRAM_SIZE = 16 and DOB_REG = 1) then
        assert false
        report "DRC Error : SET/RESET (SSR) is not supported when optional output registers are used."
        severity Failure;
      end if;
      
      -- registering addrb_dly(15) the second time
      if (regceb_dly = '1') then
        addrb_dly_15_reg1 <= addrb_dly_15_reg_var;        
      end if;


      -- registering addrb(15)
      if (enb_dly = '1' and (wr_mode_b /= "10" or web_dly(0) = '0' or ssrb_dly = '1')) then
        if (cascade_b(1) = '1') then
          addrb_dly_15_reg_var :=  not addrb_dly(15);
        else
          addrb_dly_15_reg_var := addrb_dly(15);
        end if;
      end if;

      
      addrb_dly_15_reg <= addrb_dly_15_reg_var;

      if (gsr_dly = '0' and enb_dly = '1' and (cascade_b = "00" or (addrb_dly_15_reg_bram_var = '0' and cascade_b /= "00"))) then

        if (ssrb_dly = '1' and DOB_REG = 0) then

          dob_buf(rb_width-1 downto 0) := SRVAL_B_STD(rb_width-1 downto 0);
          dob_out(rb_width-1 downto 0) <= SRVAL_B_STD(rb_width-1 downto 0);          

          if (rb_width >= 8) then
            dopb_buf(rb_widthp-1 downto 0) := SRVAL_B_STD((rb_width+rb_widthp)-1 downto rb_width);
            dopb_out(rb_widthp-1 downto 0) <= SRVAL_B_STD((rb_width+rb_widthp)-1 downto rb_width);            
          end if;

        end if;

        dip_ecc := fn_dip_ecc('1', dib_dly, dipb_dly);

        eccparity_out <= dip_ecc;
        
        if (BRAM_MODE = "ECC" and EN_ECC_WRITE = TRUE) then
            dipb_dly_ecc := dip_ecc;
        else
          dipb_dly_ecc := dipb_dly;
        end if;


        if (viol_time = 0) then
          
          if (wr_mode_b = "01" and (ssrb_dly = '0' or DOB_REG = 1)) then
            prcd_rd_ram_b (addrb_dly, dob_buf, dopb_buf, mem, memp);            
          end if;
          
          if (BRAM_MODE = "ECC" and EN_ECC_WRITE = TRUE) then
            prcd_wr_ram_b (web_dly, dib_dly, dipb_dly_ecc, addrb_dly, mem, memp);
          else
            prcd_wr_ram_b (web_dly, dib_dly, dipb_dly, addrb_dly, mem, memp);
          end if;
            

          if (wr_mode_b /= "01" and (ssrb_dly = '0' or DOB_REG = 1)) then
            prcd_rd_ram_b (addrb_dly, dob_buf, dopb_buf, mem, memp);
          end if;
          
        end if;
      end if;
    end if;
    

    if (ena_dly = '1' and (rising_edge(clka_dly) or viol_time /= 0)) then
      if ((ssra_dly = '0' or DOA_REG = 1) and (wr_mode_a /= "10" or (WRITE_WIDTH_A <= 9 and wea_dly(0) = '0') or (WRITE_WIDTH_A = 18 and wea_dly(1 downto 0) = "00") or ((WRITE_WIDTH_A = 36 or WRITE_WIDTH_A = 72) and wea_dly(3 downto 0) = "0000"))) then

        -- Virtex4 feature
        if (wr_mode_a = "00" and BRAM_SIZE = 16) then
          
          if ((WRITE_WIDTH_A = 18 and not(wea_dly(1 downto 0) = "00" or wea_dly(1 downto 0) = "11")) or (WRITE_WIDTH_A = 36 and not(wea_dly(3 downto 0) = "0000" or wea_dly(3 downto 0) = "1111"))) then
			
            if (WRITE_WIDTH_A /= READ_WIDTH_A) then
              
              doa_buf(ra_width-1 downto 0) := di_x(ra_width-1 downto 0);
			    
              if (READ_WIDTH_A >= 9) then
                dopa_buf(ra_widthp-1 downto 0) := di_x(ra_widthp-1 downto 0);
			    
              end if;
              
              if (READ_WIDTH_A /= 0) then

                Write ( Message, STRING'(" Functional warning at simulation time "));
                Write ( Message, STRING'("( "));
                Write ( Message, now);
                Write ( Message, STRING'(") : "));
                Write ( Message, STRING'("X_ARAMB36_INTERNAL "));    
                Write ( Message, STRING'("( "));
                Write ( Message, STRING'(X_ARAMB36_INTERNAL'path_name));
                Write ( Message, STRING'(") "));
                Write ( Message, STRING'(" port A is in WRITE_FIRST mode with parameter WRITE_WIDTH_A = "));
                Write ( Message, INTEGER'(WRITE_WIDTH_A));
                Write ( Message, STRING'(", which is different from READ_WIDTH_A = "));
                Write ( Message, INTEGER'(READ_WIDTH_A));
                Write ( Message, STRING'(". The write will be successful however the read value of all bits on port A"));
                Write ( Message, STRING'(" is unknown until the next CLKA cycle and all bits of WEA is set to all 1s or 0s. "));
                Write ( Message, LF );            
                ASSERT FALSE REPORT Message.ALL SEVERITY warning;
                DEALLOCATE (Message);

              end if;
                
            elsif (WRITE_WIDTH_A = 18) then

              for i in 0 to 1 loop
                
                if (wea_dly(i) = '0') then
                  doa_buf(((8*(i+1))-1) downto 8*i) := di_x(((8*(i+1))-1) downto 8*i);
                  dopa_buf(i downto i) := di_x(i downto i);
                end if;
                            
              end loop;
              
              if (READ_WIDTH_A /= 0) then

                Write ( Message, STRING'(" Functional warning at simulation time "));
                Write ( Message, STRING'("( "));
                Write ( Message, now);
                Write ( Message, STRING'(") : "));
                Write ( Message, STRING'("X_ARAMB36_INTERNAL "));    
                Write ( Message, STRING'("( "));
                Write ( Message, STRING'(X_ARAMB36_INTERNAL'path_name));
                Write ( Message, STRING'(") "));
                Write ( Message, STRING'(" port A is in WRITE_FIRST mode. The write will be successful,"));
                Write ( Message, STRING'(" however DOA shows only the enabled newly written byte(s)."));
                Write ( Message, STRING'(" The other byte values on DOA are unknown until the next CLKA cycle and"));
                Write ( Message, STRING'(" all bits of WEA is set to all 1s or 0s. "));
                Write ( Message, LF );            
                ASSERT FALSE REPORT Message.ALL SEVERITY warning;
                DEALLOCATE (Message);

              end if;
              
            elsif (WRITE_WIDTH_A = 36) then

              for i in 0 to 3 loop

                if (wea_dly(i) = '0') then
                  doa_buf(((8*(i+1))-1) downto 8*i) := di_x(((8*(i+1))-1) downto 8*i);
                  dopa_buf(i downto i) := di_x(i downto i);
                end if;
                            
              end loop;
              
              if (READ_WIDTH_A /= 0) then

                Write ( Message, STRING'(" Functional warning at simulation time "));
                Write ( Message, STRING'("( "));
                Write ( Message, now);
                Write ( Message, STRING'(") : "));
                Write ( Message, STRING'("X_ARAMB36_INTERNAL "));    
                Write ( Message, STRING'("( "));
                Write ( Message, STRING'(X_ARAMB36_INTERNAL'path_name));
                Write ( Message, STRING'(") "));
                Write ( Message, STRING'(" port A is in WRITE_FIRST mode. The write will be successful,"));
                Write ( Message, STRING'(" however DOA shows only the enabled newly written byte(s)."));
                Write ( Message, STRING'(" The other byte values on DOA are unknown until the next CLKA cycle and"));
                Write ( Message, STRING'(" all bits of WEA is set to all 1s or 0s. "));
                Write ( Message, LF );            
                ASSERT FALSE REPORT Message.ALL SEVERITY warning;
                DEALLOCATE (Message);

              end if;
              
            end if;
            
          end if;
        end if;

        doa_out <= doa_buf;
        dopa_out <= dopa_buf;
      end if;
    end if;

    if (enb_dly = '1' and (rising_edge(clkb_dly) or viol_time /= 0)) then
      if ((ssrb_dly = '0' or DOB_REG = 1) and (wr_mode_b /= "10" or (WRITE_WIDTH_B <= 9 and web_dly(0) = '0') or (WRITE_WIDTH_B = 18 and web_dly(1 downto 0) = "00") or (WRITE_WIDTH_B = 36 and web_dly(3 downto 0) = "0000") or (WRITE_WIDTH_B = 72 and web_dly(7 downto 0) = "00000000"))) then

        -- Virtex4 feature
        if (wr_mode_b = "00" and BRAM_SIZE = 16) then
          
          if ((WRITE_WIDTH_B = 18 and not(web_dly(1 downto 0) = "00" or web_dly(1 downto 0) = "11")) or (WRITE_WIDTH_B = 36 and not(web_dly(3 downto 0) = "0000" or web_dly(3 downto 0) = "1111"))) then
			
            if (WRITE_WIDTH_B /= READ_WIDTH_B) then
              
              dob_buf(rb_width-1 downto 0) := di_x(rb_width-1 downto 0);
			    
              if (READ_WIDTH_B >= 9) then
                dopb_buf(rb_widthp-1 downto 0) := di_x(rb_widthp-1 downto 0);
			    
              end if;
              
              if (READ_WIDTH_B /= 0) then

                Write ( Message, STRING'(" Functional warning at simulation time "));
                Write ( Message, STRING'("( "));
                Write ( Message, now);
                Write ( Message, STRING'(") : "));
                Write ( Message, STRING'("X_ARAMB36_INTERNAL "));    
                Write ( Message, STRING'("( "));
                Write ( Message, STRING'(X_ARAMB36_INTERNAL'path_name));
                Write ( Message, STRING'(") "));
                Write ( Message, STRING'(" port B is in WRITE_FIRST mode with parameter WRITE_WIDTH_B = "));
                Write ( Message, INTEGER'(WRITE_WIDTH_B));
                Write ( Message, STRING'(", which is different from READ_WIDTH_B = "));
                Write ( Message, INTEGER'(READ_WIDTH_B));
                Write ( Message, STRING'(". The write will be successful however the read value of all bits on port B"));
                Write ( Message, STRING'(" is unknown until the next CLKB cycle and all bits of WEB is set to all 1s or 0s. "));
                Write ( Message, LF );            
                ASSERT FALSE REPORT Message.ALL SEVERITY warning;
                DEALLOCATE (Message);

              end if;
              
            elsif (WRITE_WIDTH_B = 18) then

              for i in 0 to 1 loop
                
                if (web_dly(i) = '0') then
                  dob_buf(((8*(i+1))-1) downto 8*i) := di_x(((8*(i+1))-1) downto 8*i);
                  dopb_buf(i downto i) := di_x(i downto i);
                end if;
                            
              end loop;

              if (READ_WIDTH_B /= 0) then

                Write ( Message, STRING'(" Functional warning at simulation time "));
                Write ( Message, STRING'("( "));
                Write ( Message, now);
                Write ( Message, STRING'(") : "));
                Write ( Message, STRING'("X_ARAMB36_INTERNAL "));    
                Write ( Message, STRING'("( "));
                Write ( Message, STRING'(X_ARAMB36_INTERNAL'path_name));
                Write ( Message, STRING'(") "));
                Write ( Message, STRING'(" port B is in WRITE_FIRST mode. The write will be successful,"));
                Write ( Message, STRING'(" however DOB shows only the enabled newly written byte(s)."));
                Write ( Message, STRING'(" The other byte values on DOB are unknown until the next CLKB cycle and"));
                Write ( Message, STRING'(" all bits of WEB is set to all 1s or 0s. "));
                Write ( Message, LF );            
                ASSERT FALSE REPORT Message.ALL SEVERITY warning;
                DEALLOCATE (Message);

              end if;
              
            elsif (WRITE_WIDTH_B = 36) then

              for i in 0 to 3 loop

                if (web_dly(i) = '0') then
                  dob_buf(((8*(i+1))-1) downto 8*i) := di_x(((8*(i+1))-1) downto 8*i);
                  dopb_buf(i downto i) := di_x(i downto i);
                end if;
                            
              end loop;

              if (READ_WIDTH_B /= 0) then
                
                Write ( Message, STRING'(" Functional warning at simulation time "));
                Write ( Message, STRING'("( "));
                Write ( Message, now);
                Write ( Message, STRING'(") : "));
                Write ( Message, STRING'("X_ARAMB36_INTERNAL "));    
                Write ( Message, STRING'("( "));
                Write ( Message, STRING'(X_ARAMB36_INTERNAL'path_name));
                Write ( Message, STRING'(") "));
                Write ( Message, STRING'(" port B is in WRITE_FIRST mode. The write will be successful,"));
                Write ( Message, STRING'(" however DOB shows only the enabled newly written byte(s)."));
                Write ( Message, STRING'(" The other byte values on DOB are unknown until the next CLKB cycle and"));
                Write ( Message, STRING'(" all bits of WEB is set to all 1s or 0s. "));
                Write ( Message, LF );            
                ASSERT FALSE REPORT Message.ALL SEVERITY warning;
                DEALLOCATE (Message);

              end if;
              
            end if;

          end if;
        end if;
        
        dob_out <= dob_buf;
        dopb_out <= dopb_buf;
      end if;
    end if;

    viol_time := 0;
    viol_type := "00";
    col_wr_wr_msg := '1';
    col_wra_rdb_msg := '1';
    col_wrb_rda_msg := '1';
    dbiterr_out <= dbiterr_out_var;
    sbiterr_out <= sbiterr_out_var;

   end if;
  end if;

  end process prcs_clk;


  outreg_clka: process (regclka_dly, gsr_dly)
    variable FIRST_TIME : boolean := true;
    
  begin  -- process outreg_clka

    if (rising_edge(regclka_dly) or rising_edge(gsr_dly) or FIRST_TIME) then

      if (DOA_REG = 1) then
        
        if (gsr_dly = '1' or FIRST_TIME) then

          dbiterr_outreg <= '0';
          sbiterr_outreg <= '0';
          
          doa_outreg(ra_width-1 downto 0) <= INIT_A_STD(ra_width-1 downto 0);

          if (ra_width >= 8) then
            dopa_outreg(ra_widthp-1 downto 0) <= INIT_A_STD((ra_width+ra_widthp)-1 downto ra_width);
          end if;

          FIRST_TIME := false;
          
        elsif (gsr_dly = '0') then
          
          dbiterr_outreg <= dbiterr_out;
          sbiterr_outreg <= sbiterr_out;

          if (regcea_dly = '1') then
            if (ssra_dly = '1') then

              doa_outreg(ra_width-1 downto 0) <= SRVAL_A_STD(ra_width-1 downto 0);

              if (ra_width >= 8) then
                dopa_outreg(ra_widthp-1 downto 0) <= SRVAL_A_STD((ra_width+ra_widthp)-1 downto ra_width);
              end if;

            elsif (ssra_dly = '0') then

              doa_outreg <= doa_out;
              dopa_outreg <= dopa_out;

            end if;     
          end if;
        end if;
      end if;

    end if;
  end process outreg_clka;
  

  cascade_a_mux: process (clka_dly, cascadeinlata_dly, addra_dly_15_reg, doa_out, dopa_out)
  begin  -- process cascade_a_mux
    
    if (rising_edge(clka_dly) or cascadeinlata_dly'event or addra_dly_15_reg'event or doa_out'event or dopa_out'event) then
      if (cascade_a(1) = '1' and addra_dly_15_reg = '1') then 
        doa_out_mux(0) <= cascadeinlata_dly;
      else
        doa_out_mux <= doa_out;
        dopa_out_mux <= dopa_out;
      end if;
    end if;

  end process cascade_a_mux;
  
  cascade_a_muxreg: process (regclka_dly, cascadeinrega_dly, addra_dly_15_reg1, doa_outreg, dopa_outreg)
  begin  -- process cascade_a_muxreg
    
    if (rising_edge(regclka_dly) or cascadeinrega_dly'event or addra_dly_15_reg1'event or doa_outreg'event or dopa_outreg'event) then
      if (cascade_a(1) = '1' and addra_dly_15_reg1 = '1') then 
        doa_outreg_mux(0) <= cascadeinrega_dly;
      else
        doa_outreg_mux <= doa_outreg;
        dopa_outreg_mux <= dopa_outreg;
      end if;
    end if;

  end process cascade_a_muxreg;
  

  outmux_clka: process (doa_out_mux, dopa_out_mux, doa_outreg_mux, dopa_outreg_mux, dbiterr_out, dbiterr_outreg, sbiterr_out, sbiterr_outreg)
  begin  -- process outmux_clka

      case DOA_REG is
        when 0 =>
                  dbiterr_out_out <= dbiterr_out;
                  sbiterr_out_out <= sbiterr_out;
                  doa_out_out <= doa_out_mux;
                  dopa_out_out <= dopa_out_mux;
        when 1 =>
                  dbiterr_out_out <= dbiterr_outreg;
                  sbiterr_out_out <= sbiterr_outreg;
                  doa_out_out <= doa_outreg_mux;
                  dopa_out_out <= dopa_outreg_mux;
        when others => assert false
                       report "Attribute Syntax Error: The allowed integer values for DOA_REG are 0 or 1."
                       severity Failure;
      end case;

  end process outmux_clka;
  

  outreg_clkb: process (regclkb_dly, gsr_dly)
    variable FIRST_TIME : boolean := true;

  begin  -- process outreg_clkb

    if (rising_edge(regclkb_dly) or rising_edge(gsr_dly) or FIRST_TIME) then

      if (DOB_REG = 1) then
        
        if (gsr_dly = '1' or FIRST_TIME) then
          dob_outreg(rb_width-1 downto 0) <= INIT_B_STD(rb_width-1 downto 0);

          if (rb_width >= 8) then
            dopb_outreg(rb_widthp-1 downto 0) <= INIT_B_STD((rb_width+rb_widthp)-1 downto rb_width);
          end if;

          FIRST_TIME := false;
          
        elsif (gsr_dly = '0') then

          if (regceb_dly = '1') then
            if (ssrb_dly = '1') then

              dob_outreg(rb_width-1 downto 0) <= SRVAL_B_STD(rb_width-1 downto 0);

              if (rb_width >= 8) then
                dopb_outreg(rb_widthp-1 downto 0) <= SRVAL_B_STD((rb_width+rb_widthp)-1 downto rb_width);
              end if;

            elsif (ssrb_dly = '0') then

              dob_outreg <= dob_out;
              dopb_outreg <= dopb_out;

            end if;     
          end if;
        end if;
      end if;
      
    end if;
  end process outreg_clkb;

  
  cascade_b_mux: process (clkb_dly, cascadeinlatb_dly, addrb_dly_15_reg, dob_out, dopb_out)
  begin  -- process cascade_b_mux
    
    if (rising_edge(clkb_dly) or cascadeinlatb_dly'event or addrb_dly_15_reg'event or dob_out'event or dopb_out'event) then
      if (cascade_b(1) = '1' and addrb_dly_15_reg = '1') then 
        dob_out_mux(0) <= cascadeinlatb_dly;
      else
        dob_out_mux <= dob_out;
        dopb_out_mux <= dopb_out;
      end if;
    end if;

  end process cascade_b_mux;
  
  cascade_b_muxreg: process (regclkb_dly, cascadeinregb_dly, addrb_dly_15_reg1, dob_outreg, dopb_outreg)
  begin  -- process cascade_b_muxreg
    
    if (rising_edge(regclkb_dly) or cascadeinregb_dly'event or addrb_dly_15_reg1'event or dob_outreg'event or dopb_outreg'event) then
      if (cascade_b(1) = '1' and addrb_dly_15_reg1 = '1') then 
        dob_outreg_mux(0) <= cascadeinregb_dly;
      else
        dob_outreg_mux <= dob_outreg;
        dopb_outreg_mux <= dopb_outreg;
      end if;
    end if;

  end process cascade_b_muxreg;

  
  outmux_clkb: process (dob_out_mux, dopb_out_mux, dob_outreg_mux, dopb_outreg_mux)
  begin  -- process outmux_clkb

      case DOB_REG is
        when 0 =>
                  dob_out_out <= dob_out_mux;
                  dopb_out_out <= dopb_out_mux;
        when 1 =>
                  dob_out_out <= dob_outreg_mux;
                  dopb_out_out <= dopb_outreg_mux;
        when others => assert false
                       report "Attribute Syntax Error: The allowed integer values for DOB_REG are 0 or 1."
                       severity Failure;
      end case;

  end process outmux_clkb;

  
  prcs_output: process (doa_out_out, dopa_out_out, dob_out_out, dopb_out_out, eccparity_out,
                        dbiterr_out_out, sbiterr_out_out, doa_out_mux(0), dob_out_mux(0),
                        doa_outreg_mux(0), dob_outreg_mux(0))
  begin  -- process prcs_output

    DOA <= doa_out_out;
    DOPA <= dopa_out_out;
    DOB <= dob_out_out;
    DOPB <= dopb_out_out;
    ECCPARITY <= eccparity_out;
    DBITERR <= dbiterr_out_out;
    SBITERR <= sbiterr_out_out;
    CASCADEOUTLATA <= doa_out_mux(0);
    CASCADEOUTLATB <= dob_out_mux(0);
    CASCADEOUTREGA <= doa_outreg_mux(0);
    CASCADEOUTREGB <= dob_outreg_mux(0);
    
  end process prcs_output;
  

end X_ARAMB36_INTERNAL_V;
-------------------------------------------------------------------------------
-- Copyright (c) 1995/2004 Xilinx, Inc.
-- All Right Reserved.
-------------------------------------------------------------------------------
--   ____  ____
--  /   /\/   /
-- /___/  \  /    Vendor : Xilinx
-- \   \   \/     Version : 10.1i
--  \   \         Description : Xilinx Functional Simulation Library Component
--  /   /                  Boundary Scan Logic Control Circuit for VIRTEX5
-- /___/   /\     Filename : X_BSCAN_VIRTEX5.v
-- \   \  /  \    Timestamp : Fri Jun 03 08:17:58 PST 2005
--  \___\/\___\
--
-- Revision:
--    08/04/05 - Initial version.
-- End Revison

----- CELL X_BSCAN_VIRTEX5 -----

library IEEE;
use IEEE.STD_LOGIC_1164.all;

library simprim;
use simprim.vcomponents.all;

entity X_BSCAN_VIRTEX5 is
  generic(
        JTAG_CHAIN : integer := 1;
        LOC : string  := "UNPLACED"
        );

  port(
    CAPTURE : out std_ulogic := 'H';
    DRCK    : out std_ulogic := 'H';
    RESET   : out std_ulogic := 'H';
    SEL     : out std_ulogic := 'L';
    SHIFT   : out std_ulogic := 'L';
    TDI     : out std_ulogic := 'L';
    UPDATE  : out std_ulogic := 'L';

    TDO     : in std_ulogic := 'X'
    );

end X_BSCAN_VIRTEX5;

architecture X_BSCAN_VIRTEX5_V of X_BSCAN_VIRTEX5 is

signal SEL_zd : std_ulogic := '0';
signal UPDATE_zd : std_ulogic := '0';

begin

--####################################################################
--#####                        Initialization                      ###
--####################################################################
  prcs_init:process
  begin
     if((JTAG_CHAIN /= 1) and (JTAG_CHAIN /= 2)  and (JTAG_CHAIN /= 3)
                                           and (JTAG_CHAIN /= 4)) then
        assert false
        report "Attribute Syntax Error: The allowed values for JTAG_CHAIN are 1, 2, 3 or 4"
        severity Failure;
     end if;
     wait;
  end process prcs_init;

-- synopsys translate_off

--####################################################################
--#####                        jtag_select                         ###
--####################################################################
  prcs_jtag_select:process (JTAG_SEL1_GLBL, JTAG_SEL2_GLBL, JTAG_SEL3_GLBL, JTAG_SEL4_GLBL)
  begin
      if(JTAG_CHAIN = 1) then
        SEL_zd <= JTAG_SEL1_GLBL;
      elsif(JTAG_CHAIN = 2) then
        SEL_zd <= JTAG_SEL2_GLBL;
      elsif(JTAG_CHAIN = 3) then
        SEL_zd <= JTAG_SEL3_GLBL;
      elsif(JTAG_CHAIN = 4) then
        SEL_zd <= JTAG_SEL4_GLBL;
     end if;

  end process prcs_jtag_select;

--####################################################################
--#####                        USER_TDO                            ###
--####################################################################
  prcs_jtag_UserTDO:process (TDO)
  begin
      if(JTAG_CHAIN = 1) then
        JTAG_USER_TDO1_GLBL <= TDO;
      elsif(JTAG_CHAIN = 2) then
        JTAG_USER_TDO2_GLBL <= TDO;
      elsif(JTAG_CHAIN = 3) then
        JTAG_USER_TDO3_GLBL <= TDO;
      elsif(JTAG_CHAIN = 4) then
        JTAG_USER_TDO4_GLBL <= TDO;
     end if;

  end process prcs_jtag_UserTDO;
--####################################################################

  CAPTURE <= JTAG_CAPTURE_GLBL;
  DRCK  <= ((SEL_zd and not JTAG_SHIFT_GLBL and not JTAG_CAPTURE_GLBL) or
            (SEL_zd and JTAG_SHIFT_GLBL and JTAG_TCK_GLBL) or
            (SEL_zd and JTAG_CAPTURE_GLBL and JTAG_TCK_GLBL));
  TDI     <= JTAG_TDI_GLBL;
  SEL     <= SEL_zd;
  SHIFT   <= JTAG_SHIFT_GLBL;
  UPDATE  <= JTAG_UPDATE_GLBL;
  RESET   <= JTAG_RESET_GLBL;

-- synopsys translate_on

end X_BSCAN_VIRTEX5_V;
-------------------------------------------------------------------------------
-- Copyright (c) 1995/2004 Xilinx, Inc.
-- All Right Reserved.
-------------------------------------------------------------------------------
--   ____  ____
--  /   /\/   /
-- /___/  \  /    Vendor : Xilinx
-- \   \   \/     Version : 10.1i
--  \   \         Description : Xilinx Timing Simulation Library Component
--  /   /                  Fast Carry Logic with Look Ahead
-- /___/   /\     Filename : X_CARRY4.vhd
-- \   \  /  \    Timestamp : Fri Mar 26 08:18:19 PST 2004
--  \___\/\___\
-- Revision:
--    04/11/05 - Initial version.
--    05/06/05 - Unused CYINT or CI pin need grounded instead of open (CR207752)
--    05/31/05 - Change pin order, remove connection check for CYINT and CI.
--    12/21/05 - Add timing path.
-- End Revision

----- CELL X_CARRY4 -----

library IEEE;
use IEEE.STD_LOGIC_1164.all;


library IEEE;
use IEEE.VITAL_Timing.all;


entity X_CARRY4 is

  generic(

      TimingChecksOn : boolean := true;
      InstancePath   : string  := "*";
      Xon            : boolean := true;
      MsgOn          : boolean := true;
      LOC            : string  := "UNPLACED";

      tipd_CI : VitalDelayType01 := (0 ps, 0 ps);
      tipd_CYINIT : VitalDelayType01 := (0 ps, 0 ps);
      tipd_DI   : VitalDelayArrayType01(3 downto 0) := (others => (0 ps, 0 ps));
      tipd_S   : VitalDelayArrayType01(3 downto 0) := (others => (0 ps, 0 ps));

      tpd_CI_CO     :     VitalDelayArrayType01 (3 downto 0)  := (others => (0 ps, 0 ps));
      tpd_CI_O     :     VitalDelayArrayType01 (3 downto 0)  := (others => (0 ps, 0 ps));
      tpd_CYINIT_CO     :     VitalDelayArrayType01 (3 downto 0)  := (others => (0 ps, 0 ps));
      tpd_CYINIT_O     :     VitalDelayArrayType01 (3 downto 0)  := (others => (0 ps, 0 ps));
      tpd_DI_CO     :     VitalDelayArrayType01 (15 downto 0)  := (others => (0 ps, 0 ps));
      tpd_DI_O     :     VitalDelayArrayType01 (15 downto 0)  := (others => (0 ps, 0 ps));
      tpd_S_CO     :     VitalDelayArrayType01 (15 downto 0)  := (others => (0 ps, 0 ps));
      tpd_S_O     :     VitalDelayArrayType01 (15 downto 0)  := (others => (0 ps, 0 ps))

      );

  port(
      CO          : out std_logic_vector(3 downto 0);
      O           : out std_logic_vector(3 downto 0);
   
      CI          : in  std_ulogic;
      CYINIT      : in  std_ulogic;
      DI          : in std_logic_vector(3 downto 0);
      S           : in std_logic_vector(3 downto 0)
      );

  attribute VITAL_LEVEL0 of
    X_CARRY4 : entity is true;

end X_CARRY4;

architecture X_CARRY4_V OF X_CARRY4 is

  attribute VITAL_LEVEL0 of
    X_CARRY4_V : architecture is true;

  signal ci_or_cyinit : std_ulogic;
  signal CO_out : std_logic_vector(3 downto 0);

  signal CI_ipd : std_ulogic := 'X';
  signal CYINIT_ipd : std_ulogic := 'X';
  signal DI_ipd : std_logic_vector(3 downto 0) := (others => '0' );
  signal S_ipd : std_logic_vector(3 downto 0) := (others => '0' );
  signal CO_zd : std_logic_vector(3 downto 0);
  signal O_zd  : std_logic_vector(3 downto 0);

begin

  ---------------------
  --  INPUT PATH DELAYs
  --------------------

  WireDelay       : block
  begin
    VitalWireDelay (CI_ipd, CI, tipd_CI);
    VitalWireDelay (CYINIT_ipd, CYINIT, tipd_CYINIT);

    DI_DELAY : for i in 3 downto 0 generate
      VitalWireDelay ( DI_ipd(i), DI(i), tipd_DI(i));
    end generate DI_DELAY;

    S_DELAY : for i in 3 downto 0 generate
      VitalWireDelay ( S_ipd(i), S(i), tipd_S(i));
    end generate S_DELAY;

  end block;

  Behaviour                 : process (CI_ipd, CYINIT_ipd, DI_ipd, S_ipd) 
    variable CO_out : std_logic_vector(3 downto 0);
    variable ci_or_cyinit : std_logic := '0';
  begin

  ci_or_cyinit := CI_ipd or CYINIT_ipd;
  if (S_ipd(0) = '1') then
     CO_out(0) := ci_or_cyinit;
  else
     CO_out(0) := DI_ipd(0);
  end if;

  if (S_ipd(1) = '1') then
     CO_out(1) := CO_out(0);
  else
     CO_out(1) := DI_ipd(1);
  end if;
 
  if (S_ipd(2) = '1') then
     CO_out(2) := CO_out(1);
  else
     CO_out(2) := DI_ipd(2);
  end if;

  if (S_ipd(3) = '1') then
     CO_out(3) := CO_out(2);
  else
     CO_out(3) := DI_ipd(3);
  end if;

  O_zd(0) <= S_ipd(0) xor ci_or_cyinit;
  O_zd(1) <= S_ipd(1) xor CO_out(0);
  O_zd(2) <= S_ipd(2) xor CO_out(1);
  O_zd(3) <= S_ipd(3) xor CO_out(2);
  CO_zd <= CO_out;
  end process Behaviour;


  VITALPathDelay_O          : process(O_zd)
    variable P_zd         : std_logic_vector(3 downto 0);
    variable P_GlitchData : VitalGlitchDataArrayType (3 downto 0);
  begin
    P_zd := O_zd;
    VitalPathDelay01 (
      OutSignal           => O(3),
      GlitchData          => P_GlitchData(3),
      OutSignalName       => "O(3)",
      OutTemp             => P_zd(3),
      Paths               => ( 0         => (DI_ipd(3)'last_event, tpd_DI_O((15-0) - 4*0), true),
                               1         => (DI_ipd(2)'last_event, tpd_DI_O((15-0) - 4*1), true),
                               2         => (DI_ipd(1)'last_event, tpd_DI_O((15-0) - 4*2), true),
                               3         => (DI_ipd(0)'last_event, tpd_DI_O((15-0) - 4*3), true),
                               4         => ( S_ipd(3)'last_event, tpd_S_O((15-0) - 4*0), true),
                               5         => ( S_ipd(2)'last_event, tpd_S_O((15-0) - 4*1), true),
                               6         => ( S_ipd(1)'last_event, tpd_S_O((15-0) - 4*2), true),
                               7         => ( S_ipd(0)'last_event, tpd_S_O((15-0) - 4*3), true),
                               8         => (CI_ipd'last_event, tpd_CI_O(3), true),
                               9         => (CYINIT_ipd'last_event, tpd_CYINIT_O(3), true)),
      Mode                => VitalTransport,
      Xon                 => Xon,
      MsgOn               => MsgOn,
      MsgSeverity         => warning);

    VitalPathDelay01 (
      OutSignal           => O(2),
      GlitchData          => P_GlitchData(2),
      OutSignalName       => "O(2)",
      OutTemp             => P_zd(2),
      Paths               => ( 0         => (DI_ipd(3)'last_event, tpd_DI_O((15-1) - 4*0), true),
                               1         => (DI_ipd(2)'last_event, tpd_DI_O((15-1) - 4*1), true),
                               2         => (DI_ipd(1)'last_event, tpd_DI_O((15-1) - 4*2), true),
                               3         => (DI_ipd(0)'last_event, tpd_DI_O((15-1) - 4*3), true),
                               4         => ( S_ipd(3)'last_event, tpd_S_O((15-1) - 4*0), true),
                               5         => ( S_ipd(2)'last_event, tpd_S_O((15-1) - 4*1), true),
                               6         => ( S_ipd(1)'last_event, tpd_S_O((15-1) - 4*2), true),
                               7         => ( S_ipd(0)'last_event, tpd_S_O((15-1) - 4*3), true),
                               8         => (CI_ipd'last_event, tpd_CI_O(2), true),
                               9         => (CYINIT_ipd'last_event, tpd_CYINIT_O(2), true)),
      Mode                => VitalTransport,
      Xon                 => Xon,
      MsgOn               => MsgOn,
      MsgSeverity         => warning);

    VitalPathDelay01 (
      OutSignal           => O(1),
      GlitchData          => P_GlitchData(1),
      OutSignalName       => "O(1)",
      OutTemp             => P_zd(1),
      Paths               => ( 0         => (DI_ipd(3)'last_event, tpd_DI_O((15-2) - 4*0), true),
                               1         => (DI_ipd(2)'last_event, tpd_DI_O((15-2) - 4*1), true),
                               2         => (DI_ipd(1)'last_event, tpd_DI_O((15-2) - 4*2), true),
                               3         => (DI_ipd(0)'last_event, tpd_DI_O((15-2) - 4*3), true),
                               4         => ( S_ipd(3)'last_event, tpd_S_O((15-2) - 4*0), true),
                               5         => ( S_ipd(2)'last_event, tpd_S_O((15-2) - 4*1), true),
                               6         => ( S_ipd(1)'last_event, tpd_S_O((15-2) - 4*2), true),
                               7         => ( S_ipd(0)'last_event, tpd_S_O((15-2) - 4*3), true),
                               8         => (CI_ipd'last_event, tpd_CI_O(1), true),
                               9         => (CYINIT_ipd'last_event, tpd_CYINIT_O(1), true)),
      Mode                => VitalTransport,
      Xon                 => Xon,
      MsgOn               => MsgOn,
      MsgSeverity         => warning);

    VitalPathDelay01 (
      OutSignal           => O(0),
      GlitchData          => P_GlitchData(0),
      OutSignalName       => "O(0)",
      OutTemp             => P_zd(0),
      Paths               => ( 0         => (DI_ipd(3)'last_event, tpd_DI_O((15-3) - 4*0), true),
                               1         => (DI_ipd(2)'last_event, tpd_DI_O((15-3) - 4*1), true),
                               2         => (DI_ipd(1)'last_event, tpd_DI_O((15-3) - 4*2), true),
                               3         => (DI_ipd(0)'last_event, tpd_DI_O((15-3) - 4*3), true),
                               4         => ( S_ipd(3)'last_event, tpd_S_O((15-3) - 4*0), true),
                               5         => ( S_ipd(2)'last_event, tpd_S_O((15-3) - 4*1), true),
                               6         => ( S_ipd(1)'last_event, tpd_S_O((15-3) - 4*2), true),
                               7         => ( S_ipd(0)'last_event, tpd_S_O((15-3) - 4*3), true),
                               8         => (CI_ipd'last_event, tpd_CI_O(0), true),
                               9         => (CYINIT_ipd'last_event, tpd_CYINIT_O(0), true)),
      Mode                => VitalTransport,
      Xon                 => Xon,
      MsgOn               => MsgOn,
      MsgSeverity         => warning);


  end process;



  VITALPathDelay_CO          : process(CO_zd)
    variable P_zd         : std_logic_vector(3 downto 0);
    variable P_GlitchData : VitalGlitchDataArrayType (3 downto 0);
  begin
    P_zd := CO_zd;
    VitalPathDelay01 (
      OutSignal           => CO(3),
      GlitchData          => P_GlitchData(3),
      OutSignalName       => "CO(3)",
      OutTemp             => P_zd(3),
      Paths               => ( 0         => (DI_ipd(3)'last_event, tpd_DI_CO((15-0) - 4*0), true),
                               1         => (DI_ipd(2)'last_event, tpd_DI_CO((15-0) - 4*1), true),
                               2         => (DI_ipd(1)'last_event, tpd_DI_CO((15-0) - 4*2), true),
                               3         => (DI_ipd(0)'last_event, tpd_DI_CO((15-0) - 4*3), true),
                               4         => ( S_ipd(3)'last_event, tpd_S_CO((15-0) - 4*0), true),
                               5         => ( S_ipd(2)'last_event, tpd_S_CO((15-0) - 4*1), true),
                               6         => ( S_ipd(1)'last_event, tpd_S_CO((15-0) - 4*2), true),
                               7         => ( S_ipd(0)'last_event, tpd_S_CO((15-0) - 4*3), true),
                               8         => (CI_ipd'last_event, tpd_CI_CO(3), true),
                               9         => (CYINIT_ipd'last_event, tpd_CYINIT_CO(3), true)),
      Mode                => VitalTransport,
      Xon                 => Xon,
      MsgOn               => MsgOn,
      MsgSeverity         => warning);

    VitalPathDelay01 (
      OutSignal           => CO(2),
      GlitchData          => P_GlitchData(2),
      OutSignalName       => "CO(2)",
      OutTemp             => P_zd(2),
      Paths               => ( 0         => (DI_ipd(3)'last_event, tpd_DI_CO((15-1) - 4*0), true),
                               1         => (DI_ipd(2)'last_event, tpd_DI_CO((15-1) - 4*1), true),
                               2         => (DI_ipd(1)'last_event, tpd_DI_CO((15-1) - 4*2), true),
                               3         => (DI_ipd(0)'last_event, tpd_DI_CO((15-1) - 4*3), true),
                               4         => ( S_ipd(3)'last_event, tpd_S_CO((15-1) - 4*0), true),
                               5         => ( S_ipd(2)'last_event, tpd_S_CO((15-1) - 4*1), true),
                               6         => ( S_ipd(1)'last_event, tpd_S_CO((15-1) - 4*2), true),
                               7         => ( S_ipd(0)'last_event, tpd_S_CO((15-1) - 4*3), true),
                               8         => (CI_ipd'last_event, tpd_CI_CO(2), true),
                               9         => (CYINIT_ipd'last_event, tpd_CYINIT_CO(2), true)),
      Mode                => VitalTransport,
      Xon                 => Xon,
      MsgOn               => MsgOn,
      MsgSeverity         => warning);

    VitalPathDelay01 (
      OutSignal           => CO(1),
      GlitchData          => P_GlitchData(1),
      OutSignalName       => "CO(1)",
      OutTemp             => P_zd(1),
      Paths               => ( 0         => (DI_ipd(3)'last_event, tpd_DI_CO((15-2) - 4*0), true),
                               1         => (DI_ipd(2)'last_event, tpd_DI_CO((15-2) - 4*1), true),
                               2         => (DI_ipd(1)'last_event, tpd_DI_CO((15-2) - 4*2), true),
                               3         => (DI_ipd(0)'last_event, tpd_DI_CO((15-2) - 4*3), true),
                               4         => ( S_ipd(3)'last_event, tpd_S_CO((15-2) - 4*0), true),
                               5         => ( S_ipd(2)'last_event, tpd_S_CO((15-2) - 4*1), true),
                               6         => ( S_ipd(1)'last_event, tpd_S_CO((15-2) - 4*2), true),
                               7         => ( S_ipd(0)'last_event, tpd_S_CO((15-2) - 4*3), true),
                               8         => (CI_ipd'last_event, tpd_CI_CO(1), true),
                               9         => (CYINIT_ipd'last_event, tpd_CYINIT_CO(1), true)),
      Mode                => VitalTransport,
      Xon                 => Xon,
      MsgOn               => MsgOn,
      MsgSeverity         => warning);

    VitalPathDelay01 (
      OutSignal           => CO(0),
      GlitchData          => P_GlitchData(0),
      OutSignalName       => "CO(0)",
      OutTemp             => P_zd(0),
      Paths               => ( 0         => (DI_ipd(3)'last_event, tpd_DI_CO((15-3) - 4*0), true),
                               1         => (DI_ipd(2)'last_event, tpd_DI_CO((15-3) - 4*1), true),
                               2         => (DI_ipd(1)'last_event, tpd_DI_CO((15-3) - 4*2), true),
                               3         => (DI_ipd(0)'last_event, tpd_DI_CO((15-3) - 4*3), true),
                               4         => ( S_ipd(3)'last_event, tpd_S_CO((15-3) - 4*0), true),
                               5         => ( S_ipd(2)'last_event, tpd_S_CO((15-3) - 4*1), true),
                               6         => ( S_ipd(1)'last_event, tpd_S_CO((15-3) - 4*2), true),
                               7         => ( S_ipd(0)'last_event, tpd_S_CO((15-3) - 4*3), true),
                               8         => (CI_ipd'last_event, tpd_CI_CO(0), true),
                               9         => (CYINIT_ipd'last_event, tpd_CYINIT_CO(0), true)),
      Mode                => VitalTransport,
      Xon                 => Xon,
      MsgOn               => MsgOn,
      MsgSeverity         => warning);


  end process;



end X_CARRY4_V;

-------------------------------------------------------------------------------
-- Copyright (c) 1995/2006 Xilinx, Inc.
-- All Right Reserved.
-------------------------------------------------------------------------------
--   ____  ____
--  /   /\/   /
-- /___/  \  /    Vendor : Xilinx
-- \   \   \/     Version : 10.1i
--  \   \         Description : Xilinx Functional Simulation Library Component
--  /   /                  Cyclic Redundancy Check 32-bit Input Simulation Model
-- /___/   /\     Filename : X_CRC32.vhd
-- \   \  /  \    Timestamp : Fri Jun 18 10:57:01 PDT 2004
--  \___\/\___\
--
-- Revision:
--  12/20/05 - Initial version.
--  12/20/05 - Added functionality
--  01/09/06 - Added Timing and LOC parameter
--  01/17/06 - Vital updates
--  08/02/06 - CR#233833- Remove GSR declaration
--  08/18/06 - CRS#421781 - CRCOUT initialized to 0 when GSR is high
--  08/16/07 - CR#446564 - Add CRCIN, data_width as part of process block sensitivity list
--  10/22/07 - CR#452418 - Add all to process sensitivity list
--  11/21/07 - CR#454853 - POLYNOMIAL is not a user attribute
-- End Revision

----- CELL X_CRC32 -----

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.STD_LOGIC_SIGNED.all;
use IEEE.STD_LOGIC_ARITH.all;

library IEEE;
use IEEE.VITAL_Timing.all;

library simprim;
use simprim.Vcomponents.all;
use simprim.VPACKAGE.all;

entity X_CRC32 is
  
  generic (
    TimingChecksOn : boolean := true;
    Xon            : boolean := true;
    InstancePath   : string  := "*";
    MsgOn          : boolean := true;
    LOC            : string  := "UNPLACED";

    CRC_INIT   : bit_vector := X"FFFFFFFF";

-----  Pin period delays
    tperiod_CRCCLK_posedge : VitalDelayType := 0.0 ns;
    
-----  Input Pin path delays
    tipd_CRCIN : VitalDelayArrayType01 (31 downto 0) := (others => (0.0 ns, 0.0 ns));
    tipd_CRCDATAVALID : VitalDelayType01 :=  (0.0 ns, 0.0 ns);
    tipd_CRCDATAWIDTH : VitalDelayArrayType01 (2 downto 0) := (others => (0.0 ns, 0.0 ns));
    tipd_CRCRESET : VitalDelayType01 :=  (0.0 ns, 0.0 ns);
    tipd_CRCCLK : VitalDelayType01 :=  (0.0 ns, 0.0 ns);
    tipd_GSR : VitalDelayType01 := (0.0 ns, 0.0 ns);

-----  clk-to-output path delays
    tpd_CRCIN_CRCOUT : VitalDelayArrayType01(31 downto 0) := (others => (0.0 ns, 0.0 ns));
    tpd_CRCRESET_CRCOUT : VitalDelayArrayType01(31 downto 0) := (others => (0.0 ns, 0.0 ns));
    tpd_CRCDATAVALID_CRCOUT : VitalDelayArrayType01(31 downto 0) := (others => (0.0 ns, 0.0 ns));
    tpd_CRCDATAWIDTH_CRCOUT : VitalDelayArrayType01(31 downto 0) := (others => (0.0 ns, 0.0 ns));

    tpd_CRCCLK_CRCOUT : VitalDelayArrayType01(31 downto 0) := (others => (0.100 ns, 0.100 ns));

-----  Setup/Hold delays
    tsetup_CRCIN_CRCCLK_posedge_posedge : VitalDelayArrayType(31 downto 0) := (others => 0.0 ns);
    tsetup_CRCIN_CRCCLK_negedge_posedge : VitalDelayArrayType(31 downto 0) := (others => 0.0 ns);
    thold_CRCIN_CRCCLK_posedge_posedge : VitalDelayArrayType(31 downto 0) := (others => 0.0 ns);
    thold_CRCIN_CRCCLK_negedge_posedge : VitalDelayArrayType(31 downto 0) := (others => 0.0 ns);
    tsetup_CRCDATAVALID_CRCCLK_posedge_posedge : VitalDelayType := 0.0 ns;
    tsetup_CRCDATAVALID_CRCCLK_negedge_posedge : VitalDelayType := 0.0 ns;
    thold_CRCDATAVALID_CRCCLK_posedge_posedge : VitalDelayType := 0.0 ns;
    thold_CRCDATAVALID_CRCCLK_negedge_posedge : VitalDelayType := 0.0 ns;
    tsetup_CRCDATAWIDTH_CRCCLK_posedge_posedge : VitalDelayArrayType(2 downto 0) := (others => 0.0 ns);
    tsetup_CRCDATAWIDTH_CRCCLK_negedge_posedge : VitalDelayArrayType(2 downto 0) := (others => 0.0 ns);
    thold_CRCDATAWIDTH_CRCCLK_posedge_posedge : VitalDelayArrayType(2 downto 0) := (others => 0.0 ns);
    thold_CRCDATAWIDTH_CRCCLK_negedge_posedge : VitalDelayArrayType(2 downto 0) := (others => 0.0 ns);
    tsetup_CRCRESET_CRCCLK_posedge_posedge : VitalDelayType := 0.0 ns;
    tsetup_CRCRESET_CRCCLK_negedge_posedge : VitalDelayType := 0.0 ns;
    thold_CRCRESET_CRCCLK_posedge_posedge : VitalDelayType := 0.0 ns;
    thold_CRCRESET_CRCCLK_negedge_posedge : VitalDelayType := 0.0 ns;

-----  Clock ticd
    ticd_CRCCLK : VitalDelayType := 0.000 ns;

----- Clock-to-pin tisd 
    tisd_CRCIN_CRCCLK : VitalDelayArrayType(31 downto 0) := (others => 0.000 ns);
    tisd_CRCDATAVALID_CRCCLK : VitalDelayType := 0.000 ns;
    tisd_CRCDATAWIDTH_CRCCLK : VitalDelayArrayType(2 downto 0) := (others => 0.000 ns);
    tisd_CRCRESET_CRCCLK : VitalDelayType := 0.000 ns;
    tisd_GSR_CRCCLK : VitalDelayType := 0.000 ns;

----- VITAL pulse width
    tpw_CRCCLK_negedge         : VitalDelayType := 0 ps;
    tpw_CRCCLK_posedge         : VitalDelayType := 0 ps
    
  );    
  port (
    CRCOUT : out std_logic_vector(31 downto 0);
  
    CRCCLK : in std_ulogic;
    CRCDATAVALID : in std_ulogic;
    CRCDATAWIDTH : in std_logic_vector(2 downto 0);
    CRCIN : in std_logic_vector(31 downto 0);
    CRCRESET : in std_ulogic
  );
end X_CRC32;
  
  architecture X_CRC32_V of X_CRC32 is
    
    signal   data_in_32 :  std_logic_vector(7 downto 0);
    signal   data_in_24 :  std_logic_vector(7 downto 0);
    signal   data_in_16 :  std_logic_vector(7 downto 0);
    signal   data_in_8  :  std_logic_vector(7 downto 0);
    signal   data_width :  std_logic_vector(2 downto 0);
    signal   data_valid :  std_ulogic;
    signal   crcd       :  std_logic_vector(31 downto 0);
    signal   crcreg     :  std_logic_vector(31 downto 0);
    
    signal   crcgen_out_32 :  std_logic_vector(31 downto 0);
    signal   crcgen_out_24 :  std_logic_vector(31 downto 0);
    signal   crcgen_out_16 :  std_logic_vector(31 downto 0);
    signal   crcgen_out_8  :  std_logic_vector(31 downto 0);
    
    signal   crc_initial : std_logic_vector(31 downto 0);
    signal   poly_val    : std_logic_vector(31 downto 0);

    signal   zero_24     : std_logic_vector(23 downto 0);
    signal   zero_16     : std_logic_vector(15 downto 0);
    signal   zero_8     : std_logic_vector(7 downto 0);

    signal   GSR_ipd  :  std_ulogic;
    signal   CRCIN_ipd  :  std_logic_vector(31 downto 0);
    signal   CRCDATAVALID_ipd  :  std_ulogic;
    signal   CRCDATAWIDTH_ipd  :  std_logic_vector(2 downto 0);
    signal   CRCRESET_ipd  :  std_ulogic;
    signal   CRCCLK_ipd  :  std_ulogic;
      
    
    signal   GSR_dly     : std_ulogic;
    signal   CRCIN_dly  :  std_logic_vector(31 downto 0);
    signal   CRCDATAVALID_dly  :  std_ulogic;
    signal   CRCDATAWIDTH_dly  :  std_logic_vector(2 downto 0);
    signal   CRCRESET_dly  :  std_ulogic;
    signal   CRCCLK_dly  :  std_ulogic;
      
    signal CRCOUT_zd : std_logic_vector (31 downto 0):= ( others => '0');
    signal Violation    : std_ulogic := '0';

    constant POLYNOMIAL : bit_vector := X"04C11DB7";

    begin

      WireDelay : block
	begin
           CRCIN_DELAY : for i in 31 downto 0 generate
              VitalWireDelay (CRCIN_ipd(i),CRCIN(i),tipd_CRCIN(i));
           end generate CRCIN_DELAY;
              VitalWireDelay (CRCDATAVALID_ipd,CRCDATAVALID,tipd_CRCDATAVALID);
           CRCDATAWIDTH_DELAY : for i in 2 downto 0 generate
              VitalWireDelay (CRCDATAWIDTH_ipd(i),CRCDATAWIDTH(i),tipd_CRCDATAWIDTH(i));
           end generate CRCDATAWIDTH_DELAY;
              VitalWireDelay (CRCRESET_ipd,CRCRESET,tipd_CRCRESET);
              VitalWireDelay (CRCCLK_ipd,CRCCLK,tipd_CRCCLK);
              VitalWireDelay (GSR_ipd,GSR,tipd_GSR);
	end block;

	SignalDelay : block
	begin
	CRCIN_DELAY : for i in 31 downto 0 generate
	VitalSignalDelay (CRCIN_dly(i),CRCIN_ipd(i),tisd_CRCIN_CRCCLK(i));
	end generate CRCIN_DELAY;
	VitalSignalDelay (CRCDATAVALID_dly,CRCDATAVALID_ipd,tisd_CRCDATAVALID_CRCCLK);
	CRCDATAWIDTH_DELAY : for i in 2 downto 0 generate
	VitalSignalDelay (CRCDATAWIDTH_dly(i),CRCDATAWIDTH_ipd(i),tisd_CRCDATAWIDTH_CRCCLK(i));
	end generate CRCDATAWIDTH_DELAY;

	VitalSignalDelay (CRCRESET_dly,CRCRESET_ipd,tisd_CRCRESET_CRCCLK);
        VitalSignalDelay (CRCCLK_dly,CRCCLK_ipd,ticd_CRCCLK);
        VitalSignalDelay (GSR_dly,GSR_ipd,tisd_GSR_CRCCLK);
        
	end block;
          
      crc_initial <= To_StdLogicVector(CRC_INIT); 
      poly_val <= To_StdLogicVector(POLYNOMIAL);
        
      zero_24 <= "000000000000000000000000";
      zero_16 <= "0000000000000000";
      zero_8 <= "00000000";

  
      OUTPUT_CALC: process(GSR_dly,crcreg)
        begin
            if(GSR_dly = '1') then
                CRCOUT_zd <=  (others => '0');
              elsif(GSR_dly = '0') then
                CRCOUT_zd <= (not(crcreg(24)) & not(crcreg(25)) & not(crcreg(26)) & not(crcreg(27)) & not(crcreg(28)) & not(crcreg(29)) & not(crcreg(30)) & not(crcreg(31)) & not(crcreg(16)) & not(crcreg(17)) & not(crcreg(18)) & not(crcreg(19)) & not(crcreg(20)) & not(crcreg(21)) & not(crcreg(22)) & not(crcreg(23)) & not(crcreg(8)) & not(crcreg(9)) & not(crcreg(10)) & not(crcreg(11)) & not(crcreg(12)) & not(crcreg(13)) & not(crcreg(14)) & not(crcreg(15)) & not(crcreg(0)) & not(crcreg(1)) & not(crcreg(2)) & not(crcreg(3)) & not(crcreg(4)) & not(crcreg(5)) & not(crcreg(6)) & not(crcreg(7)));
            end if;
       end process;

      LOCK_DATA_IN: process(CRCCLK_dly)
        begin
         if (rising_edge(CRCCLK_dly)) then
            data_in_8  <= CRCIN(31 downto 24);	
            data_in_16 <= CRCIN(23 downto 16);	
            data_in_24 <= CRCIN(15 downto 8);
            data_in_32 <= CRCIN(7 downto 0);
            data_valid <= CRCDATAVALID;
            data_width <= CRCDATAWIDTH;
      end if;
  end process;

     -- Select between CRC8, CRC16, CRC24, CRC32 based on CRCDATAWIDTH
      
      SELECT_DATA_IN: process(crcgen_out_8,crcgen_out_16,crcgen_out_24,crcgen_out_32,crcd,data_width)
	 begin
	  case data_width is
            when  "000" => crcd <= crcgen_out_8;
            when  "001" => crcd <= crcgen_out_16;
            when  "010" => crcd <= crcgen_out_24;
            when  "011" => crcd <= crcgen_out_32;
            when others => crcd <= crcgen_out_8;
          end case;
         end process;
   
   -- 32-bit CRC internal register
   
   INT_REG: process(CRCCLK_dly)
    begin
      if (rising_edge(CRCCLK_dly)) then
        if (CRCRESET_dly = '1') then
          crcreg <= crc_initial;
        elsif (data_valid /= '1') then 
          crcreg <= crcreg;
        else
          crcreg <= crcd;
        end if;
      end if;
   end process;   

   --CRC Generator Logic
   
  CRC_GEN: process(crcreg, CRCIN, data_width,data_in_8,data_in_16, data_in_24,data_in_32)
    variable   msg        :  std_logic_vector(40 downto 0);

    variable   concat_data_8 :  std_logic_vector(31 downto 0);
    variable   concat_data_16 :  std_logic_vector(31 downto 0);
    variable   concat_data_24 :  std_logic_vector(31 downto 0);
    variable   concat_data_32 :  std_logic_vector(31 downto 0);
    

    begin

      --CRC-8
        
      if (data_width = "000") then
        
        concat_data_8 := data_in_8(0) & data_in_8(1) & data_in_8(2) & data_in_8(3) & data_in_8(4) & data_in_8(5) & data_in_8(6) & data_in_8(7) & zero_24;
      
        msg(31 downto 0) := crcreg xor concat_data_8;
        msg(40 downto 0) := To_StdLogicVector((To_bitvector(msg)) sll 8);
      
        for i in 0 to 7 loop
          msg(40 downto 0) := To_StdLogicVector((To_bitvector(msg)) sll 1);
          if (msg(40) = '1') then
            msg(39 downto 8) := msg(39 downto 8) xor poly_val;
          end if;
        end loop;
        crcgen_out_8 <= msg(39 downto 8);
       
        --CRC-16
    
      elsif (data_width = "001") then

        concat_data_16 := data_in_8(0) & data_in_8(1) & data_in_8(2) & data_in_8(3) & data_in_8(4) & data_in_8(5) & data_in_8(6) & data_in_8(7) & data_in_16(0)& data_in_16(1) & data_in_16(2) & data_in_16(3) & data_in_16(4) & data_in_16(5) & data_in_16(6) & data_in_16(7) & zero_16;

        msg(31 downto 0) := crcreg xor concat_data_16;
        msg(40 downto 0) := To_StdLogicVector((To_bitvector(msg)) sll 8);
	   
        for i in 0 to 15 loop
          msg(40 downto 0) := To_StdLogicVector((To_bitvector(msg)) sll 1);
          if (msg(40) = '1') then
            msg(39 downto 8) := msg(39 downto 8) xor poly_val;
          end if;
        end loop;
        crcgen_out_16 <= msg(39 downto 8);

    --CRC-24
	
      elsif (data_width = "010") then 

        concat_data_24 := data_in_8(0) & data_in_8(1) & data_in_8(2) & data_in_8(3) & data_in_8(4) & data_in_8(5) & data_in_8(6) & data_in_8(7) & data_in_16(0) & data_in_16(1) & data_in_16(2) & data_in_16(3) & data_in_16(4) & data_in_16(5) & data_in_16(6) & data_in_16(7) & data_in_24(0) & data_in_24(1) & data_in_24(2) & data_in_24(3) & data_in_24(4) & data_in_24(5) & data_in_24(6) & data_in_24(7) & zero_8;

        msg(31 downto 0) := crcreg xor concat_data_24;
        msg(40 downto 0) := To_StdLogicVector((To_bitvector(msg)) sll 8);
	   
        for i in 0 to 23 loop
          msg(40 downto 0) := To_StdLogicVector((To_bitvector(msg)) sll 1);
          if (msg(40) = '1') then
            msg(39 downto 8) := msg(39 downto 8) xor poly_val;
          end if;
        end loop;
        crcgen_out_24 <= msg(39 downto 8);


    --CRC-32
	
      elsif (data_width = "011") then
        concat_data_32 := data_in_8(0) & data_in_8(1) & data_in_8(2) & data_in_8(3) & data_in_8(4) & data_in_8(5) & data_in_8(6) & data_in_8(7) & data_in_16(0) & data_in_16(1) & data_in_16(2) & data_in_16(3) & data_in_16(4) & data_in_16(5) & data_in_16(6) & data_in_16(7) & data_in_24(0) & data_in_24(1) & data_in_24(2) & data_in_24(3) & data_in_24(4) & data_in_24(5) & data_in_24(6) & data_in_24(7) & data_in_32(0) & data_in_32(1) & data_in_32(2) & data_in_32(3) & data_in_32(4) & data_in_32(5) & data_in_32(6) & data_in_32(7);
     
        msg(31 downto 0) := crcreg xor concat_data_32;
        msg(40 downto 0) := To_StdLogicVector((To_bitvector(msg)) sll 8);

        for i in 0 to 31 loop
          msg(40 downto 0) := To_StdLogicVector((To_bitvector(msg)) sll 1);
          if (msg(40) = '1') then
            msg(39 downto 8) := msg(39 downto 8) xor poly_val;
          end if;
        end loop;
        crcgen_out_32 <= msg(39 downto 8);
     
      end if;
    end process;
         

--####################################################################
--#####                   TIMING CHECKS & OUTPUT                 #####
--####################################################################
  prcs_tmngchk:process

       --  Pin Timing Violations (all input pins)
    variable Tviol_CRCIN0_CRCCLK_posedge : STD_ULOGIC := '0';
    variable  Tmkr_CRCIN0_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
    variable Tviol_CRCIN1_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN1_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN2_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN2_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN3_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN3_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN4_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN4_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN5_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN5_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN6_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN6_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN7_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN7_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN8_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN8_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN9_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN9_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN10_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN10_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN11_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN11_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN12_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN12_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN13_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN13_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN14_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN14_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN15_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN15_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN16_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN16_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN17_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN17_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN18_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN18_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN19_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN19_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN20_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN20_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN21_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN21_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN22_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN22_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN23_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN23_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN24_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN24_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN25_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN25_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN26_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN26_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN27_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN27_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN28_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN28_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN29_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN29_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN30_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN30_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN31_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN31_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCDATAVALID_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCDATAVALID_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCDATAWIDTH0_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCDATAWIDTH0_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCDATAWIDTH1_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCDATAWIDTH1_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCDATAWIDTH2_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCDATAWIDTH2_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCRESET_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCRESET_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;

        begin
          --  Setup/Hold Check Violations (all input pins)

       if (TimingChecksOn) then
               VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN0_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN0_CRCCLK_posedge,
	TestSignal => CRCIN_dly(0),
	TestSignalName => "CRCIN(0)",
	TestDelay => tisd_CRCIN_CRCCLK(0),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(0),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(0),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(0),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(0),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN0_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN0_CRCCLK_posedge,
	TestSignal => CRCIN_dly(0),
	TestSignalName => "CRCIN(0)",
	TestDelay => tisd_CRCIN_CRCCLK(0),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(0),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(0),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(0),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(0),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN1_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN1_CRCCLK_posedge,
	TestSignal => CRCIN_dly(1),
	TestSignalName => "CRCIN(1)",
	TestDelay => tisd_CRCIN_CRCCLK(1),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(1),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(1),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(1),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(1),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN1_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN1_CRCCLK_posedge,
	TestSignal => CRCIN_dly(1),
	TestSignalName => "CRCIN(1)",
	TestDelay => tisd_CRCIN_CRCCLK(1),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(1),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(1),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(1),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(1),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN2_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN2_CRCCLK_posedge,
	TestSignal => CRCIN_dly(2),
	TestSignalName => "CRCIN(2)",
	TestDelay => tisd_CRCIN_CRCCLK(2),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(2),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(2),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(2),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(2),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN2_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN2_CRCCLK_posedge,
	TestSignal => CRCIN_dly(2),
	TestSignalName => "CRCIN(2)",
	TestDelay => tisd_CRCIN_CRCCLK(2),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(2),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(2),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(2),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(2),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN3_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN3_CRCCLK_posedge,
	TestSignal => CRCIN_dly(3),
	TestSignalName => "CRCIN(3)",
	TestDelay => tisd_CRCIN_CRCCLK(3),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(3),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(3),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(3),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(3),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN3_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN3_CRCCLK_posedge,
	TestSignal => CRCIN_dly(3),
	TestSignalName => "CRCIN(3)",
	TestDelay => tisd_CRCIN_CRCCLK(3),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(3),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(3),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(3),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(3),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN4_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN4_CRCCLK_posedge,
	TestSignal => CRCIN_dly(4),
	TestSignalName => "CRCIN(4)",
	TestDelay => tisd_CRCIN_CRCCLK(4),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(4),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(4),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(4),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(4),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN4_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN4_CRCCLK_posedge,
	TestSignal => CRCIN_dly(4),
	TestSignalName => "CRCIN(4)",
	TestDelay => tisd_CRCIN_CRCCLK(4),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(4),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(4),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(4),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(4),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN5_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN5_CRCCLK_posedge,
	TestSignal => CRCIN_dly(5),
	TestSignalName => "CRCIN(5)",
	TestDelay => tisd_CRCIN_CRCCLK(5),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(5),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(5),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(5),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(5),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN5_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN5_CRCCLK_posedge,
	TestSignal => CRCIN_dly(5),
	TestSignalName => "CRCIN(5)",
	TestDelay => tisd_CRCIN_CRCCLK(5),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(5),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(5),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(5),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(5),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN6_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN6_CRCCLK_posedge,
	TestSignal => CRCIN_dly(6),
	TestSignalName => "CRCIN(6)",
	TestDelay => tisd_CRCIN_CRCCLK(6),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(6),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(6),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(6),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(6),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN6_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN6_CRCCLK_posedge,
	TestSignal => CRCIN_dly(6),
	TestSignalName => "CRCIN(6)",
	TestDelay => tisd_CRCIN_CRCCLK(6),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(6),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(6),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(6),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(6),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN7_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN7_CRCCLK_posedge,
	TestSignal => CRCIN_dly(7),
	TestSignalName => "CRCIN(7)",
	TestDelay => tisd_CRCIN_CRCCLK(7),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(7),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(7),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(7),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(7),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN7_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN7_CRCCLK_posedge,
	TestSignal => CRCIN_dly(7),
	TestSignalName => "CRCIN(7)",
	TestDelay => tisd_CRCIN_CRCCLK(7),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(7),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(7),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(7),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(7),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN8_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN8_CRCCLK_posedge,
	TestSignal => CRCIN_dly(8),
	TestSignalName => "CRCIN(8)",
	TestDelay => tisd_CRCIN_CRCCLK(8),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(8),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(8),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(8),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(8),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN8_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN8_CRCCLK_posedge,
	TestSignal => CRCIN_dly(8),
	TestSignalName => "CRCIN(8)",
	TestDelay => tisd_CRCIN_CRCCLK(8),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(8),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(8),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(8),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(8),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN9_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN9_CRCCLK_posedge,
	TestSignal => CRCIN_dly(9),
	TestSignalName => "CRCIN(9)",
	TestDelay => tisd_CRCIN_CRCCLK(9),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(9),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(9),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(9),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(9),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN9_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN9_CRCCLK_posedge,
	TestSignal => CRCIN_dly(9),
	TestSignalName => "CRCIN(9)",
	TestDelay => tisd_CRCIN_CRCCLK(9),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(9),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(9),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(9),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(9),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN10_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN10_CRCCLK_posedge,
	TestSignal => CRCIN_dly(10),
	TestSignalName => "CRCIN(10)",
	TestDelay => tisd_CRCIN_CRCCLK(10),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(10),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(10),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(10),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(10),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN10_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN10_CRCCLK_posedge,
	TestSignal => CRCIN_dly(10),
	TestSignalName => "CRCIN(10)",
	TestDelay => tisd_CRCIN_CRCCLK(10),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(10),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(10),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(10),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(10),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN11_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN11_CRCCLK_posedge,
	TestSignal => CRCIN_dly(11),
	TestSignalName => "CRCIN(11)",
	TestDelay => tisd_CRCIN_CRCCLK(11),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(11),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(11),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(11),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(11),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN11_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN11_CRCCLK_posedge,
	TestSignal => CRCIN_dly(11),
	TestSignalName => "CRCIN(11)",
	TestDelay => tisd_CRCIN_CRCCLK(11),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(11),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(11),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(11),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(11),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN12_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN12_CRCCLK_posedge,
	TestSignal => CRCIN_dly(12),
	TestSignalName => "CRCIN(12)",
	TestDelay => tisd_CRCIN_CRCCLK(12),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(12),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(12),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(12),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(12),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN12_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN12_CRCCLK_posedge,
	TestSignal => CRCIN_dly(12),
	TestSignalName => "CRCIN(12)",
	TestDelay => tisd_CRCIN_CRCCLK(12),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(12),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(12),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(12),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(12),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN13_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN13_CRCCLK_posedge,
	TestSignal => CRCIN_dly(13),
	TestSignalName => "CRCIN(13)",
	TestDelay => tisd_CRCIN_CRCCLK(13),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(13),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(13),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(13),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(13),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN13_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN13_CRCCLK_posedge,
	TestSignal => CRCIN_dly(13),
	TestSignalName => "CRCIN(13)",
	TestDelay => tisd_CRCIN_CRCCLK(13),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(13),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(13),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(13),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(13),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN14_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN14_CRCCLK_posedge,
	TestSignal => CRCIN_dly(14),
	TestSignalName => "CRCIN(14)",
	TestDelay => tisd_CRCIN_CRCCLK(14),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(14),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(14),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(14),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(14),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN14_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN14_CRCCLK_posedge,
	TestSignal => CRCIN_dly(14),
	TestSignalName => "CRCIN(14)",
	TestDelay => tisd_CRCIN_CRCCLK(14),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(14),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(14),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(14),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(14),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN15_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN15_CRCCLK_posedge,
	TestSignal => CRCIN_dly(15),
	TestSignalName => "CRCIN(15)",
	TestDelay => tisd_CRCIN_CRCCLK(15),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(15),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(15),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(15),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(15),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN15_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN15_CRCCLK_posedge,
	TestSignal => CRCIN_dly(15),
	TestSignalName => "CRCIN(15)",
	TestDelay => tisd_CRCIN_CRCCLK(15),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(15),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(15),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(15),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(15),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN16_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN16_CRCCLK_posedge,
	TestSignal => CRCIN_dly(16),
	TestSignalName => "CRCIN(16)",
	TestDelay => tisd_CRCIN_CRCCLK(16),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(16),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(16),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(16),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(16),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN16_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN16_CRCCLK_posedge,
	TestSignal => CRCIN_dly(16),
	TestSignalName => "CRCIN(16)",
	TestDelay => tisd_CRCIN_CRCCLK(16),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(16),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(16),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(16),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(16),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN17_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN17_CRCCLK_posedge,
	TestSignal => CRCIN_dly(17),
	TestSignalName => "CRCIN(17)",
	TestDelay => tisd_CRCIN_CRCCLK(17),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(17),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(17),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(17),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(17),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN17_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN17_CRCCLK_posedge,
	TestSignal => CRCIN_dly(17),
	TestSignalName => "CRCIN(17)",
	TestDelay => tisd_CRCIN_CRCCLK(17),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(17),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(17),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(17),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(17),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN18_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN18_CRCCLK_posedge,
	TestSignal => CRCIN_dly(18),
	TestSignalName => "CRCIN(18)",
	TestDelay => tisd_CRCIN_CRCCLK(18),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(18),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(18),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(18),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(18),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN18_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN18_CRCCLK_posedge,
	TestSignal => CRCIN_dly(18),
	TestSignalName => "CRCIN(18)",
	TestDelay => tisd_CRCIN_CRCCLK(18),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(18),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(18),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(18),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(18),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN19_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN19_CRCCLK_posedge,
	TestSignal => CRCIN_dly(19),
	TestSignalName => "CRCIN(19)",
	TestDelay => tisd_CRCIN_CRCCLK(19),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(19),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(19),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(19),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(19),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN19_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN19_CRCCLK_posedge,
	TestSignal => CRCIN_dly(19),
	TestSignalName => "CRCIN(19)",
	TestDelay => tisd_CRCIN_CRCCLK(19),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(19),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(19),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(19),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(19),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN20_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN20_CRCCLK_posedge,
	TestSignal => CRCIN_dly(20),
	TestSignalName => "CRCIN(20)",
	TestDelay => tisd_CRCIN_CRCCLK(20),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(20),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(20),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(20),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(20),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN20_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN20_CRCCLK_posedge,
	TestSignal => CRCIN_dly(20),
	TestSignalName => "CRCIN(20)",
	TestDelay => tisd_CRCIN_CRCCLK(20),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(20),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(20),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(20),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(20),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN21_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN21_CRCCLK_posedge,
	TestSignal => CRCIN_dly(21),
	TestSignalName => "CRCIN(21)",
	TestDelay => tisd_CRCIN_CRCCLK(21),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(21),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(21),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(21),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(21),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN21_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN21_CRCCLK_posedge,
	TestSignal => CRCIN_dly(21),
	TestSignalName => "CRCIN(21)",
	TestDelay => tisd_CRCIN_CRCCLK(21),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(21),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(21),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(21),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(21),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN22_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN22_CRCCLK_posedge,
	TestSignal => CRCIN_dly(22),
	TestSignalName => "CRCIN(22)",
	TestDelay => tisd_CRCIN_CRCCLK(22),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(22),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(22),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(22),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(22),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN22_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN22_CRCCLK_posedge,
	TestSignal => CRCIN_dly(22),
	TestSignalName => "CRCIN(22)",
	TestDelay => tisd_CRCIN_CRCCLK(22),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(22),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(22),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(22),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(22),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN23_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN23_CRCCLK_posedge,
	TestSignal => CRCIN_dly(23),
	TestSignalName => "CRCIN(23)",
	TestDelay => tisd_CRCIN_CRCCLK(23),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(23),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(23),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(23),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(23),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN23_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN23_CRCCLK_posedge,
	TestSignal => CRCIN_dly(23),
	TestSignalName => "CRCIN(23)",
	TestDelay => tisd_CRCIN_CRCCLK(23),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(23),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(23),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(23),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(23),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN24_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN24_CRCCLK_posedge,
	TestSignal => CRCIN_dly(24),
	TestSignalName => "CRCIN(24)",
	TestDelay => tisd_CRCIN_CRCCLK(24),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(24),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(24),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(24),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(24),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN24_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN24_CRCCLK_posedge,
	TestSignal => CRCIN_dly(24),
	TestSignalName => "CRCIN(24)",
	TestDelay => tisd_CRCIN_CRCCLK(24),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(24),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(24),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(24),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(24),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN25_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN25_CRCCLK_posedge,
	TestSignal => CRCIN_dly(25),
	TestSignalName => "CRCIN(25)",
	TestDelay => tisd_CRCIN_CRCCLK(25),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(25),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(25),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(25),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(25),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN25_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN25_CRCCLK_posedge,
	TestSignal => CRCIN_dly(25),
	TestSignalName => "CRCIN(25)",
	TestDelay => tisd_CRCIN_CRCCLK(25),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(25),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(25),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(25),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(25),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN26_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN26_CRCCLK_posedge,
	TestSignal => CRCIN_dly(26),
	TestSignalName => "CRCIN(26)",
	TestDelay => tisd_CRCIN_CRCCLK(26),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(26),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(26),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(26),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(26),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN26_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN26_CRCCLK_posedge,
	TestSignal => CRCIN_dly(26),
	TestSignalName => "CRCIN(26)",
	TestDelay => tisd_CRCIN_CRCCLK(26),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(26),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(26),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(26),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(26),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN27_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN27_CRCCLK_posedge,
	TestSignal => CRCIN_dly(27),
	TestSignalName => "CRCIN(27)",
	TestDelay => tisd_CRCIN_CRCCLK(27),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(27),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(27),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(27),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(27),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN27_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN27_CRCCLK_posedge,
	TestSignal => CRCIN_dly(27),
	TestSignalName => "CRCIN(27)",
	TestDelay => tisd_CRCIN_CRCCLK(27),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(27),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(27),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(27),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(27),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN28_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN28_CRCCLK_posedge,
	TestSignal => CRCIN_dly(28),
	TestSignalName => "CRCIN(28)",
	TestDelay => tisd_CRCIN_CRCCLK(28),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(28),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(28),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(28),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(28),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN28_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN28_CRCCLK_posedge,
	TestSignal => CRCIN_dly(28),
	TestSignalName => "CRCIN(28)",
	TestDelay => tisd_CRCIN_CRCCLK(28),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(28),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(28),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(28),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(28),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN29_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN29_CRCCLK_posedge,
	TestSignal => CRCIN_dly(29),
	TestSignalName => "CRCIN(29)",
	TestDelay => tisd_CRCIN_CRCCLK(29),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(29),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(29),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(29),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(29),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN29_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN29_CRCCLK_posedge,
	TestSignal => CRCIN_dly(29),
	TestSignalName => "CRCIN(29)",
	TestDelay => tisd_CRCIN_CRCCLK(29),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(29),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(29),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(29),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(29),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN30_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN30_CRCCLK_posedge,
	TestSignal => CRCIN_dly(30),
	TestSignalName => "CRCIN(30)",
	TestDelay => tisd_CRCIN_CRCCLK(30),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(30),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(30),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(30),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(30),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN30_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN30_CRCCLK_posedge,
	TestSignal => CRCIN_dly(30),
	TestSignalName => "CRCIN(30)",
	TestDelay => tisd_CRCIN_CRCCLK(30),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(30),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(30),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(30),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(30),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN31_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN31_CRCCLK_posedge,
	TestSignal => CRCIN_dly(31),
	TestSignalName => "CRCIN(31)",
	TestDelay => tisd_CRCIN_CRCCLK(31),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(31),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(31),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(31),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(31),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN31_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN31_CRCCLK_posedge,
	TestSignal => CRCIN_dly(31),
	TestSignalName => "CRCIN(31)",
	TestDelay => tisd_CRCIN_CRCCLK(31),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(31),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(31),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(31),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(31),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation      => Tviol_CRCDATAVALID_CRCCLK_posedge,
	TimingData     => Tmkr_CRCDATAVALID_CRCCLK_posedge,
	TestSignal     => CRCDATAVALID,
	TestSignalName => "CRCDATAVALID",
	TestDelay      => 0 ns,
	RefSignal => CRCCLK_dly,
	RefSignalName  => "CRCCLK",
	RefDelay       => 0 ns,
	SetupHigh      => tsetup_CRCDATAVALID_CRCCLK_posedge_posedge,
	SetupLow       => tsetup_CRCDATAVALID_CRCCLK_negedge_posedge,
	HoldLow        => thold_CRCDATAVALID_CRCCLK_posedge_posedge,
	HoldHigh       => thold_CRCDATAVALID_CRCCLK_negedge_posedge,
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation      => Tviol_CRCDATAVALID_CRCCLK_posedge,
	TimingData     => Tmkr_CRCDATAVALID_CRCCLK_posedge,
	TestSignal     => CRCDATAVALID,
	TestSignalName => "CRCDATAVALID",
	TestDelay      => 0 ns,
	RefSignal => CRCCLK_dly,
	RefSignalName  => "CRCCLK",
	RefDelay       => 0 ns,
	SetupHigh      => tsetup_CRCDATAVALID_CRCCLK_posedge_posedge,
	SetupLow       => tsetup_CRCDATAVALID_CRCCLK_negedge_posedge,
	HoldLow        => thold_CRCDATAVALID_CRCCLK_posedge_posedge,
	HoldHigh       => thold_CRCDATAVALID_CRCCLK_negedge_posedge,
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCDATAWIDTH0_CRCCLK_posedge,
	TimingData => Tmkr_CRCDATAWIDTH0_CRCCLK_posedge,
	TestSignal => CRCDATAWIDTH_dly(0),
	TestSignalName => "CRCDATAWIDTH(0)",
	TestDelay => tisd_CRCDATAWIDTH_CRCCLK(0),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCDATAWIDTH_CRCCLK_posedge_posedge(0),
	SetupLow => tsetup_CRCDATAWIDTH_CRCCLK_negedge_posedge(0),
	HoldLow => thold_CRCDATAWIDTH_CRCCLK_posedge_posedge(0),
	HoldHigh => thold_CRCDATAWIDTH_CRCCLK_negedge_posedge(0),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCDATAWIDTH0_CRCCLK_posedge,
	TimingData => Tmkr_CRCDATAWIDTH0_CRCCLK_posedge,
	TestSignal => CRCDATAWIDTH_dly(0),
	TestSignalName => "CRCDATAWIDTH(0)",
	TestDelay => tisd_CRCDATAWIDTH_CRCCLK(0),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCDATAWIDTH_CRCCLK_posedge_posedge(0),
	SetupLow => tsetup_CRCDATAWIDTH_CRCCLK_negedge_posedge(0),
	HoldLow => thold_CRCDATAWIDTH_CRCCLK_posedge_posedge(0),
	HoldHigh => thold_CRCDATAWIDTH_CRCCLK_negedge_posedge(0),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCDATAWIDTH1_CRCCLK_posedge,
	TimingData => Tmkr_CRCDATAWIDTH1_CRCCLK_posedge,
	TestSignal => CRCDATAWIDTH_dly(1),
	TestSignalName => "CRCDATAWIDTH(1)",
	TestDelay => tisd_CRCDATAWIDTH_CRCCLK(1),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCDATAWIDTH_CRCCLK_posedge_posedge(1),
	SetupLow => tsetup_CRCDATAWIDTH_CRCCLK_negedge_posedge(1),
	HoldLow => thold_CRCDATAWIDTH_CRCCLK_posedge_posedge(1),
	HoldHigh => thold_CRCDATAWIDTH_CRCCLK_negedge_posedge(1),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCDATAWIDTH1_CRCCLK_posedge,
	TimingData => Tmkr_CRCDATAWIDTH1_CRCCLK_posedge,
	TestSignal => CRCDATAWIDTH_dly(1),
	TestSignalName => "CRCDATAWIDTH(1)",
	TestDelay => tisd_CRCDATAWIDTH_CRCCLK(1),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCDATAWIDTH_CRCCLK_posedge_posedge(1),
	SetupLow => tsetup_CRCDATAWIDTH_CRCCLK_negedge_posedge(1),
	HoldLow => thold_CRCDATAWIDTH_CRCCLK_posedge_posedge(1),
	HoldHigh => thold_CRCDATAWIDTH_CRCCLK_negedge_posedge(1),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCDATAWIDTH2_CRCCLK_posedge,
	TimingData => Tmkr_CRCDATAWIDTH2_CRCCLK_posedge,
	TestSignal => CRCDATAWIDTH_dly(2),
	TestSignalName => "CRCDATAWIDTH(2)",
	TestDelay => tisd_CRCDATAWIDTH_CRCCLK(2),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCDATAWIDTH_CRCCLK_posedge_posedge(2),
	SetupLow => tsetup_CRCDATAWIDTH_CRCCLK_negedge_posedge(2),
	HoldLow => thold_CRCDATAWIDTH_CRCCLK_posedge_posedge(2),
	HoldHigh => thold_CRCDATAWIDTH_CRCCLK_negedge_posedge(2),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCDATAWIDTH2_CRCCLK_posedge,
	TimingData => Tmkr_CRCDATAWIDTH2_CRCCLK_posedge,
	TestSignal => CRCDATAWIDTH_dly(2),
	TestSignalName => "CRCDATAWIDTH(2)",
	TestDelay => tisd_CRCDATAWIDTH_CRCCLK(2),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCDATAWIDTH_CRCCLK_posedge_posedge(2),
	SetupLow => tsetup_CRCDATAWIDTH_CRCCLK_negedge_posedge(2),
	HoldLow => thold_CRCDATAWIDTH_CRCCLK_posedge_posedge(2),
	HoldHigh => thold_CRCDATAWIDTH_CRCCLK_negedge_posedge(2),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation      => Tviol_CRCRESET_CRCCLK_posedge,
	TimingData     => Tmkr_CRCRESET_CRCCLK_posedge,
	TestSignal     => CRCRESET,
	TestSignalName => "CRCRESET",
	TestDelay      => 0 ns,
	RefSignal => CRCCLK_dly,
	RefSignalName  => "CRCCLK",
	RefDelay       => 0 ns,
	SetupHigh      => tsetup_CRCRESET_CRCCLK_posedge_posedge,
	SetupLow       => tsetup_CRCRESET_CRCCLK_negedge_posedge,
	HoldLow        => thold_CRCRESET_CRCCLK_posedge_posedge,
	HoldHigh       => thold_CRCRESET_CRCCLK_negedge_posedge,
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation      => Tviol_CRCRESET_CRCCLK_posedge,
	TimingData     => Tmkr_CRCRESET_CRCCLK_posedge,
	TestSignal     => CRCRESET,
	TestSignalName => "CRCRESET",
	TestDelay      => 0 ns,
	RefSignal => CRCCLK_dly,
	RefSignalName  => "CRCCLK",
	RefDelay       => 0 ns,
	SetupHigh      => tsetup_CRCRESET_CRCCLK_posedge_posedge,
	SetupLow       => tsetup_CRCRESET_CRCCLK_negedge_posedge,
	HoldLow        => thold_CRCRESET_CRCCLK_posedge_posedge,
	HoldHigh       => thold_CRCRESET_CRCCLK_negedge_posedge,
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC32",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);

       end if;
-- End of (TimingChecksOn)
        

        Violation <= Tviol_CRCIN0_CRCCLK_posedge or Tviol_CRCIN1_CRCCLK_posedge or Tviol_CRCIN2_CRCCLK_posedge or Tviol_CRCIN3_CRCCLK_posedge or  Tviol_CRCIN4_CRCCLK_posedge or Tviol_CRCIN5_CRCCLK_posedge or Tviol_CRCIN6_CRCCLK_posedge or Tviol_CRCIN7_CRCCLK_posedge or Tviol_CRCIN8_CRCCLK_posedge or Tviol_CRCIN9_CRCCLK_posedge or Tviol_CRCIN10_CRCCLK_posedge or Tviol_CRCIN11_CRCCLK_posedge or Tviol_CRCIN12_CRCCLK_posedge or Tviol_CRCIN13_CRCCLK_posedge or Tviol_CRCIN14_CRCCLK_posedge or Tviol_CRCIN15_CRCCLK_posedge or Tviol_CRCIN16_CRCCLK_posedge or Tviol_CRCIN17_CRCCLK_posedge or Tviol_CRCIN18_CRCCLK_posedge or Tviol_CRCIN19_CRCCLK_posedge or Tviol_CRCIN20_CRCCLK_posedge or Tviol_CRCIN21_CRCCLK_posedge or Tviol_CRCIN22_CRCCLK_posedge or Tviol_CRCIN23_CRCCLK_posedge or Tviol_CRCIN24_CRCCLK_posedge or Tviol_CRCIN25_CRCCLK_posedge or Tviol_CRCIN26_CRCCLK_posedge or Tviol_CRCIN27_CRCCLK_posedge or Tviol_CRCIN28_CRCCLK_posedge or Tviol_CRCIN29_CRCCLK_posedge or Tviol_CRCIN30_CRCCLK_posedge or Tviol_CRCIN31_CRCCLK_posedge or Tviol_CRCRESET_CRCCLK_posedge or Tviol_CRCDATAWIDTH0_CRCCLK_posedge or Tviol_CRCDATAWIDTH1_CRCCLK_posedge or Tviol_CRCDATAWIDTH2_CRCCLK_posedge or Tviol_CRCDATAVALID_CRCCLK_posedge;
          
          

        --  Wait signal (input/output pins)
   wait on
	CRCIN_dly,
	CRCDATAVALID_dly,
	CRCDATAWIDTH_dly,
	CRCRESET_dly,
	CRCCLK_dly;

     end process prcs_tmngchk;
        
        
        
 --####################################################################
--#####                           OUTPUT                         #####
--####################################################################
  prcs_output:process        

--  Output-to-Clock path delay
    --  Output Pin glitch declaration
	variable  CRCOUT0_GlitchData : VitalGlitchDataType;
	variable  CRCOUT1_GlitchData : VitalGlitchDataType;
	variable  CRCOUT2_GlitchData : VitalGlitchDataType;
	variable  CRCOUT3_GlitchData : VitalGlitchDataType;
	variable  CRCOUT4_GlitchData : VitalGlitchDataType;
	variable  CRCOUT5_GlitchData : VitalGlitchDataType;
	variable  CRCOUT6_GlitchData : VitalGlitchDataType;
	variable  CRCOUT7_GlitchData : VitalGlitchDataType;
	variable  CRCOUT8_GlitchData : VitalGlitchDataType;
	variable  CRCOUT9_GlitchData : VitalGlitchDataType;
	variable  CRCOUT10_GlitchData : VitalGlitchDataType;
	variable  CRCOUT11_GlitchData : VitalGlitchDataType;
	variable  CRCOUT12_GlitchData : VitalGlitchDataType;
	variable  CRCOUT13_GlitchData : VitalGlitchDataType;
	variable  CRCOUT14_GlitchData : VitalGlitchDataType;
	variable  CRCOUT15_GlitchData : VitalGlitchDataType;
	variable  CRCOUT16_GlitchData : VitalGlitchDataType;
	variable  CRCOUT17_GlitchData : VitalGlitchDataType;
	variable  CRCOUT18_GlitchData : VitalGlitchDataType;
	variable  CRCOUT19_GlitchData : VitalGlitchDataType;
	variable  CRCOUT20_GlitchData : VitalGlitchDataType;
	variable  CRCOUT21_GlitchData : VitalGlitchDataType;
	variable  CRCOUT22_GlitchData : VitalGlitchDataType;
	variable  CRCOUT23_GlitchData : VitalGlitchDataType;
	variable  CRCOUT24_GlitchData : VitalGlitchDataType;
	variable  CRCOUT25_GlitchData : VitalGlitchDataType;
	variable  CRCOUT26_GlitchData : VitalGlitchDataType;
	variable  CRCOUT27_GlitchData : VitalGlitchDataType;
	variable  CRCOUT28_GlitchData : VitalGlitchDataType;
	variable  CRCOUT29_GlitchData : VitalGlitchDataType;
	variable  CRCOUT30_GlitchData : VitalGlitchDataType;
	variable  CRCOUT31_GlitchData : VitalGlitchDataType;
        variable CRCOUT_viol : std_logic_vector (31 downto 0);

  begin
    if (Violation = 'X') then
      CRCOUT_viol := (others => 'X');
    else
      CRCOUT_viol := CRCOUT_zd;
    end if;
            
           
    VitalPathDelay01
	(
	OutSignal     => CRCOUT(0),
	GlitchData    => CRCOUT0_GlitchData,
	OutSignalName => "CRCOUT(0)",
	OutTemp       => CRCOUT_viol(0),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(0),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(1),
	GlitchData    => CRCOUT1_GlitchData,
	OutSignalName => "CRCOUT(1)",
	OutTemp       => CRCOUT_viol(1),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(1),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(2),
	GlitchData    => CRCOUT2_GlitchData,
	OutSignalName => "CRCOUT(2)",
	OutTemp       => CRCOUT_viol(2),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(2),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(3),
	GlitchData    => CRCOUT3_GlitchData,
	OutSignalName => "CRCOUT(3)",
	OutTemp       => CRCOUT_viol(3),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(3),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(4),
	GlitchData    => CRCOUT4_GlitchData,
	OutSignalName => "CRCOUT(4)",
	OutTemp       => CRCOUT_viol(4),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(4),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(5),
	GlitchData    => CRCOUT5_GlitchData,
	OutSignalName => "CRCOUT(5)",
	OutTemp       => CRCOUT_viol(5),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(5),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(6),
	GlitchData    => CRCOUT6_GlitchData,
	OutSignalName => "CRCOUT(6)",
	OutTemp       => CRCOUT_viol(6),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(6),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(7),
	GlitchData    => CRCOUT7_GlitchData,
	OutSignalName => "CRCOUT(7)",
	OutTemp       => CRCOUT_viol(7),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(7),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(8),
	GlitchData    => CRCOUT8_GlitchData,
	OutSignalName => "CRCOUT(8)",
	OutTemp       => CRCOUT_viol(8),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(8),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(9),
	GlitchData    => CRCOUT9_GlitchData,
	OutSignalName => "CRCOUT(9)",
	OutTemp       => CRCOUT_viol(9),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(9),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(10),
	GlitchData    => CRCOUT10_GlitchData,
	OutSignalName => "CRCOUT(10)",
	OutTemp       => CRCOUT_viol(10),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(10),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(11),
	GlitchData    => CRCOUT11_GlitchData,
	OutSignalName => "CRCOUT(11)",
	OutTemp       => CRCOUT_viol(11),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(11),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(12),
	GlitchData    => CRCOUT12_GlitchData,
	OutSignalName => "CRCOUT(12)",
	OutTemp       => CRCOUT_viol(12),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(12),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(13),
	GlitchData    => CRCOUT13_GlitchData,
	OutSignalName => "CRCOUT(13)",
	OutTemp       => CRCOUT_viol(13),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(13),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(14),
	GlitchData    => CRCOUT14_GlitchData,
	OutSignalName => "CRCOUT(14)",
	OutTemp       => CRCOUT_viol(14),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(14),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(15),
	GlitchData    => CRCOUT15_GlitchData,
	OutSignalName => "CRCOUT(15)",
	OutTemp       => CRCOUT_viol(15),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(15),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(16),
	GlitchData    => CRCOUT16_GlitchData,
	OutSignalName => "CRCOUT(16)",
	OutTemp       => CRCOUT_viol(16),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(16),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(17),
	GlitchData    => CRCOUT17_GlitchData,
	OutSignalName => "CRCOUT(17)",
	OutTemp       => CRCOUT_viol(17),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(17),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(18),
	GlitchData    => CRCOUT18_GlitchData,
	OutSignalName => "CRCOUT(18)",
	OutTemp       => CRCOUT_viol(18),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(18),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(19),
	GlitchData    => CRCOUT19_GlitchData,
	OutSignalName => "CRCOUT(19)",
	OutTemp       => CRCOUT_viol(19),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(19),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(20),
	GlitchData    => CRCOUT20_GlitchData,
	OutSignalName => "CRCOUT(20)",
	OutTemp       => CRCOUT_viol(20),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(20),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(21),
	GlitchData    => CRCOUT21_GlitchData,
	OutSignalName => "CRCOUT(21)",
	OutTemp       => CRCOUT_viol(21),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(21),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(22),
	GlitchData    => CRCOUT22_GlitchData,
	OutSignalName => "CRCOUT(22)",
	OutTemp       => CRCOUT_viol(22),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(22),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(23),
	GlitchData    => CRCOUT23_GlitchData,
	OutSignalName => "CRCOUT(23)",
	OutTemp       => CRCOUT_viol(23),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(23),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(24),
	GlitchData    => CRCOUT24_GlitchData,
	OutSignalName => "CRCOUT(24)",
	OutTemp       => CRCOUT_viol(24),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(24),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(25),
	GlitchData    => CRCOUT25_GlitchData,
	OutSignalName => "CRCOUT(25)",
	OutTemp       => CRCOUT_viol(25),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(25),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(26),
	GlitchData    => CRCOUT26_GlitchData,
	OutSignalName => "CRCOUT(26)",
	OutTemp       => CRCOUT_viol(26),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(26),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(27),
	GlitchData    => CRCOUT27_GlitchData,
	OutSignalName => "CRCOUT(27)",
	OutTemp       => CRCOUT_viol(27),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(27),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(28),
	GlitchData    => CRCOUT28_GlitchData,
	OutSignalName => "CRCOUT(28)",
	OutTemp       => CRCOUT_viol(28),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(28),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(29),
	GlitchData    => CRCOUT29_GlitchData,
	OutSignalName => "CRCOUT(29)",
	OutTemp       => CRCOUT_viol(29),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(29),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(30),
	GlitchData    => CRCOUT30_GlitchData,
	OutSignalName => "CRCOUT(30)",
	OutTemp       => CRCOUT_viol(30),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(30),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(31),
	GlitchData    => CRCOUT31_GlitchData,
	OutSignalName => "CRCOUT(31)",
	OutTemp       => CRCOUT_viol(31),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(31),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
    
    --  Wait signal (input/output pins)
   wait on
     Violation,
     CRCOUT_zd;
    
  end process;

        
end X_CRC32_V;
-------------------------------------------------------------------------------
-- Copyright (c) 1995/2006 Xilinx, Inc.
-- All Right Reserved.
-------------------------------------------------------------------------------
--   ____  ____
--  /   /\/   /
-- /___/  \  /    Vendor : Xilinx
-- \   \   \/     Version : 10.1i
--  \   \         Description : Xilinx Functional Simulation Library Component
--  /   /                  Cyclic Redundancy Check 64-bit Input Simulation Model
-- /___/   /\     Filename : X_CRC64.vhd
-- \   \  /  \    Timestamp : Fri Jun 18 10:57:01 PDT 2004
--  \___\/\___\
--
-- Revision:
--  12/20/05 - Initial version.
--  12/20/05 - Added functionality
--  01/17/06 - Vital updates
--  08/02/06 - CR#233833- Remove GSR declaration
--  08/18/06 - CRS#421781 - CRCOUT initialized to 0 when GSR is high
--  08/16/07 - CR#446564 - Add CRCIN, data_width as part of process block sensitivity list
--  10/22/07 - CR#452418 - Add all to process sensitivity list
--  11/21/07 - CR#454853 - POLYNOMIAL is not a user attribute
-- End Revision

----- CELL X_CRC64 -----

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.STD_LOGIC_SIGNED.all;
use IEEE.STD_LOGIC_ARITH.all;

library IEEE;
use IEEE.VITAL_Timing.all;

library simprim;
use simprim.Vcomponents.all;
use simprim.VPACKAGE.all;

entity X_CRC64 is
  
 generic (
    TimingChecksOn : boolean := true;
    Xon            : boolean := true;
    InstancePath   : string  := "*";
    MsgOn          : boolean := true;
    LOC            : string  := "UNPLACED";

    CRC_INIT   : bit_vector := X"FFFFFFFF";

----- VITAL input wire delays
    tperiod_CRCCLK_posedge : VitalDelayType := 0.0 ns;

-----  Input Pin path delays
    tipd_CRCIN : VitalDelayArrayType01 (63 downto 0) := (others => (0.0 ns, 0.0 ns));
    tipd_CRCDATAVALID : VitalDelayType01 :=  (0.0 ns, 0.0 ns);
    tipd_CRCDATAWIDTH : VitalDelayArrayType01 (2 downto 0) := (others => (0.0 ns, 0.0 ns));
    tipd_CRCRESET : VitalDelayType01 :=  (0.0 ns, 0.0 ns);
    tipd_CRCCLK : VitalDelayType01 :=  (0.0 ns, 0.0 ns);
    tipd_GSR : VitalDelayType01 := (0.0 ns, 0.0 ns);

-----  clk-to-output path delays
    tpd_CRCIN_CRCOUT : VitalDelayArrayType01(63 downto 0) := (others => (0.0 ns, 0.0 ns));
    tpd_CRCRESET_CRCOUT : VitalDelayArrayType01(31 downto 0) := (others => (0.0 ns, 0.0 ns));
    tpd_CRCDATAVALID_CRCOUT : VitalDelayArrayType01(31 downto 0) := (others => (0.0 ns, 0.0 ns));
    tpd_CRCDATAWIDTH_CRCOUT : VitalDelayArrayType01(31 downto 0) := (others => (0.0 ns, 0.0 ns));

    tpd_CRCCLK_CRCOUT : VitalDelayArrayType01(31 downto 0) := (others => (0.100 ns, 0.100 ns));

-----  Setup/Hold delays
    tsetup_CRCIN_CRCCLK_posedge_posedge : VitalDelayArrayType(63 downto 0) := (others => 0.0 ns);
    tsetup_CRCIN_CRCCLK_negedge_posedge : VitalDelayArrayType(63 downto 0) := (others => 0.0 ns);
    thold_CRCIN_CRCCLK_posedge_posedge : VitalDelayArrayType(63 downto 0) := (others => 0.0 ns);
    thold_CRCIN_CRCCLK_negedge_posedge : VitalDelayArrayType(63 downto 0) := (others => 0.0 ns);
    tsetup_CRCDATAVALID_CRCCLK_posedge_posedge : VitalDelayType := 0.0 ns;
    tsetup_CRCDATAVALID_CRCCLK_negedge_posedge : VitalDelayType := 0.0 ns;
    thold_CRCDATAVALID_CRCCLK_posedge_posedge : VitalDelayType := 0.0 ns;
    thold_CRCDATAVALID_CRCCLK_negedge_posedge : VitalDelayType := 0.0 ns;
    tsetup_CRCDATAWIDTH_CRCCLK_posedge_posedge : VitalDelayArrayType(2 downto 0) := (others => 0.0 ns);
    tsetup_CRCDATAWIDTH_CRCCLK_negedge_posedge : VitalDelayArrayType(2 downto 0) := (others => 0.0 ns);
    thold_CRCDATAWIDTH_CRCCLK_posedge_posedge : VitalDelayArrayType(2 downto 0) := (others => 0.0 ns);
    thold_CRCDATAWIDTH_CRCCLK_negedge_posedge : VitalDelayArrayType(2 downto 0) := (others => 0.0 ns);
    tsetup_CRCRESET_CRCCLK_posedge_posedge : VitalDelayType := 0.0 ns;
    tsetup_CRCRESET_CRCCLK_negedge_posedge : VitalDelayType := 0.0 ns;
    thold_CRCRESET_CRCCLK_posedge_posedge : VitalDelayType := 0.0 ns;
    thold_CRCRESET_CRCCLK_negedge_posedge : VitalDelayType := 0.0 ns;

-----  Clock ticd
    ticd_CRCCLK : VitalDelayType := 0.000 ns;

----- Clock-to-pin tisd 
    tisd_CRCIN_CRCCLK : VitalDelayArrayType(63 downto 0) := (others => 0.000 ns);
    tisd_CRCDATAVALID_CRCCLK : VitalDelayType := 0.000 ns;
    tisd_CRCDATAWIDTH_CRCCLK : VitalDelayArrayType(2 downto 0) := (others => 0.000 ns);
    tisd_CRCRESET_CRCCLK : VitalDelayType := 0.000 ns;
    tisd_GSR_CRCCLK : VitalDelayType := 0.000 ns;

----- VITAL pulse width
    tpw_CRCCLK_negedge         : VitalDelayType := 0 ps;
    tpw_CRCCLK_posedge         : VitalDelayType := 0 ps
    
  );    
  port (
    CRCOUT : out std_logic_vector(31 downto 0);
  
    CRCCLK : in std_ulogic;
    CRCDATAVALID : in std_ulogic;
    CRCDATAWIDTH : in std_logic_vector(2 downto 0);
    CRCIN : in std_logic_vector(63 downto 0);
    CRCRESET : in std_ulogic
  );
end X_CRC64;
  
  architecture X_CRC64_V of X_CRC64 is

    signal   data_in_64 :  std_logic_vector(7 downto 0);
    signal   data_in_56 :  std_logic_vector(7 downto 0);
    signal   data_in_48 :  std_logic_vector(7 downto 0);
    signal   data_in_40  :  std_logic_vector(7 downto 0);

    signal   data_in_32 :  std_logic_vector(7 downto 0);
    signal   data_in_24 :  std_logic_vector(7 downto 0);
    signal   data_in_16 :  std_logic_vector(7 downto 0);
    signal   data_in_8  :  std_logic_vector(7 downto 0);
    
    signal   data_width :  std_logic_vector(2 downto 0);
    signal   data_valid :  std_ulogic;
    signal   crcd       :  std_logic_vector(31 downto 0);
    signal   crcreg     :  std_logic_vector(31 downto 0);

    signal   crcgen_out_64 :  std_logic_vector(31 downto 0);
    signal   crcgen_out_56 :  std_logic_vector(31 downto 0);
    signal   crcgen_out_48 :  std_logic_vector(31 downto 0);
    signal   crcgen_out_40 :  std_logic_vector(31 downto 0);

    signal   crcgen_out_32 :  std_logic_vector(31 downto 0);
    signal   crcgen_out_24 :  std_logic_vector(31 downto 0);
    signal   crcgen_out_16 :  std_logic_vector(31 downto 0);
    signal   crcgen_out_8  :  std_logic_vector(31 downto 0);
    
    signal   crc_initial : std_logic_vector(31 downto 0);
    signal   poly_val    : std_logic_vector(31 downto 0);

    signal   zero_56     : std_logic_vector(55 downto 0);
    signal   zero_48     : std_logic_vector(47 downto 0);
    signal   zero_40     : std_logic_vector(39 downto 0);
    signal   zero_32     : std_logic_vector(31 downto 0);
    signal   zero_24     : std_logic_vector(23 downto 0);
    signal   zero_16     : std_logic_vector(15 downto 0);
    signal   zero_8     : std_logic_vector(7 downto 0);

    signal   CRCIN_ipd  :  std_logic_vector(63 downto 0);
    signal   CRCDATAVALID_ipd  :  std_ulogic;
    signal   CRCDATAWIDTH_ipd  :  std_logic_vector(2 downto 0);
    signal   CRCRESET_ipd  :  std_ulogic;
    signal   CRCCLK_ipd  :  std_ulogic;

    signal   CRCOUT_out  :  std_logic_vector(31 downto 0);
    
    signal   GSR_dly  :  std_ulogic;
    signal   CRCIN_dly  :  std_logic_vector(63 downto 0);
    signal   CRCDATAVALID_dly  :  std_ulogic;
    signal   CRCDATAWIDTH_dly  :  std_logic_vector(2 downto 0);
    signal   CRCRESET_dly  :  std_ulogic;
    signal   CRCCLK_dly  :  std_ulogic;

    signal   GSR_ipd	 : std_ulogic;

    signal CRCOUT_zd : std_logic_vector (31 downto 0):= ( others => '0');
    signal Violation    : std_ulogic := '0';

    constant POLYNOMIAL : bit_vector := X"04C11DB7";

  begin

  WireDelay : block
    begin
      CRCIN_DELAY : for i in 63 downto 0 generate
        VitalWireDelay (CRCIN_ipd(i),CRCIN(i),tipd_CRCIN(i));
      end generate CRCIN_DELAY;

    VitalWireDelay (CRCDATAVALID_ipd,CRCDATAVALID,tipd_CRCDATAVALID);

    CRCDATAWIDTH_DELAY : for i in 2 downto 0 generate
        VitalWireDelay (CRCDATAWIDTH_ipd(i),CRCDATAWIDTH(i),tipd_CRCDATAWIDTH(i));
    end generate CRCDATAWIDTH_DELAY;

    VitalWireDelay (CRCRESET_ipd,CRCRESET,tipd_CRCRESET);
    VitalWireDelay (CRCCLK_ipd,CRCCLK,tipd_CRCCLK);
    VitalWireDelay (GSR_ipd,GSR,tipd_GSR);

   end block;
    
    SignalDelay : block
    begin
      CRCIN_DELAY : for i in 63 downto 0 generate
        VitalSignalDelay (CRCIN_dly(i),CRCIN_ipd(i),tisd_CRCIN_CRCCLK(i));
      end generate CRCIN_DELAY;

    VitalSignalDelay (CRCDATAVALID_dly,CRCDATAVALID_ipd,tisd_CRCDATAVALID_CRCCLK);

    CRCDATAWIDTH_DELAY : for i in 2 downto 0 generate
	VitalSignalDelay (CRCDATAWIDTH_dly(i),CRCDATAWIDTH_ipd(i),tisd_CRCDATAWIDTH_CRCCLK(i));
      end generate CRCDATAWIDTH_DELAY;

      VitalSignalDelay (CRCRESET_dly,CRCRESET_ipd,tisd_CRCRESET_CRCCLK);
      VitalSignalDelay (CRCCLK_dly,CRCCLK_ipd,ticd_CRCCLK);
      VitalSignalDelay (GSR_dly,GSR_ipd,tisd_GSR_CRCCLK);
    end block;
      
  crc_initial <= To_StdLogicVector(CRC_INIT); 
  poly_val <= To_StdLogicVector(POLYNOMIAL);

  zero_56 <= "00000000000000000000000000000000000000000000000000000000";
  zero_48 <= "000000000000000000000000000000000000000000000000";
  zero_40 <= "0000000000000000000000000000000000000000";
  zero_32 <= "00000000000000000000000000000000";
  zero_24 <= "000000000000000000000000";
  zero_16 <= "0000000000000000";
  zero_8 <=  "00000000";
    
  OUTPUT_CALC: process(GSR_dly,crcreg)
   begin
      if(GSR_dly = '1') then
         CRCOUT_zd <=  (others => '0');
      elsif(GSR_dly = '0') then
          CRCOUT_zd <= (not(crcreg(24)) & not(crcreg(25)) & not(crcreg(26)) & not(crcreg(27)) & not(crcreg(28)) & not(crcreg(29)) & not(crcreg(30)) & not(crcreg(31)) & not(crcreg(16)) & not(crcreg(17)) & not(crcreg(18)) & not(crcreg(19)) & not(crcreg(20)) & not(crcreg(21)) & not(crcreg(22)) & not(crcreg(23)) & not(crcreg(8)) & not(crcreg(9)) & not(crcreg(10)) & not(crcreg(11)) & not(crcreg(12)) & not(crcreg(13)) & not(crcreg(14)) & not(crcreg(15)) & not(crcreg(0)) & not(crcreg(1)) & not(crcreg(2)) & not(crcreg(3)) & not(crcreg(4)) & not(crcreg(5)) & not(crcreg(6)) & not(crcreg(7)));
     end if;
  end process;

   LOCK_DATA_IN: process(CRCCLK_dly)
    begin
      if (rising_edge(CRCCLK_dly)) then
        data_in_8  <= CRCIN(63 downto 56);	
        data_in_16 <= CRCIN(55 downto 48);	
        data_in_24 <= CRCIN(47 downto 40);
        data_in_32 <= CRCIN(39 downto 32);
        data_in_40 <= CRCIN(31 downto 24);	
        data_in_48 <= CRCIN(23 downto 16);	
        data_in_56 <= CRCIN(15 downto 8);
        data_in_64 <= CRCIN(7 downto 0);
        data_valid <= CRCDATAVALID;
        data_width <= CRCDATAWIDTH;
      end if;
  end process;

   -- Select between CRC8, CRC16, CRC24, CRC32, CRC40, CRC48, CRC56, CRC64  based on CRCDATAWIDTH
      
      SELECT_DATA_IN: process(crcgen_out_8,crcgen_out_16,crcgen_out_24,crcgen_out_32,crcgen_out_40,crcgen_out_48,crcgen_out_56,crcgen_out_64,crcd,data_width)
	 begin
	  case data_width is
 	   when  "000" => crcd <= crcgen_out_8;
	   when  "001" => crcd <= crcgen_out_16;
	   when  "010" => crcd <= crcgen_out_24;
	   when  "011" => crcd <= crcgen_out_32;
           when  "100" => crcd <= crcgen_out_40;
	   when  "101" => crcd <= crcgen_out_48;
	   when  "110" => crcd <= crcgen_out_56;
	   when  "111" => crcd <= crcgen_out_64;               
	   when others => crcd <= crcgen_out_8;
	end case;
     end process;
   
   -- 32-bit CRC internal register
   
   INT_REG: process(CRCCLK_dly)
    begin
      if (rising_edge(CRCCLK_dly)) then
        if (CRCRESET_dly = '1') then
          crcreg <= crc_initial;
        elsif (data_valid /= '1') then 
          crcreg <= crcreg;
        else
          crcreg <= crcd;
        end if;
      end if;
   end process;   

   --CRC Generator Logic
   
  CRC_GEN: process(crcreg, CRCIN_dly, data_width,data_in_8,data_in_16, data_in_24,data_in_32,data_in_40, data_in_48, data_in_56, data_in_64)
    variable   msg        :  std_logic_vector(72 downto 0);

    variable   concat_data_8  :  std_logic_vector(63 downto 0);
    variable   concat_data_16 :  std_logic_vector(63 downto 0);
    variable   concat_data_24 :  std_logic_vector(63 downto 0);
    variable   concat_data_32 :  std_logic_vector(63 downto 0);
    
    variable   concat_data_40 :  std_logic_vector(63 downto 0);
    variable   concat_data_48 :  std_logic_vector(63 downto 0);
    variable   concat_data_56 :  std_logic_vector(63 downto 0);
    variable   concat_data_64 :  std_logic_vector(63 downto 0);
    
    begin

      --CRC-8
        
      if (data_width = "000") then
        
        concat_data_8 := data_in_8(0) & data_in_8(1) & data_in_8(2) & data_in_8(3) & data_in_8(4) & data_in_8(5) & data_in_8(6) & data_in_8(7) & zero_56;
      
        msg(63 downto 0) := (crcreg & zero_32) xor concat_data_8;
        msg(72 downto 0) := To_StdLogicVector((To_bitvector(msg)) sll 8);
      
        for i in 0 to 7 loop
          msg(72 downto 0) := To_StdLogicVector((To_bitvector(msg)) sll 1);
          if (msg(72) = '1') then
            msg(71 downto 40) := msg(71 downto 40) xor poly_val;
          end if;
        end loop;
        crcgen_out_8 <= msg(71 downto 40);
       
        --CRC-16
    
      elsif (data_width = "001") then

        concat_data_16 := data_in_8(0) & data_in_8(1) & data_in_8(2) & data_in_8(3) & data_in_8(4) & data_in_8(5) & data_in_8(6) & data_in_8(7) & data_in_16(0)& data_in_16(1) & data_in_16(2) & data_in_16(3) & data_in_16(4) & data_in_16(5) & data_in_16(6) & data_in_16(7) & zero_48;

        msg(63 downto 0) := (crcreg & zero_32) xor concat_data_16;
        msg(72 downto 0) := To_StdLogicVector((To_bitvector(msg)) sll 8);
	   
        for i in 0 to 15 loop
          msg(72 downto 0) := To_StdLogicVector((To_bitvector(msg)) sll 1);
          if (msg(72) = '1') then
            msg(71 downto 40) := msg(71 downto 40) xor poly_val;
          end if;
        end loop;
        crcgen_out_16 <= msg(71 downto 40);

    --CRC-24
	
      elsif (data_width = "010") then 

        concat_data_24 := data_in_8(0) & data_in_8(1) & data_in_8(2) & data_in_8(3) & data_in_8(4) & data_in_8(5) & data_in_8(6) & data_in_8(7) & data_in_16(0) & data_in_16(1) & data_in_16(2) & data_in_16(3) & data_in_16(4) & data_in_16(5) & data_in_16(6) & data_in_16(7) & data_in_24(0) & data_in_24(1) & data_in_24(2) & data_in_24(3) & data_in_24(4) & data_in_24(5) & data_in_24(6) & data_in_24(7) & zero_40;

        msg(63 downto 0) := (crcreg & zero_32) xor concat_data_24;
        msg(72 downto 0) := To_StdLogicVector((To_bitvector(msg)) sll 8);
	   
        for i in 0 to 23 loop
          msg(72 downto 0) := To_StdLogicVector((To_bitvector(msg)) sll 1);
          if (msg(72) = '1') then
            msg(71 downto 40) := msg(71 downto 40) xor poly_val;
          end if;
        end loop;
        crcgen_out_24 <= msg(71 downto 40);


    --CRC-32
	
      elsif (data_width = "011") then
        concat_data_32 := data_in_8(0) & data_in_8(1) & data_in_8(2) & data_in_8(3) & data_in_8(4) & data_in_8(5) & data_in_8(6) & data_in_8(7) & data_in_16(0) & data_in_16(1) & data_in_16(2) & data_in_16(3) & data_in_16(4) & data_in_16(5) & data_in_16(6) & data_in_16(7) & data_in_24(0) & data_in_24(1) & data_in_24(2) & data_in_24(3) & data_in_24(4) & data_in_24(5) & data_in_24(6) & data_in_24(7) & data_in_32(0) & data_in_32(1) & data_in_32(2) & data_in_32(3) & data_in_32(4) & data_in_32(5) & data_in_32(6) & data_in_32(7) & zero_32;
     
        msg(63 downto 0) := (crcreg & zero_32) xor concat_data_32;
        msg(72 downto 0) := To_StdLogicVector((To_bitvector(msg)) sll 8);

        for i in 0 to 31 loop
          msg(72 downto 0) := To_StdLogicVector((To_bitvector(msg)) sll 1);
          if (msg(72) = '1') then
            msg(71 downto 40) := msg(71 downto 40) xor poly_val;
          end if;
        end loop;
        crcgen_out_32 <= msg(71 downto 40);

        -- CRC-40
        
      elsif (data_width = "100") then
        concat_data_40 := data_in_8(0) & data_in_8(1) & data_in_8(2) & data_in_8(3) & data_in_8(4) & data_in_8(5) & data_in_8(6) & data_in_8(7) & data_in_16(0) & data_in_16(1) & data_in_16(2) & data_in_16(3) & data_in_16(4) & data_in_16(5) & data_in_16(6) & data_in_16(7) & data_in_24(0) & data_in_24(1) & data_in_24(2) & data_in_24(3) & data_in_24(4) & data_in_24(5) & data_in_24(6) & data_in_24(7) & data_in_32(0) & data_in_32(1) & data_in_32(2) & data_in_32(3) & data_in_32(4) & data_in_32(5) & data_in_32(6) & data_in_32(7) & data_in_40(0) & data_in_40(1) & data_in_40(2) & data_in_40(3) & data_in_40(4) & data_in_40(5) & data_in_40(6) & data_in_40(7) & zero_24;

        msg(63 downto 0) := (crcreg & zero_32) xor concat_data_40;
        msg(72 downto 0) := To_StdLogicVector((To_bitvector(msg)) sll 8);
        
        for i in 0 to 39 loop
          msg(72 downto 0) := To_StdLogicVector((To_bitvector(msg)) sll 1);
          if (msg(72) = '1') then
            msg(71 downto 40) := msg(71 downto 40) xor poly_val;
          end if;
        end loop;
        crcgen_out_40 <= msg(71 downto 40);
        
        --CRC-48
	
      elsif (data_width = "101") then

        concat_data_48 := data_in_8(0) & data_in_8(1) & data_in_8(2) & data_in_8(3) & data_in_8(4) & data_in_8(5) & data_in_8(6) & data_in_8(7) & data_in_16(0) & data_in_16(1) & data_in_16(2) & data_in_16(3) & data_in_16(4) & data_in_16(5) & data_in_16(6) & data_in_16(7) & data_in_24(0) & data_in_24(1) & data_in_24(2) & data_in_24(3) & data_in_24(4) & data_in_24(5) & data_in_24(6) & data_in_24(7) & data_in_32(0) & data_in_32(1) & data_in_32(2) & data_in_32(3) & data_in_32(4) & data_in_32(5) & data_in_32(6) & data_in_32(7) & data_in_40(0) & data_in_40(1) & data_in_40(2) & data_in_40(3) & data_in_40(4) & data_in_40(5) & data_in_40(6) & data_in_40(7) & data_in_48(0) & data_in_48(1) & data_in_48(2) & data_in_48(3) & data_in_48(4) & data_in_48(5) & data_in_48(6) & data_in_48(7) & zero_16;
        
        msg(63 downto 0) := (crcreg & zero_32) xor concat_data_48;
        msg(72 downto 0) := To_StdLogicVector((To_bitvector(msg)) sll 8);
        
        for i in 0 to 47 loop
          msg(72 downto 0) := To_StdLogicVector((To_bitvector(msg)) sll 1);
          if (msg(72) = '1') then
            msg(71 downto 40) := msg(71 downto 40) xor poly_val;
          end if;
        end loop;
        crcgen_out_48 <= msg(71 downto 40);

        --CRC-56
	
	elsif (data_width = "110") then

        concat_data_56 := data_in_8(0) & data_in_8(1) & data_in_8(2) & data_in_8(3) & data_in_8(4) & data_in_8(5) & data_in_8(6) & data_in_8(7) & data_in_16(0) & data_in_16(1) & data_in_16(2) & data_in_16(3) & data_in_16(4) & data_in_16(5) & data_in_16(6) & data_in_16(7) & data_in_24(0) & data_in_24(1) & data_in_24(2) & data_in_24(3) & data_in_24(4) & data_in_24(5) & data_in_24(6) & data_in_24(7) & data_in_32(0) & data_in_32(1) & data_in_32(2) & data_in_32(3) & data_in_32(4) & data_in_32(5) & data_in_32(6) & data_in_32(7) & data_in_40(0) & data_in_40(1) & data_in_40(2) & data_in_40(3) & data_in_40(4) & data_in_40(5) & data_in_40(6) & data_in_40(7) & data_in_48(0) & data_in_48(1) & data_in_48(2) & data_in_48(3) & data_in_48(4) & data_in_48(5) & data_in_48(6) & data_in_48(7) & data_in_56(0) & data_in_56(1) & data_in_56(2) & data_in_56(3) & data_in_56(4) & data_in_56(5) & data_in_56(6) & data_in_56(7) & zero_8;
      
        msg(63 downto 0) := (crcreg & zero_32) xor concat_data_56;
        msg(72 downto 0) := To_StdLogicVector((To_bitvector(msg)) sll 8);
        
        for i in 0 to 55 loop
          msg(72 downto 0) := To_StdLogicVector((To_bitvector(msg)) sll 1);
          if (msg(72) = '1') then
            msg(71 downto 40) := msg(71 downto 40) xor poly_val;
          end if;
        end loop;
        crcgen_out_56 <= msg(71 downto 40);

        --CRC-64
	
	elsif (data_width = "111")then
          concat_data_64 := data_in_8(0) & data_in_8(1) & data_in_8(2) & data_in_8(3) & data_in_8(4) & data_in_8(5) & data_in_8(6) & data_in_8(7) & data_in_16(0) & data_in_16(1) & data_in_16(2) & data_in_16(3) & data_in_16(4) & data_in_16(5) & data_in_16(6) & data_in_16(7) & data_in_24(0) & data_in_24(1) & data_in_24(2) & data_in_24(3) & data_in_24(4) & data_in_24(5) & data_in_24(6) & data_in_24(7) & data_in_32(0) & data_in_32(1) & data_in_32(2) & data_in_32(3) & data_in_32(4) & data_in_32(5) & data_in_32(6) & data_in_32(7) & data_in_40(0) & data_in_40(1) & data_in_40(2) & data_in_40(3) & data_in_40(4) & data_in_40(5) & data_in_40(6) & data_in_40(7) & data_in_48(0) & data_in_48(1) & data_in_48(2) & data_in_48(3) & data_in_48(4) & data_in_48(5) & data_in_48(6) & data_in_48(7) & data_in_56(0) & data_in_56(1) & data_in_56(2) & data_in_56(3) & data_in_56(4) & data_in_56(5) & data_in_56(6) & data_in_56(7) & data_in_64(0) & data_in_64(1) & data_in_64(2) & data_in_64(3) & data_in_64(4) & data_in_64(5) & data_in_64(6) &  data_in_64(7);
          
          msg(63 downto 0) := (crcreg & zero_32) xor concat_data_64;
          msg(72 downto 0) := To_StdLogicVector((To_bitvector(msg)) sll 8);
        
          for i in 0 to 63 loop
            msg(72 downto 0) := To_StdLogicVector((To_bitvector(msg)) sll 1);
            if (msg(72) = '1') then
              msg(71 downto 40) := msg(71 downto 40) xor poly_val;
            end if;
          end loop;
          crcgen_out_64 <= msg(71 downto 40);

          
      end if;

      
    end process;
         

--####################################################################
--#####                   TIMING CHECKS & OUTPUT                 #####
--####################################################################
  prcs_tmngchk:process
    --  Pin Timing Violations (all input pins)
	variable Tviol_CRCIN0_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN0_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN1_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN1_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN2_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN2_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN3_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN3_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN4_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN4_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN5_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN5_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN6_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN6_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN7_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN7_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN8_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN8_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN9_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN9_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN10_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN10_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN11_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN11_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN12_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN12_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN13_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN13_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN14_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN14_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN15_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN15_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN16_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN16_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN17_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN17_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN18_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN18_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN19_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN19_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN20_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN20_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN21_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN21_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN22_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN22_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN23_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN23_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN24_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN24_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN25_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN25_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN26_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN26_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN27_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN27_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN28_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN28_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN29_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN29_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN30_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN30_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN31_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN31_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN32_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN32_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN33_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN33_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN34_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN34_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN35_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN35_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN36_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN36_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN37_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN37_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN38_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN38_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN39_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN39_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN40_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN40_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN41_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN41_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN42_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN42_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN43_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN43_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN44_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN44_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN45_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN45_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN46_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN46_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN47_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN47_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN48_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN48_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN49_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN49_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN50_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN50_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN51_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN51_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN52_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN52_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN53_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN53_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN54_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN54_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN55_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN55_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN56_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN56_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN57_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN57_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN58_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN58_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN59_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN59_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN60_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN60_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN61_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN61_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN62_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN62_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCIN63_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCIN63_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCDATAVALID_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCDATAVALID_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCDATAWIDTH0_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCDATAWIDTH0_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCDATAWIDTH1_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCDATAWIDTH1_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCDATAWIDTH2_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCDATAWIDTH2_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;
	variable Tviol_CRCRESET_CRCCLK_posedge : STD_ULOGIC := '0';
	variable  Tmkr_CRCRESET_CRCCLK_posedge : VitalTimingDataType := VitalTimingDataInit;

--  Output Pin glitch declaration
	variable  CRCOUT0_GlitchData : VitalGlitchDataType;
	variable  CRCOUT1_GlitchData : VitalGlitchDataType;
	variable  CRCOUT2_GlitchData : VitalGlitchDataType;
	variable  CRCOUT3_GlitchData : VitalGlitchDataType;
	variable  CRCOUT4_GlitchData : VitalGlitchDataType;
	variable  CRCOUT5_GlitchData : VitalGlitchDataType;
	variable  CRCOUT6_GlitchData : VitalGlitchDataType;
	variable  CRCOUT7_GlitchData : VitalGlitchDataType;
	variable  CRCOUT8_GlitchData : VitalGlitchDataType;
	variable  CRCOUT9_GlitchData : VitalGlitchDataType;
	variable  CRCOUT10_GlitchData : VitalGlitchDataType;
	variable  CRCOUT11_GlitchData : VitalGlitchDataType;
	variable  CRCOUT12_GlitchData : VitalGlitchDataType;
	variable  CRCOUT13_GlitchData : VitalGlitchDataType;
	variable  CRCOUT14_GlitchData : VitalGlitchDataType;
	variable  CRCOUT15_GlitchData : VitalGlitchDataType;
	variable  CRCOUT16_GlitchData : VitalGlitchDataType;
	variable  CRCOUT17_GlitchData : VitalGlitchDataType;
	variable  CRCOUT18_GlitchData : VitalGlitchDataType;
	variable  CRCOUT19_GlitchData : VitalGlitchDataType;
	variable  CRCOUT20_GlitchData : VitalGlitchDataType;
	variable  CRCOUT21_GlitchData : VitalGlitchDataType;
	variable  CRCOUT22_GlitchData : VitalGlitchDataType;
	variable  CRCOUT23_GlitchData : VitalGlitchDataType;
	variable  CRCOUT24_GlitchData : VitalGlitchDataType;
	variable  CRCOUT25_GlitchData : VitalGlitchDataType;
	variable  CRCOUT26_GlitchData : VitalGlitchDataType;
	variable  CRCOUT27_GlitchData : VitalGlitchDataType;
	variable  CRCOUT28_GlitchData : VitalGlitchDataType;
	variable  CRCOUT29_GlitchData : VitalGlitchDataType;
	variable  CRCOUT30_GlitchData : VitalGlitchDataType;
	variable  CRCOUT31_GlitchData : VitalGlitchDataType;
        
begin

--  Setup/Hold Check Violations (all input pins)

     if (TimingChecksOn) then
       	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN0_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN0_CRCCLK_posedge,
	TestSignal => CRCIN_dly(0),
	TestSignalName => "CRCIN(0)",
	TestDelay => tisd_CRCIN_CRCCLK(0),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(0),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(0),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(0),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(0),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN0_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN0_CRCCLK_posedge,
	TestSignal => CRCIN_dly(0),
	TestSignalName => "CRCIN(0)",
	TestDelay => tisd_CRCIN_CRCCLK(0),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(0),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(0),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(0),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(0),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN1_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN1_CRCCLK_posedge,
	TestSignal => CRCIN_dly(1),
	TestSignalName => "CRCIN(1)",
	TestDelay => tisd_CRCIN_CRCCLK(1),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(1),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(1),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(1),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(1),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN1_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN1_CRCCLK_posedge,
	TestSignal => CRCIN_dly(1),
	TestSignalName => "CRCIN(1)",
	TestDelay => tisd_CRCIN_CRCCLK(1),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(1),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(1),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(1),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(1),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN2_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN2_CRCCLK_posedge,
	TestSignal => CRCIN_dly(2),
	TestSignalName => "CRCIN(2)",
	TestDelay => tisd_CRCIN_CRCCLK(2),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(2),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(2),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(2),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(2),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN2_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN2_CRCCLK_posedge,
	TestSignal => CRCIN_dly(2),
	TestSignalName => "CRCIN(2)",
	TestDelay => tisd_CRCIN_CRCCLK(2),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(2),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(2),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(2),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(2),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN3_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN3_CRCCLK_posedge,
	TestSignal => CRCIN_dly(3),
	TestSignalName => "CRCIN(3)",
	TestDelay => tisd_CRCIN_CRCCLK(3),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(3),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(3),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(3),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(3),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN3_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN3_CRCCLK_posedge,
	TestSignal => CRCIN_dly(3),
	TestSignalName => "CRCIN(3)",
	TestDelay => tisd_CRCIN_CRCCLK(3),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(3),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(3),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(3),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(3),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN4_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN4_CRCCLK_posedge,
	TestSignal => CRCIN_dly(4),
	TestSignalName => "CRCIN(4)",
	TestDelay => tisd_CRCIN_CRCCLK(4),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(4),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(4),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(4),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(4),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN4_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN4_CRCCLK_posedge,
	TestSignal => CRCIN_dly(4),
	TestSignalName => "CRCIN(4)",
	TestDelay => tisd_CRCIN_CRCCLK(4),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(4),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(4),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(4),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(4),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN5_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN5_CRCCLK_posedge,
	TestSignal => CRCIN_dly(5),
	TestSignalName => "CRCIN(5)",
	TestDelay => tisd_CRCIN_CRCCLK(5),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(5),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(5),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(5),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(5),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN5_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN5_CRCCLK_posedge,
	TestSignal => CRCIN_dly(5),
	TestSignalName => "CRCIN(5)",
	TestDelay => tisd_CRCIN_CRCCLK(5),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(5),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(5),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(5),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(5),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN6_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN6_CRCCLK_posedge,
	TestSignal => CRCIN_dly(6),
	TestSignalName => "CRCIN(6)",
	TestDelay => tisd_CRCIN_CRCCLK(6),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(6),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(6),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(6),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(6),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN6_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN6_CRCCLK_posedge,
	TestSignal => CRCIN_dly(6),
	TestSignalName => "CRCIN(6)",
	TestDelay => tisd_CRCIN_CRCCLK(6),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(6),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(6),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(6),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(6),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN7_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN7_CRCCLK_posedge,
	TestSignal => CRCIN_dly(7),
	TestSignalName => "CRCIN(7)",
	TestDelay => tisd_CRCIN_CRCCLK(7),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(7),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(7),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(7),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(7),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN7_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN7_CRCCLK_posedge,
	TestSignal => CRCIN_dly(7),
	TestSignalName => "CRCIN(7)",
	TestDelay => tisd_CRCIN_CRCCLK(7),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(7),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(7),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(7),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(7),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN8_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN8_CRCCLK_posedge,
	TestSignal => CRCIN_dly(8),
	TestSignalName => "CRCIN(8)",
	TestDelay => tisd_CRCIN_CRCCLK(8),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(8),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(8),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(8),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(8),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN8_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN8_CRCCLK_posedge,
	TestSignal => CRCIN_dly(8),
	TestSignalName => "CRCIN(8)",
	TestDelay => tisd_CRCIN_CRCCLK(8),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(8),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(8),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(8),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(8),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN9_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN9_CRCCLK_posedge,
	TestSignal => CRCIN_dly(9),
	TestSignalName => "CRCIN(9)",
	TestDelay => tisd_CRCIN_CRCCLK(9),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(9),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(9),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(9),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(9),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN9_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN9_CRCCLK_posedge,
	TestSignal => CRCIN_dly(9),
	TestSignalName => "CRCIN(9)",
	TestDelay => tisd_CRCIN_CRCCLK(9),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(9),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(9),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(9),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(9),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN10_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN10_CRCCLK_posedge,
	TestSignal => CRCIN_dly(10),
	TestSignalName => "CRCIN(10)",
	TestDelay => tisd_CRCIN_CRCCLK(10),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(10),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(10),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(10),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(10),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN10_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN10_CRCCLK_posedge,
	TestSignal => CRCIN_dly(10),
	TestSignalName => "CRCIN(10)",
	TestDelay => tisd_CRCIN_CRCCLK(10),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(10),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(10),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(10),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(10),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN11_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN11_CRCCLK_posedge,
	TestSignal => CRCIN_dly(11),
	TestSignalName => "CRCIN(11)",
	TestDelay => tisd_CRCIN_CRCCLK(11),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(11),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(11),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(11),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(11),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN11_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN11_CRCCLK_posedge,
	TestSignal => CRCIN_dly(11),
	TestSignalName => "CRCIN(11)",
	TestDelay => tisd_CRCIN_CRCCLK(11),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(11),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(11),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(11),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(11),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN12_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN12_CRCCLK_posedge,
	TestSignal => CRCIN_dly(12),
	TestSignalName => "CRCIN(12)",
	TestDelay => tisd_CRCIN_CRCCLK(12),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(12),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(12),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(12),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(12),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN12_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN12_CRCCLK_posedge,
	TestSignal => CRCIN_dly(12),
	TestSignalName => "CRCIN(12)",
	TestDelay => tisd_CRCIN_CRCCLK(12),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(12),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(12),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(12),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(12),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN13_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN13_CRCCLK_posedge,
	TestSignal => CRCIN_dly(13),
	TestSignalName => "CRCIN(13)",
	TestDelay => tisd_CRCIN_CRCCLK(13),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(13),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(13),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(13),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(13),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN13_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN13_CRCCLK_posedge,
	TestSignal => CRCIN_dly(13),
	TestSignalName => "CRCIN(13)",
	TestDelay => tisd_CRCIN_CRCCLK(13),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(13),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(13),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(13),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(13),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN14_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN14_CRCCLK_posedge,
	TestSignal => CRCIN_dly(14),
	TestSignalName => "CRCIN(14)",
	TestDelay => tisd_CRCIN_CRCCLK(14),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(14),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(14),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(14),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(14),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN14_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN14_CRCCLK_posedge,
	TestSignal => CRCIN_dly(14),
	TestSignalName => "CRCIN(14)",
	TestDelay => tisd_CRCIN_CRCCLK(14),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(14),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(14),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(14),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(14),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN15_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN15_CRCCLK_posedge,
	TestSignal => CRCIN_dly(15),
	TestSignalName => "CRCIN(15)",
	TestDelay => tisd_CRCIN_CRCCLK(15),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(15),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(15),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(15),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(15),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN15_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN15_CRCCLK_posedge,
	TestSignal => CRCIN_dly(15),
	TestSignalName => "CRCIN(15)",
	TestDelay => tisd_CRCIN_CRCCLK(15),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(15),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(15),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(15),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(15),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN16_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN16_CRCCLK_posedge,
	TestSignal => CRCIN_dly(16),
	TestSignalName => "CRCIN(16)",
	TestDelay => tisd_CRCIN_CRCCLK(16),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(16),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(16),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(16),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(16),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN16_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN16_CRCCLK_posedge,
	TestSignal => CRCIN_dly(16),
	TestSignalName => "CRCIN(16)",
	TestDelay => tisd_CRCIN_CRCCLK(16),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(16),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(16),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(16),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(16),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN17_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN17_CRCCLK_posedge,
	TestSignal => CRCIN_dly(17),
	TestSignalName => "CRCIN(17)",
	TestDelay => tisd_CRCIN_CRCCLK(17),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(17),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(17),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(17),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(17),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN17_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN17_CRCCLK_posedge,
	TestSignal => CRCIN_dly(17),
	TestSignalName => "CRCIN(17)",
	TestDelay => tisd_CRCIN_CRCCLK(17),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(17),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(17),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(17),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(17),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN18_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN18_CRCCLK_posedge,
	TestSignal => CRCIN_dly(18),
	TestSignalName => "CRCIN(18)",
	TestDelay => tisd_CRCIN_CRCCLK(18),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(18),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(18),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(18),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(18),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN18_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN18_CRCCLK_posedge,
	TestSignal => CRCIN_dly(18),
	TestSignalName => "CRCIN(18)",
	TestDelay => tisd_CRCIN_CRCCLK(18),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(18),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(18),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(18),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(18),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN19_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN19_CRCCLK_posedge,
	TestSignal => CRCIN_dly(19),
	TestSignalName => "CRCIN(19)",
	TestDelay => tisd_CRCIN_CRCCLK(19),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(19),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(19),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(19),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(19),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN19_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN19_CRCCLK_posedge,
	TestSignal => CRCIN_dly(19),
	TestSignalName => "CRCIN(19)",
	TestDelay => tisd_CRCIN_CRCCLK(19),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(19),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(19),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(19),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(19),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN20_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN20_CRCCLK_posedge,
	TestSignal => CRCIN_dly(20),
	TestSignalName => "CRCIN(20)",
	TestDelay => tisd_CRCIN_CRCCLK(20),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(20),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(20),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(20),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(20),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN20_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN20_CRCCLK_posedge,
	TestSignal => CRCIN_dly(20),
	TestSignalName => "CRCIN(20)",
	TestDelay => tisd_CRCIN_CRCCLK(20),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(20),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(20),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(20),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(20),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN21_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN21_CRCCLK_posedge,
	TestSignal => CRCIN_dly(21),
	TestSignalName => "CRCIN(21)",
	TestDelay => tisd_CRCIN_CRCCLK(21),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(21),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(21),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(21),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(21),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN21_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN21_CRCCLK_posedge,
	TestSignal => CRCIN_dly(21),
	TestSignalName => "CRCIN(21)",
	TestDelay => tisd_CRCIN_CRCCLK(21),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(21),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(21),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(21),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(21),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN22_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN22_CRCCLK_posedge,
	TestSignal => CRCIN_dly(22),
	TestSignalName => "CRCIN(22)",
	TestDelay => tisd_CRCIN_CRCCLK(22),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(22),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(22),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(22),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(22),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN22_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN22_CRCCLK_posedge,
	TestSignal => CRCIN_dly(22),
	TestSignalName => "CRCIN(22)",
	TestDelay => tisd_CRCIN_CRCCLK(22),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(22),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(22),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(22),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(22),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN23_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN23_CRCCLK_posedge,
	TestSignal => CRCIN_dly(23),
	TestSignalName => "CRCIN(23)",
	TestDelay => tisd_CRCIN_CRCCLK(23),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(23),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(23),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(23),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(23),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN23_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN23_CRCCLK_posedge,
	TestSignal => CRCIN_dly(23),
	TestSignalName => "CRCIN(23)",
	TestDelay => tisd_CRCIN_CRCCLK(23),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(23),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(23),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(23),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(23),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN24_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN24_CRCCLK_posedge,
	TestSignal => CRCIN_dly(24),
	TestSignalName => "CRCIN(24)",
	TestDelay => tisd_CRCIN_CRCCLK(24),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(24),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(24),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(24),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(24),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN24_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN24_CRCCLK_posedge,
	TestSignal => CRCIN_dly(24),
	TestSignalName => "CRCIN(24)",
	TestDelay => tisd_CRCIN_CRCCLK(24),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(24),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(24),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(24),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(24),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN25_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN25_CRCCLK_posedge,
	TestSignal => CRCIN_dly(25),
	TestSignalName => "CRCIN(25)",
	TestDelay => tisd_CRCIN_CRCCLK(25),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(25),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(25),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(25),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(25),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN25_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN25_CRCCLK_posedge,
	TestSignal => CRCIN_dly(25),
	TestSignalName => "CRCIN(25)",
	TestDelay => tisd_CRCIN_CRCCLK(25),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(25),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(25),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(25),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(25),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN26_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN26_CRCCLK_posedge,
	TestSignal => CRCIN_dly(26),
	TestSignalName => "CRCIN(26)",
	TestDelay => tisd_CRCIN_CRCCLK(26),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(26),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(26),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(26),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(26),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN26_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN26_CRCCLK_posedge,
	TestSignal => CRCIN_dly(26),
	TestSignalName => "CRCIN(26)",
	TestDelay => tisd_CRCIN_CRCCLK(26),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(26),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(26),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(26),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(26),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN27_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN27_CRCCLK_posedge,
	TestSignal => CRCIN_dly(27),
	TestSignalName => "CRCIN(27)",
	TestDelay => tisd_CRCIN_CRCCLK(27),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(27),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(27),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(27),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(27),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN27_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN27_CRCCLK_posedge,
	TestSignal => CRCIN_dly(27),
	TestSignalName => "CRCIN(27)",
	TestDelay => tisd_CRCIN_CRCCLK(27),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(27),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(27),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(27),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(27),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN28_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN28_CRCCLK_posedge,
	TestSignal => CRCIN_dly(28),
	TestSignalName => "CRCIN(28)",
	TestDelay => tisd_CRCIN_CRCCLK(28),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(28),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(28),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(28),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(28),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN28_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN28_CRCCLK_posedge,
	TestSignal => CRCIN_dly(28),
	TestSignalName => "CRCIN(28)",
	TestDelay => tisd_CRCIN_CRCCLK(28),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(28),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(28),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(28),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(28),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN29_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN29_CRCCLK_posedge,
	TestSignal => CRCIN_dly(29),
	TestSignalName => "CRCIN(29)",
	TestDelay => tisd_CRCIN_CRCCLK(29),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(29),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(29),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(29),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(29),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN29_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN29_CRCCLK_posedge,
	TestSignal => CRCIN_dly(29),
	TestSignalName => "CRCIN(29)",
	TestDelay => tisd_CRCIN_CRCCLK(29),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(29),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(29),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(29),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(29),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN30_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN30_CRCCLK_posedge,
	TestSignal => CRCIN_dly(30),
	TestSignalName => "CRCIN(30)",
	TestDelay => tisd_CRCIN_CRCCLK(30),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(30),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(30),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(30),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(30),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN30_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN30_CRCCLK_posedge,
	TestSignal => CRCIN_dly(30),
	TestSignalName => "CRCIN(30)",
	TestDelay => tisd_CRCIN_CRCCLK(30),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(30),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(30),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(30),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(30),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN31_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN31_CRCCLK_posedge,
	TestSignal => CRCIN_dly(31),
	TestSignalName => "CRCIN(31)",
	TestDelay => tisd_CRCIN_CRCCLK(31),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(31),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(31),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(31),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(31),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN31_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN31_CRCCLK_posedge,
	TestSignal => CRCIN_dly(31),
	TestSignalName => "CRCIN(31)",
	TestDelay => tisd_CRCIN_CRCCLK(31),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(31),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(31),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(31),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(31),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN32_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN32_CRCCLK_posedge,
	TestSignal => CRCIN_dly(32),
	TestSignalName => "CRCIN(32)",
	TestDelay => tisd_CRCIN_CRCCLK(32),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(32),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(32),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(32),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(32),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN32_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN32_CRCCLK_posedge,
	TestSignal => CRCIN_dly(32),
	TestSignalName => "CRCIN(32)",
	TestDelay => tisd_CRCIN_CRCCLK(32),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(32),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(32),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(32),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(32),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN33_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN33_CRCCLK_posedge,
	TestSignal => CRCIN_dly(33),
	TestSignalName => "CRCIN(33)",
	TestDelay => tisd_CRCIN_CRCCLK(33),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(33),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(33),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(33),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(33),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN33_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN33_CRCCLK_posedge,
	TestSignal => CRCIN_dly(33),
	TestSignalName => "CRCIN(33)",
	TestDelay => tisd_CRCIN_CRCCLK(33),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(33),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(33),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(33),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(33),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN34_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN34_CRCCLK_posedge,
	TestSignal => CRCIN_dly(34),
	TestSignalName => "CRCIN(34)",
	TestDelay => tisd_CRCIN_CRCCLK(34),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(34),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(34),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(34),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(34),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN34_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN34_CRCCLK_posedge,
	TestSignal => CRCIN_dly(34),
	TestSignalName => "CRCIN(34)",
	TestDelay => tisd_CRCIN_CRCCLK(34),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(34),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(34),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(34),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(34),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN35_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN35_CRCCLK_posedge,
	TestSignal => CRCIN_dly(35),
	TestSignalName => "CRCIN(35)",
	TestDelay => tisd_CRCIN_CRCCLK(35),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(35),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(35),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(35),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(35),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN35_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN35_CRCCLK_posedge,
	TestSignal => CRCIN_dly(35),
	TestSignalName => "CRCIN(35)",
	TestDelay => tisd_CRCIN_CRCCLK(35),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(35),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(35),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(35),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(35),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN36_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN36_CRCCLK_posedge,
	TestSignal => CRCIN_dly(36),
	TestSignalName => "CRCIN(36)",
	TestDelay => tisd_CRCIN_CRCCLK(36),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(36),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(36),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(36),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(36),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN36_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN36_CRCCLK_posedge,
	TestSignal => CRCIN_dly(36),
	TestSignalName => "CRCIN(36)",
	TestDelay => tisd_CRCIN_CRCCLK(36),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(36),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(36),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(36),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(36),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN37_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN37_CRCCLK_posedge,
	TestSignal => CRCIN_dly(37),
	TestSignalName => "CRCIN(37)",
	TestDelay => tisd_CRCIN_CRCCLK(37),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(37),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(37),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(37),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(37),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN37_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN37_CRCCLK_posedge,
	TestSignal => CRCIN_dly(37),
	TestSignalName => "CRCIN(37)",
	TestDelay => tisd_CRCIN_CRCCLK(37),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(37),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(37),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(37),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(37),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN38_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN38_CRCCLK_posedge,
	TestSignal => CRCIN_dly(38),
	TestSignalName => "CRCIN(38)",
	TestDelay => tisd_CRCIN_CRCCLK(38),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(38),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(38),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(38),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(38),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN38_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN38_CRCCLK_posedge,
	TestSignal => CRCIN_dly(38),
	TestSignalName => "CRCIN(38)",
	TestDelay => tisd_CRCIN_CRCCLK(38),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(38),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(38),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(38),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(38),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN39_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN39_CRCCLK_posedge,
	TestSignal => CRCIN_dly(39),
	TestSignalName => "CRCIN(39)",
	TestDelay => tisd_CRCIN_CRCCLK(39),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(39),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(39),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(39),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(39),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN39_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN39_CRCCLK_posedge,
	TestSignal => CRCIN_dly(39),
	TestSignalName => "CRCIN(39)",
	TestDelay => tisd_CRCIN_CRCCLK(39),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(39),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(39),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(39),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(39),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN40_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN40_CRCCLK_posedge,
	TestSignal => CRCIN_dly(40),
	TestSignalName => "CRCIN(40)",
	TestDelay => tisd_CRCIN_CRCCLK(40),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(40),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(40),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(40),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(40),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN40_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN40_CRCCLK_posedge,
	TestSignal => CRCIN_dly(40),
	TestSignalName => "CRCIN(40)",
	TestDelay => tisd_CRCIN_CRCCLK(40),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(40),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(40),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(40),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(40),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN41_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN41_CRCCLK_posedge,
	TestSignal => CRCIN_dly(41),
	TestSignalName => "CRCIN(41)",
	TestDelay => tisd_CRCIN_CRCCLK(41),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(41),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(41),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(41),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(41),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN41_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN41_CRCCLK_posedge,
	TestSignal => CRCIN_dly(41),
	TestSignalName => "CRCIN(41)",
	TestDelay => tisd_CRCIN_CRCCLK(41),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(41),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(41),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(41),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(41),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN42_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN42_CRCCLK_posedge,
	TestSignal => CRCIN_dly(42),
	TestSignalName => "CRCIN(42)",
	TestDelay => tisd_CRCIN_CRCCLK(42),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(42),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(42),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(42),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(42),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN42_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN42_CRCCLK_posedge,
	TestSignal => CRCIN_dly(42),
	TestSignalName => "CRCIN(42)",
	TestDelay => tisd_CRCIN_CRCCLK(42),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(42),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(42),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(42),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(42),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN43_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN43_CRCCLK_posedge,
	TestSignal => CRCIN_dly(43),
	TestSignalName => "CRCIN(43)",
	TestDelay => tisd_CRCIN_CRCCLK(43),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(43),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(43),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(43),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(43),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN43_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN43_CRCCLK_posedge,
	TestSignal => CRCIN_dly(43),
	TestSignalName => "CRCIN(43)",
	TestDelay => tisd_CRCIN_CRCCLK(43),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(43),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(43),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(43),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(43),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN44_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN44_CRCCLK_posedge,
	TestSignal => CRCIN_dly(44),
	TestSignalName => "CRCIN(44)",
	TestDelay => tisd_CRCIN_CRCCLK(44),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(44),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(44),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(44),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(44),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN44_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN44_CRCCLK_posedge,
	TestSignal => CRCIN_dly(44),
	TestSignalName => "CRCIN(44)",
	TestDelay => tisd_CRCIN_CRCCLK(44),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(44),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(44),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(44),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(44),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN45_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN45_CRCCLK_posedge,
	TestSignal => CRCIN_dly(45),
	TestSignalName => "CRCIN(45)",
	TestDelay => tisd_CRCIN_CRCCLK(45),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(45),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(45),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(45),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(45),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN45_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN45_CRCCLK_posedge,
	TestSignal => CRCIN_dly(45),
	TestSignalName => "CRCIN(45)",
	TestDelay => tisd_CRCIN_CRCCLK(45),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(45),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(45),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(45),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(45),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN46_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN46_CRCCLK_posedge,
	TestSignal => CRCIN_dly(46),
	TestSignalName => "CRCIN(46)",
	TestDelay => tisd_CRCIN_CRCCLK(46),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(46),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(46),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(46),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(46),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN46_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN46_CRCCLK_posedge,
	TestSignal => CRCIN_dly(46),
	TestSignalName => "CRCIN(46)",
	TestDelay => tisd_CRCIN_CRCCLK(46),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(46),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(46),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(46),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(46),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN47_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN47_CRCCLK_posedge,
	TestSignal => CRCIN_dly(47),
	TestSignalName => "CRCIN(47)",
	TestDelay => tisd_CRCIN_CRCCLK(47),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(47),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(47),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(47),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(47),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN47_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN47_CRCCLK_posedge,
	TestSignal => CRCIN_dly(47),
	TestSignalName => "CRCIN(47)",
	TestDelay => tisd_CRCIN_CRCCLK(47),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(47),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(47),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(47),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(47),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN48_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN48_CRCCLK_posedge,
	TestSignal => CRCIN_dly(48),
	TestSignalName => "CRCIN(48)",
	TestDelay => tisd_CRCIN_CRCCLK(48),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(48),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(48),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(48),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(48),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN48_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN48_CRCCLK_posedge,
	TestSignal => CRCIN_dly(48),
	TestSignalName => "CRCIN(48)",
	TestDelay => tisd_CRCIN_CRCCLK(48),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(48),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(48),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(48),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(48),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN49_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN49_CRCCLK_posedge,
	TestSignal => CRCIN_dly(49),
	TestSignalName => "CRCIN(49)",
	TestDelay => tisd_CRCIN_CRCCLK(49),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(49),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(49),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(49),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(49),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN49_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN49_CRCCLK_posedge,
	TestSignal => CRCIN_dly(49),
	TestSignalName => "CRCIN(49)",
	TestDelay => tisd_CRCIN_CRCCLK(49),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(49),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(49),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(49),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(49),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN50_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN50_CRCCLK_posedge,
	TestSignal => CRCIN_dly(50),
	TestSignalName => "CRCIN(50)",
	TestDelay => tisd_CRCIN_CRCCLK(50),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(50),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(50),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(50),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(50),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN50_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN50_CRCCLK_posedge,
	TestSignal => CRCIN_dly(50),
	TestSignalName => "CRCIN(50)",
	TestDelay => tisd_CRCIN_CRCCLK(50),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(50),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(50),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(50),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(50),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN51_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN51_CRCCLK_posedge,
	TestSignal => CRCIN_dly(51),
	TestSignalName => "CRCIN(51)",
	TestDelay => tisd_CRCIN_CRCCLK(51),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(51),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(51),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(51),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(51),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN51_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN51_CRCCLK_posedge,
	TestSignal => CRCIN_dly(51),
	TestSignalName => "CRCIN(51)",
	TestDelay => tisd_CRCIN_CRCCLK(51),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(51),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(51),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(51),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(51),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN52_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN52_CRCCLK_posedge,
	TestSignal => CRCIN_dly(52),
	TestSignalName => "CRCIN(52)",
	TestDelay => tisd_CRCIN_CRCCLK(52),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(52),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(52),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(52),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(52),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN52_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN52_CRCCLK_posedge,
	TestSignal => CRCIN_dly(52),
	TestSignalName => "CRCIN(52)",
	TestDelay => tisd_CRCIN_CRCCLK(52),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(52),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(52),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(52),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(52),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN53_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN53_CRCCLK_posedge,
	TestSignal => CRCIN_dly(53),
	TestSignalName => "CRCIN(53)",
	TestDelay => tisd_CRCIN_CRCCLK(53),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(53),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(53),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(53),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(53),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN53_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN53_CRCCLK_posedge,
	TestSignal => CRCIN_dly(53),
	TestSignalName => "CRCIN(53)",
	TestDelay => tisd_CRCIN_CRCCLK(53),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(53),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(53),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(53),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(53),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN54_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN54_CRCCLK_posedge,
	TestSignal => CRCIN_dly(54),
	TestSignalName => "CRCIN(54)",
	TestDelay => tisd_CRCIN_CRCCLK(54),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(54),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(54),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(54),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(54),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN54_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN54_CRCCLK_posedge,
	TestSignal => CRCIN_dly(54),
	TestSignalName => "CRCIN(54)",
	TestDelay => tisd_CRCIN_CRCCLK(54),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(54),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(54),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(54),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(54),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN55_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN55_CRCCLK_posedge,
	TestSignal => CRCIN_dly(55),
	TestSignalName => "CRCIN(55)",
	TestDelay => tisd_CRCIN_CRCCLK(55),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(55),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(55),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(55),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(55),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN55_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN55_CRCCLK_posedge,
	TestSignal => CRCIN_dly(55),
	TestSignalName => "CRCIN(55)",
	TestDelay => tisd_CRCIN_CRCCLK(55),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(55),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(55),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(55),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(55),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN56_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN56_CRCCLK_posedge,
	TestSignal => CRCIN_dly(56),
	TestSignalName => "CRCIN(56)",
	TestDelay => tisd_CRCIN_CRCCLK(56),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(56),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(56),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(56),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(56),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN56_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN56_CRCCLK_posedge,
	TestSignal => CRCIN_dly(56),
	TestSignalName => "CRCIN(56)",
	TestDelay => tisd_CRCIN_CRCCLK(56),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(56),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(56),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(56),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(56),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN57_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN57_CRCCLK_posedge,
	TestSignal => CRCIN_dly(57),
	TestSignalName => "CRCIN(57)",
	TestDelay => tisd_CRCIN_CRCCLK(57),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(57),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(57),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(57),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(57),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN57_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN57_CRCCLK_posedge,
	TestSignal => CRCIN_dly(57),
	TestSignalName => "CRCIN(57)",
	TestDelay => tisd_CRCIN_CRCCLK(57),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(57),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(57),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(57),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(57),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN58_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN58_CRCCLK_posedge,
	TestSignal => CRCIN_dly(58),
	TestSignalName => "CRCIN(58)",
	TestDelay => tisd_CRCIN_CRCCLK(58),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(58),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(58),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(58),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(58),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN58_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN58_CRCCLK_posedge,
	TestSignal => CRCIN_dly(58),
	TestSignalName => "CRCIN(58)",
	TestDelay => tisd_CRCIN_CRCCLK(58),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(58),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(58),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(58),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(58),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN59_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN59_CRCCLK_posedge,
	TestSignal => CRCIN_dly(59),
	TestSignalName => "CRCIN(59)",
	TestDelay => tisd_CRCIN_CRCCLK(59),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(59),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(59),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(59),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(59),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN59_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN59_CRCCLK_posedge,
	TestSignal => CRCIN_dly(59),
	TestSignalName => "CRCIN(59)",
	TestDelay => tisd_CRCIN_CRCCLK(59),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(59),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(59),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(59),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(59),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN60_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN60_CRCCLK_posedge,
	TestSignal => CRCIN_dly(60),
	TestSignalName => "CRCIN(60)",
	TestDelay => tisd_CRCIN_CRCCLK(60),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(60),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(60),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(60),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(60),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN60_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN60_CRCCLK_posedge,
	TestSignal => CRCIN_dly(60),
	TestSignalName => "CRCIN(60)",
	TestDelay => tisd_CRCIN_CRCCLK(60),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(60),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(60),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(60),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(60),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN61_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN61_CRCCLK_posedge,
	TestSignal => CRCIN_dly(61),
	TestSignalName => "CRCIN(61)",
	TestDelay => tisd_CRCIN_CRCCLK(61),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(61),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(61),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(61),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(61),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN61_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN61_CRCCLK_posedge,
	TestSignal => CRCIN_dly(61),
	TestSignalName => "CRCIN(61)",
	TestDelay => tisd_CRCIN_CRCCLK(61),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(61),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(61),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(61),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(61),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN62_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN62_CRCCLK_posedge,
	TestSignal => CRCIN_dly(62),
	TestSignalName => "CRCIN(62)",
	TestDelay => tisd_CRCIN_CRCCLK(62),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(62),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(62),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(62),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(62),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN62_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN62_CRCCLK_posedge,
	TestSignal => CRCIN_dly(62),
	TestSignalName => "CRCIN(62)",
	TestDelay => tisd_CRCIN_CRCCLK(62),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(62),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(62),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(62),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(62),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN63_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN63_CRCCLK_posedge,
	TestSignal => CRCIN_dly(63),
	TestSignalName => "CRCIN(63)",
	TestDelay => tisd_CRCIN_CRCCLK(63),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(63),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(63),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(63),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(63),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCIN63_CRCCLK_posedge,
	TimingData => Tmkr_CRCIN63_CRCCLK_posedge,
	TestSignal => CRCIN_dly(63),
	TestSignalName => "CRCIN(63)",
	TestDelay => tisd_CRCIN_CRCCLK(63),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCIN_CRCCLK_posedge_posedge(63),
	SetupLow => tsetup_CRCIN_CRCCLK_negedge_posedge(63),
	HoldLow => thold_CRCIN_CRCCLK_posedge_posedge(63),
	HoldHigh => thold_CRCIN_CRCCLK_negedge_posedge(63),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation      => Tviol_CRCDATAVALID_CRCCLK_posedge,
	TimingData     => Tmkr_CRCDATAVALID_CRCCLK_posedge,
	TestSignal     => CRCDATAVALID,
	TestSignalName => "CRCDATAVALID",
	TestDelay      => 0 ns,
	RefSignal => CRCCLK_dly,
	RefSignalName  => "CRCCLK",
	RefDelay       => 0 ns,
	SetupHigh      => tsetup_CRCDATAVALID_CRCCLK_posedge_posedge,
	SetupLow       => tsetup_CRCDATAVALID_CRCCLK_negedge_posedge,
	HoldLow        => thold_CRCDATAVALID_CRCCLK_posedge_posedge,
	HoldHigh       => thold_CRCDATAVALID_CRCCLK_negedge_posedge,
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation      => Tviol_CRCDATAVALID_CRCCLK_posedge,
	TimingData     => Tmkr_CRCDATAVALID_CRCCLK_posedge,
	TestSignal     => CRCDATAVALID,
	TestSignalName => "CRCDATAVALID",
	TestDelay      => 0 ns,
	RefSignal => CRCCLK_dly,
	RefSignalName  => "CRCCLK",
	RefDelay       => 0 ns,
	SetupHigh      => tsetup_CRCDATAVALID_CRCCLK_posedge_posedge,
	SetupLow       => tsetup_CRCDATAVALID_CRCCLK_negedge_posedge,
	HoldLow        => thold_CRCDATAVALID_CRCCLK_posedge_posedge,
	HoldHigh       => thold_CRCDATAVALID_CRCCLK_negedge_posedge,
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCDATAWIDTH0_CRCCLK_posedge,
	TimingData => Tmkr_CRCDATAWIDTH0_CRCCLK_posedge,
	TestSignal => CRCDATAWIDTH_dly(0),
	TestSignalName => "CRCDATAWIDTH(0)",
	TestDelay => tisd_CRCDATAWIDTH_CRCCLK(0),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCDATAWIDTH_CRCCLK_posedge_posedge(0),
	SetupLow => tsetup_CRCDATAWIDTH_CRCCLK_negedge_posedge(0),
	HoldLow => thold_CRCDATAWIDTH_CRCCLK_posedge_posedge(0),
	HoldHigh => thold_CRCDATAWIDTH_CRCCLK_negedge_posedge(0),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCDATAWIDTH0_CRCCLK_posedge,
	TimingData => Tmkr_CRCDATAWIDTH0_CRCCLK_posedge,
	TestSignal => CRCDATAWIDTH_dly(0),
	TestSignalName => "CRCDATAWIDTH(0)",
	TestDelay => tisd_CRCDATAWIDTH_CRCCLK(0),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCDATAWIDTH_CRCCLK_posedge_posedge(0),
	SetupLow => tsetup_CRCDATAWIDTH_CRCCLK_negedge_posedge(0),
	HoldLow => thold_CRCDATAWIDTH_CRCCLK_posedge_posedge(0),
	HoldHigh => thold_CRCDATAWIDTH_CRCCLK_negedge_posedge(0),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCDATAWIDTH1_CRCCLK_posedge,
	TimingData => Tmkr_CRCDATAWIDTH1_CRCCLK_posedge,
	TestSignal => CRCDATAWIDTH_dly(1),
	TestSignalName => "CRCDATAWIDTH(1)",
	TestDelay => tisd_CRCDATAWIDTH_CRCCLK(1),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCDATAWIDTH_CRCCLK_posedge_posedge(1),
	SetupLow => tsetup_CRCDATAWIDTH_CRCCLK_negedge_posedge(1),
	HoldLow => thold_CRCDATAWIDTH_CRCCLK_posedge_posedge(1),
	HoldHigh => thold_CRCDATAWIDTH_CRCCLK_negedge_posedge(1),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCDATAWIDTH1_CRCCLK_posedge,
	TimingData => Tmkr_CRCDATAWIDTH1_CRCCLK_posedge,
	TestSignal => CRCDATAWIDTH_dly(1),
	TestSignalName => "CRCDATAWIDTH(1)",
	TestDelay => tisd_CRCDATAWIDTH_CRCCLK(1),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCDATAWIDTH_CRCCLK_posedge_posedge(1),
	SetupLow => tsetup_CRCDATAWIDTH_CRCCLK_negedge_posedge(1),
	HoldLow => thold_CRCDATAWIDTH_CRCCLK_posedge_posedge(1),
	HoldHigh => thold_CRCDATAWIDTH_CRCCLK_negedge_posedge(1),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCDATAWIDTH2_CRCCLK_posedge,
	TimingData => Tmkr_CRCDATAWIDTH2_CRCCLK_posedge,
	TestSignal => CRCDATAWIDTH_dly(2),
	TestSignalName => "CRCDATAWIDTH(2)",
	TestDelay => tisd_CRCDATAWIDTH_CRCCLK(2),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCDATAWIDTH_CRCCLK_posedge_posedge(2),
	SetupLow => tsetup_CRCDATAWIDTH_CRCCLK_negedge_posedge(2),
	HoldLow => thold_CRCDATAWIDTH_CRCCLK_posedge_posedge(2),
	HoldHigh => thold_CRCDATAWIDTH_CRCCLK_negedge_posedge(2),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation => Tviol_CRCDATAWIDTH2_CRCCLK_posedge,
	TimingData => Tmkr_CRCDATAWIDTH2_CRCCLK_posedge,
	TestSignal => CRCDATAWIDTH_dly(2),
	TestSignalName => "CRCDATAWIDTH(2)",
	TestDelay => tisd_CRCDATAWIDTH_CRCCLK(2),
	RefSignal => CRCCLK_dly,
	RefSignalName => "CRCCLK",
	RefDelay => ticd_CRCCLK,
	SetupHigh => tsetup_CRCDATAWIDTH_CRCCLK_posedge_posedge(2),
	SetupLow => tsetup_CRCDATAWIDTH_CRCCLK_negedge_posedge(2),
	HoldLow => thold_CRCDATAWIDTH_CRCCLK_posedge_posedge(2),
	HoldHigh => thold_CRCDATAWIDTH_CRCCLK_negedge_posedge(2),
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation      => Tviol_CRCRESET_CRCCLK_posedge,
	TimingData     => Tmkr_CRCRESET_CRCCLK_posedge,
	TestSignal     => CRCRESET,
	TestSignalName => "CRCRESET",
	TestDelay      => 0 ns,
	RefSignal => CRCCLK_dly,
	RefSignalName  => "CRCCLK",
	RefDelay       => 0 ns,
	SetupHigh      => tsetup_CRCRESET_CRCCLK_posedge_posedge,
	SetupLow       => tsetup_CRCRESET_CRCCLK_negedge_posedge,
	HoldLow        => thold_CRCRESET_CRCCLK_posedge_posedge,
	HoldHigh       => thold_CRCRESET_CRCCLK_negedge_posedge,
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);
	VitalSetupHoldCheck
	(
	Violation      => Tviol_CRCRESET_CRCCLK_posedge,
	TimingData     => Tmkr_CRCRESET_CRCCLK_posedge,
	TestSignal     => CRCRESET,
	TestSignalName => "CRCRESET",
	TestDelay      => 0 ns,
	RefSignal => CRCCLK_dly,
	RefSignalName  => "CRCCLK",
	RefDelay       => 0 ns,
	SetupHigh      => tsetup_CRCRESET_CRCCLK_posedge_posedge,
	SetupLow       => tsetup_CRCRESET_CRCCLK_negedge_posedge,
	HoldLow        => thold_CRCRESET_CRCCLK_posedge_posedge,
	HoldHigh       => thold_CRCRESET_CRCCLK_negedge_posedge,
	CheckEnabled   => TRUE,
	RefTransition  => 'R',
	HeaderMsg      => InstancePath & "/X_CRC64",
	Xon            => Xon,
	MsgOn          => MsgOn,
	MsgSeverity    => WARNING
	);

     end if;
-- End of (TimingChecksOn)

        Violation <= Tviol_CRCIN0_CRCCLK_posedge or Tviol_CRCIN1_CRCCLK_posedge or Tviol_CRCIN2_CRCCLK_posedge or Tviol_CRCIN3_CRCCLK_posedge or  Tviol_CRCIN4_CRCCLK_posedge or Tviol_CRCIN5_CRCCLK_posedge or Tviol_CRCIN6_CRCCLK_posedge or Tviol_CRCIN7_CRCCLK_posedge or Tviol_CRCIN8_CRCCLK_posedge or Tviol_CRCIN9_CRCCLK_posedge or Tviol_CRCIN10_CRCCLK_posedge or Tviol_CRCIN11_CRCCLK_posedge or Tviol_CRCIN12_CRCCLK_posedge or Tviol_CRCIN13_CRCCLK_posedge or Tviol_CRCIN14_CRCCLK_posedge or Tviol_CRCIN15_CRCCLK_posedge or Tviol_CRCIN16_CRCCLK_posedge or Tviol_CRCIN17_CRCCLK_posedge or Tviol_CRCIN18_CRCCLK_posedge or Tviol_CRCIN19_CRCCLK_posedge or Tviol_CRCIN20_CRCCLK_posedge or Tviol_CRCIN21_CRCCLK_posedge or Tviol_CRCIN22_CRCCLK_posedge or Tviol_CRCIN23_CRCCLK_posedge or Tviol_CRCIN24_CRCCLK_posedge or Tviol_CRCIN25_CRCCLK_posedge or Tviol_CRCIN26_CRCCLK_posedge or Tviol_CRCIN27_CRCCLK_posedge or Tviol_CRCIN28_CRCCLK_posedge or Tviol_CRCIN29_CRCCLK_posedge or Tviol_CRCIN30_CRCCLK_posedge or Tviol_CRCIN31_CRCCLK_posedge or Tviol_CRCIN32_CRCCLK_posedge or Tviol_CRCIN33_CRCCLK_posedge or Tviol_CRCIN34_CRCCLK_posedge or Tviol_CRCIN35_CRCCLK_posedge or  Tviol_CRCIN36_CRCCLK_posedge or Tviol_CRCIN37_CRCCLK_posedge or Tviol_CRCIN38_CRCCLK_posedge or Tviol_CRCIN39_CRCCLK_posedge or Tviol_CRCIN40_CRCCLK_posedge or Tviol_CRCIN41_CRCCLK_posedge or Tviol_CRCIN42_CRCCLK_posedge or Tviol_CRCIN43_CRCCLK_posedge or Tviol_CRCIN44_CRCCLK_posedge or Tviol_CRCIN45_CRCCLK_posedge or Tviol_CRCIN46_CRCCLK_posedge or Tviol_CRCIN47_CRCCLK_posedge or Tviol_CRCIN48_CRCCLK_posedge or Tviol_CRCIN49_CRCCLK_posedge or Tviol_CRCIN50_CRCCLK_posedge or Tviol_CRCIN51_CRCCLK_posedge or Tviol_CRCIN52_CRCCLK_posedge or Tviol_CRCIN53_CRCCLK_posedge or Tviol_CRCIN54_CRCCLK_posedge or Tviol_CRCIN55_CRCCLK_posedge or Tviol_CRCIN56_CRCCLK_posedge or Tviol_CRCIN57_CRCCLK_posedge or Tviol_CRCIN58_CRCCLK_posedge or Tviol_CRCIN59_CRCCLK_posedge or Tviol_CRCIN60_CRCCLK_posedge or Tviol_CRCIN61_CRCCLK_posedge or Tviol_CRCIN62_CRCCLK_posedge or Tviol_CRCIN62_CRCCLK_posedge or Tviol_CRCRESET_CRCCLK_posedge or Tviol_CRCDATAWIDTH0_CRCCLK_posedge or Tviol_CRCDATAWIDTH1_CRCCLK_posedge or Tviol_CRCDATAWIDTH2_CRCCLK_posedge or Tviol_CRCDATAVALID_CRCCLK_posedge;
          
 --  Wait signal (input/output pins)
   wait on
	CRCIN_dly,
	CRCDATAVALID_dly,
	CRCDATAWIDTH_dly,
	CRCRESET_dly,
	CRCCLK_dly;
     
  end process;

--####################################################################
--#####                           OUTPUT                         #####
--####################################################################
  prcs_output:process
    --  Output Pin glitch declaration
	variable  CRCOUT0_GlitchData : VitalGlitchDataType;
	variable  CRCOUT1_GlitchData : VitalGlitchDataType;
	variable  CRCOUT2_GlitchData : VitalGlitchDataType;
	variable  CRCOUT3_GlitchData : VitalGlitchDataType;
	variable  CRCOUT4_GlitchData : VitalGlitchDataType;
	variable  CRCOUT5_GlitchData : VitalGlitchDataType;
	variable  CRCOUT6_GlitchData : VitalGlitchDataType;
	variable  CRCOUT7_GlitchData : VitalGlitchDataType;
	variable  CRCOUT8_GlitchData : VitalGlitchDataType;
	variable  CRCOUT9_GlitchData : VitalGlitchDataType;
	variable  CRCOUT10_GlitchData : VitalGlitchDataType;
	variable  CRCOUT11_GlitchData : VitalGlitchDataType;
	variable  CRCOUT12_GlitchData : VitalGlitchDataType;
	variable  CRCOUT13_GlitchData : VitalGlitchDataType;
	variable  CRCOUT14_GlitchData : VitalGlitchDataType;
	variable  CRCOUT15_GlitchData : VitalGlitchDataType;
	variable  CRCOUT16_GlitchData : VitalGlitchDataType;
	variable  CRCOUT17_GlitchData : VitalGlitchDataType;
	variable  CRCOUT18_GlitchData : VitalGlitchDataType;
	variable  CRCOUT19_GlitchData : VitalGlitchDataType;
	variable  CRCOUT20_GlitchData : VitalGlitchDataType;
	variable  CRCOUT21_GlitchData : VitalGlitchDataType;
	variable  CRCOUT22_GlitchData : VitalGlitchDataType;
	variable  CRCOUT23_GlitchData : VitalGlitchDataType;
	variable  CRCOUT24_GlitchData : VitalGlitchDataType;
	variable  CRCOUT25_GlitchData : VitalGlitchDataType;
	variable  CRCOUT26_GlitchData : VitalGlitchDataType;
	variable  CRCOUT27_GlitchData : VitalGlitchDataType;
	variable  CRCOUT28_GlitchData : VitalGlitchDataType;
	variable  CRCOUT29_GlitchData : VitalGlitchDataType;
	variable  CRCOUT30_GlitchData : VitalGlitchDataType;
	variable  CRCOUT31_GlitchData : VitalGlitchDataType;
        variable  CRCOUT_viol : std_logic_vector (31 downto 0); 
  begin
    
    if (Violation = 'X') then
      CRCOUT_viol := (others => 'X');
    else
      CRCOUT_viol := CRCOUT_zd;
    end if;
    --  Output-to-Clock path delay
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(0),
	GlitchData    => CRCOUT0_GlitchData,
	OutSignalName => "CRCOUT(0)",
	OutTemp       => CRCOUT_viol(0),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(0),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(1),
	GlitchData    => CRCOUT1_GlitchData,
	OutSignalName => "CRCOUT(1)",
	OutTemp       => CRCOUT_viol(1),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(1),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(2),
	GlitchData    => CRCOUT2_GlitchData,
	OutSignalName => "CRCOUT(2)",
	OutTemp       => CRCOUT_viol(2),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(2),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(3),
	GlitchData    => CRCOUT3_GlitchData,
	OutSignalName => "CRCOUT(3)",
	OutTemp       => CRCOUT_viol(3),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(3),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(4),
	GlitchData    => CRCOUT4_GlitchData,
	OutSignalName => "CRCOUT(4)",
	OutTemp       => CRCOUT_viol(4),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(4),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(5),
	GlitchData    => CRCOUT5_GlitchData,
	OutSignalName => "CRCOUT(5)",
	OutTemp       => CRCOUT_viol(5),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(5),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(6),
	GlitchData    => CRCOUT6_GlitchData,
	OutSignalName => "CRCOUT(6)",
	OutTemp       => CRCOUT_viol(6),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(6),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(7),
	GlitchData    => CRCOUT7_GlitchData,
	OutSignalName => "CRCOUT(7)",
	OutTemp       => CRCOUT_viol(7),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(7),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(8),
	GlitchData    => CRCOUT8_GlitchData,
	OutSignalName => "CRCOUT(8)",
	OutTemp       => CRCOUT_viol(8),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(8),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(9),
	GlitchData    => CRCOUT9_GlitchData,
	OutSignalName => "CRCOUT(9)",
	OutTemp       => CRCOUT_viol(9),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(9),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(10),
	GlitchData    => CRCOUT10_GlitchData,
	OutSignalName => "CRCOUT(10)",
	OutTemp       => CRCOUT_viol(10),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(10),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(11),
	GlitchData    => CRCOUT11_GlitchData,
	OutSignalName => "CRCOUT(11)",
	OutTemp       => CRCOUT_viol(11),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(11),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(12),
	GlitchData    => CRCOUT12_GlitchData,
	OutSignalName => "CRCOUT(12)",
	OutTemp       => CRCOUT_viol(12),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(12),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(13),
	GlitchData    => CRCOUT13_GlitchData,
	OutSignalName => "CRCOUT(13)",
	OutTemp       => CRCOUT_viol(13),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(13),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(14),
	GlitchData    => CRCOUT14_GlitchData,
	OutSignalName => "CRCOUT(14)",
	OutTemp       => CRCOUT_viol(14),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(14),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(15),
	GlitchData    => CRCOUT15_GlitchData,
	OutSignalName => "CRCOUT(15)",
	OutTemp       => CRCOUT_viol(15),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(15),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(16),
	GlitchData    => CRCOUT16_GlitchData,
	OutSignalName => "CRCOUT(16)",
	OutTemp       => CRCOUT_viol(16),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(16),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(17),
	GlitchData    => CRCOUT17_GlitchData,
	OutSignalName => "CRCOUT(17)",
	OutTemp       => CRCOUT_viol(17),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(17),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(18),
	GlitchData    => CRCOUT18_GlitchData,
	OutSignalName => "CRCOUT(18)",
	OutTemp       => CRCOUT_viol(18),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(18),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(19),
	GlitchData    => CRCOUT19_GlitchData,
	OutSignalName => "CRCOUT(19)",
	OutTemp       => CRCOUT_viol(19),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(19),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(20),
	GlitchData    => CRCOUT20_GlitchData,
	OutSignalName => "CRCOUT(20)",
	OutTemp       => CRCOUT_viol(20),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(20),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(21),
	GlitchData    => CRCOUT21_GlitchData,
	OutSignalName => "CRCOUT(21)",
	OutTemp       => CRCOUT_viol(21),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(21),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(22),
	GlitchData    => CRCOUT22_GlitchData,
	OutSignalName => "CRCOUT(22)",
	OutTemp       => CRCOUT_viol(22),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(22),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(23),
	GlitchData    => CRCOUT23_GlitchData,
	OutSignalName => "CRCOUT(23)",
	OutTemp       => CRCOUT_viol(23),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(23),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(24),
	GlitchData    => CRCOUT24_GlitchData,
	OutSignalName => "CRCOUT(24)",
	OutTemp       => CRCOUT_viol(24),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(24),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(25),
	GlitchData    => CRCOUT25_GlitchData,
	OutSignalName => "CRCOUT(25)",
	OutTemp       => CRCOUT_viol(25),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(25),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(26),
	GlitchData    => CRCOUT26_GlitchData,
	OutSignalName => "CRCOUT(26)",
	OutTemp       => CRCOUT_viol(26),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(26),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(27),
	GlitchData    => CRCOUT27_GlitchData,
	OutSignalName => "CRCOUT(27)",
	OutTemp       => CRCOUT_viol(27),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(27),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(28),
	GlitchData    => CRCOUT28_GlitchData,
	OutSignalName => "CRCOUT(28)",
	OutTemp       => CRCOUT_viol(28),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(28),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(29),
	GlitchData    => CRCOUT29_GlitchData,
	OutSignalName => "CRCOUT(29)",
	OutTemp       => CRCOUT_viol(29),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(29),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(30),
	GlitchData    => CRCOUT30_GlitchData,
	OutSignalName => "CRCOUT(30)",
	OutTemp       => CRCOUT_viol(30),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(30),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
	VitalPathDelay01
	(
	OutSignal     => CRCOUT(31),
	GlitchData    => CRCOUT31_GlitchData,
	OutSignalName => "CRCOUT(31)",
	OutTemp       => CRCOUT_viol(31),
	Paths       => (0 => (CRCCLK_dly'last_event, tpd_CRCCLK_CRCOUT(31),TRUE)),
	Mode          => VitalTransport,
	Xon           => false,
	MsgOn         => false,
	MsgSeverity   => WARNING
	);
    --  Wait signal (input/output pins)
   wait on
     Violation,
     CRCOUT_zd;
    
  end process;
    

end X_CRC64_V;
-------------------------------------------------------------------------------
-- Copyright (c) 1995/2004 Xilinx, Inc.
-- All Right Reserved.
-------------------------------------------------------------------------------
--   ____  ____
--  /   /\/   /
-- /___/  \  /    Vendor : Xilinx
-- \   \   \/     Version : 10.1i
--  \   \         Description : Xilinx Timing Simulation Library Component
--  /   /                  18X18 Signed Multiplier Followed by Three-Input Adder plus ALU with Pipeline Registers
-- /___/   /\     Filename : X_DSP48E.vhd
-- \   \  /  \    Timestamp : Mon Mar 28 22:50:04 PST 2005
--  \___\/\___\
--
-- Revision:
--    03/28/05 - Initial version.
--    05/26/05 - BTrack 191 mult not valid in TWO24/FOUR12/USE_MULT=NONE.
--    06/16/05 - Added MULTSIGNIN/OUT pins and functionality
--    09/29/05 - Made xyz muxes to be sensitive to carryinsel when recovering from invalid opmode/carryinsel
--    10/05/05 - Added more valid DRC check entries.
--    10/25/05 - CR 219047
--    11/03/05 - Added two DRC checks -- ARITHMETIC and LOGIC
--    11/07/05 - 'X'ed out carrycascout in LOGIC modes (like the carryout)
--    11/21/05 - 'X'ed out pattern detect signals when in illegal opmodes.
--    02/28/06 - CR 225886 -- USE_MULT check updates. 
--    02/28/06 - CR 226267 -- Changed USE_MULT default to MULT_S.
--    05/20/06 - CR 230656 -- Disabled RSTP timing check during GSR.
--    05/29/06 - CR 232187 -- Corrected multcarryinreg CASE statement 
--    05/29/06 - CR 232275 -- Corrected PREG/multsignout_o_mux
--    10/29/06 - CR 424959 -- Corrected simprim false violation warnings
--    12/10/06 - CR 429825 -- Added Timing Checks for CARRYCASCIN.
--    02/20/07 - CR 434192 -- Fixed RSTALUMODE issue
--    06/11/07 - Added SIM_MODE -- FAST/SAFE feature
--    06/29/07 - CR 438456 -- Added DRC to output X when USE_MULT=MULT_S is set and not using the multiplier opmode through muxX 
--    08/06/07 - CR 445673 -- Fixed CARRYCASCOUT registered mode issue
--    10/01/07 - CR 448147 -- Fixed error introduced by 438456
--    10/10/07 - CR 451453 -- DRC warning
--    10/15/07 - CR 444150 -- DRC check enhancements for OPMODEREG/CARRYINSELREG 
--    11/06/07 - CR 451178 -- DRC warning enhancement
--    02/06/08 - CR 455601 -- DRC relax for OPMODEREG/CARRYINSELREG
-- End Revision
----- CELL X_DSP48E -----

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.STD_LOGIC_SIGNED.all;
use IEEE.STD_LOGIC_ARITH.all;

library STD;
use STD.TEXTIO.all;


library IEEE;
use IEEE.VITAL_Timing.all;

library simprim;
use simprim.Vcomponents.all;
use simprim.VPACKAGE.all;

entity X_DSP48E is

  generic(

        TimingChecksOn  : boolean       := true;
        InstancePath    : string        := "*";
        Xon             : boolean       := true;
        MsgOn           : boolean       := true;
    	LOC		: string	:= "UNPLACED";

----- VITAL input wire delays
        tipd_A          : VitalDelayArrayType01 (29 downto 0) := (others => (0 ps, 0 ps));
        tipd_ACIN       : VitalDelayArrayType01 (29 downto 0) := (others => (0 ps, 0 ps));
        tipd_ALUMODE    : VitalDelayArrayType01 (3 downto 0)  := (others => (0 ps, 0 ps));
        tipd_B          : VitalDelayArrayType01 (17 downto 0) := (others => (0 ps, 0 ps));
        tipd_BCIN       : VitalDelayArrayType01 (17 downto 0) := (others => (0 ps, 0 ps));
        tipd_C          : VitalDelayArrayType01 (47 downto 0) := (others => (0 ps, 0 ps));
        tipd_CARRYCASCIN : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_CARRYIN    : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_CARRYINSEL : VitalDelayArrayType01 (2 downto 0) := (others => (0 ps, 0 ps));
        tipd_CEA1       : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_CEA2       : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_CEALUMODE  : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_CEB1       : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_CEB2       : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_CEC        : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_CECARRYIN  : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_CECTRL     : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_CEMULTCARRYIN   : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_CEM        : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_CEP        : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_CLK        : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_GSR        : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_MULTSIGNIN : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_OPMODE     : VitalDelayArrayType01 (6 downto 0) := (others => (0 ps, 0 ps));
        tipd_PCIN       : VitalDelayArrayType01 (47 downto 0) := (others => (0 ps, 0 ps));
        tipd_RSTA       : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_RSTALUMODE : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_RSTB       : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_RSTC       : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_RSTALLCARRYIN : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_RSTCTRL    : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_RSTM       : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_RSTP       : VitalDelayType01 := ( 0 ps,  0 ps);

----- VITAL pin-to-pin propagation delays

        tpd_A_ACOUT     : VitalDelayArrayType01 (899 downto 0)  := (others => (0 ps, 0 ps));
        tpd_A_CARRYOUT  : VitalDelayArrayType01 (119 downto 0)   := (others => (0 ps, 0 ps));
        tpd_A_CARRYCASCOUT  : VitalDelayArrayType01 (29 downto 0)   := (others => (0 ps, 0 ps));
        tpd_A_MULTSIGNOUT  : VitalDelayArrayType01 (29 downto 0)   := (others => (0 ps, 0 ps));
        tpd_A_OVERFLOW  : VitalDelayArrayType01 (29 downto 0)   := (others => (0 ps, 0 ps));
        tpd_A_P         : VitalDelayArrayType01 (1439 downto 0) := (others => (0 ps, 0 ps));
        tpd_A_PATTERNBDETECT : VitalDelayArrayType01 (29 downto 0)   := (others => (0 ps, 0 ps));
        tpd_A_PATTERNDETECT  : VitalDelayArrayType01 (29 downto 0)   := (others => (0 ps, 0 ps));
        tpd_A_PCOUT     : VitalDelayArrayType01 (1439 downto 0) := (others => (0 ps, 0 ps));
        tpd_A_UNDERFLOW : VitalDelayArrayType01 (29 downto 0)   := (others => (0 ps, 0 ps));

        tpd_ACIN_ACOUT  : VitalDelayArrayType01 (899 downto 0)  := (others => (0 ps, 0 ps));
        tpd_ACIN_CARRYOUT  : VitalDelayArrayType01 (119 downto 0)   := (others => (0 ps, 0 ps));
        tpd_ACIN_CARRYCASCOUT  : VitalDelayArrayType01 (29 downto 0)   := (others => (0 ps, 0 ps));
        tpd_ACIN_MULTSIGNOUT  : VitalDelayArrayType01 (29 downto 0)   := (others => (0 ps, 0 ps));
        tpd_ACIN_OVERFLOW  : VitalDelayArrayType01 (29 downto 0)   := (others => (0 ps, 0 ps));
        tpd_ACIN_P      : VitalDelayArrayType01 (1439 downto 0)  := (others => (0 ps, 0 ps));
        tpd_ACIN_PATTERNBDETECT : VitalDelayArrayType01 (29 downto 0)   := (others => (0 ps, 0 ps));
        tpd_ACIN_PATTERNDETECT  : VitalDelayArrayType01 (29 downto 0)   := (others => (0 ps, 0 ps));
        tpd_ACIN_PCOUT  : VitalDelayArrayType01 (1439 downto 0)  := (others => (0 ps, 0 ps));
        tpd_ACIN_UNDERFLOW : VitalDelayArrayType01 (29 downto 0)   := (others => (0 ps, 0 ps));

        tpd_ALUMODE_ACOUT  : VitalDelayArrayType01 (119 downto 0)  := (others => (0 ps, 0 ps));
        tpd_ALUMODE_CARRYOUT  : VitalDelayArrayType01 (15 downto 0)   := (others => (0 ps, 0 ps));
        tpd_ALUMODE_CARRYCASCOUT  : VitalDelayArrayType01 (3 downto 0)   := (others => (0 ps, 0 ps));
        tpd_ALUMODE_MULTSIGNOUT  : VitalDelayArrayType01 (3 downto 0)   := (others => (0 ps, 0 ps));
        tpd_ALUMODE_OVERFLOW  : VitalDelayArrayType01 (3 downto 0)   := (others => (0 ps, 0 ps));
        tpd_ALUMODE_P      : VitalDelayArrayType01 (191 downto 0)  := (others => (0 ps, 0 ps));
        tpd_ALUMODE_PATTERNBDETECT : VitalDelayArrayType01 (3 downto 0)   := (others => (0 ps, 0 ps));
        tpd_ALUMODE_PATTERNDETECT  : VitalDelayArrayType01 (3 downto 0)   := (others => (0 ps, 0 ps));
        tpd_ALUMODE_PCOUT  : VitalDelayArrayType01 (191 downto 0)  := (others => (0 ps, 0 ps));
        tpd_ALUMODE_UNDERFLOW : VitalDelayArrayType01 (3 downto 0)   := (others => (0 ps, 0 ps));

        tpd_B_BCOUT     : VitalDelayArrayType01 (323 downto 0)  := (others => (0 ps, 0 ps));
        tpd_B_CARRYOUT  : VitalDelayArrayType01 (71 downto 0)   := (others => (0 ps, 0 ps));
        tpd_B_CARRYCASCOUT  : VitalDelayArrayType01 (17 downto 0)   := (others => (0 ps, 0 ps));
        tpd_B_MULTSIGNOUT  : VitalDelayArrayType01 (17 downto 0)   := (others => (0 ps, 0 ps));
        tpd_B_OVERFLOW  : VitalDelayArrayType01 (17 downto 0)   := (others => (0 ps, 0 ps));
        tpd_B_P         : VitalDelayArrayType01 (863 downto 0)  := (others => (0 ps, 0 ps));
        tpd_B_PATTERNBDETECT : VitalDelayArrayType01 (17 downto 0)   := (others => (0 ps, 0 ps));
        tpd_B_PATTERNDETECT  : VitalDelayArrayType01 (17 downto 0)   := (others => (0 ps, 0 ps));
        tpd_B_PCOUT     : VitalDelayArrayType01 (863 downto 0)  := (others => (0 ps, 0 ps));
        tpd_B_UNDERFLOW  : VitalDelayArrayType01 (17 downto 0)   := (others => (0 ps, 0 ps));

        tpd_BCIN_BCOUT  : VitalDelayArrayType01 (323 downto 0)  := (others => (0 ps, 0 ps));
        tpd_BCIN_CARRYOUT  : VitalDelayArrayType01 (71 downto 0)   := (others => (0 ps, 0 ps));
        tpd_BCIN_CARRYCASCOUT  : VitalDelayArrayType01 (17 downto 0)   := (others => (0 ps, 0 ps));
        tpd_BCIN_MULTSIGNOUT  : VitalDelayArrayType01 (17 downto 0)   := (others => (0 ps, 0 ps));
        tpd_BCIN_OVERFLOW  : VitalDelayArrayType01 (17 downto 0)   := (others => (0 ps, 0 ps));
        tpd_BCIN_P      : VitalDelayArrayType01 (863 downto 0)  := (others => (0 ps, 0 ps));
        tpd_BCIN_PATTERNBDETECT : VitalDelayArrayType01 (17 downto 0)   := (others => (0 ps, 0 ps));
        tpd_BCIN_PATTERNDETECT  : VitalDelayArrayType01 (17 downto 0)   := (others => (0 ps, 0 ps));
        tpd_BCIN_PCOUT  : VitalDelayArrayType01 (863 downto 0)  := (others => (0 ps, 0 ps));
        tpd_BCIN_UNDERFLOW  : VitalDelayArrayType01 (17 downto 0)   := (others => (0 ps, 0 ps));

        tpd_C_CARRYOUT      : VitalDelayArrayType01 (191 downto 0) := (others => (0 ps, 0 ps));
        tpd_C_CARRYCASCOUT  : VitalDelayArrayType01 (47 downto 0) := (others => (0 ps, 0 ps));
        tpd_C_MULTSIGNOUT  : VitalDelayArrayType01 (47 downto 0) := (others => (0 ps, 0 ps));
        tpd_C_OVERFLOW  : VitalDelayArrayType01 (47 downto 0) := (others => (0 ps, 0 ps));
        tpd_C_P         : VitalDelayArrayType01 (2303 downto 0) := (others => (0 ps, 0 ps));
        tpd_C_PATTERNBDETECT  : VitalDelayArrayType01 (47 downto 0) := (others => (0 ps, 0 ps));
        tpd_C_PATTERNDETECT  : VitalDelayArrayType01 (47 downto 0) := (others => (0 ps, 0 ps));
        tpd_C_PCOUT     : VitalDelayArrayType01 (2303 downto 0) := (others => (0 ps, 0 ps));
        tpd_C_UNDERFLOW  : VitalDelayArrayType01 (47 downto 0) := (others => (0 ps, 0 ps));

        tpd_CARRYIN_CARRYOUT  : VitalDelayArrayType01 (3 downto 0) := (others => (0 ps, 0 ps));
        tpd_CARRYIN_CARRYCASCOUT  : VitalDelayType01 := (0 ps, 0 ps);
        tpd_CARRYIN_MULTSIGNOUT  : VitalDelayType01 := (0 ps, 0 ps);
        tpd_CARRYIN_OVERFLOW  : VitalDelayType01 := (0 ps, 0 ps);
        tpd_CARRYIN_P     : VitalDelayArrayType01 (47 downto 0) := (others => (0 ps, 0 ps));
        tpd_CARRYIN_PATTERNBDETECT  : VitalDelayType01 := (0 ps, 0 ps);
        tpd_CARRYIN_PATTERNDETECT  : VitalDelayType01 := (0 ps, 0 ps);
        tpd_CARRYIN_PCOUT : VitalDelayArrayType01 (47 downto 0) := (others => (0 ps, 0 ps));
        tpd_CARRYIN_UNDERFLOW  : VitalDelayType01 := (0 ps, 0 ps);

        tpd_CARRYINSEL_CARRYOUT  : VitalDelayArrayType01 (11 downto 0) := (others => (0 ps, 0 ps));
        tpd_CARRYINSEL_CARRYCASCOUT  : VitalDelayArrayType01 (2 downto 0) := (others => (0 ps, 0 ps));
        tpd_CARRYINSEL_MULTSIGNOUT  : VitalDelayArrayType01 (2 downto 0) := (others => (0 ps, 0 ps));
        tpd_CARRYINSEL_OVERFLOW  : VitalDelayArrayType01 (2 downto 0) := (others => (0 ps, 0 ps));
        tpd_CARRYINSEL_P     : VitalDelayArrayType01 (143 downto 0)  := (others => (0 ps, 0 ps));
        tpd_CARRYINSEL_PATTERNBDETECT  : VitalDelayArrayType01 (2 downto 0) := (others => (0 ps, 0 ps));
        tpd_CARRYINSEL_PATTERNDETECT  : VitalDelayArrayType01 (2 downto 0) := (others => (0 ps, 0 ps));
        tpd_CARRYINSEL_PCOUT : VitalDelayArrayType01 (143 downto 0)  := (others => (0 ps, 0 ps));
        tpd_CARRYINSEL_UNDERFLOW  : VitalDelayArrayType01 (2 downto 0) := (others => (0 ps, 0 ps));

        tpd_CARRYCASCIN_CARRYOUT  : VitalDelayArrayType01 (3 downto 0) := (others => (0 ps, 0 ps));
        tpd_CARRYCASCIN_CARRYCASCOUT  : VitalDelayType01 := (0 ps, 0 ps);
        tpd_CARRYCASCIN_MULTSIGNOUT  : VitalDelayType01 := (0 ps, 0 ps);
        tpd_CARRYCASCIN_OVERFLOW  : VitalDelayType01 := (0 ps, 0 ps);
        tpd_CARRYCASCIN_P     : VitalDelayArrayType01 (47 downto 0)  := (others => (0 ps, 0 ps));
        tpd_CARRYCASCIN_PATTERNBDETECT  : VitalDelayType01 := (0 ps, 0 ps);
        tpd_CARRYCASCIN_PATTERNDETECT  : VitalDelayType01 := (0 ps, 0 ps);
        tpd_CARRYCASCIN_PCOUT : VitalDelayArrayType01 (47 downto 0)  := (others => (0 ps, 0 ps));
        tpd_CARRYCASCIN_UNDERFLOW  : VitalDelayType01 := (0 ps, 0 ps);

        tpd_CLK_ACOUT   : VitalDelayArrayType01 (29 downto 0)  := (others => (100 ps, 100 ps));
        tpd_CLK_BCOUT   : VitalDelayArrayType01 (17 downto 0)  := (others => (100 ps, 100 ps));
        tpd_CLK_CARRYOUT   : VitalDelayArrayType01 (3 downto 0)  := (others => (100 ps, 100 ps));
        tpd_CLK_CARRYCASCOUT : VitalDelayType01 	       := (100 ps, 100 ps);
        tpd_CLK_MULTSIGNOUT : VitalDelayType01 	       := (100 ps, 100 ps);
        tpd_CLK_OVERFLOW : VitalDelayType01 	       := (100 ps, 100 ps);
        tpd_CLK_P       : VitalDelayArrayType01 (47 downto 0)  := (others => (100 ps, 100 ps));
        tpd_CLK_PATTERNBDETECT : VitalDelayType01 	       := (100 ps, 100 ps);
        tpd_CLK_PATTERNDETECT : VitalDelayType01 	       := (100 ps, 100 ps);
        tpd_CLK_PCOUT   : VitalDelayArrayType01 (47 downto 0)  := (others => (100 ps, 100 ps));
        tpd_CLK_UNDERFLOW : VitalDelayType01 	       := (100 ps, 100 ps);

        tpd_MULTSIGNIN_CARRYOUT  : VitalDelayArrayType01 (3 downto 0) := (others => (0 ps, 0 ps));
        tpd_MULTSIGNIN_CARRYCASCOUT  : VitalDelayType01 := (0 ps, 0 ps);
        tpd_MULTSIGNIN_MULTSIGNOUT  : VitalDelayType01 := (0 ps, 0 ps);
        tpd_MULTSIGNIN_OVERFLOW  : VitalDelayType01 := (0 ps, 0 ps);
        tpd_MULTSIGNIN_P     : VitalDelayArrayType01 (47 downto 0) := (others => (0 ps, 0 ps));
        tpd_MULTSIGNIN_PATTERNBDETECT  : VitalDelayType01 := (0 ps, 0 ps);
        tpd_MULTSIGNIN_PATTERNDETECT  : VitalDelayType01 := (0 ps, 0 ps);
        tpd_MULTSIGNIN_PCOUT : VitalDelayArrayType01 (47 downto 0) := (others => (0 ps, 0 ps));
        tpd_MULTSIGNIN_UNDERFLOW  : VitalDelayType01 := (0 ps, 0 ps);

        tpd_OPMODE_CARRYOUT  : VitalDelayArrayType01 (27 downto 0)   := (others => (0 ps, 0 ps));
        tpd_OPMODE_CARRYCASCOUT  : VitalDelayArrayType01 (6 downto 0)   := (others => (0 ps, 0 ps));
        tpd_OPMODE_MULTSIGNOUT  : VitalDelayArrayType01 (6 downto 0)   := (others => (0 ps, 0 ps));
        tpd_OPMODE_OVERFLOW  : VitalDelayArrayType01 (6 downto 0)   := (others => (0 ps, 0 ps));
        tpd_OPMODE_P     : VitalDelayArrayType01 (335 downto 0)  := (others => (0 ps, 0 ps));
        tpd_OPMODE_PATTERNBDETECT  : VitalDelayArrayType01 (6 downto 0)   := (others => (0 ps, 0 ps));
        tpd_OPMODE_PATTERNDETECT  : VitalDelayArrayType01 (6 downto 0)   := (others => (0 ps, 0 ps));
        tpd_OPMODE_PCOUT : VitalDelayArrayType01 (335 downto 0)  := (others => (0 ps, 0 ps));
        tpd_OPMODE_UNDERFLOW  : VitalDelayArrayType01 (6 downto 0)   := (others => (0 ps, 0 ps));

        tpd_PCIN_CARRYOUT  : VitalDelayArrayType01 (191 downto 0)   := (others => (0 ps, 0 ps));
        tpd_PCIN_CARRYCASCOUT  : VitalDelayArrayType01 (47 downto 0)   := (others => (0 ps, 0 ps));
        tpd_PCIN_MULTSIGNOUT  : VitalDelayArrayType01 (47 downto 0)   := (others => (0 ps, 0 ps));
        tpd_PCIN_OVERFLOW  : VitalDelayArrayType01 (47 downto 0)   := (others => (0 ps, 0 ps));
        tpd_PCIN_P      : VitalDelayArrayType01 (2303 downto 0)  := (others => (0 ps, 0 ps));
        tpd_PCIN_PATTERNBDETECT  : VitalDelayArrayType01 (47 downto 0)   := (others => (0 ps, 0 ps));
        tpd_PCIN_PATTERNDETECT  : VitalDelayArrayType01 (47 downto 0)   := (others => (0 ps, 0 ps));
        tpd_PCIN_PCOUT  : VitalDelayArrayType01 (2303 downto 0)  := (others => (0 ps, 0 ps));
        tpd_PCIN_UNDERFLOW  : VitalDelayArrayType01 (47 downto 0)   := (others => (0 ps, 0 ps));

----- VITAL setup and hold times
       
        tsetup_A_CLK_posedge_posedge : VitalDelayArrayType(29 downto 0) := (others => 0 ps);
        tsetup_A_CLK_negedge_posedge : VitalDelayArrayType(29 downto 0) := (others => 0 ps);
        tsetup_ACIN_CLK_posedge_posedge : VitalDelayArrayType(29 downto 0) := (others => 0 ps);
        tsetup_ACIN_CLK_negedge_posedge : VitalDelayArrayType(29 downto 0) := (others => 0 ps);
        tsetup_ALUMODE_CLK_posedge_posedge : VitalDelayArrayType(3 downto 0) := (others => 0 ps);
        tsetup_ALUMODE_CLK_negedge_posedge : VitalDelayArrayType(3 downto 0) := (others => 0 ps);
        tsetup_B_CLK_posedge_posedge : VitalDelayArrayType(17 downto 0) := (others => 0 ps);
        tsetup_B_CLK_negedge_posedge : VitalDelayArrayType(17 downto 0) := (others => 0 ps);
        tsetup_BCIN_CLK_posedge_posedge : VitalDelayArrayType(17 downto 0) := (others => 0 ps);
        tsetup_BCIN_CLK_negedge_posedge : VitalDelayArrayType(17 downto 0) := (others => 0 ps);
        tsetup_C_CLK_posedge_posedge : VitalDelayArrayType(47 downto 0) := (others => 0 ps);
        tsetup_C_CLK_negedge_posedge : VitalDelayArrayType(47 downto 0) := (others => 0 ps);
        tsetup_CARRYCASCIN_CLK_posedge_posedge : VitalDelayType := 0 ps;
        tsetup_CARRYCASCIN_CLK_negedge_posedge : VitalDelayType := 0 ps;
        tsetup_CARRYIN_CLK_posedge_posedge : VitalDelayType := 0 ps;
        tsetup_CARRYIN_CLK_negedge_posedge : VitalDelayType := 0 ps;
        tsetup_CARRYINSEL_CLK_posedge_posedge : VitalDelayArrayType(2 downto 0) := (others => 0 ps);
        tsetup_CARRYINSEL_CLK_negedge_posedge : VitalDelayArrayType(2 downto 0) := (others => 0 ps);
        tsetup_CEA1_CLK_posedge_posedge : VitalDelayType := 0 ps;
        tsetup_CEA1_CLK_negedge_posedge : VitalDelayType := 0 ps;
        tsetup_CEA2_CLK_posedge_posedge : VitalDelayType := 0 ps;
        tsetup_CEA2_CLK_negedge_posedge : VitalDelayType := 0 ps;
        tsetup_CEALUMODE_CLK_posedge_posedge : VitalDelayType := 0 ps;
        tsetup_CEALUMODE_CLK_negedge_posedge : VitalDelayType := 0 ps;
        tsetup_CEB1_CLK_posedge_posedge : VitalDelayType := 0 ps;
        tsetup_CEB1_CLK_negedge_posedge : VitalDelayType := 0 ps;
        tsetup_CEB2_CLK_posedge_posedge : VitalDelayType := 0 ps;
        tsetup_CEB2_CLK_negedge_posedge : VitalDelayType := 0 ps;
        tsetup_CEC_CLK_posedge_posedge : VitalDelayType := 0 ps;
        tsetup_CEC_CLK_negedge_posedge : VitalDelayType := 0 ps;
        tsetup_CECARRYIN_CLK_posedge_posedge : VitalDelayType := 0 ps;
        tsetup_CECARRYIN_CLK_negedge_posedge : VitalDelayType := 0 ps;
        tsetup_CECTRL_CLK_posedge_posedge : VitalDelayType := 0 ps;
        tsetup_CECTRL_CLK_negedge_posedge : VitalDelayType := 0 ps;
        tsetup_CEM_CLK_posedge_posedge : VitalDelayType := 0 ps;
        tsetup_CEM_CLK_negedge_posedge : VitalDelayType := 0 ps;
        tsetup_CEMULTCARRYIN_CLK_posedge_posedge : VitalDelayType := 0 ps;
        tsetup_CEMULTCARRYIN_CLK_negedge_posedge : VitalDelayType := 0 ps;
        tsetup_CEP_CLK_posedge_posedge : VitalDelayType := 0 ps;
        tsetup_CEP_CLK_negedge_posedge : VitalDelayType := 0 ps;
        tsetup_MULTSIGNIN_CLK_posedge_posedge : VitalDelayType := 0 ps;
        tsetup_MULTSIGNIN_CLK_negedge_posedge : VitalDelayType := 0 ps;
        tsetup_OPMODE_CLK_posedge_posedge : VitalDelayArrayType(6 downto 0) := (others => 0 ps);
        tsetup_OPMODE_CLK_negedge_posedge : VitalDelayArrayType(6 downto 0) := (others => 0 ps);
        tsetup_PCIN_CLK_posedge_posedge : VitalDelayArrayType(47 downto 0) := (others => 0 ps);
        tsetup_PCIN_CLK_negedge_posedge : VitalDelayArrayType(47 downto 0) := (others => 0 ps);
        tsetup_RSTA_CLK_posedge_posedge : VitalDelayType := 0 ps;
        tsetup_RSTA_CLK_negedge_posedge : VitalDelayType := 0 ps;
        tsetup_RSTALLCARRYIN_CLK_posedge_posedge : VitalDelayType := 0 ps;
        tsetup_RSTALLCARRYIN_CLK_negedge_posedge : VitalDelayType := 0 ps;
        tsetup_RSTALUMODE_CLK_posedge_posedge : VitalDelayType := 0 ps;
        tsetup_RSTALUMODE_CLK_negedge_posedge : VitalDelayType := 0 ps;
        tsetup_RSTB_CLK_posedge_posedge : VitalDelayType := 0 ps;
        tsetup_RSTB_CLK_negedge_posedge : VitalDelayType := 0 ps;
        tsetup_RSTC_CLK_posedge_posedge : VitalDelayType := 0 ps;
        tsetup_RSTC_CLK_negedge_posedge : VitalDelayType := 0 ps;
        tsetup_RSTCTRL_CLK_posedge_posedge : VitalDelayType := 0 ps;
        tsetup_RSTCTRL_CLK_negedge_posedge : VitalDelayType := 0 ps;
        tsetup_RSTP_CLK_posedge_posedge : VitalDelayType := 0 ps;
        tsetup_RSTP_CLK_negedge_posedge : VitalDelayType := 0 ps;
        tsetup_RSTM_CLK_posedge_posedge : VitalDelayType := 0 ps;
        tsetup_RSTM_CLK_negedge_posedge : VitalDelayType := 0 ps;

        thold_A_CLK_posedge_posedge : VitalDelayArrayType(29 downto 0) := (others => 0 ps);
        thold_A_CLK_negedge_posedge : VitalDelayArrayType(29 downto 0) := (others => 0 ps);
        thold_ACIN_CLK_posedge_posedge : VitalDelayArrayType(29 downto 0) := (others => 0 ps);
        thold_ACIN_CLK_negedge_posedge : VitalDelayArrayType(29 downto 0) := (others => 0 ps);
        thold_ALUMODE_CLK_posedge_posedge : VitalDelayArrayType(3 downto 0) := (others => 0 ps);
        thold_ALUMODE_CLK_negedge_posedge : VitalDelayArrayType(3 downto 0) := (others => 0 ps);
        thold_B_CLK_posedge_posedge : VitalDelayArrayType(17 downto 0) := (others => 0 ps);
        thold_B_CLK_negedge_posedge : VitalDelayArrayType(17 downto 0) := (others => 0 ps);
        thold_BCIN_CLK_posedge_posedge : VitalDelayArrayType(17 downto 0) := (others => 0 ps);
        thold_BCIN_CLK_negedge_posedge : VitalDelayArrayType(17 downto 0) := (others => 0 ps);
        thold_C_CLK_posedge_posedge : VitalDelayArrayType(47 downto 0) := (others => 0 ps);
        thold_C_CLK_negedge_posedge : VitalDelayArrayType(47 downto 0) := (others => 0 ps);
        thold_CARRYCASCIN_CLK_posedge_posedge : VitalDelayType := 0 ps;
        thold_CARRYCASCIN_CLK_negedge_posedge : VitalDelayType := 0 ps;
        thold_CARRYIN_CLK_posedge_posedge : VitalDelayType := 0 ps;
        thold_CARRYIN_CLK_negedge_posedge : VitalDelayType := 0 ps;
        thold_CARRYINSEL_CLK_posedge_posedge : VitalDelayArrayType(2 downto 0) := (others => 0 ps);
        thold_CARRYINSEL_CLK_negedge_posedge : VitalDelayArrayType(2 downto 0) := (others => 0 ps);
        thold_CEA1_CLK_posedge_posedge : VitalDelayType := 0 ps;
        thold_CEA1_CLK_negedge_posedge : VitalDelayType := 0 ps;
        thold_CEA2_CLK_posedge_posedge : VitalDelayType := 0 ps;
        thold_CEA2_CLK_negedge_posedge : VitalDelayType := 0 ps;
        thold_CEALUMODE_CLK_posedge_posedge : VitalDelayType := 0 ps;
        thold_CEALUMODE_CLK_negedge_posedge : VitalDelayType := 0 ps;
        thold_CEB1_CLK_posedge_posedge : VitalDelayType := 0 ps;
        thold_CEB1_CLK_negedge_posedge : VitalDelayType := 0 ps;
        thold_CEB2_CLK_posedge_posedge : VitalDelayType := 0 ps;
        thold_CEB2_CLK_negedge_posedge : VitalDelayType := 0 ps;
        thold_CEC_CLK_posedge_posedge : VitalDelayType := 0 ps;
        thold_CEC_CLK_negedge_posedge : VitalDelayType := 0 ps;
        thold_CECARRYIN_CLK_posedge_posedge : VitalDelayType := 0 ps;
        thold_CECARRYIN_CLK_negedge_posedge : VitalDelayType := 0 ps;
        thold_CECTRL_CLK_posedge_posedge : VitalDelayType := 0 ps;
        thold_CECTRL_CLK_negedge_posedge : VitalDelayType := 0 ps;
        thold_CEM_CLK_posedge_posedge : VitalDelayType := 0 ps;
        thold_CEM_CLK_negedge_posedge : VitalDelayType := 0 ps;
        thold_CEMULTCARRYIN_CLK_posedge_posedge : VitalDelayType := 0 ps;
        thold_CEMULTCARRYIN_CLK_negedge_posedge : VitalDelayType := 0 ps;
        thold_CEP_CLK_posedge_posedge : VitalDelayType := 0 ps;
        thold_CEP_CLK_negedge_posedge : VitalDelayType := 0 ps;
        thold_MULTSIGNIN_CLK_posedge_posedge : VitalDelayType := 0 ps;
        thold_MULTSIGNIN_CLK_negedge_posedge : VitalDelayType := 0 ps;
        thold_OPMODE_CLK_posedge_posedge : VitalDelayArrayType(6 downto 0) := (others => 0 ps);
        thold_OPMODE_CLK_negedge_posedge : VitalDelayArrayType(6 downto 0) := (others => 0 ps);
        thold_PCIN_CLK_posedge_posedge : VitalDelayArrayType(47 downto 0) := (others => 0 ps);
        thold_PCIN_CLK_negedge_posedge : VitalDelayArrayType(47 downto 0) := (others => 0 ps);
        thold_RSTA_CLK_posedge_posedge : VitalDelayType := 0 ps;
        thold_RSTA_CLK_negedge_posedge : VitalDelayType := 0 ps;
        thold_RSTALLCARRYIN_CLK_posedge_posedge : VitalDelayType := 0 ps;
        thold_RSTALLCARRYIN_CLK_negedge_posedge : VitalDelayType := 0 ps;
        thold_RSTALUMODE_CLK_posedge_posedge : VitalDelayType := 0 ps;
        thold_RSTALUMODE_CLK_negedge_posedge : VitalDelayType := 0 ps;
        thold_RSTB_CLK_posedge_posedge : VitalDelayType := 0 ps;
        thold_RSTB_CLK_negedge_posedge : VitalDelayType := 0 ps;
        thold_RSTC_CLK_posedge_posedge : VitalDelayType := 0 ps;
        thold_RSTC_CLK_negedge_posedge : VitalDelayType := 0 ps;
        thold_RSTCTRL_CLK_posedge_posedge : VitalDelayType := 0 ps;
        thold_RSTCTRL_CLK_negedge_posedge : VitalDelayType := 0 ps;
        thold_RSTP_CLK_posedge_posedge : VitalDelayType := 0 ps;
        thold_RSTP_CLK_negedge_posedge : VitalDelayType := 0 ps;
        thold_RSTM_CLK_posedge_posedge : VitalDelayType := 0 ps;
        thold_RSTM_CLK_negedge_posedge : VitalDelayType := 0 ps;

----- VITAL clock ticd delays
        ticd_CLK        : VitalDelayType  := 0 ps;
     
----- VITAL clock-to-pin tisd delays
        tisd_A_CLK              : VitalDelayArrayType(29 downto 0) := (others => 0 ps);
        tisd_ACIN_CLK           : VitalDelayArrayType(29 downto 0) := (others => 0 ps);
        tisd_ALUMODE_CLK        : VitalDelayArrayType(3 downto 0)  := (others => 0 ps);
        tisd_B_CLK              : VitalDelayArrayType(17 downto 0) := (others => 0 ps);
        tisd_BCIN_CLK           : VitalDelayArrayType(17 downto 0) := (others => 0 ps);
        tisd_C_CLK              : VitalDelayArrayType(47 downto 0) := (others => 0 ps);
        tisd_CARRYCASCIN_CLK    : VitalDelayType  := 0 ps;
        tisd_CARRYIN_CLK        : VitalDelayType  := 0 ps;
        tisd_CARRYINSEL_CLK     : VitalDelayArrayType(2 downto 0) := (others => 0 ps);
        tisd_CEA1_CLK           : VitalDelayType  := 0 ps;
        tisd_CEA2_CLK           : VitalDelayType  := 0 ps;
        tisd_CEALUMODE_CLK      : VitalDelayType  := 0 ps;
        tisd_CEB1_CLK           : VitalDelayType  := 0 ps;
        tisd_CEB2_CLK           : VitalDelayType  := 0 ps;
        tisd_CEC_CLK            : VitalDelayType  := 0 ps;
        tisd_CECARRYIN_CLK      : VitalDelayType  := 0 ps;
        tisd_CECTRL_CLK         : VitalDelayType  := 0 ps;
        tisd_CEM_CLK            : VitalDelayType  := 0 ps;
        tisd_CEMULTCARRYIN_CLK  : VitalDelayType  := 0 ps;
        tisd_CEP_CLK            : VitalDelayType  := 0 ps;
        tisd_GSR_CLK            : VitalDelayType  := 0 ps;
        tisd_MULTSIGNIN_CLK     : VitalDelayType  := 0 ps;
        tisd_OPMODE_CLK         : VitalDelayArrayType(6 downto 0) := (others => 0 ps);
        tisd_PCIN_CLK           : VitalDelayArrayType(47 downto 0) := (others => 0 ps);
        tisd_RSTA_CLK           : VitalDelayType := 0 ps;
        tisd_RSTALLCARRYIN_CLK  : VitalDelayType := 0 ps;
        tisd_RSTALUMODE_CLK     : VitalDelayType := 0 ps;
        tisd_RSTB_CLK           : VitalDelayType := 0 ps;
        tisd_RSTC_CLK           : VitalDelayType := 0 ps;
        tisd_RSTCTRL_CLK        : VitalDelayType := 0 ps;
        tisd_RSTM_CLK           : VitalDelayType := 0 ps;
        tisd_RSTP_CLK           : VitalDelayType := 0 ps;

----- VITAL period check 
        tperiod_CLK_posedge     : VitalDelayType := 0 ps;

----- VITAL pulse width
        tpw_CLK_negedge         : VitalDelayType := 0 ps;
        tpw_CLK_posedge         : VitalDelayType := 0 ps;

----- VITAL Recovery
        trecovery_GSR_CLK_negedge_posedge : VitalDelayType := 0 ps;

        ACASCREG	: integer		:= 1;
        ALUMODEREG	: integer		:= 1;
        AREG		: integer		:= 1;
        AUTORESET_PATTERN_DETECT		: boolean		:= FALSE;
        AUTORESET_PATTERN_DETECT_OPTINV		: string		:= "MATCH";
        A_INPUT		: string		:= "DIRECT";
        BCASCREG	: integer		:= 1;
        BREG		: integer		:= 1;
        B_INPUT		: string		:= "DIRECT";
        CARRYINREG	: integer		:= 1;
        CARRYINSELREG	: integer		:= 1;
        CREG		: integer		:= 1;
        MASK            : bit_vector            := X"3FFFFFFFFFFF";
        MREG		: integer		:= 1;
        MULTCARRYINREG	: integer		:= 1;
        OPMODEREG	: integer		:= 1;
        PATTERN         : bit_vector            := X"000000000000";
        PREG		: integer		:= 1;
        SEL_MASK	: string		:= "MASK";
        SEL_PATTERN	: string		:= "PATTERN";
        SEL_ROUNDING_MASK	: string	:= "SEL_MASK";
        USE_MULT	: string		:= "MULT_S";
        USE_PATTERN_DETECT	: string	:= "NO_PATDET";
        USE_SIMD	: string		:= "ONE48"
        );

  port(
        ACOUT                   : out std_logic_vector(29 downto 0);
        BCOUT                   : out std_logic_vector(17 downto 0);
        CARRYCASCOUT            : out std_ulogic;
        CARRYOUT                : out std_logic_vector(3 downto 0);
        MULTSIGNOUT             : out std_ulogic;
        OVERFLOW                : out std_ulogic;
        P                       : out std_logic_vector(47 downto 0);
        PATTERNBDETECT          : out std_ulogic;
        PATTERNDETECT           : out std_ulogic;
        PCOUT                   : out std_logic_vector(47 downto 0);
        UNDERFLOW               : out std_ulogic;

        A                       : in  std_logic_vector(29 downto 0);
        ACIN                    : in  std_logic_vector(29 downto 0);
        ALUMODE                 : in  std_logic_vector(3 downto 0);
        B                       : in  std_logic_vector(17 downto 0);
        BCIN                    : in  std_logic_vector(17 downto 0);
        C                       : in  std_logic_vector(47 downto 0);
        CARRYCASCIN             : in  std_ulogic;
        CARRYIN                 : in  std_ulogic;
        CARRYINSEL              : in  std_logic_vector(2 downto 0);
        CEA1                    : in  std_ulogic;
        CEA2                    : in  std_ulogic;
        CEALUMODE               : in  std_ulogic;
        CEB1                    : in  std_ulogic;
        CEB2                    : in  std_ulogic;
        CEC                     : in  std_ulogic;
        CECARRYIN               : in  std_ulogic;
        CECTRL                  : in  std_ulogic;
        CEM                     : in  std_ulogic;
        CEMULTCARRYIN           : in  std_ulogic;
        CEP                     : in  std_ulogic;
        CLK                     : in  std_ulogic;
        MULTSIGNIN              : in std_ulogic;
        OPMODE                  : in  std_logic_vector(6 downto 0);
        PCIN                    : in  std_logic_vector(47 downto 0);
        RSTA                    : in  std_ulogic;
        RSTALLCARRYIN           : in  std_ulogic;
        RSTALUMODE              : in  std_ulogic;
        RSTB                    : in  std_ulogic;
        RSTC                    : in  std_ulogic;
        RSTCTRL                 : in  std_ulogic;
        RSTM                    : in  std_ulogic;
        RSTP                    : in  std_ulogic
      );

  attribute VITAL_LEVEL0 of X_DSP48E :     entity is true;

end X_DSP48E;

-- architecture body                    --

architecture X_DSP48E_V of X_DSP48E is

    procedure invalid_opmode_preg_msg( OPMODE : IN string ; 
                                   CARRYINSEL : IN string ) is
    variable Message : line;
    begin
       Write ( Message, string'("OPMODE Input Warning : The OPMODE "));
       Write ( Message,  OPMODE);
       Write ( Message, string'(" with CARRYINSEL "));
       Write ( Message,  CARRYINSEL);
       Write ( Message, string'(" to X_DSP48E instance "));
       Write ( Message, string'("requires attribute PREG set to 1."));
       assert false report Message.all severity Warning;
       DEALLOCATE (Message);
    end invalid_opmode_preg_msg;

    procedure invalid_opmode_preg_msg_logic( OPMODE : IN string ) is
    variable Message : line;
    begin
       Write ( Message, string'("OPMODE Input Warning : The OPMODE "));
       Write ( Message,  OPMODE);
       Write ( Message, string'(" to X_DSP48E instance "));
       Write ( Message, string'("requires attribute PREG set to 1."));
       assert false report Message.all severity Warning;
       DEALLOCATE (Message);
    end invalid_opmode_preg_msg_logic;

    procedure invalid_opmode_mreg_msg( OPMODE : IN string ; 
                                   CARRYINSEL : IN string ) is
    variable Message : line;
    begin
       Write ( Message, string'("OPMODE Input Warning : The OPMODE "));
       Write ( Message,  OPMODE);
       Write ( Message, string'(" with CARRYINSEL "));
       Write ( Message,  CARRYINSEL);
       Write ( Message, string'(" to X_DSP48E instance "));
       Write ( Message, string'("requires attribute MREG set to 1."));
       assert false report Message.all severity Warning;
       DEALLOCATE (Message);
    end invalid_opmode_mreg_msg;

    procedure invalid_opmode_no_mreg_msg( OPMODE : IN string ; 
                                      CARRYINSEL : IN string ) is
    variable Message : line;
    begin
       Write ( Message, string'("OPMODE Input Warning : The OPMODE "));
       Write ( Message,  OPMODE);
       Write ( Message, string'(" with CARRYINSEL "));
       Write ( Message,  CARRYINSEL);
       Write ( Message, string'(" to X_DSP48E instance "));
       Write ( Message, string'("requires attribute MREG set to 0."));
       assert false report Message.all severity Warning;
       DEALLOCATE (Message);
    end invalid_opmode_no_mreg_msg;


  attribute VITAL_LEVEL0 of X_DSP48E_V : architecture is true;

  TYPE VitalTimingDataArrayType IS ARRAY (NATURAL RANGE <>)
         OF VitalTimingDataType;


  TYPE AluFuntionType is (INVALID_ALU, ADD_ALU, ADD_XY_NOTZ_ALU, NOT_XYZC_ALU, SUBTRACT_ALU, NOT_ALU, 
                          AND_ALU, OR_ALU, XOR_ALU, NAND_ALU, NOR_ALU, 
                          XNOR_ALU, X_AND_NOT_Z_ALU, NOT_X_OR_Z_ALU, X_OR_NOT_Z_ALU,
                          X_NOR_Z_ALU, NOT_X_AND_Z_ALU);

  constant SYNC_PATH_DELAY : time := 100 ps;

  constant MAX_ACOUT      : integer    := 30;
  constant MAX_BCOUT      : integer    := 18;
  constant MAX_CARRYOUT   : integer    := 4;
  constant MAX_P          : integer    := 48;
  constant MAX_PCOUT      : integer    := 48;

  constant MAX_A          : integer    := 30;
  constant MAX_ACIN       : integer    := 30;
  constant MAX_ALUMODE    : integer    := 4;
  constant MAX_A_MULT     : integer    := 25;
  constant MAX_B          : integer    := 18;
  constant MAX_B_MULT     : integer    := 18;
  constant MAX_BCIN       : integer    := 18;
  constant MAX_C          : integer    := 48;
  constant MAX_CARRYINSEL : integer    := 3;
  constant MAX_OPMODE     : integer    := 7;
  constant MAX_PCIN       : integer    := 48;

  constant MAX_ALU_FULL   : integer    := 48;
  constant MAX_ALU_HALF   : integer    := 24;
  constant MAX_ALU_QUART  : integer    := 12;

  constant MSB_ACOUT      : integer    := MAX_ACOUT - 1;
  constant MSB_BCOUT      : integer    := MAX_BCOUT - 1;
  constant MSB_CARRYOUT   : integer    := MAX_CARRYOUT - 1;
  constant MSB_P          : integer    := MAX_P - 1;
  constant MSB_PCOUT      : integer    := MAX_PCOUT - 1;


  constant MSB_A          : integer    := MAX_A - 1;
  constant MSB_ACIN       : integer    := MAX_ACIN - 1;
  constant MSB_ALUMODE    : integer    := MAX_ALUMODE - 1;
  constant MSB_A_MULT     : integer    := MAX_A_MULT - 1;
  constant MSB_B          : integer    := MAX_B - 1;
  constant MSB_B_MULT     : integer    := MAX_B_MULT - 1;
  constant MSB_BCIN       : integer    := MAX_BCIN - 1;
  constant MSB_C          : integer    := MAX_C - 1;
  constant MSB_CARRYINSEL : integer    := MAX_CARRYINSEL - 1;
  constant MSB_OPMODE     : integer    := MAX_OPMODE - 1;
  constant MSB_PCIN       : integer    := MAX_PCIN - 1;

  constant MSB_ALU_FULL   : integer    := MAX_ALU_FULL - 1;
  constant MSB_ALU_HALF   : integer    := MAX_ALU_HALF - 1;
  constant MSB_ALU_QUART  : integer    := MAX_ALU_QUART - 1;

  constant SHIFT_MUXZ     : integer    := 17;

  signal 	A_ipd		: std_logic_vector(MSB_A downto 0) := (others => '0');
  signal 	ACIN_ipd	: std_logic_vector(MSB_ACIN downto 0) := (others => '0');
  signal 	ALUMODE_ipd	: std_logic_vector(MSB_ALUMODE downto 0) := (others => '0');
  signal 	B_ipd		: std_logic_vector(MSB_B downto 0) := (others => '0');
  signal 	BCIN_ipd	: std_logic_vector(MSB_BCIN downto 0) := (others => '0');
  signal 	C_ipd		: std_logic_vector(MSB_C downto 0)    := (others => '0');
  signal 	CARRYCASCIN_ipd	: std_ulogic := '0';
  signal 	CARRYIN_ipd	: std_ulogic := '0';
  signal 	CARRYINSEL_ipd	: std_logic_vector(MSB_CARRYINSEL downto 0)  := (others => '0');
  signal 	CEA1_ipd	: std_ulogic := '0';
  signal 	CEA2_ipd	: std_ulogic := '0';
  signal 	CEALUMODE_ipd	: std_ulogic := '0';
  signal 	CEB1_ipd	: std_ulogic := '0';
  signal 	CEB2_ipd	: std_ulogic := '0';
  signal 	CEC_ipd		: std_ulogic := '0';
  signal 	CECARRYIN_ipd	: std_ulogic := '0';
  signal 	CECTRL_ipd	: std_ulogic := '0';
  signal 	CEM_ipd		: std_ulogic := '0';
  signal 	CEMULTCARRYIN_ipd	: std_ulogic := '0';
  signal 	CEP_ipd		: std_ulogic := '0';
  signal 	CLK_ipd		: std_ulogic := '0';
  signal 	GSR_ipd		: std_ulogic := '0';
  signal 	MULTSIGNIN_ipd		: std_ulogic := '0';
  signal 	OPMODE_ipd	: std_logic_vector(MSB_OPMODE downto 0)  := (others => '0');
  signal 	PCIN_ipd	: std_logic_vector(MSB_PCIN downto 0) := (others => '0');
  signal 	RSTA_ipd	: std_ulogic := '0';
  signal 	RSTALLCARRYIN_ipd	: std_ulogic := '0';
  signal 	RSTALUMODE_ipd	: std_ulogic := '0';
  signal 	RSTB_ipd	: std_ulogic := '0';
  signal 	RSTC_ipd	: std_ulogic := '0';
  signal 	RSTCTRL_ipd	: std_ulogic := '0';
  signal 	RSTM_ipd	: std_ulogic := '0';
  signal 	RSTP_ipd	: std_ulogic := '0';

  signal 	A_dly		: std_logic_vector(MSB_A downto 0) := (others => '0');
  signal 	ACIN_dly	: std_logic_vector(MSB_ACIN downto 0) := (others => '0');
  signal 	ALUMODE_dly	: std_logic_vector(MSB_ALUMODE downto 0) := (others => '0');
  signal 	B_dly		: std_logic_vector(MSB_B downto 0) := (others => '0');
  signal 	BCIN_dly	: std_logic_vector(MSB_BCIN downto 0) := (others => '0');
  signal 	C_dly		: std_logic_vector(MSB_C downto 0)    := (others => '0');
  signal 	CARRYCASCIN_dly	: std_ulogic := '0';
  signal 	CARRYIN_dly	: std_ulogic := '0';
  signal 	CARRYINSEL_dly	: std_logic_vector(MSB_CARRYINSEL downto 0)  := (others => '0');
  signal 	CEA1_dly	: std_ulogic := '0';
  signal 	CEA2_dly	: std_ulogic := '0';
  signal 	CEALUMODE_dly	: std_ulogic := '0';
  signal 	CEB1_dly	: std_ulogic := '0';
  signal 	CEB2_dly	: std_ulogic := '0';
  signal 	CEC_dly		: std_ulogic := '0';
  signal 	CECARRYIN_dly	: std_ulogic := '0';
  signal 	CECTRL_dly	: std_ulogic := '0';
  signal 	CEM_dly		: std_ulogic := '0';
  signal 	CEMULTCARRYIN_dly	: std_ulogic := '0';
  signal 	CEP_dly		: std_ulogic := '0';
  signal 	CLK_dly		: std_ulogic := '0';
  signal 	GSR_dly		: std_ulogic := '0';
  signal 	MULTSIGNIN_dly	: std_ulogic := '0';
  signal 	OPMODE_dly	: std_logic_vector(MSB_OPMODE downto 0)  := (others => '0');
  signal 	PCIN_dly	: std_logic_vector(MSB_PCIN downto 0) := (others => '0');
  signal 	RSTA_dly	: std_ulogic := '0';
  signal 	RSTALLCARRYIN_dly	: std_ulogic := '0';
  signal 	RSTALUMODE_dly	: std_ulogic := '0';
  signal 	RSTB_dly	: std_ulogic := '0';
  signal 	RSTC_dly	: std_ulogic := '0';
  signal 	RSTCTRL_dly	: std_ulogic := '0';
  signal 	RSTM_dly	: std_ulogic := '0';
  signal 	RSTP_dly	: std_ulogic := '0';


  signal	ACOUT_zd	: std_logic_vector(MSB_ACOUT downto 0) := (others => '0');
  signal	BCOUT_zd	: std_logic_vector(MSB_BCOUT downto 0) := (others => '0');
  signal 	CARRYCASCOUT_zd	: std_ulogic := '0';
  signal	CARRYOUT_zd	: std_logic_vector(MSB_CARRYOUT downto 0) := (others => '0');
  signal 	OVERFLOW_zd	: std_ulogic := '0';
  signal	P_zd		: std_logic_vector(MSB_P downto 0) := (others => '0');
  signal 	PATTERNBDETECT_zd	: std_ulogic := '0';
  signal 	PATTERNDETECT_zd	: std_ulogic := '0';
  signal	PCOUT_zd	: std_logic_vector(MSB_PCOUT downto 0) := (others => '0');
  signal 	UNDERFLOW_zd	: std_ulogic := '0';
  signal 	MULTSIGNOUT_zd	: std_ulogic;
  
  --- Internal Signal Declarations
  signal	a_o_mux		: std_logic_vector(MSB_A downto 0) := (others => '0');
  signal	qa_o_reg1	: std_logic_vector(MSB_A downto 0) := (others => '0');
  signal	qa_o_reg2	: std_logic_vector(MSB_A downto 0) := (others => '0');
  signal	qa_o_mux	: std_logic_vector(MSB_A downto 0) := (others => '0');
  signal	qacout_o_mux	: std_logic_vector(MSB_ACOUT downto 0) := (others => '0');

  signal	b_o_mux		: std_logic_vector(MSB_B downto 0) := (others => '0');
  signal	qb_o_reg1	: std_logic_vector(MSB_B downto 0) := (others => '0');
  signal	qb_o_reg2	: std_logic_vector(MSB_B downto 0) := (others => '0');
  signal	qb_o_mux	: std_logic_vector(MSB_B downto 0) := (others => '0');
  signal	qbcout_o_mux	: std_logic_vector(MSB_BCOUT downto 0) := (others => '0');

  signal	qc_o_reg        : std_logic_vector(MSB_C downto 0) := (others => '0');
  signal	qc_o_mux	: std_logic_vector(MSB_C downto 0) := (others => '0');

  signal	mult_o_int	: std_logic_vector((MSB_A_MULT + MSB_B_MULT + 1) downto 0) := (others => '0');
  signal	mult_o_reg	: std_logic_vector((MSB_A_MULT + MSB_B_MULT + 1) downto 0) := (others => '0');
  signal	mult_o_mux	: std_logic_vector((MSB_A_MULT + MSB_B_MULT + 1) downto 0) := (others => '0');

  signal	opmode_o_reg	: std_logic_vector(MSB_OPMODE downto 0) := (others => '0');
  signal	opmode_o_mux	: std_logic_vector(MSB_OPMODE downto 0) := (others => '0');

  signal	muxx_o_mux	: std_logic_vector(MSB_P downto 0) := (others => '0');
  signal	muxy_o_mux	: std_logic_vector(MSB_P downto 0) := (others => '0');
  signal	muxz_o_mux	: std_logic_vector(MSB_P downto 0) := (others => '0');

  signal	carryinsel_o_reg	: std_logic_vector(MSB_CARRYINSEL downto 0) := (others => '0');
  signal	carryinsel_o_mux	: std_logic_vector(MSB_CARRYINSEL downto 0) := (others => '0');

  signal	qcarryin_o_reg0	: std_ulogic := '0';
  signal	carryin_o_mux0	: std_ulogic := '0';
  signal	qcarryin_o_reg7	: std_ulogic := '0';
  signal	carryin_o_mux7	: std_ulogic := '0';

  signal	carryin_o_mux	: std_ulogic := '0';

  signal	qp_o_reg	: std_logic_vector(MSB_P downto 0) := (others => '0');
  signal	qp_o_mux	: std_logic_vector(MSB_P downto 0) := (others => '0');

  signal	reg_p_int       : std_logic_vector(47 downto 0) := (others => '0');
  signal	p_o_int         : std_logic_vector(47 downto 0) := (others => '0');

  signal	output_x_sig	: std_ulogic := '0';

  signal	RST_META          : std_ulogic := '0';

  signal	DefDelay          : time := 10 ps;

  signal	opmode_valid_flg   : boolean := true;
  signal	alumode_valid_flg  : boolean := true;

  signal	AluFunction	: AluFuntionType := INVALID_ALU;

  signal	alumode_o_reg	: std_logic_vector(MSB_ALUMODE downto 0) := (others => '0');
  signal	alumode_o_mux	: std_logic_vector(MSB_ALUMODE downto 0) := (others => '0');

  signal	carrycascout_o  : std_ulogic := '0';
  signal	carrycascout_o_reg  : std_ulogic := '0';
  signal	carrycascout_o_mux  : std_ulogic := '0';
  signal	carryout_o	: std_logic_vector(MSB_CARRYOUT downto 0) := (others => '0');
  signal	carryout_o_reg	: std_logic_vector(MSB_CARRYOUT downto 0) := (others => '0');
  signal	carryout_o_mux	: std_logic_vector(MSB_CARRYOUT downto 0) := (others => '0');
  signal        carryout_x_o    : std_logic_vector(MSB_CARRYOUT downto 0) := (others => 'X');
  signal	overflow_o      : std_ulogic := '0';
  signal	pdetb_o         : std_ulogic := '0';
  signal	pdetb_o_reg1    : std_ulogic := '0';
  signal	pdetb_o_reg2    : std_ulogic := '0';
  signal	pdet_o          : std_ulogic := '0';
  signal	pdet_o_reg1     : std_ulogic := '0';
  signal	pdet_o_reg2     : std_ulogic := '0';
  signal	underflow_o     : std_ulogic := '0';

  signal	alu_o		: std_logic_vector(MSB_P downto 0) := (others => '0');
  signal	pattern_qp	: std_logic_vector(MSB_P downto 0) := (others => '0');
  signal	mask_qp		: std_logic_vector(MSB_P downto 0) := (others => '0');

  signal        multsignout_o_reg : std_ulogic;
  signal        multsignout_o_mux : std_ulogic;
  signal        multsignout_o_opmode : std_ulogic;

  signal	OPMODE_NUMBER	: integer		:= -1;

  signal	ping_opmode_drc_check : std_ulogic := '0';

begin

  ---------------------
  --  INPUT PATH DELAYs
  ---------------------

  WireDelay     : block
  begin
    A_Delay : for i in MSB_A downto 0 generate
        VitalWireDelay (A_ipd(i),    A(i),        tipd_A(i));
    end generate A_Delay;    

    ACIN_Delay : for i in MSB_ACIN downto 0 generate
        VitalWireDelay (ACIN_ipd(i),  ACIN(i),      tipd_ACIN(i));
    end generate ACIN_Delay;    

    ALUMODE_Delay : for i in MSB_ALUMODE downto 0 generate
        VitalWireDelay (ALUMODE_ipd(i),  ALUMODE(i),      tipd_ALUMODE(i));
    end generate ALUMODE_Delay;    

    B_Delay : for i in MSB_B downto 0 generate
        VitalWireDelay (B_ipd(i),    B(i),        tipd_B(i));
    end generate B_Delay;    

    BCIN_Delay : for i in MSB_BCIN downto 0 generate
        VitalWireDelay (BCIN_ipd(i),  BCIN(i),      tipd_BCIN(i));
    end generate BCIN_Delay;    

    C_Delay : for i in MSB_C downto 0 generate
        VitalWireDelay (C_ipd(i),    C(i),        tipd_C(i));
    end generate C_Delay;    

    VitalWireDelay (CARRYCASCIN_ipd,    CARRYCASCIN,    tipd_CARRYCASCIN);

    VitalWireDelay (CARRYIN_ipd,    CARRYIN,    tipd_CARRYIN);

    CARRYINSEL_delay : for i in MSB_CARRYINSEL downto 0 generate
        VitalWireDelay (CARRYINSEL_ipd(i), CARRYINSEL(i),    tipd_CARRYINSEL(i));    
    end generate CARRYINSEL_delay;

    VitalWireDelay (CEA1_ipd,       CEA1,        tipd_CEA1);
    VitalWireDelay (CEA2_ipd,       CEA2,        tipd_CEA2);
    VitalWireDelay (CEALUMODE_ipd,  CEALUMODE,   tipd_CEALUMODE);
    VitalWireDelay (CEB1_ipd,       CEB1,        tipd_CEB1);
    VitalWireDelay (CEB2_ipd,       CEB2,        tipd_CEB2);
    VitalWireDelay (CEC_ipd,        CEC,        tipd_CEC);
    VitalWireDelay (CECARRYIN_ipd,  CECARRYIN,  tipd_CECARRYIN);
    VitalWireDelay (CECTRL_ipd,     CECTRL,     tipd_CECTRL);
    VitalWireDelay (CEM_ipd,        CEM,        tipd_CEM);
    VitalWireDelay (CEMULTCARRYIN_ipd,   CEMULTCARRYIN,   tipd_CEMULTCARRYIN);
    VitalWireDelay (CEP_ipd,        CEP,        tipd_CEP);

    VitalWireDelay (CLK_ipd,        CLK,        tipd_CLK);
    VitalWireDelay (GSR_ipd,        GSR,        tipd_GSR);
    VitalWireDelay (MULTSIGNIN_ipd, MULTSIGNIN, tipd_MULTSIGNIN);

    OPMODE_delay : for i in MSB_OPMODE downto 0 generate
        VitalWireDelay (OPMODE_ipd(i),     OPMODE(i),    tipd_OPMODE(i));    
    end generate OPMODE_delay;

    Pin_Delay : for i in MSB_PCIN downto 0 generate
        VitalWireDelay (PCIN_ipd(i),     PCIN(i),    tipd_PCIN(i));
    end generate Pin_Delay;    

    VitalWireDelay (RSTA_ipd,        RSTA,        tipd_RSTA);
    VitalWireDelay (RSTALLCARRYIN_ipd,    RSTALLCARRYIN,    tipd_RSTALLCARRYIN);
    VitalWireDelay (RSTALUMODE_ipd,  RSTALUMODE,  tipd_RSTALUMODE);
    VitalWireDelay (RSTB_ipd,        RSTB,        tipd_RSTB);
    VitalWireDelay (RSTC_ipd,        RSTC,        tipd_RSTC);
    VitalWireDelay (RSTCTRL_ipd,     RSTCTRL,     tipd_RSTCTRL);
    VitalWireDelay (RSTM_ipd,        RSTM,        tipd_RSTM);
    VitalWireDelay (RSTP_ipd,        RSTP,        tipd_RSTP);

  end block;


  SignalDelay : block
  begin
    A_Delay : for i in MSB_A downto 0 generate
        VitalSignalDelay (A_dly(i),     A_ipd(i),    tisd_A_CLK(i));
    end generate A_Delay;

    ACIN_Delay : for i in MSB_ACIN downto 0 generate
        VitalSignalDelay (ACIN_dly(i),     ACIN_ipd(i),    tisd_ACIN_CLK(i));
    end generate ACIN_Delay;

    ALUMODE_Delay : for i in MSB_ALUMODE downto 0 generate
        VitalSignalDelay (ALUMODE_dly(i),     ALUMODE_ipd(i),    tisd_ALUMODE_CLK(i));
    end generate ALUMODE_Delay;

    B_Delay : for i in MSB_B downto 0 generate
        VitalSignalDelay (B_dly(i),     B_ipd(i),    tisd_B_CLK(i));
    end generate B_Delay;

    BCIN_Delay : for i in MSB_BCIN downto 0 generate
        VitalSignalDelay (BCIN_dly(i),     BCIN_ipd(i),    tisd_BCIN_CLK(i));
    end generate BCIN_Delay;

    C_Delay : for i in MSB_C downto 0 generate
        VitalSignalDelay (C_dly(i),     C_ipd(i),    tisd_C_CLK(i));
    end generate C_Delay;

    VitalSignalDelay (CARRYCASCIN_dly,    CARRYCASCIN_ipd,    tisd_CARRYCASCIN_CLK);

    VitalSignalDelay (CARRYIN_dly,    CARRYIN_ipd,    tisd_CARRYIN_CLK);

    CARRYINSEL_Delay : for i in MSB_CARRYINSEL downto 0 generate
        VitalSignalDelay (CARRYINSEL_dly(i),     CARRYINSEL_ipd(i),    tisd_CARRYINSEL_CLK(i));
    end generate CARRYINSEL_Delay;

    VitalSignalDelay (CEA1_dly,       CEA1_ipd,        tisd_CEA1_CLK);
    VitalSignalDelay (CEA2_dly,       CEA2_ipd,        tisd_CEA2_CLK);
    VitalSignalDelay (CEALUMODE_dly,  CEALUMODE_ipd,   tisd_CEALUMODE_CLK);
    VitalSignalDelay (CEB1_dly,       CEB1_ipd,        tisd_CEB1_CLK);
    VitalSignalDelay (CEB2_dly,       CEB2_ipd,        tisd_CEB2_CLK);
    VitalSignalDelay (CEC_dly,        CEC_ipd,        tisd_CEC_CLK);
    VitalSignalDelay (CECARRYIN_dly,  CECARRYIN_ipd,  tisd_CECARRYIN_CLK);
    VitalSignalDelay (CECTRL_dly,     CECTRL_ipd,     tisd_CECTRL_CLK);
    VitalSignalDelay (CEM_dly,        CEM_ipd,        tisd_CEM_CLK);
    VitalSignalDelay (CEMULTCARRYIN_dly,        CEMULTCARRYIN_ipd,        tisd_CEMULTCARRYIN_CLK);
    VitalSignalDelay (CEP_dly,        CEP_ipd,        tisd_CEP_CLK);

    VitalSignalDelay (CLK_dly,        CLK_ipd,        ticd_CLK);
    VitalSignalDelay (GSR_dly,        GSR_ipd,        tisd_GSR_CLK);
    VitalSignalDelay (MULTSIGNIN_dly, MULTSIGNIN_ipd, tisd_MULTSIGNIN_CLK);

    OPMODE_Delay : for i in MSB_OPMODE downto 0 generate
        VitalSignalDelay (OPMODE_dly(i),     OPMODE_ipd(i),    tisd_OPMODE_CLK(i));
    end generate OPMODE_Delay;

    PCIN_Delay : for i in MSB_PCIN downto 0 generate
        VitalSignalDelay (PCIN_dly(i),     PCIN_ipd(i),    tisd_PCIN_CLK(i));
    end generate PCIN_Delay;

    VitalSignalDelay (RSTA_dly,       RSTA_ipd,       tisd_RSTA_CLK);
    VitalSignalDelay (RSTALLCARRYIN_dly,   RSTALLCARRYIN_ipd,   tisd_RSTALLCARRYIN_CLK);
    VitalSignalDelay (RSTALUMODE_dly,      RSTALUMODE_ipd,      tisd_RSTALUMODE_CLK);
    VitalSignalDelay (RSTB_dly,       RSTB_ipd,       tisd_RSTB_CLK);
    VitalSignalDelay (RSTC_dly,       RSTC_ipd,       tisd_RSTC_CLK);
    VitalSignalDelay (RSTCTRL_dly,    RSTCTRL_ipd,    tisd_RSTCTRL_CLK);
    VitalSignalDelay (RSTM_dly,       RSTM_ipd,       tisd_RSTM_CLK);
    VitalSignalDelay (RSTP_dly,       RSTP_ipd,       tisd_RSTP_CLK);


  end block;

  --------------------
  --  BEHAVIOR SECTION
  --------------------


--####################################################################
--#####                        Initialization                      ###
--####################################################################
 prcs_init:process
  begin

----------- Checks for AREG ----------------------
    case AREG is
      when 0|1|2 =>
      when others =>
         assert false
         report "Attribute Syntax Error: The allowed values for AREG are 0 or 1 or 2"
         severity Failure;
    end case;

----------- Checks for ACASCREG and (ACASCREG vs AREG) ----------------------
      
    case AREG is
      when 0 => if(AREG /= ACASCREG) then
              assert false
              report "Attribute Syntax Error : The attribute ACASCREG on X_DSP48E has to be set to 0 when attribute AREG = 0."
              severity Failure;
           end if;
      when 1 => if(AREG /= ACASCREG) then
              assert false
              report "Attribute Syntax Error : The attribute ACASCREG on X_DSP48E has to be set to 1 when attribute AREG = 1."
              severity Failure;
           end if;
      when 2 => if((AREG /= ACASCREG) and ((AREG-1) /= ACASCREG))then
              assert false
              report "Attribute Syntax Error : The attribute ACASCREG on X_DSP48E has to be set to either 2 or 1 when attribute AREG = 2."
              severity Failure;
           end if;
      when others => null;
    end case;

----------- Checks for BREG ----------------------
    case BREG is
      when 0|1|2 =>
      when others =>
         assert false
         report "Attribute Syntax Error: The allowed values for BREG are 0 or 1 or 2"
         severity Failure;
    end case;

----------- Checks for BCASCREG and (BCASCREG vs BREG) ----------------------

    case BREG is
      when 0 => if(BREG /= BCASCREG) then
              assert false
              report "Attribute Syntax Error : The attribute BCASCREG on X_DSP48E has to be set to 0 when attribute BREG = 0."
              severity Failure;
           end if;
      when 1 => if(BREG /= BCASCREG) then
              assert false
              report "Attribute Syntax Error : The attribute BCASCREG on X_DSP48E has to be set to 1 when attribute BREG = 1."
              severity Failure;
           end if;
      when 2 => if((BREG /= BCASCREG) and ((BREG-1) /= BCASCREG))then
              assert false
              report "Attribute Syntax Error : The attribute BCASCREG on X_DSP48E has to be set to either 2 or 1 when attribute BREG = 2."
              severity Failure;
           end if;
      when others => null;
    end case;

----------- Check for AUTORESET_OVER_UNDER_FLOW ----------------------

--   case AUTORESET_OVER_UNDER_FLOW is
--      when true | false => null;
--      when others =>
--         assert false
--         report "Attribute Syntax Error: The allowed values for AUTORESET_OVER_UNDER_FLOW are true or fasle"
--         severity Failure;
--    end case;
         
----------- Check for AUTORESET_PATTERN_DETECT ----------------------

    case AUTORESET_PATTERN_DETECT is
      when true | false => null;
      when others =>
         assert false
         report "Attribute Syntax Error: The allowed values for AUTORESET_PATTERN_DETECT are true or fasle"
         severity Failure;
    end case;
         
----------- Check for AUTORESET_PATTERN_DETECT_OPTINV ----------------------

    if((AUTORESET_PATTERN_DETECT_OPTINV /="MATCH") and (AUTORESET_PATTERN_DETECT_OPTINV /="NOT_MATCH")) then
        assert false
        report "Attribute Syntax Error: The allowed values for AUTORESET_PATTERN_DETECT_OPTINV are MATCH or NOT_MATCH."
        severity Failure;
    end if;

----------- Check for USE_MULT ----------------------

     if((USE_MULT /="NONE") and (USE_MULT /="MULT") and
        (USE_MULT /="MULT_S")) then
        assert false
        report "Attribute Syntax Error: The allowed values for USE_MULT are NONE, MULT or MULT_S."
        severity Failure;
     elsif((USE_MULT ="MULT") and (MREG /= 0)) then
        assert false
        report "Attribute Syntax Error: The attribute USE_MULT on DSP48 is set to MULT. This requires attribute MREG to be set to 0."
        severity Failure;
     elsif((USE_MULT ="MULT_S") and (MREG /= 1)) then
        assert false
        report "Attribute Syntax Error: The attribute USE_MULT on DSP48 is set to MULT_S. This requires attribute MREG to be set to 1."
        severity Failure;
     end if;

----------- Check for USE_PATTERN_DETECT ----------------------

    if((USE_PATTERN_DETECT /="PATDET") and (USE_PATTERN_DETECT /="NO_PATDET")) then
        assert false
        report "Attribute Syntax Error: The allowed values for USE_PATTERN_DETECT are PATDET or NO_PATDET."
        severity Failure;
    end if;

--*********************************************************
--*** ADDITIONAL DRC
--*********************************************************
-- CR 219407  --  (1)
    if((AUTORESET_PATTERN_DETECT = TRUE) and (USE_PATTERN_DETECT = "NO_PATDET")) then
        assert false
        report "Attribute Syntax Error : The attribute USE_PATTERN_DETECT on X_DSP48E instance must be set to PATDET in order to use AUTORESET_PATTERN_DETECT equals TRUE. Failure to do so could make timing reports inaccurate. "
        severity Warning;
    end if;
------------------------------------------------------------
    ping_opmode_drc_check   <= '1' after 100010 ps;
------------------------------------------------------------

    wait;
  end process prcs_init;
--####################################################################
--#####    Input Register A with two levels of registers and a mux ###
--####################################################################
  prcs_a_in:process(A_dly, ACIN_dly)
  begin
     if(A_INPUT ="DIRECT") then
        a_o_mux <= A_dly;
     elsif(A_INPUT ="CASCADE") then
        a_o_mux <= ACIN_dly;
     else
        assert false
        report "Attribute Syntax Error: The allowed values for A_INPUT are DIRECT or CASCADE."
        severity Failure;
     end if;
  end process prcs_a_in;
------------------------------------------------------------------
  prcs_qa_2lvl:process(CLK_dly, GSR_dly)
  begin
      if(GSR_dly = '1') then
          qa_o_reg1 <= ( others => '0');
          qa_o_reg2 <= ( others => '0');
      elsif (GSR_dly = '0') then
         if(rising_edge(CLK_dly)) then
            if(RSTA_dly = '1') then
               qa_o_reg1 <= ( others => '0');
               qa_o_reg2 <= ( others => '0');
            elsif (RSTA_dly = '0') then
               case AREG is
                    when 1 =>
                       if(CEA2_dly = '1') then
                          qa_o_reg2 <= a_o_mux;
                       end if;
                    when 2 =>
                       if(CEA1_dly = '1') then
                          qa_o_reg1 <= a_o_mux;
                       end if;
                       if(CEA2_dly = '1') then
                          qa_o_reg2 <= qa_o_reg1;
                       end if;
                    when others => null;
               end case;
            end if;
         end if;
      end if;
  end process prcs_qa_2lvl;
------------------------------------------------------------------
  prcs_qa_o_mux:process(a_o_mux, qa_o_reg2)
  begin
     case AREG is
       when 0   => qa_o_mux <= a_o_mux;
       when 1|2 => qa_o_mux <= qa_o_reg2;
       when others =>
            assert false
            report "Attribute Syntax Error: The allowed values for AREG are 0 or 1 or 2"
            severity Failure;
     end case;
  end process prcs_qa_o_mux;
------------------------------------------------------------------
  prcs_qacout_o_mux:process(qa_o_mux, qa_o_reg1)
  begin
     case ACASCREG is
       when 1 => case AREG is
                   when 2 => qacout_o_mux <= qa_o_reg1;
                   when others =>  qacout_o_mux <= qa_o_mux;
                 end case;
       when others =>  qacout_o_mux <= qa_o_mux;
     end case;

  end process prcs_qacout_o_mux;
--####################################################################
--#####    Input Register B with two levels of registers and a mux ###
--####################################################################
 prcs_b_in:process(B_dly, BCIN_dly)
  begin
     if(B_INPUT ="DIRECT") then
        b_o_mux <= B_dly;
     elsif(B_INPUT ="CASCADE") then
        b_o_mux <= BCIN_dly;
     else
        assert false
        report "Attribute Syntax Error: The allowed values for B_INPUT are DIRECT or CASCADE."
        severity Failure;
     end if;
     
  end process prcs_b_in;
------------------------------------------------------------------
 prcs_qb_2lvl:process(CLK_dly, GSR_dly)
  begin
      if(GSR_dly = '1') then
          qb_o_reg1 <= ( others => '0');
          qb_o_reg2 <= ( others => '0');
      elsif (GSR_dly = '0') then
         if(rising_edge(CLK_dly)) then
            if(RSTB_dly = '1') then
               qb_o_reg1 <= ( others => '0');
               qb_o_reg2 <= ( others => '0');
            elsif (RSTB_dly = '0') then
               case BREG is
                    when 1 =>
                       if(CEB2_dly = '1') then
                          qb_o_reg2 <= b_o_mux;
                       end if;
                    when 2 =>
                       if(CEB1_dly = '1') then
                          qb_o_reg1 <= b_o_mux;
                       end if;
                       if(CEB2_dly = '1') then
                          qb_o_reg2 <= qb_o_reg1;
                       end if;
                    when others => null;
               end case;
            end if;
         end if;
      end if;
  end process prcs_qb_2lvl;
------------------------------------------------------------------
  prcs_qb_o_mux:process(b_o_mux, qb_o_reg2)
  begin
     case BREG is
       when 0   => qb_o_mux <= b_o_mux;
       when 1|2 => qb_o_mux <= qb_o_reg2;
       when others =>
            assert false
            report "Attribute Syntax Error: The allowed values for BREG are 0 or 1 or 2 "
            severity Failure;
     end case;

  end process prcs_qb_o_mux;
------------------------------------------------------------------
  prcs_qbcout_o_mux:process(qb_o_mux, qb_o_reg1)
  begin
     case BCASCREG is
       when 1 => case BREG is
                   when 2 => qbcout_o_mux <= qb_o_reg1;
                   when others =>  qbcout_o_mux <= qb_o_mux;
                 end case;
       when others =>  qbcout_o_mux <= qb_o_mux;
     end case;
  end process prcs_qbcout_o_mux;

--####################################################################
--#####    Input Register C with 0, 1, level of registers        #####
--####################################################################
  prcs_qc_1lvl:process(CLK_dly, GSR_dly)
  begin
      if(GSR_dly = '1') then
         qc_o_reg <= ( others => '0');
      elsif (GSR_dly = '0') then
         if(rising_edge(CLK_dly)) then
            if(RSTC_dly = '1') then
               qc_o_reg <= ( others => '0');
            elsif ((RSTC_dly = '0') and (CEC_dly = '1')) then
               qc_o_reg <= C_dly;
            end if;
         end if;
      end if;
  end process prcs_qc_1lvl;
------------------------------------------------------------------
  prcs_qc_o_mux:process(C_dly, qc_o_reg)
  begin
     case CREG is
      when 0 => qc_o_mux <= C_dly;
      when 1 => qc_o_mux <= qc_o_reg;
      when others =>
           assert false
           report "Attribute Syntax Error: The allowed values for CREG are 0 or 1"
           severity Failure;
      end case;
  end process prcs_qc_o_mux;

--####################################################################
--###################      25x18 Multiplier     ######################
--####################################################################
--
-- 05/26/05 -- FP -- Added warning for invalid mult when USE_MULT=NONE
-- SIMD=FOUR12 and SIMD=TWO24
-- Made mult_o to be "X"
--
  prcs_mult:process(qa_o_mux, qb_o_mux)
  begin
     if(USE_MULT /= "NONE") then
        mult_o_int <=  qa_o_mux(MSB_A_MULT downto 0) * qb_o_mux (MSB_B_MULT downto 0);
     end if;
  end process prcs_mult;
------------------------------------------------------------------
  prcs_mult_reg:process(CLK_dly, GSR_dly)
  begin
      if(GSR_dly = '1') then
         mult_o_reg <= ( others => '0');
      elsif (GSR_dly = '0') then
         if(rising_edge(CLK_dly)) then
            if(RSTM_dly = '1') then
               mult_o_reg <= ( others => '0');
            elsif ((RSTM_dly = '0') and (CEM_dly = '1')) then
               mult_o_reg <= mult_o_int;
            end if;
         end if;
      end if;
  end process prcs_mult_reg;
------------------------------------------------------------------
  prcs_mult_mux:process(mult_o_reg, mult_o_int)
  begin
     case MREG is
      when 0 => mult_o_mux <= mult_o_int;
      when 1 => mult_o_mux <= mult_o_reg;
      when others =>
           assert false
           report "Attribute Syntax Error: The allowed values for MREG are 0 or 1"
           severity Failure;
      end case;
  end process prcs_mult_mux;

--####################################################################
--#####                        OpMode                            #####
--####################################################################
  prcs_opmode_reg:process(CLK_dly, GSR_dly)
  begin
      if(GSR_dly = '1') then
         opmode_o_reg <= ( others => '0');
      elsif (GSR_dly = '0') then
         if(rising_edge(CLK_dly)) then
            if(RSTCTRL_dly = '1') then
               opmode_o_reg <= ( others => '0');
            elsif ((RSTCTRL_dly = '0') and (CECTRL_dly = '1')) then
               opmode_o_reg <= OPMODE_dly;
            end if;
         end if;
      end if;
  end process prcs_opmode_reg;
------------------------------------------------------------------
  prcs_opmode_mux:process(opmode_o_reg, OPMODE_dly)
  begin
     case OPMODEREG is
      when 0 => opmode_o_mux <= OPMODE_dly;
      when 1 => opmode_o_mux <= opmode_o_reg;
      when others =>
           assert false
           report "Attribute Syntax Error: The allowed values for OPMODEREG are 0 or 1"
           severity Failure;
      end case;
  end process prcs_opmode_mux;
--####################################################################
--#####                        MUX_XYZ                           #####
--####################################################################
  prcs_mux_xyz:process(opmode_o_mux, qp_o_mux, qa_o_mux, qb_o_mux, mult_o_mux, 
                       qc_o_mux, PCIN_dly, output_x_sig)
  begin
    if(output_x_sig = '1') then
      muxx_o_mux(MSB_P downto 0) <= ( others => 'X');
      muxy_o_mux(MSB_P downto 0) <= ( others => 'X');
      muxz_o_mux(MSB_P downto 0) <= ( others => 'X');
    elsif(output_x_sig = '0') then
    --MUX_X -----
       case opmode_o_mux(1 downto 0) is
         when "00" => muxx_o_mux <= ( others => '0');
         -- FP ?? sign extend needed from 43rd bit to 48th bit 
         when "01" => muxx_o_mux((MSB_A_MULT + MSB_B_MULT +1) downto 0) <= mult_o_mux;
                   if(mult_o_mux(MSB_A_MULT + MSB_B_MULT + 1) = '1') then
                     muxx_o_mux(MSB_PCIN downto (MAX_A_MULT + MAX_B_MULT)) <=  ( others => '1');
                   elsif (mult_o_mux(MSB_A_MULT + MSB_B_MULT + 1) = '0') then
                     muxx_o_mux(MSB_PCIN downto (MAX_A_MULT + MAX_B_MULT)) <=  ( others => '0');
                   end if;
         when "10" => muxx_o_mux <= qp_o_mux;

-- CR 438456  & CR 448147 & CR 451453
         when "11" => if((USE_MULT = "MULT_S") and (AREG=0 or BREG=0)) then 
                          muxx_o_mux(MSB_P downto 0) <=  ( others => 'X');  
                          assert false
                          report "DRC warning: When attribute USE_MULT on DSP48E instance %m is set to MULT_S, the A:B opmode selection is not permitted when AREG or BREG=0. If the multiplier is not used, set USE_MULT = NONE. For dynamic switching between multiply and add operation, set AREG and BREG=1 or MREG=0 and USE_MULT=MULT."
                          severity Warning;
                      else
                          muxx_o_mux(MSB_P downto 0)  <= (qa_o_mux & qb_o_mux);
                      end if;

         when others => null;
       end case;

    --MUX_Y -----
       case opmode_o_mux(3 downto 2) is
         when "00" => muxy_o_mux <= ( others => '0');
         when "01" => muxy_o_mux <= ( others => '0');
         when "10" => 
                     if(opmode_o_mux(6 downto 4) = "100") then
                        muxy_o_mux <= ( others => MULTSIGNIN_dly);
                     else
                        muxy_o_mux <= ( others => '1');
                     end if;
         when "11" => muxy_o_mux <= qc_o_mux;
         when others => null;
       end case;
    --MUX_Z -----
       case opmode_o_mux(6 downto 4) is
         when "000" => muxz_o_mux <= ( others => '0');
         when "001" => muxz_o_mux <= PCIN_dly;
         when "010" => muxz_o_mux <= qp_o_mux;
         when "011" => muxz_o_mux <= qc_o_mux;
         when "100" => muxz_o_mux <= qp_o_mux; -- Used for MACC extend -- multsignin
      -- FP ?? better shift possible ?
         when "101" => if(PCIN_dly(MSB_PCIN) = '0') then
                         muxz_o_mux  <= ( others => '0');
                       elsif(PCIN_dly(MSB_PCIN) = '1') then
                         muxz_o_mux  <= ( others => '1');
                       end if;
                       muxz_o_mux ((MSB_PCIN - SHIFT_MUXZ) downto 0) <= PCIN_dly(MSB_PCIN downto SHIFT_MUXZ ); 
         when "110" => if(qp_o_mux(MSB_P) = '0') then
                         muxz_o_mux  <= ( others => '0');
                       elsif(qp_o_mux(MSB_P) = '1') then
                         muxz_o_mux  <= ( others => '1');
                       end if;
                       muxz_o_mux ((MSB_P - SHIFT_MUXZ) downto 0) <= qp_o_mux(MSB_P downto SHIFT_MUXZ ); 
                      
         when "111" => null;
         when others => null;
       end case;
    end if;
  end process prcs_mux_xyz;
--####################################################################
--#####                        Alumode                          #####
--####################################################################
  prcs_alumode_reg:process(CLK_dly, GSR_dly)
  begin
      if(GSR_dly = '1') then
         alumode_o_reg <= ( others => '0');
      elsif (GSR_dly = '0') then
         if(rising_edge(CLK_dly)) then
            if(RSTALUMODE_dly = '1') then
               alumode_o_reg <= ( others => '0');
            elsif ((RSTALUMODE_dly = '0') and (CEALUMODE_dly = '1'))then
               alumode_o_reg <= ALUMODE_dly;
            end if;
         end if;
      end if;
  end process prcs_alumode_reg;
------------------------------------------------------------------
  prcs_alumode_mux:process(alumode_o_reg, ALUMODE_dly)
  begin
     case ALUMODEREG is
      when 0 => alumode_o_mux <= ALUMODE_dly;
      when 1 => alumode_o_mux <= alumode_o_reg;
      when others =>
           assert false
           report "Attribute Syntax Error: The allowed values for ALUMODEREG are 0 or 1"
           severity Failure;
      end case;
  end process prcs_alumode_mux;

--####################################################################
--#####                     CarryInSel                           #####
--####################################################################
  prcs_carryinsel_reg:process(CLK_dly, GSR_dly)
  begin
      if(GSR_dly = '1') then
         carryinsel_o_reg <= ( others => '0');
      elsif (GSR_dly = '0') then
         if(rising_edge(CLK_dly)) then
            if(RSTCTRL_dly = '1') then
               carryinsel_o_reg <= ( others => '0');
            elsif ((RSTCTRL_dly = '0') and (CECTRL_dly = '1')) then
               carryinsel_o_reg <= CARRYINSEL_dly;
            end if;
         end if;
      end if;
  end process prcs_carryinsel_reg;
------------------------------------------------------------------
  prcs_carryinsel_mux:process(carryinsel_o_reg, CARRYINSEL_dly)
  begin
     case CARRYINSELREG is
       when 0 => carryinsel_o_mux <= CARRYINSEL_dly;
       when 1 => carryinsel_o_mux <= carryinsel_o_reg;
       when others =>
           assert false
           report "Attribute Syntax Error: The allowed values for CARRYINSELREG are 0 or 1"
           severity Failure;
     end case;
  end process prcs_carryinsel_mux;

------------------------------------------------------------------
-- CR 219047 (3)

  prcs_carryinsel_drc:process(carryinsel_o_mux, MULTSIGNIN_dly, opmode_o_mux)
  begin
     if(carryinsel_o_mux = "010") then
        if(not((MULTSIGNIN_dly = 'X') or ((opmode_o_mux = "1001000") and (MULTSIGNIN_dly /= 'X')) 
                                 or ((MULTSIGNIN_dly = '0') and (CARRYCASCIN_dly = '0')))) then
           assert false
-- CR 451178 -- DRC warning Enhancement
           report "DRC warning : CARRYCASCIN can only be used in the current X_DSP48E instance if the previous X_DSP48E  is performing a two input ADD operation, or the current X_DSP48E is configured in the MAC extend opmode(6:0) equals 1001000. This warning can be also triggered if OPMODEREG is set to 1 and CARRYINSELREG is set to 0 - in which case please set CARRYINSELREG to 1."
           severity Warning;
        end if;
     end if;
  end process prcs_carryinsel_drc;

-- CR 219047 (4)
  prcs_carryinsel_mac_drc:process(carryinsel_o_mux)
  begin
     if((carryinsel_o_mux = "110")  and (MULTCARRYINREG /= MREG)) then
        assert false
        report "Attribute Syntax Warning : It is recommended that MREG and MULTCARRYINREG on X_DSP48E instance be set to the same value when using CARRYINSEL = 110 for multiply rounding. "
        severity Warning;
     end if;
  end process prcs_carryinsel_mac_drc;


--####################################################################
--#####                       CarryIn                            #####
--####################################################################

-------  input 0

  prcs_carryin_reg0:process(CLK_dly, GSR_dly)
  begin
      if(GSR_dly = '1') then
         qcarryin_o_reg0 <= '0';
      elsif (GSR_dly = '0') then
         if(rising_edge(CLK_dly)) then
            if(RSTALLCARRYIN_dly = '1') then
               qcarryin_o_reg0 <= '0';
            elsif((RSTALLCARRYIN_dly = '0') and (CECARRYIN_dly = '1')) then
               qcarryin_o_reg0 <= CARRYIN_dly;
            end if;
         end if;
      end if;
  end process prcs_carryin_reg0;

  prcs_carryin_mux0:process(qcarryin_o_reg0, CARRYIN_dly)
  begin
     case CARRYINREG is
       when 0 => carryin_o_mux0 <= CARRYIN_dly;
       when 1 => carryin_o_mux0 <= qcarryin_o_reg0;
       when others =>
            assert false
            report "Attribute Syntax Error: The allowed values for CARRYINREG are 0 or 1"
            severity Failure;
     end case;
  end process prcs_carryin_mux0;

------------------------------------------------------------------
-------  input 7

  prcs_carryin_reg7:process(CLK_dly, GSR_dly)
  begin
      if(GSR_dly = '1') then
         qcarryin_o_reg7 <= '0';
      elsif (GSR_dly = '0') then
         if(rising_edge(CLK_dly)) then
            if(RSTALLCARRYIN_dly = '1') then
               qcarryin_o_reg7 <= '0';
            elsif((RSTALLCARRYIN_dly = '0') and (CEMULTCARRYIN_dly = '1')) then
               qcarryin_o_reg7 <= qa_o_mux(24) XNOR qb_o_mux(17);
            end if;
         end if;
      end if;
  end process prcs_carryin_reg7;

  prcs_carryin_mux7:process(qa_o_mux(24), qb_o_mux(17), qcarryin_o_reg7)
  begin
     case MULTCARRYINREG is
       when 0 => carryin_o_mux7 <= qa_o_mux(24) XNOR qb_o_mux(17);
-- CR 232187
       when 1 => carryin_o_mux7 <= qcarryin_o_reg7;
       when others =>
            assert false
            report "Attribute Syntax Error: The allowed values for MULTCARRYINREG are 0 or 1"
            severity Failure;
     end case;
  end process prcs_carryin_mux7;

------------------------------------------------------------------
-- FP Check this with VV 
------------------------------------------------------------------
-- 
  prcs_carryin_mux:process(carryin_o_mux0, PCIN_dly(47), CARRYCASCIN_dly, carrycascout_o_mux, qp_o_mux(47), carryin_o_mux7, carryinsel_o_mux)
  begin
     case carryinsel_o_mux is
       when "000" => carryin_o_mux  <= carryin_o_mux0;
       when "001" => carryin_o_mux  <= NOT PCIN_dly(47);
       when "010" => carryin_o_mux  <= CARRYCASCIN_dly;
       when "011" => carryin_o_mux  <= PCIN_dly(47);
       when "100" => carryin_o_mux  <= carrycascout_o_mux;
       when "101" => carryin_o_mux  <= NOT qp_o_mux(47);
       when "110" => carryin_o_mux  <= carryin_o_mux7;
       when "111" => carryin_o_mux  <= qp_o_mux(47);
       when others => null;
     end case;
  end process prcs_carryin_mux;
--####################################################################
--#####                         ALU                              #####
--####################################################################
  prcs_alu:process(muxx_o_mux, muxy_o_mux, muxz_o_mux, alumode_o_mux, opmode_o_mux, carryin_o_mux, output_x_sig)

  variable opmode_alu_var : std_logic_vector(5 downto 0) := (others => '0');
  variable alu_full_tmp   : std_logic_vector(MAX_ALU_FULL downto 0) := (others => '0');
  variable alu_hlf1_tmp, alu_hlf2_tmp  : std_logic_vector(MAX_ALU_HALF downto 0) := (others => '0');
  variable alu_qrt1_tmp, alu_qrt2_tmp, alu_qrt3_tmp, alu_qrt4_tmp : std_logic_vector(MAX_ALU_QUART downto 0) := (others => '0');

  begin
     if(output_x_sig = '1') then
       alu_o <= (others => 'X');

     elsif(opmode_valid_flg) then
        opmode_alu_var := opmode_o_mux(3 downto 2) & alumode_o_mux;
        case opmode_alu_var is
           ---------------------------------
           ------------- ADD ---------------
           ---------------------------------
           when "000000" | "010000" | "100000" | "110000" => 

               AluFunction <= ADD_ALU;
               alumode_valid_flg <= true;

               if((USE_SIMD = "ONE48") or (USE_SIMD = "one48")) then
                  alu_full_tmp := (('0'&muxz_o_mux) + 
                                   ('0'&muxx_o_mux) + 
                                   ('0'&muxy_o_mux) + carryin_o_mux); 
                  alu_o <= alu_full_tmp(MSB_ALU_FULL downto 0);

                  carrycascout_o               <=  alu_full_tmp(MAX_ALU_FULL);
                  --  if multiply operation then "X"out the carryout
                  if((opmode_o_mux(1 downto 0) = "01") or (opmode_o_mux(3 downto 2) = "01")) then
                     carryout_o(MSB_CARRYOUT downto 0) <= (others => 'X');
                  else
                     carryout_o(MSB_CARRYOUT - 0) <=  alu_full_tmp(MAX_ALU_FULL);
                     carryout_o(MSB_CARRYOUT - 1) <=  'X';
                     carryout_o(MSB_CARRYOUT - 2) <=  'X';
                     carryout_o(MSB_CARRYOUT - 3) <=  'X';
                  end if;

               elsif((USE_SIMD = "TWO24") or (USE_SIMD = "two24")) then
                  alu_hlf1_tmp := (('0'&muxz_o_mux(((1*MAX_ALU_HALF)-1) downto 0)) +
                                  ('0'&muxx_o_mux(((1*MAX_ALU_HALF)-1) downto 0)) +
                                  ('0'&muxy_o_mux(((1*MAX_ALU_HALF)-1) downto 0)) +
                                  carryin_o_mux);
                  alu_hlf2_tmp := (('0'&muxz_o_mux(((2*MAX_ALU_HALF)-1) downto (1*MAX_ALU_HALF))) +
                                  ('0'&muxx_o_mux(((2*MAX_ALU_HALF)-1) downto (1*MAX_ALU_HALF))) +
                                  ('0'&muxy_o_mux(((2*MAX_ALU_HALF)-1) downto (1*MAX_ALU_HALF)))); 
                  alu_o <= (alu_hlf2_tmp(MSB_ALU_HALF downto 0) & alu_hlf1_tmp(MSB_ALU_HALF downto 0)) ;

                  carrycascout_o               <=  alu_hlf2_tmp(MAX_ALU_HALF);
                  --  if multiply operation then "X"out the carryout
                  if((opmode_o_mux(1 downto 0) = "01") or (opmode_o_mux(3 downto 2) = "01")) then
                     carryout_o(MSB_CARRYOUT downto 0) <= (others => 'X');
                  else
                     carryout_o(MSB_CARRYOUT - 0) <=  alu_hlf2_tmp(MAX_ALU_HALF);
                     carryout_o(MSB_CARRYOUT - 1) <=  'X';
                     carryout_o(MSB_CARRYOUT - 2) <=  alu_hlf1_tmp(MAX_ALU_HALF);
                     carryout_o(MSB_CARRYOUT - 3) <=  'X';
                  end if;

               elsif((USE_SIMD = "FOUR12") or (USE_SIMD = "four12")) then
                  alu_qrt1_tmp := (('0'&muxz_o_mux(((1*MAX_ALU_QUART)-1) downto 0)) +
                                  ('0'&muxx_o_mux(((1*MAX_ALU_QUART)-1) downto 0)) +
                                  ('0'&muxy_o_mux(((1*MAX_ALU_QUART)-1) downto 0)) +
                                  carryin_o_mux);
                  alu_qrt2_tmp := (('0'&muxz_o_mux(((2*MAX_ALU_QUART)-1) downto (1*MAX_ALU_QUART))) +
                                  ('0'&muxx_o_mux(((2*MAX_ALU_QUART)-1) downto (1*MAX_ALU_QUART))) +
                                  ('0'&muxy_o_mux(((2*MAX_ALU_QUART)-1) downto (1*MAX_ALU_QUART))));
                  alu_qrt3_tmp := (('0'&muxz_o_mux(((3*MAX_ALU_QUART)-1) downto (2*MAX_ALU_QUART))) +
                                  ('0'&muxx_o_mux(((3*MAX_ALU_QUART)-1) downto (2*MAX_ALU_QUART))) +
                                  ('0'&muxy_o_mux(((3*MAX_ALU_QUART)-1) downto (2*MAX_ALU_QUART))));
                  alu_qrt4_tmp := (('0'&muxz_o_mux(((4*MAX_ALU_QUART)-1) downto (3*MAX_ALU_QUART))) +
                                  ('0'&muxx_o_mux(((4*MAX_ALU_QUART)-1) downto (3*MAX_ALU_QUART))) +
                                  ('0'&muxy_o_mux(((4*MAX_ALU_QUART)-1) downto (3*MAX_ALU_QUART))));

                  alu_o <= (alu_qrt4_tmp(MSB_ALU_QUART downto 0) & alu_qrt3_tmp(MSB_ALU_QUART downto 0) &
                              alu_qrt2_tmp(MSB_ALU_QUART downto 0) & alu_qrt1_tmp(MSB_ALU_QUART downto 0));

                  carrycascout_o               <=  alu_qrt4_tmp(MAX_ALU_QUART);
                  --  if multiply operation then "X"out the carryout
                  if((opmode_o_mux(1 downto 0) = "01") or (opmode_o_mux(3 downto 2) = "01")) then
                     carryout_o(MSB_CARRYOUT downto 0) <= (others => 'X');
                  else
                     carryout_o(MSB_CARRYOUT - 0) <=  alu_qrt4_tmp(MAX_ALU_QUART);
                     carryout_o(MSB_CARRYOUT - 1) <=  alu_qrt3_tmp(MAX_ALU_QUART);
                     carryout_o(MSB_CARRYOUT - 2) <=  alu_qrt2_tmp(MAX_ALU_QUART);
                     carryout_o(MSB_CARRYOUT - 3) <=  alu_qrt1_tmp(MAX_ALU_QUART);
                  end if;

               else
                  assert false
                  report "Attribute Syntax Error: The legal values for USE_SIMD are ONE48 or TWO24 or FOUR12."
                  severity Failure;
               end if;

           ---------------------------------
           ------ SUBTRACT (X + ~Z ) ---- carryin must be 1 ---------------
           ---------------------------------
           when "000001" | "010001" | "100001" | "110001" => 

               AluFunction <= ADD_XY_NOTZ_ALU;
               alumode_valid_flg <= true;

               if((USE_SIMD = "ONE48") or (USE_SIMD = "one48")) then
                  alu_full_tmp := NOT('0'&muxz_o_mux) + 
                                   ('0'&muxx_o_mux) + 
                                   ('0'&muxy_o_mux) + carryin_o_mux; 
                  alu_o <= alu_full_tmp(MSB_ALU_FULL downto 0);

                  carrycascout_o               <=  NOT alu_full_tmp(MAX_ALU_FULL);
                  --  if multiply operation then "X"out the carryout
                  if((opmode_o_mux(1 downto 0) = "01") or (opmode_o_mux(3 downto 2) = "01")) then
                     carryout_o(MSB_CARRYOUT downto 0) <= (others => 'X');
                  else
                     carryout_o(MSB_CARRYOUT - 0) <=  NOT alu_full_tmp(MAX_ALU_FULL);
                     carryout_o(MSB_CARRYOUT - 1) <=  'X';
                     carryout_o(MSB_CARRYOUT - 2) <=  'X';
                     carryout_o(MSB_CARRYOUT - 3) <=  'X';
                  end if;

               elsif((USE_SIMD = "TWO24") or (USE_SIMD = "two24")) then
                  alu_hlf1_tmp := NOT('0'&muxz_o_mux(((1*MAX_ALU_HALF)-1) downto 0)) +
                                  ('0'&muxx_o_mux(((1*MAX_ALU_HALF)-1) downto 0)) +
                                  ('0'&muxy_o_mux(((1*MAX_ALU_HALF)-1) downto 0)) +
                                  carryin_o_mux;
                  alu_hlf2_tmp := NOT('0'&muxz_o_mux(((2*MAX_ALU_HALF)-1) downto (1*MAX_ALU_HALF))) +
                                  ('0'&muxx_o_mux(((2*MAX_ALU_HALF)-1) downto (1*MAX_ALU_HALF))) +
                                  ('0'&muxy_o_mux(((2*MAX_ALU_HALF)-1) downto (1*MAX_ALU_HALF)));

                  alu_o <= (alu_hlf2_tmp(MSB_ALU_HALF downto 0) & alu_hlf1_tmp(MSB_ALU_HALF downto 0)) ;

                  carrycascout_o               <=  NOT alu_hlf2_tmp(MAX_ALU_HALF);
                  --  if multiply operation then "X"out the carryout
                  if((opmode_o_mux(1 downto 0) = "01") or (opmode_o_mux(3 downto 2) = "01")) then
                     carryout_o(MSB_CARRYOUT downto 0) <= (others => 'X');
                  else
                     carryout_o(MSB_CARRYOUT - 0) <=  NOT alu_hlf2_tmp(MAX_ALU_HALF);
                     carryout_o(MSB_CARRYOUT - 1) <=  'X';
                     carryout_o(MSB_CARRYOUT - 2) <=  NOT alu_hlf1_tmp(MAX_ALU_HALF);
                     carryout_o(MSB_CARRYOUT - 3) <=  'X';
                  end if;

               elsif((USE_SIMD = "FOUR12") or (USE_SIMD = "four12")) then
                  alu_qrt1_tmp := NOT('0'&muxz_o_mux(((1*MAX_ALU_QUART)-1) downto 0)) +
                                  ('0'&muxx_o_mux(((1*MAX_ALU_QUART)-1) downto 0)) +
                                  ('0'&muxy_o_mux(((1*MAX_ALU_QUART)-1) downto 0)) +
                                  carryin_o_mux;
                  alu_qrt2_tmp := NOT('0'&muxz_o_mux(((2*MAX_ALU_QUART)-1) downto (1*MAX_ALU_QUART))) +
                                  ('0'&muxx_o_mux(((2*MAX_ALU_QUART)-1) downto (1*MAX_ALU_QUART))) +
                                  ('0'&muxy_o_mux(((2*MAX_ALU_QUART)-1) downto (1*MAX_ALU_QUART)));
                  alu_qrt3_tmp := NOT('0'&muxz_o_mux(((3*MAX_ALU_QUART)-1) downto (2*MAX_ALU_QUART))) +
                                  ('0'&muxx_o_mux(((3*MAX_ALU_QUART)-1) downto (2*MAX_ALU_QUART))) +
                                  ('0'&muxy_o_mux(((3*MAX_ALU_QUART)-1) downto (2*MAX_ALU_QUART)));
                  alu_qrt4_tmp := NOT('0'&muxz_o_mux(((4*MAX_ALU_QUART)-1) downto (3*MAX_ALU_QUART))) +
                                  ('0'&muxx_o_mux(((4*MAX_ALU_QUART)-1) downto (3*MAX_ALU_QUART))) +
                                  ('0'&muxy_o_mux(((4*MAX_ALU_QUART)-1) downto (3*MAX_ALU_QUART)));

                  alu_o <= (alu_qrt4_tmp(MSB_ALU_QUART downto 0) & alu_qrt3_tmp(MSB_ALU_QUART downto 0) &
                              alu_qrt2_tmp(MSB_ALU_QUART downto 0) & alu_qrt1_tmp(MSB_ALU_QUART downto 0));

                  carrycascout_o               <=  NOT alu_qrt4_tmp(MAX_ALU_QUART);
                  --  if multiply operation then "X"out the carryout
                  if((opmode_o_mux(1 downto 0) = "01") or (opmode_o_mux(3 downto 2) = "01")) then
                     carryout_o(MSB_CARRYOUT downto 0) <= (others => 'X');
                  else
                     carryout_o(MSB_CARRYOUT - 0) <=  NOT alu_qrt4_tmp(MAX_ALU_QUART);
                     carryout_o(MSB_CARRYOUT - 1) <=  NOT alu_qrt3_tmp(MAX_ALU_QUART);
                     carryout_o(MSB_CARRYOUT - 2) <=  NOT alu_qrt2_tmp(MAX_ALU_QUART);
                     carryout_o(MSB_CARRYOUT - 3) <=  NOT alu_qrt1_tmp(MAX_ALU_QUART);
                  end if;

               else
                  assert false
                  report "Attribute Syntax Error: The legal values for USE_SIMD are ONE48 or TWO24 or FOUR12."
                  severity Failure;
               end if;

           ---------------------------------
           ---------- NOT (X + Y + Z + C) ----------
           ---------------------------------
           when "000010" | "010010" | "100010" | "110010" => 

               AluFunction <= NOT_XYZC_ALU;
               alumode_valid_flg <= true;

               if((USE_SIMD = "ONE48") or (USE_SIMD = "one48")) then
                  alu_full_tmp := NOT((('0'&muxz_o_mux) + 
                                   ('0'&muxx_o_mux) + 
                                   ('0'&muxy_o_mux) + carryin_o_mux)); 

                  alu_o <= alu_full_tmp(MSB_ALU_FULL downto 0);

                  carrycascout_o               <=  NOT alu_full_tmp(MAX_ALU_FULL);
                  --  if multiply operation then "X"out the carryout
                  if((opmode_o_mux(1 downto 0) = "01") or (opmode_o_mux(3 downto 2) = "01")) then
                     carryout_o(MSB_CARRYOUT downto 0) <= (others => 'X');
                  else
                     carryout_o(MSB_CARRYOUT - 0) <=  NOT alu_full_tmp(MAX_ALU_FULL);
                     carryout_o(MSB_CARRYOUT - 1) <=  'X';
                     carryout_o(MSB_CARRYOUT - 2) <=  'X';
                     carryout_o(MSB_CARRYOUT - 3) <=  'X';
                  end if;

               elsif((USE_SIMD = "TWO24") or (USE_SIMD = "two24")) then
                  alu_hlf1_tmp := NOT((('0'&muxz_o_mux(((1*MAX_ALU_HALF)-1) downto 0)) +
                                  ('0'&muxx_o_mux(((1*MAX_ALU_HALF)-1) downto 0)) +
                                  ('0'&muxy_o_mux(((1*MAX_ALU_HALF)-1) downto 0)) +
                                  carryin_o_mux));
                  alu_hlf2_tmp := NOT((('0'&muxz_o_mux(((2*MAX_ALU_HALF)-1) downto (1*MAX_ALU_HALF))) +
                                  ('0'&muxx_o_mux(((2*MAX_ALU_HALF)-1) downto (1*MAX_ALU_HALF))) +
                                  ('0'&muxy_o_mux(((2*MAX_ALU_HALF)-1) downto (1*MAX_ALU_HALF)))));

                  alu_o <= (alu_hlf2_tmp(MSB_ALU_HALF downto 0) & alu_hlf1_tmp(MSB_ALU_HALF downto 0)) ;

                  carrycascout_o               <=  NOT alu_hlf2_tmp(MAX_ALU_HALF);
                  --  if multiply operation then "X"out the carryout
                  if((opmode_o_mux(1 downto 0) = "01") or (opmode_o_mux(3 downto 2) = "01")) then
                     carryout_o(MSB_CARRYOUT downto 0) <= (others => 'X');
                  else
                     carryout_o(MSB_CARRYOUT - 0) <=  NOT alu_hlf2_tmp(MAX_ALU_HALF);
                     carryout_o(MSB_CARRYOUT - 1) <=  'X';
                     carryout_o(MSB_CARRYOUT - 2) <=  NOT alu_hlf1_tmp(MAX_ALU_HALF);
                     carryout_o(MSB_CARRYOUT - 3) <=  'X';
                  end if;

               elsif((USE_SIMD = "FOUR12") or (USE_SIMD = "four12")) then
                  alu_qrt1_tmp := NOT((('0'&muxz_o_mux(((1*MAX_ALU_QUART)-1) downto 0)) +
                                  ('0'&muxx_o_mux(((1*MAX_ALU_QUART)-1) downto 0)) +
                                  ('0'&muxy_o_mux(((1*MAX_ALU_QUART)-1) downto 0)) +
                                  carryin_o_mux));
                  alu_qrt2_tmp := NOT((('0'&muxz_o_mux(((2*MAX_ALU_QUART)-1) downto (1*MAX_ALU_QUART))) +
                                  ('0'&muxx_o_mux(((2*MAX_ALU_QUART)-1) downto (1*MAX_ALU_QUART))) +
                                  ('0'&muxy_o_mux(((2*MAX_ALU_QUART)-1) downto (1*MAX_ALU_QUART)))));
                  alu_qrt3_tmp := NOT((('0'&muxz_o_mux(((3*MAX_ALU_QUART)-1) downto (2*MAX_ALU_QUART))) +
                                  ('0'&muxx_o_mux(((3*MAX_ALU_QUART)-1) downto (2*MAX_ALU_QUART))) +
                                  ('0'&muxy_o_mux(((3*MAX_ALU_QUART)-1) downto (2*MAX_ALU_QUART)))));
                  alu_qrt4_tmp := NOT((('0'&muxz_o_mux(((4*MAX_ALU_QUART)-1) downto (3*MAX_ALU_QUART))) +
                                  ('0'&muxx_o_mux(((4*MAX_ALU_QUART)-1) downto (3*MAX_ALU_QUART))) +
                                  ('0'&muxy_o_mux(((4*MAX_ALU_QUART)-1) downto (3*MAX_ALU_QUART)))));

                  alu_o <= (alu_qrt4_tmp(MSB_ALU_QUART downto 0) & alu_qrt3_tmp(MSB_ALU_QUART downto 0) &
                              alu_qrt2_tmp(MSB_ALU_QUART downto 0) & alu_qrt1_tmp(MSB_ALU_QUART downto 0));

                  carrycascout_o               <=  NOT alu_qrt4_tmp(MAX_ALU_QUART);
                  --  if multiply operation then "X"out the carryout
                  if((opmode_o_mux(1 downto 0) = "01") or (opmode_o_mux(3 downto 2) = "01")) then
                     carryout_o(MSB_CARRYOUT downto 0) <= (others => 'X');
                  else
                     carryout_o(MSB_CARRYOUT - 0) <=  NOT alu_qrt4_tmp(MAX_ALU_QUART);
                     carryout_o(MSB_CARRYOUT - 1) <=  NOT alu_qrt3_tmp(MAX_ALU_QUART);
                     carryout_o(MSB_CARRYOUT - 2) <=  NOT alu_qrt2_tmp(MAX_ALU_QUART);
                     carryout_o(MSB_CARRYOUT - 3) <=  NOT alu_qrt1_tmp(MAX_ALU_QUART);
                  end if;

               else
                  assert false
                  report "Attribute Syntax Error: The legal values for USE_SIMD are ONE48 or TWO24 or FOUR12."
                  severity Failure;
               end if;

           ---------------------------------
           ------- SUBTRACT (Z - X ) -------
           ---------------------------------
           when "000011" | "010011" | "100011" | "110011"=> 
               AluFunction <= SUBTRACT_ALU;
               alumode_valid_flg <= true;

               if((USE_SIMD = "ONE48") or (USE_SIMD = "one48")) then
                  alu_full_tmp := (('0'&muxz_o_mux) - 
                                   (('0'&muxx_o_mux) + 
                                   ('0'&muxy_o_mux) + carryin_o_mux)); 

                  alu_o <= alu_full_tmp(MSB_ALU_FULL downto 0);

                  carrycascout_o               <=  alu_full_tmp(MAX_ALU_FULL);
                  --  if multiply operation then "X"out the carryout
                  if((opmode_o_mux(1 downto 0) = "01") or (opmode_o_mux(3 downto 2) = "01")) then
                     carryout_o(MSB_CARRYOUT downto 0) <= (others => 'X');
                  else
                     carryout_o(MSB_CARRYOUT - 0) <=  NOT alu_full_tmp(MAX_ALU_FULL);
                     carryout_o(MSB_CARRYOUT - 1) <=  'X';
                     carryout_o(MSB_CARRYOUT - 2) <=  'X';
                     carryout_o(MSB_CARRYOUT - 3) <=  'X';
                  end if;

               elsif((USE_SIMD = "TWO24") or (USE_SIMD = "two24")) then
                  alu_hlf1_tmp := (('0'&muxz_o_mux(((1*MAX_ALU_HALF)-1) downto 0)) -
                                  (('0'&muxx_o_mux(((1*MAX_ALU_HALF)-1) downto 0)) +
                                  ('0'&muxy_o_mux(((1*MAX_ALU_HALF)-1) downto 0)) +
                                  carryin_o_mux));
                  alu_hlf2_tmp := (('0'&muxz_o_mux(((2*MAX_ALU_HALF)-1) downto (1*MAX_ALU_HALF))) -
                                  (('0'&muxx_o_mux(((2*MAX_ALU_HALF)-1) downto (1*MAX_ALU_HALF))) +
                                  ('0'&muxy_o_mux(((2*MAX_ALU_HALF)-1) downto (1*MAX_ALU_HALF)))));

                  alu_o <= (alu_hlf2_tmp(MSB_ALU_HALF downto 0) & alu_hlf1_tmp(MSB_ALU_HALF downto 0)) ;

                  carrycascout_o               <=  alu_hlf2_tmp(MAX_ALU_HALF);
                  --  if multiply operation then "X"out the carryout
                  if((opmode_o_mux(1 downto 0) = "01") or (opmode_o_mux(3 downto 2) = "01")) then
                     carryout_o(MSB_CARRYOUT downto 0) <= (others => 'X');
                  else
                     carryout_o(MSB_CARRYOUT - 0) <=  NOT alu_hlf2_tmp(MAX_ALU_HALF);
                     carryout_o(MSB_CARRYOUT - 1) <=  'X';
                     carryout_o(MSB_CARRYOUT - 2) <=  NOT alu_hlf1_tmp(MAX_ALU_HALF);
                     carryout_o(MSB_CARRYOUT - 3) <=  'X';
                  end if;

               elsif((USE_SIMD = "FOUR12") or (USE_SIMD = "four12")) then
                  alu_qrt1_tmp := (('0'&muxz_o_mux(((1*MAX_ALU_QUART)-1) downto 0)) -
                                  (('0'&muxx_o_mux(((1*MAX_ALU_QUART)-1) downto 0)) +
                                  ('0'&muxy_o_mux(((1*MAX_ALU_QUART)-1) downto 0)) +
                                  carryin_o_mux));
                  alu_qrt2_tmp := (('0'&muxz_o_mux(((2*MAX_ALU_QUART)-1) downto (1*MAX_ALU_QUART))) -
                                  (('0'&muxx_o_mux(((2*MAX_ALU_QUART)-1) downto (1*MAX_ALU_QUART))) +
                                  ('0'&muxy_o_mux(((2*MAX_ALU_QUART)-1) downto (1*MAX_ALU_QUART)))));
                  alu_qrt3_tmp := (('0'&muxz_o_mux(((3*MAX_ALU_QUART)-1) downto (2*MAX_ALU_QUART))) -
                                  (('0'&muxx_o_mux(((3*MAX_ALU_QUART)-1) downto (2*MAX_ALU_QUART))) +
                                  ('0'&muxy_o_mux(((3*MAX_ALU_QUART)-1) downto (2*MAX_ALU_QUART)))));
                  alu_qrt4_tmp := (('0'&muxz_o_mux(((4*MAX_ALU_QUART)-1) downto (3*MAX_ALU_QUART))) -
                                  (('0'&muxx_o_mux(((4*MAX_ALU_QUART)-1) downto (3*MAX_ALU_QUART))) +
                                  ('0'&muxy_o_mux(((4*MAX_ALU_QUART)-1) downto (3*MAX_ALU_QUART)))));

                  alu_o <= (alu_qrt4_tmp(MSB_ALU_QUART downto 0) & alu_qrt3_tmp(MSB_ALU_QUART downto 0) &
                              alu_qrt2_tmp(MSB_ALU_QUART downto 0) & alu_qrt1_tmp(MSB_ALU_QUART downto 0));

                  carrycascout_o               <=  alu_qrt4_tmp(MAX_ALU_QUART);
                  --  if multiply operation then "X"out the carryout
                  if((opmode_o_mux(1 downto 0) = "01") or (opmode_o_mux(3 downto 2) = "01")) then
                     carryout_o(MSB_CARRYOUT downto 0) <= (others => 'X');
                  else
                     carryout_o(MSB_CARRYOUT - 0) <=  NOT alu_qrt4_tmp(MAX_ALU_QUART);
                     carryout_o(MSB_CARRYOUT - 1) <=  NOT alu_qrt3_tmp(MAX_ALU_QUART);
                     carryout_o(MSB_CARRYOUT - 2) <=  NOT alu_qrt2_tmp(MAX_ALU_QUART);
                     carryout_o(MSB_CARRYOUT - 3) <=  NOT alu_qrt1_tmp(MAX_ALU_QUART);
                  end if;

               else
                  assert false
                  report "Attribute Syntax Error: The legal values for USE_SIMD are ONE48 or TWO24 or FOUR12."
                  severity Failure;
               end if;

           ---------------------------------
           ------------- XOR ---------------
           ---------------------------------
           when "000100" | "000111" | "100101" | "100110" =>
                AluFunction <= XOR_ALU;
                alumode_valid_flg <= true;
                alu_o <= muxx_o_mux xor muxz_o_mux; 
                carryout_o(MSB_CARRYOUT downto 0) <= (others => 'X');
                carrycascout_o <= 'X';

           ---------------------------------
           ------------- XNOR ---------------
           ---------------------------------
           when "000101" | "000110" | "100100" | "100111" =>
                AluFunction <= XNOR_ALU;
                alumode_valid_flg <= true;
                alu_o <= muxx_o_mux xnor muxz_o_mux; 
                carryout_o(MSB_CARRYOUT downto 0) <= (others => 'X');
                carrycascout_o <= 'X';

           ---------------------------------
           ------------- AND ---------------
           ---------------------------------
           when "001100" =>
                AluFunction <= AND_ALU;
                alumode_valid_flg <= true;
                alu_o <= muxx_o_mux and muxz_o_mux; 
                carryout_o(MSB_CARRYOUT downto 0) <= (others => 'X');
                carrycascout_o <= 'X';

           ---------------------------------
           --------- X AND (NOT Z) ---------
           ---------------------------------
           when "001101" =>
                AluFunction <= X_AND_NOT_Z_ALU;
                alumode_valid_flg <= true;
                alu_o <= muxx_o_mux and (not muxz_o_mux); 
                carryout_o(MSB_CARRYOUT downto 0) <= (others => 'X');
                carrycascout_o <= 'X';

           ---------------------------------
           ------------- NAND ---------------
           ---------------------------------
           when "001110" =>
                AluFunction <= NAND_ALU;
                alumode_valid_flg <= true;
                alu_o <= muxx_o_mux nand muxz_o_mux; 
                carryout_o(MSB_CARRYOUT downto 0) <= (others => 'X');
                carrycascout_o <= 'X';

           ---------------------------------
           -------- - (NOT X) OR Z ---------
           ---------------------------------
           when "001111" =>
                AluFunction <= NOT_X_OR_Z_ALU;
                alumode_valid_flg <= true;
                alu_o <= (not muxx_o_mux) or  muxz_o_mux; 
                carryout_o(MSB_CARRYOUT downto 0) <= (others => 'X');
                carrycascout_o <= 'X';

           ---------------------------------
           -------------- OR ---------------
           ---------------------------------
           when "101100" =>
                AluFunction <= OR_ALU;
                alumode_valid_flg <= true;
                alu_o <= muxx_o_mux or muxz_o_mux; 
                carryout_o(MSB_CARRYOUT downto 0) <= (others => 'X');
                carrycascout_o <= 'X';

           ---------------------------------
           --------- X OR (NOT Z) ---------
           ---------------------------------
           when "101101" =>
                AluFunction <= X_OR_NOT_Z_ALU;
                alumode_valid_flg <= true;
                alu_o <= muxx_o_mux or (not muxz_o_mux); 
                carryout_o(MSB_CARRYOUT downto 0) <= (others => 'X');
                carrycascout_o <= 'X';

           ---------------------------------
           ------------ X NOR Z ------------
           ---------------------------------
           when "101110" =>
                AluFunction <= X_NOR_Z_ALU;
                alumode_valid_flg <= true;
                alu_o <= muxx_o_mux nor  muxz_o_mux; 
                carryout_o(MSB_CARRYOUT downto 0) <= (others => 'X');
                carrycascout_o <= 'X';

           ---------------------------------
           --------- (NOT X) and Z ---------
           ---------------------------------
           when "101111" =>
                AluFunction <= NOT_X_AND_Z_ALU;
                alumode_valid_flg <= true;
                alu_o <= (not muxx_o_mux) and  muxz_o_mux; 
                carryout_o(MSB_CARRYOUT downto 0) <= (others => 'X');
                carrycascout_o <= 'X';


           when others => 
                AluFunction <= INVALID_ALU;
                alumode_valid_flg <= false;

                carryout_o(MSB_CARRYOUT downto 0) <= (others => 'X');
                carrycascout_o <= 'X';

        end case;
    end if;
  end process prcs_alu;
--####################################################################
--#####                CARRYOUT and CARRYCASCOUT                 #####
--####################################################################
  prcs_carry_reg:process(CLK_dly, GSR_dly)
  begin
      if(GSR_dly = '1') then
         carryout_o_reg     <=  ( others => '0');
         carrycascout_o_reg <=  '0';
      elsif (GSR_dly = '0') then
         if(rising_edge(CLK_dly)) then
            if((RSTP_dly = '1') or 
               ((AUTORESET_PATTERN_DETECT) and (
                ((AUTORESET_PATTERN_DETECT_OPTINV = "MATCH") and pdet_o_reg1 = '1') or 
                ((AUTORESET_PATTERN_DETECT_OPTINV = "NOT_MATCH") and (pdet_o_reg2 = '1' and pdet_o_reg1 = '0')))
               )
              ) then
               carryout_o_reg     <= ( others => '0');
               carrycascout_o_reg <=  '0';
            elsif ((RSTP_dly = '0') and (CEP_dly = '1')) then
               carryout_o_reg <= carryout_o;
               carrycascout_o_reg <= carrycascout_o;
            end if;
         end if;
      end if;
  end process prcs_carry_reg;
------------------------------------------------------------------
  prcs_carryout_mux:process(carryout_o, carryout_o_reg)
  begin
     case PREG is
       when 0 => carryout_o_mux <= carryout_o;
       when 1 => carryout_o_mux <= carryout_o_reg;
       when others =>
           assert false
           report "Attribute Syntax Error: The allowed values for PREG are 0 or 1"
           severity Failure;
     end case;
   
  end process prcs_carryout_mux;

------------------------------------------------------------------
  prcs_carryout_x_o:process(carryout_o_mux)
  begin
     if(USE_SIMD = "ONE48") then
        carryout_x_o(3) <= carryout_o_mux(3);
     elsif(USE_SIMD = "TWO24") then
        carryout_x_o(3) <= carryout_o_mux(3);
        carryout_x_o(1) <= carryout_o_mux(1);
     elsif(USE_SIMD = "FOUR12") then
        carryout_x_o(3) <= carryout_o_mux(3);
        carryout_x_o(2) <= carryout_o_mux(2);
        carryout_x_o(1) <= carryout_o_mux(1);
        carryout_x_o(0) <= carryout_o_mux(0);
     end if;
  end process prcs_carryout_x_o;

------------------------------------------------------------------
  prcs_carrycascout_mux:process(carrycascout_o, carrycascout_o_reg)
  begin
     case PREG is
       when 0 => carrycascout_o_mux <= carrycascout_o;
       when 1 => carrycascout_o_mux <= carrycascout_o_reg;
       when others =>
           assert false
           report "Attribute Syntax Error: The allowed values for PREG are 0 or 1"
           severity Failure;
     end case;
   
  end process prcs_carrycascout_mux;
------------------------------------------------------------------
-- CR 219047 (2)
  prcs_multsignout_o_opmode:process(mult_o_mux(MSB_A_MULT+MSB_B_MULT+1), opmode_o_mux(3 downto 0))
  begin
    if(opmode_o_mux(3 downto 0) = "0101") then
       multsignout_o_opmode <= mult_o_mux(MSB_A_MULT+MSB_B_MULT+1);
    else
       multsignout_o_opmode <= 'X';
    end if;
  end process prcs_multsignout_o_opmode;

  prcs_multsignout_o_mux:process(multsignout_o_opmode, multsignout_o_reg)
  begin
     case PREG is
       when 0 => multsignout_o_mux <= multsignout_o_opmode;
-- CR 232275
       when 1 => multsignout_o_mux <= multsignout_o_reg;
       when others => null;
--           assert false
--           report "Attribute Syntax Error: The allowed values for PREG are 0 or 1"
--           severity Failure;
     end case;
   
  end process prcs_multsignout_o_mux;
--####################################################################
--####################################################################
--####################################################################
--#####                 PCOUT and MULTSIGNOUT                    #####
--####################################################################
  prcs_qp_reg:process(CLK_dly, GSR_dly)
  begin
      if(GSR_dly = '1') then
         qp_o_reg <=  ( others => '0');
         multsignout_o_reg <= '0';
      elsif (GSR_dly = '0') then
         if(rising_edge(CLK_dly)) then
            if((RSTP_dly = '1') or 
               ((AUTORESET_PATTERN_DETECT) and (
                ((AUTORESET_PATTERN_DETECT_OPTINV = "MATCH") and pdet_o_reg1 = '1') or 
                ((AUTORESET_PATTERN_DETECT_OPTINV = "NOT_MATCH") and (pdet_o_reg2 = '1' and pdet_o_reg1 = '0')))
               )
              ) then
               qp_o_reg <= ( others => '0');
               multsignout_o_reg <= '0';
            elsif ((RSTP_dly = '0') and (CEP_dly = '1')) then
               qp_o_reg <= alu_o;
               multsignout_o_reg <= mult_o_reg((MSB_A_MULT+MSB_B_MULT+1));
            end if;
         end if;
      end if;
  end process prcs_qp_reg;
------------------------------------------------------------------
  prcs_qp_mux:process(alu_o, qp_o_reg)
  begin
     case PREG is
       when 0 => qp_o_mux <= alu_o;
       when 1 => qp_o_mux <= qp_o_reg;
       when others =>
           assert false
           report "Attribute Syntax Error: The allowed values for PREG are 0 or 1"
           severity Failure;
     end case;
   
  end process prcs_qp_mux;
--####################################################################
--#####                    Pattern Detector                      #####
--####################################################################
  prcs_sel_pattern_detect:process(alu_o, qc_o_mux)
  begin

     -- Select the pattern
     if((SEL_PATTERN = "PATTERN") or (SEL_PATTERN = "pattern")) then
         pattern_qp <= To_StdLogicVector(PATTERN);
     elsif((SEL_PATTERN = "C") or (SEL_PATTERN = "c")) then
         pattern_qp <= qc_o_mux;
     else 
         assert false
         report "Attribute Syntax Error: The attribute SEL_PATTERN on DSP48_ALU is incorrect. Legal values for this attribute are PATTERN or C"
         severity Failure;
     end if;

     -- Select the mask  -- if ROUNDING MASK set, use rounding mode, else use SEL_MASK
     if((SEL_ROUNDING_MASK = "SEL_MASK") or (SEL_ROUNDING_MASK = "sel_mask")) then
         if((SEL_MASK = "MASK") or (SEL_MASK = "mask")) then
             mask_qp <= To_StdLogicVector(MASK);
         elsif((SEL_MASK = "C") or (SEL_MASK = "c")) then
             mask_qp <= qc_o_mux;
         else
           assert false
           report "Attribute Syntax Error: The attribute SEL_MASK on DSP48_ALU is incorrect. Legal values for this attribute are MASK or C"
           severity Failure;
         end if;
     elsif((SEL_ROUNDING_MASK = "MODE1") or (SEL_ROUNDING_MASK = "mode1")) then
         mask_qp <=   To_StdLogicVector((To_bitvector( not qc_o_mux)) sla 1) ;
         mask_qp (0) <= '0';
     elsif((SEL_ROUNDING_MASK = "MODE2") or (SEL_ROUNDING_MASK = "mode2")) then
         mask_qp <=   To_StdLogicVector((To_bitvector( not qc_o_mux)) sla 2) ;
         mask_qp (1 downto 0) <= (others => '0');
     else
         assert false
         report "Attribute Syntax Error: The attribute SEL_ROUNDING_MASK on DSP48_ALU is incorrect. Legal values for this attribute are SEL_MASK or MODE1 or MODE2."
         severity Failure;
     end if;
     
  end process prcs_sel_pattern_detect;


---------------------------------------------------------------

  prcs_pdet:process(alu_o, mask_qp, pattern_qp, GSR_dly )
  begin
       if(((alu_o or mask_qp) = (pattern_qp or mask_qp)) and (GSR_dly = '0'))then 
          pdet_o <= '1';
       else
          pdet_o <= '0';
       end if;

       if(((alu_o or mask_qp) = ((NOT pattern_qp) or mask_qp)) and (GSR_dly = '0')) then 
          pdetb_o <= '1';
       else
          pdetb_o <= '0';
       end if;

  end process prcs_pdet;

---------------------------------------------------------------

  prcs_pdet_reg:process(CLK_dly, GSR_dly)
  variable pdetb_reg1_var, pdetb_reg2_var, pdet_reg1_var, pdet_reg2_var : std_ulogic := '0';  
  begin
      if(GSR_dly = '1') then
         pdetb_o_reg1 <= '0';
         pdetb_o_reg2 <= '0';
         pdet_o_reg1  <= '0';
         pdet_o_reg2  <= '0';

         pdetb_reg1_var := '0';
         pdetb_reg2_var := '0';
         pdet_reg1_var  := '0';
         pdet_reg2_var  := '0';
      elsif (GSR_dly = '0') then
         if(rising_edge(CLK_dly)) then
            if((RSTP_dly = '1') or 
               ((AUTORESET_PATTERN_DETECT) and (
                ((AUTORESET_PATTERN_DETECT_OPTINV = "MATCH") and pdet_o_reg1 = '1') or 
                ((AUTORESET_PATTERN_DETECT_OPTINV = "NOT_MATCH") and (pdet_o_reg2 = '1' and pdet_o_reg1 = '0')))
               )
              ) then
               pdetb_o_reg1 <= '0';
               pdetb_o_reg2 <= '0';
               pdet_o_reg1  <= '0';
               pdet_o_reg2  <= '0';

               pdetb_reg1_var := '0';
               pdetb_reg2_var := '0';
               pdet_reg1_var  := '0';
               pdet_reg2_var  := '0';
            elsif ((RSTP_dly = '0') and (CEP_dly = '1')) then
               pdetb_reg2_var := pdetb_reg1_var;
               pdetb_reg1_var := pdetb_o;

               pdet_reg2_var := pdet_reg1_var;
               pdet_reg1_var := pdet_o;

               pdetb_o_reg1 <= pdetb_reg1_var;
               pdetb_o_reg2 <= pdetb_reg2_var;
               pdet_o_reg1  <= pdet_reg1_var;
               pdet_o_reg2  <= pdet_reg2_var;

            end if;
         end if;
      end if;
  end process prcs_pdet_reg;

--####################################################################
--#####                 Underflow / Overflow                     #####
--####################################################################
  prcs_uflow_oflow:process(pdet_o_reg1 , pdet_o_reg2 , pdetb_o_reg1 , pdetb_o_reg2)
  begin
--    if(((AUTORESET_PATTERN_DETECT) and (
--       ((AUTORESET_PATTERN_DETECT_OPTINV = "MATCH") and (pdet_o_reg1 = '1'))  or
--       ((AUTORESET_PATTERN_DETECT_OPTINV = "NOT_MATCH") and ((pdet_o_reg2 = '1') and (pdet_o_reg1 = '0'))))
--      )) then
--       underflow_o <= '0';
--       overflow_o  <= '0';
--    else
--       overflow_o  <= pdet_o_reg2   AND  (NOT pdet_o_reg1)  AND  (NOT pdetb_o_reg1);
--       underflow_o <= pdetb_o_reg2  AND  (NOT pdet_o_reg1)  AND (NOT pdetb_o_reg1);
--    end if;
    if(GSR_dly = '1') then
        overflow_o  <= '0';
        underflow_o <= '0';
    elsif(USE_PATTERN_DETECT = "NO_PATDET") then
        overflow_o  <= 'X';
        underflow_o <= 'X';
    elsif(PREG = 0) then
          overflow_o  <= 'X';
          underflow_o <= 'X';
    elsif(PREG = 1) then
          overflow_o  <= pdet_o_reg2   AND  (NOT pdet_o_reg1)  AND  (NOT pdetb_o_reg1);
          underflow_o <= pdetb_o_reg2  AND  (NOT pdet_o_reg1)  AND (NOT pdetb_o_reg1);
    end if;

  end process prcs_uflow_oflow;
--####################################################################
--#####                 OPMODE DRC                               #####
--####################################################################
  prcs_opmode_drc:process(ping_opmode_drc_check, alumode_o_mux, opmode_o_mux, carryinsel_o_mux)
  variable Message : line;
  variable invalid_opmode_flg : boolean := true;
  variable opmode_valid_var : boolean := true;
  variable opmode_carryinsel_var : std_logic_vector(9 downto 0) := (others => '0');
  begin
      opmode_carryinsel_var := opmode_o_mux & carryinsel_o_mux(MSB_CARRYINSEL downto 0);
      case alumode_o_mux(3 downto 2) is
-----------------------------------------
--        ARITHMETIC MODES DRC         --
-----------------------------------------
         when "00" => 
            case opmode_carryinsel_var is
               when "0000000000" => 
                          OPMODE_NUMBER <= 1;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0000010000" => 
                          OPMODE_NUMBER <= 3;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0000010010" => 
                          OPMODE_NUMBER <= 4;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
-- CR 455601 eased the following two 
               when "0000010101" => 
                          OPMODE_NUMBER <= 50;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0000010111" => 
                          OPMODE_NUMBER <= 50;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
--
               when "0000011000" => 
                          OPMODE_NUMBER <= 7;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0000011010" => 
                          OPMODE_NUMBER <= 8;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0000011100" => 
                          OPMODE_NUMBER <= 9;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0000101000" => 
                          OPMODE_NUMBER <= 13;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0001000000" => 
                          OPMODE_NUMBER <= 15;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0001010000" => 
                          OPMODE_NUMBER <= 17;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0001010010" => 
                          OPMODE_NUMBER <= 18;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0001011000" => 
                          OPMODE_NUMBER <= 21;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0001011010" => 
                          OPMODE_NUMBER <= 22;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0001011100" => 
                          OPMODE_NUMBER <= 23;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0001100000" => 
                          OPMODE_NUMBER <= 27;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0001100010" => 
                          OPMODE_NUMBER <= 28;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0001100100" => 
                          OPMODE_NUMBER <= 29;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0001110000" => 
                          OPMODE_NUMBER <= 33;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0001110010" => 
                          OPMODE_NUMBER <= 34;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0001110101" => 
                          OPMODE_NUMBER <= 37;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0001110111" => 
                          OPMODE_NUMBER <= 37;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0001111000" => 
                          OPMODE_NUMBER <= 38;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0001111010" => 
                          OPMODE_NUMBER <= 39;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0001111100" => 
                          OPMODE_NUMBER <= 40;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0010000000" => 
                          OPMODE_NUMBER <= 46;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0010010000" => 
                          OPMODE_NUMBER <= 48;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0010010101" => 
                          OPMODE_NUMBER <= 50;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0010010111" => 
                          OPMODE_NUMBER <= 50;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0010011000" => 
                          OPMODE_NUMBER <= 51;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0010011001" => 
                          OPMODE_NUMBER <= 53;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0010011011" => 
                          OPMODE_NUMBER <= 53;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0010101000" => 
                          OPMODE_NUMBER <= 55;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0010101001" => 
                          OPMODE_NUMBER <= 57;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0010101011" => 
                          OPMODE_NUMBER <= 57;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0010101110" => 
                          OPMODE_NUMBER <= 58;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0011000000" => 
                          OPMODE_NUMBER <= 59;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0011010000" => 
                          OPMODE_NUMBER <= 61;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0011010101" => 
                          OPMODE_NUMBER <= 63;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0011010111" => 
                          OPMODE_NUMBER <= 63;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0011011000" => 
                          OPMODE_NUMBER <= 64;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0011011001" => 
                          OPMODE_NUMBER <= 66;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0011011011" => 
                          OPMODE_NUMBER <= 66;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0011100000" => 
                          OPMODE_NUMBER <= 68;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0011100001" => 
                          OPMODE_NUMBER <= 70;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0011100011" => 
                          OPMODE_NUMBER <= 70;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0011110000" => 
                          OPMODE_NUMBER <= 72;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0011110101" => 
                          OPMODE_NUMBER <= 74;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0011110111" => 
                          OPMODE_NUMBER <= 74;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0011110001" => 
                          OPMODE_NUMBER <= 75;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0011110011" => 
                          OPMODE_NUMBER <= 75;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0011111000" => 
                          OPMODE_NUMBER <= 77;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0011111001" => 
                          OPMODE_NUMBER <= 79;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0011111011" => 
                          OPMODE_NUMBER <= 79;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0100000000" => 
                          OPMODE_NUMBER <= 82;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0100000010" => 
                          OPMODE_NUMBER <= 83;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0100010000" => 
                          OPMODE_NUMBER <= 86;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0100010010" => 
                          OPMODE_NUMBER <= 87;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0100011000" => 
                          OPMODE_NUMBER <= 90;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0100011010" => 
                          OPMODE_NUMBER <= 91;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0100011101" => 
                          OPMODE_NUMBER <= 94;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0100011111" => 
                          OPMODE_NUMBER <= 94;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0100101000" => 
                          OPMODE_NUMBER <= 95;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0100101101" => 
                          OPMODE_NUMBER <= 97;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0100101111" => 
                          OPMODE_NUMBER <= 97;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0101000000" => 
                          OPMODE_NUMBER <= 98;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0101000010" => 
                          OPMODE_NUMBER <= 99;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0101010000" => 
                          OPMODE_NUMBER <= 102;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0101011000" => 
                          OPMODE_NUMBER <= 104;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0101011101" => 
                          OPMODE_NUMBER <= 106;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0101011111" => 
                          OPMODE_NUMBER <= 106;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0101100000" => 
                          OPMODE_NUMBER <= 107;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0101100010" => 
                          OPMODE_NUMBER <= 108;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0101100101" => 
                          OPMODE_NUMBER <= 111;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0101100111" => 
                          OPMODE_NUMBER <= 111;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0101110000" => 
                          OPMODE_NUMBER <= 112;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0101110101" => 
                          OPMODE_NUMBER <= 114;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0101110111" => 
                          OPMODE_NUMBER <= 114;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0101111000" => 
                          OPMODE_NUMBER <= 115;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0101111101" => 
                          OPMODE_NUMBER <= 117;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0101111111" => 
                          OPMODE_NUMBER <= 117;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0110000000" => 
                          OPMODE_NUMBER <= 120;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0110000010" => 
                          OPMODE_NUMBER <= 121;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0110000100" => 
                          OPMODE_NUMBER <= 122;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0110010000" => 
                          OPMODE_NUMBER <= 126;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0110010010" => 
                          OPMODE_NUMBER <= 127;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0110010101" => 
                          OPMODE_NUMBER <= 130;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0110010111" => 
                          OPMODE_NUMBER <= 130;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0110011000" => 
                          OPMODE_NUMBER <= 131;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0110011010" => 
                          OPMODE_NUMBER <= 132;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0110011100" => 
                          OPMODE_NUMBER <= 133;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0110101000" => 
                          OPMODE_NUMBER <= 139;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0110101110" => 
                          OPMODE_NUMBER <= 141;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0111000000" => 
                          OPMODE_NUMBER <= 143;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0111000010" => 
                          OPMODE_NUMBER <= 144;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0111000100" => 
                          OPMODE_NUMBER <= 145;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0111010000" => 
                          OPMODE_NUMBER <= 149;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0111010101" => 
                          OPMODE_NUMBER <= 151;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0111010111" => 
                          OPMODE_NUMBER <= 151;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0111011000" => 
                          OPMODE_NUMBER <= 152;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0111100000" => 
                          OPMODE_NUMBER <= 156;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0111100010" => 
                          OPMODE_NUMBER <= 157;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0111110000" => 
                          OPMODE_NUMBER <= 160;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0111111000" => 
                          OPMODE_NUMBER <= 162;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "1001000010" => 
                          OPMODE_NUMBER <= 165;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "1010000000" => 
                          OPMODE_NUMBER <= 167;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "1010010000" => 
                          OPMODE_NUMBER <= 169;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "1010010101" => 
                          OPMODE_NUMBER <= 171;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "1010010111" => 
                          OPMODE_NUMBER <= 171;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "1010011000" => 
                          OPMODE_NUMBER <= 172;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "1010011001" => 
                          OPMODE_NUMBER <= 174;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "1010011011" => 
                          OPMODE_NUMBER <= 174;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "1010101000" => 
                          OPMODE_NUMBER <= 176;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "1010101001" => 
                          OPMODE_NUMBER <= 178;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "1010101011" => 
                          OPMODE_NUMBER <= 178;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "1010101110" => 
                          OPMODE_NUMBER <= 179;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "1011000000" => 
                          OPMODE_NUMBER <= 180;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "1011010000" => 
                          OPMODE_NUMBER <= 182;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "1011010101" => 
                          OPMODE_NUMBER <= 184;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "1011010111" => 
                          OPMODE_NUMBER <= 184;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "1011011000" => 
                          OPMODE_NUMBER <= 185;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "1011011001" => 
                          OPMODE_NUMBER <= 187;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "1011011011" => 
                          OPMODE_NUMBER <= 187;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "1011100000" => 
                          OPMODE_NUMBER <= 189;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "1011100001" => 
                          OPMODE_NUMBER <= 191;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "1011100011" => 
                          OPMODE_NUMBER <= 191;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "1011110000" => 
                          OPMODE_NUMBER <= 193;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "1011110101" => 
                          OPMODE_NUMBER <= 195;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "1011110111" => 
                          OPMODE_NUMBER <= 195;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "1011110001" => 
                          OPMODE_NUMBER <= 197;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "1011110011" => 
                          OPMODE_NUMBER <= 197;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "1011111000" => 
                          OPMODE_NUMBER <= 198;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "1011111001" => 
                          OPMODE_NUMBER <= 200;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "1011111011" => 
                          OPMODE_NUMBER <= 200;
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "1100000000" => 
                          OPMODE_NUMBER <= 203;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "1100010000" => 
                          OPMODE_NUMBER <= 205;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "1100011000" => 
                          OPMODE_NUMBER <= 207;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "1100011101" => 
                          OPMODE_NUMBER <= 209;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "1100011111" => 
                          OPMODE_NUMBER <= 209;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "1100101000" => 
                          OPMODE_NUMBER <= 210;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "1100101101" => 
                          OPMODE_NUMBER <= 212;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "1100101111" => 
                          OPMODE_NUMBER <= 212;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "1101000000" => 
                          OPMODE_NUMBER <= 213;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "1101010000" => 
                          OPMODE_NUMBER <= 215;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "1101011000" => 
                          OPMODE_NUMBER <= 217;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "1101011101" => 
                          OPMODE_NUMBER <= 219;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "1101011111" => 
                          OPMODE_NUMBER <= 219;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "1101100000" => 
                          OPMODE_NUMBER <= 220;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "1101100101" => 
                          OPMODE_NUMBER <= 222;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "1101100111" => 
                          OPMODE_NUMBER <= 222;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "1101110000" => 
                          OPMODE_NUMBER <= 223;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "1101110101" => 
                          OPMODE_NUMBER <= 225;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "1101110111" => 
                          OPMODE_NUMBER <= 225;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "1101111000" => 
                          OPMODE_NUMBER <= 226;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "1101111101" => 
                          OPMODE_NUMBER <= 228;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "1101111111" => 
                          OPMODE_NUMBER <= 228;
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), slv_to_str(carryinsel_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when others    =>
                          OPMODE_NUMBER <= -1;
                          if(invalid_opmode_flg = true) then
                             invalid_opmode_flg := false;
                             opmode_valid_var := false;
                             output_x_sig <= '1';
-- CR 444150
                             if((opmode_carryinsel_var = "0000000010") and ((OPMODEREG = 1) and (CARRYINSELREG = 0))) then
                                Write ( Message, string'("DRC Warning : The attribute CARRYINSELREG on DSP48E instance is set to 0. "));
                                Write ( Message, string'("It is required to have CARRYINSELREG be set to 1 to match OPMODEREG, "));
                                Write ( Message, string'("in order to ensure that the simulation model will match the hardware "));
                                Write ( Message, string'("behavior in all use cases."));
                                assert false report Message.all severity Warning;
                                DEALLOCATE (Message);
                             end if;

                             Write ( Message, string'("OPMODE Input Warning : The OPMODE "));
                             Write ( Message,  slv_to_str(opmode_o_mux));
                             Write ( Message, string'(" to DSP48E instance"));
                             Write ( Message, string'(" is either invalid or the CARRYINSEL "));
                             Write ( Message,  slv_to_str(carryinsel_o_mux));
                             Write ( Message, string'(" for that specific OPMODE is invalid. "));
                             Write ( Message, string'(" This error may be due to mismatch in the OPMODEREG "));
                             Write ( Message, string'(" and CARRYINSELREG attribute settings."));
                             Write ( Message, string'(" It is recommended that OPMODEREG and CARRYINSELREG always be set to the same value."));
                             assert false report Message.all severity Warning;
                             DEALLOCATE (Message);
                           end if;
            end case;
         when "01" | "11" => 
-----------------------------------------
--          LOGIC MODES DRC            --
-----------------------------------------
            case opmode_o_mux is
               when "0000000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0000010" => 
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg_logic(slv_to_str(opmode_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0000011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0010000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0010010" => 
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg_logic(slv_to_str(opmode_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0010011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0100000" => 
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg_logic(slv_to_str(opmode_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0100010" => 
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg_logic(slv_to_str(opmode_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0100011" => 
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg_logic(slv_to_str(opmode_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0110000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0110010" => 
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg_logic(slv_to_str(opmode_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0110011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "1010000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "1010010" => 
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg_logic(slv_to_str(opmode_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "1010011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "1100000" => 
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg_logic(slv_to_str(opmode_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "1100010" => 
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg_logic(slv_to_str(opmode_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "1100011" => 
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg_logic(slv_to_str(opmode_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0001000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0001010" => 
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg_logic(slv_to_str(opmode_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0001011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0011000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0011010" => 
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg_logic(slv_to_str(opmode_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0011011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0101000" => 
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg_logic(slv_to_str(opmode_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0101010" => 
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg_logic(slv_to_str(opmode_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0101011" => 
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg_logic(slv_to_str(opmode_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0111000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "0111010" => 
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg_logic(slv_to_str(opmode_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "0111011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "1011000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "1011010" => 
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg_logic(slv_to_str(opmode_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "1011011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "1101000" => 
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg_logic(slv_to_str(opmode_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "1101010" => 
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg_logic(slv_to_str(opmode_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "1101011" => 
                          if (PREG /= 1) then
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg_logic(slv_to_str(opmode_o_mux));
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
                when others    =>
                          OPMODE_NUMBER <= -1;
                          if(invalid_opmode_flg = true) then
                             invalid_opmode_flg := false;
                             opmode_valid_var := false;
                             output_x_sig <= '1';
                             Write ( Message, string'("OPMODE Input Warning : The OPMODE "));
                             Write ( Message,  slv_to_str(opmode_o_mux));
                             Write ( Message, string'(" to DSP48E instance"));
                             Write ( Message, string'(" is invalid for ALU LOGIC modes."));
                             assert false report Message.all severity Warning;
                             DEALLOCATE (Message);
                           end if;
            end case;
         when others => null;
      end case;

      opmode_valid_flg <= opmode_valid_var;

  end process prcs_opmode_drc;
--####################################################################
--#####                   ZERO_DELAY_OUTPUTS                     #####
--####################################################################
  prcs_zero_delay_outputs:process(qacout_o_mux, qbcout_o_mux, carryout_x_o, carrycascout_o_mux,
                                  overflow_o, qp_o_mux, pdet_o, pdetb_o,
                                  pdet_o_reg1, pdetb_o_reg1,
                                  pdet_o_reg2, pdetb_o_reg2,
                                  underflow_o, multsignout_o_mux, opmode_valid_flg, alumode_valid_flg)
  begin
    ACOUT_zd          <= qacout_o_mux;
    BCOUT_zd          <= qbcout_o_mux;
    OVERFLOW_zd       <= overflow_o;
    UNDERFLOW_zd      <= underflow_o;
    P_zd              <= qp_o_mux;
    PCOUT_zd          <= qp_o_mux;
    MULTSIGNOUT_zd    <= multsignout_o_mux;

    if(((AUTORESET_PATTERN_DETECT) and (
       ((AUTORESET_PATTERN_DETECT_OPTINV = "MATCH") and (pdet_o_reg1 = '1'))  or
       ((AUTORESET_PATTERN_DETECT_OPTINV = "NOT_MATCH") and ((pdet_o_reg2 = '1') and (pdet_o_reg1 = '0'))))
      )) then
      CARRYCASCOUT_zd   <= '0';
      CARRYOUT_zd       <= (others => '0');
    else
      CARRYCASCOUT_zd   <= carrycascout_o_mux;   
      CARRYOUT_zd       <= carryout_x_o; 
    end if;

    if((USE_PATTERN_DETECT = "NO_PATDET") or (not opmode_valid_flg) or (not alumode_valid_flg)) then
       PATTERNBDETECT_zd <= 'X';
       PATTERNDETECT_zd  <= 'X';
    elsif (PREG = 0) then
          PATTERNBDETECT_zd <= pdetb_o;
          PATTERNDETECT_zd  <= pdet_o;
    elsif(PREG = 1) then
          PATTERNBDETECT_zd <= pdetb_o_reg1;
          PATTERNDETECT_zd  <= pdet_o_reg1;
    end if;

  end process prcs_zero_delay_outputs;

--####################################################################
--#####                   TIMING CHECKS                          #####
--####################################################################
  prcs_tmngchk:process
--    variable P_GlitchData :  VitalGlitchDataArrayType (47 downto 0 );
--    variable PCOUT_GlitchData :  VitalGlitchDataArrayType (47 downto 0 );
--    variable BCOUT_GlitchData :  VitalGlitchDataArrayType (17 downto 0 );
--
      variable ACOUT_GlitchData		:  VitalGlitchDataArrayType (29 downto 0 );
      variable BCOUT_GlitchData		:  VitalGlitchDataArrayType (17 downto 0 );
      variable CARRYCASCOUT_GlitchData	:  VitalGlitchDataType;
      variable CARRYOUT_GlitchData	:  VitalGlitchDataArrayType (3 downto 0 );
      variable OVERFLOW_GlitchData	:  VitalGlitchDataType;
      variable P_GlitchData		:  VitalGlitchDataArrayType (47 downto 0 );
      variable PATTERNBDETECT_GlitchData	:  VitalGlitchDataType;
      variable PATTERNDETECT_GlitchData	:  VitalGlitchDataType;
      variable PCOUT_GlitchData		:  VitalGlitchDataArrayType (47 downto 0 );
      variable UNDERFLOW_GlitchData	:  VitalGlitchDataType;

      variable MULTSIGNOUT_GlitchData	:  VitalGlitchDataType;
--  Pin timing violations (clock input pins)

--  Pin Timing Violations (all input pins)

    variable Tmkr_A_CLK_posedge  : VitalTimingDataArrayType(29 downto 0 );
    variable Tviol_A_CLK_posedge : std_logic_vector(29 downto 0 ) := (others => '0');

    variable Tmkr_ACIN_CLK_posedge  : VitalTimingDataArrayType(29 downto 0 );
    variable Tviol_ACIN_CLK_posedge : std_logic_vector(29 downto 0 ) := (others => '0');

    variable Tmkr_ALUMODE_CLK_posedge  : VitalTimingDataArrayType(29 downto 0 );
    variable Tviol_ALUMODE_CLK_posedge : std_logic_vector(29 downto 0 ) := (others => '0');

    variable Tmkr_B_CLK_posedge  : VitalTimingDataArrayType(17 downto 0 );
    variable Tviol_B_CLK_posedge : std_logic_vector(17 downto 0 ) := (others => '0');

    variable Tmkr_BCIN_CLK_posedge  : VitalTimingDataArrayType(17 downto 0 );
    variable Tviol_BCIN_CLK_posedge : std_logic_vector(17 downto 0 ) := (others => '0');

    variable Tmkr_C_CLK_posedge  : VitalTimingDataArrayType(47 downto 0 );
    variable Tviol_C_CLK_posedge : std_logic_vector(47 downto 0 ) := (others => '0');

    variable Tmkr_CARRYCASCIN_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tviol_CARRYCASCIN_CLK_posedge : std_ulogic := '0';

    variable Tmkr_CARRYIN_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tviol_CARRYIN_CLK_posedge : std_ulogic := '0';

    variable Tmkr_CARRYINSEL_CLK_posedge  : VitalTimingDataArrayType(2 downto 0 );
    variable Tviol_CARRYINSEL_CLK_posedge : std_logic_vector(2 downto 0 ) := (others => '0');

    variable Tmkr_CEA1_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tviol_CEA1_CLK_posedge : std_ulogic := '0';

    variable Tmkr_CEA2_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tviol_CEA2_CLK_posedge : std_ulogic := '0';

    variable Tmkr_CEALUMODE_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tviol_CEALUMODE_CLK_posedge : std_ulogic := '0';

    variable Tmkr_CEB1_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tviol_CEB1_CLK_posedge : std_ulogic := '0';

    variable Tmkr_CEB2_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tviol_CEB2_CLK_posedge : std_ulogic := '0';

    variable Tmkr_CEC_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tviol_CEC_CLK_posedge : std_ulogic := '0';

    variable Tmkr_CECARRYIN_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tviol_CECARRYIN_CLK_posedge : std_ulogic := '0';

    variable Tmkr_CECTRL_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tviol_CECTRL_CLK_posedge : std_ulogic := '0';

    variable Tmkr_CEM_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tviol_CEM_CLK_posedge : std_ulogic := '0';

    variable Tmkr_CEP_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tviol_CEP_CLK_posedge : std_ulogic := '0';

    variable Tmkr_OPMODE_CLK_posedge  : VitalTimingDataArrayType(6 downto 0 );
    variable Tviol_OPMODE_CLK_posedge : std_logic_vector(6 downto 0 ) := (others => '0');

    variable Tmkr_PCIN_CLK_posedge  : VitalTimingDataArrayType(47 downto 0 );
    variable Tviol_PCIN_CLK_posedge : std_logic_vector(47 downto 0 ) := (others => '0');

    variable Tmkr_RSTA_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tviol_RSTA_CLK_posedge : std_ulogic := '0';

    variable Tmkr_RSTALUMODE_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tviol_RSTALUMODE_CLK_posedge : std_ulogic := '0';

    variable Tmkr_RSTB_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tviol_RSTB_CLK_posedge : std_ulogic := '0';

    variable Tmkr_RSTC_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tviol_RSTC_CLK_posedge : std_ulogic := '0';

    variable Tmkr_RSTALLCARRYIN_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tviol_RSTALLCARRYIN_CLK_posedge : std_ulogic := '0';

    variable Tmkr_RSTCTRL_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tviol_RSTCTRL_CLK_posedge : std_ulogic := '0';

    variable Tmkr_RSTM_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tviol_RSTM_CLK_posedge : std_ulogic := '0';

    variable Tmkr_RSTP_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tviol_RSTP_CLK_posedge : std_ulogic := '0';

    variable PInfo_CLK : VitalPeriodDataType := VitalPeriodDataInit;
    variable Pviol_CLK : std_ulogic := '0';

begin

--  Setup/Hold Check Violations (all input pins)

     if (TimingChecksOn) then
--=====  Vital SetupHold Checks for Bus signal A =====
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(0),
         TimingData           => Tmkr_A_CLK_posedge(0),
         TestSignal           => A_dly(0),
         TestSignalName       => "A(0)",
         TestDelay            => tisd_A_CLK(0),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(0),
         SetupLow             => tsetup_A_CLK_negedge_posedge(0),
         HoldHigh             => thold_A_CLK_posedge_posedge(0),
         HoldLow              => thold_A_CLK_negedge_posedge(0),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(1),
         TimingData           => Tmkr_A_CLK_posedge(1),
         TestSignal           => A_dly(1),
         TestSignalName       => "A(1)",
         TestDelay            => tisd_A_CLK(1),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(1),
         SetupLow             => tsetup_A_CLK_negedge_posedge(1),
         HoldHigh             => thold_A_CLK_posedge_posedge(1),
         HoldLow              => thold_A_CLK_negedge_posedge(1),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(2),
         TimingData           => Tmkr_A_CLK_posedge(2),
         TestSignal           => A_dly(2),
         TestSignalName       => "A(2)",
         TestDelay            => tisd_A_CLK(2),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(2),
         SetupLow             => tsetup_A_CLK_negedge_posedge(2),
         HoldHigh             => thold_A_CLK_posedge_posedge(2),
         HoldLow              => thold_A_CLK_negedge_posedge(2),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(3),
         TimingData           => Tmkr_A_CLK_posedge(3),
         TestSignal           => A_dly(3),
         TestSignalName       => "A(3)",
         TestDelay            => tisd_A_CLK(3),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(3),
         SetupLow             => tsetup_A_CLK_negedge_posedge(3),
         HoldHigh             => thold_A_CLK_posedge_posedge(3),
         HoldLow              => thold_A_CLK_negedge_posedge(3),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(4),
         TimingData           => Tmkr_A_CLK_posedge(4),
         TestSignal           => A_dly(4),
         TestSignalName       => "A(4)",
         TestDelay            => tisd_A_CLK(4),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(4),
         SetupLow             => tsetup_A_CLK_negedge_posedge(4),
         HoldHigh             => thold_A_CLK_posedge_posedge(4),
         HoldLow              => thold_A_CLK_negedge_posedge(4),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(5),
         TimingData           => Tmkr_A_CLK_posedge(5),
         TestSignal           => A_dly(5),
         TestSignalName       => "A(5)",
         TestDelay            => tisd_A_CLK(5),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(5),
         SetupLow             => tsetup_A_CLK_negedge_posedge(5),
         HoldHigh             => thold_A_CLK_posedge_posedge(5),
         HoldLow              => thold_A_CLK_negedge_posedge(5),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(6),
         TimingData           => Tmkr_A_CLK_posedge(6),
         TestSignal           => A_dly(6),
         TestSignalName       => "A(6)",
         TestDelay            => tisd_A_CLK(6),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(6),
         SetupLow             => tsetup_A_CLK_negedge_posedge(6),
         HoldHigh             => thold_A_CLK_posedge_posedge(6),
         HoldLow              => thold_A_CLK_negedge_posedge(6),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(7),
         TimingData           => Tmkr_A_CLK_posedge(7),
         TestSignal           => A_dly(7),
         TestSignalName       => "A(7)",
         TestDelay            => tisd_A_CLK(7),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(7),
         SetupLow             => tsetup_A_CLK_negedge_posedge(7),
         HoldHigh             => thold_A_CLK_posedge_posedge(7),
         HoldLow              => thold_A_CLK_negedge_posedge(7),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(8),
         TimingData           => Tmkr_A_CLK_posedge(8),
         TestSignal           => A_dly(8),
         TestSignalName       => "A(8)",
         TestDelay            => tisd_A_CLK(8),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(8),
         SetupLow             => tsetup_A_CLK_negedge_posedge(8),
         HoldHigh             => thold_A_CLK_posedge_posedge(8),
         HoldLow              => thold_A_CLK_negedge_posedge(8),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(9),
         TimingData           => Tmkr_A_CLK_posedge(9),
         TestSignal           => A_dly(9),
         TestSignalName       => "A(9)",
         TestDelay            => tisd_A_CLK(9),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(9),
         SetupLow             => tsetup_A_CLK_negedge_posedge(9),
         HoldHigh             => thold_A_CLK_posedge_posedge(9),
         HoldLow              => thold_A_CLK_negedge_posedge(9),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(10),
         TimingData           => Tmkr_A_CLK_posedge(10),
         TestSignal           => A_dly(10),
         TestSignalName       => "A(10)",
         TestDelay            => tisd_A_CLK(10),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(10),
         SetupLow             => tsetup_A_CLK_negedge_posedge(10),
         HoldHigh             => thold_A_CLK_posedge_posedge(10),
         HoldLow              => thold_A_CLK_negedge_posedge(10),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(11),
         TimingData           => Tmkr_A_CLK_posedge(11),
         TestSignal           => A_dly(11),
         TestSignalName       => "A(11)",
         TestDelay            => tisd_A_CLK(11),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(11),
         SetupLow             => tsetup_A_CLK_negedge_posedge(11),
         HoldHigh             => thold_A_CLK_posedge_posedge(11),
         HoldLow              => thold_A_CLK_negedge_posedge(11),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(12),
         TimingData           => Tmkr_A_CLK_posedge(12),
         TestSignal           => A_dly(12),
         TestSignalName       => "A(12)",
         TestDelay            => tisd_A_CLK(12),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(12),
         SetupLow             => tsetup_A_CLK_negedge_posedge(12),
         HoldHigh             => thold_A_CLK_posedge_posedge(12),
         HoldLow              => thold_A_CLK_negedge_posedge(12),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(13),
         TimingData           => Tmkr_A_CLK_posedge(13),
         TestSignal           => A_dly(13),
         TestSignalName       => "A(13)",
         TestDelay            => tisd_A_CLK(13),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(13),
         SetupLow             => tsetup_A_CLK_negedge_posedge(13),
         HoldHigh             => thold_A_CLK_posedge_posedge(13),
         HoldLow              => thold_A_CLK_negedge_posedge(13),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(14),
         TimingData           => Tmkr_A_CLK_posedge(14),
         TestSignal           => A_dly(14),
         TestSignalName       => "A(14)",
         TestDelay            => tisd_A_CLK(14),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(14),
         SetupLow             => tsetup_A_CLK_negedge_posedge(14),
         HoldHigh             => thold_A_CLK_posedge_posedge(14),
         HoldLow              => thold_A_CLK_negedge_posedge(14),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(15),
         TimingData           => Tmkr_A_CLK_posedge(15),
         TestSignal           => A_dly(15),
         TestSignalName       => "A(15)",
         TestDelay            => tisd_A_CLK(15),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(15),
         SetupLow             => tsetup_A_CLK_negedge_posedge(15),
         HoldHigh             => thold_A_CLK_posedge_posedge(15),
         HoldLow              => thold_A_CLK_negedge_posedge(15),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(16),
         TimingData           => Tmkr_A_CLK_posedge(16),
         TestSignal           => A_dly(16),
         TestSignalName       => "A(16)",
         TestDelay            => tisd_A_CLK(16),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(16),
         SetupLow             => tsetup_A_CLK_negedge_posedge(16),
         HoldHigh             => thold_A_CLK_posedge_posedge(16),
         HoldLow              => thold_A_CLK_negedge_posedge(16),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(17),
         TimingData           => Tmkr_A_CLK_posedge(17),
         TestSignal           => A_dly(17),
         TestSignalName       => "A(17)",
         TestDelay            => tisd_A_CLK(17),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(17),
         SetupLow             => tsetup_A_CLK_negedge_posedge(17),
         HoldHigh             => thold_A_CLK_posedge_posedge(17),
         HoldLow              => thold_A_CLK_negedge_posedge(17),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(18),
         TimingData           => Tmkr_A_CLK_posedge(18),
         TestSignal           => A_dly(18),
         TestSignalName       => "A(18)",
         TestDelay            => tisd_A_CLK(18),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(18),
         SetupLow             => tsetup_A_CLK_negedge_posedge(18),
         HoldHigh             => thold_A_CLK_posedge_posedge(18),
         HoldLow              => thold_A_CLK_negedge_posedge(18),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(19),
         TimingData           => Tmkr_A_CLK_posedge(19),
         TestSignal           => A_dly(19),
         TestSignalName       => "A(19)",
         TestDelay            => tisd_A_CLK(19),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(19),
         SetupLow             => tsetup_A_CLK_negedge_posedge(19),
         HoldHigh             => thold_A_CLK_posedge_posedge(19),
         HoldLow              => thold_A_CLK_negedge_posedge(19),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(20),
         TimingData           => Tmkr_A_CLK_posedge(20),
         TestSignal           => A_dly(20),
         TestSignalName       => "A(20)",
         TestDelay            => tisd_A_CLK(20),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(20),
         SetupLow             => tsetup_A_CLK_negedge_posedge(20),
         HoldHigh             => thold_A_CLK_posedge_posedge(20),
         HoldLow              => thold_A_CLK_negedge_posedge(20),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(21),
         TimingData           => Tmkr_A_CLK_posedge(21),
         TestSignal           => A_dly(21),
         TestSignalName       => "A(21)",
         TestDelay            => tisd_A_CLK(21),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(21),
         SetupLow             => tsetup_A_CLK_negedge_posedge(21),
         HoldHigh             => thold_A_CLK_posedge_posedge(21),
         HoldLow              => thold_A_CLK_negedge_posedge(21),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(22),
         TimingData           => Tmkr_A_CLK_posedge(22),
         TestSignal           => A_dly(22),
         TestSignalName       => "A(22)",
         TestDelay            => tisd_A_CLK(22),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(22),
         SetupLow             => tsetup_A_CLK_negedge_posedge(22),
         HoldHigh             => thold_A_CLK_posedge_posedge(22),
         HoldLow              => thold_A_CLK_negedge_posedge(22),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(23),
         TimingData           => Tmkr_A_CLK_posedge(23),
         TestSignal           => A_dly(23),
         TestSignalName       => "A(23)",
         TestDelay            => tisd_A_CLK(23),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(23),
         SetupLow             => tsetup_A_CLK_negedge_posedge(23),
         HoldHigh             => thold_A_CLK_posedge_posedge(23),
         HoldLow              => thold_A_CLK_negedge_posedge(23),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(24),
         TimingData           => Tmkr_A_CLK_posedge(24),
         TestSignal           => A_dly(24),
         TestSignalName       => "A(24)",
         TestDelay            => tisd_A_CLK(24),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(24),
         SetupLow             => tsetup_A_CLK_negedge_posedge(24),
         HoldHigh             => thold_A_CLK_posedge_posedge(24),
         HoldLow              => thold_A_CLK_negedge_posedge(24),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(25),
         TimingData           => Tmkr_A_CLK_posedge(25),
         TestSignal           => A_dly(25),
         TestSignalName       => "A(25)",
         TestDelay            => tisd_A_CLK(25),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(25),
         SetupLow             => tsetup_A_CLK_negedge_posedge(25),
         HoldHigh             => thold_A_CLK_posedge_posedge(25),
         HoldLow              => thold_A_CLK_negedge_posedge(25),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(26),
         TimingData           => Tmkr_A_CLK_posedge(26),
         TestSignal           => A_dly(26),
         TestSignalName       => "A(26)",
         TestDelay            => tisd_A_CLK(26),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(26),
         SetupLow             => tsetup_A_CLK_negedge_posedge(26),
         HoldHigh             => thold_A_CLK_posedge_posedge(26),
         HoldLow              => thold_A_CLK_negedge_posedge(26),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(27),
         TimingData           => Tmkr_A_CLK_posedge(27),
         TestSignal           => A_dly(27),
         TestSignalName       => "A(27)",
         TestDelay            => tisd_A_CLK(27),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(27),
         SetupLow             => tsetup_A_CLK_negedge_posedge(27),
         HoldHigh             => thold_A_CLK_posedge_posedge(27),
         HoldLow              => thold_A_CLK_negedge_posedge(27),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(28),
         TimingData           => Tmkr_A_CLK_posedge(28),
         TestSignal           => A_dly(28),
         TestSignalName       => "A(28)",
         TestDelay            => tisd_A_CLK(28),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(28),
         SetupLow             => tsetup_A_CLK_negedge_posedge(28),
         HoldHigh             => thold_A_CLK_posedge_posedge(28),
         HoldLow              => thold_A_CLK_negedge_posedge(28),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(29),
         TimingData           => Tmkr_A_CLK_posedge(29),
         TestSignal           => A_dly(29),
         TestSignalName       => "A(29)",
         TestDelay            => tisd_A_CLK(29),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(29),
         SetupLow             => tsetup_A_CLK_negedge_posedge(29),
         HoldHigh             => thold_A_CLK_posedge_posedge(29),
         HoldLow              => thold_A_CLK_negedge_posedge(29),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks for Bus signal ACIN =====
       VitalSetupHoldCheck (
         Violation            => Tviol_ACIN_CLK_posedge(0),
         TimingData           => Tmkr_ACIN_CLK_posedge(0),
         TestSignal           => ACIN_dly(0),
         TestSignalName       => "ACIN(0)",
         TestDelay            => tisd_ACIN_CLK(0),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_ACIN_CLK_posedge_posedge(0),
         SetupLow             => tsetup_ACIN_CLK_negedge_posedge(0),
         HoldHigh             => thold_ACIN_CLK_posedge_posedge(0),
         HoldLow              => thold_ACIN_CLK_negedge_posedge(0),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_ACIN_CLK_posedge(1),
         TimingData           => Tmkr_ACIN_CLK_posedge(1),
         TestSignal           => ACIN_dly(1),
         TestSignalName       => "ACIN(1)",
         TestDelay            => tisd_ACIN_CLK(1),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_ACIN_CLK_posedge_posedge(1),
         SetupLow             => tsetup_ACIN_CLK_negedge_posedge(1),
         HoldHigh             => thold_ACIN_CLK_posedge_posedge(1),
         HoldLow              => thold_ACIN_CLK_negedge_posedge(1),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_ACIN_CLK_posedge(2),
         TimingData           => Tmkr_ACIN_CLK_posedge(2),
         TestSignal           => ACIN_dly(2),
         TestSignalName       => "ACIN(2)",
         TestDelay            => tisd_ACIN_CLK(2),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_ACIN_CLK_posedge_posedge(2),
         SetupLow             => tsetup_ACIN_CLK_negedge_posedge(2),
         HoldHigh             => thold_ACIN_CLK_posedge_posedge(2),
         HoldLow              => thold_ACIN_CLK_negedge_posedge(2),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_ACIN_CLK_posedge(3),
         TimingData           => Tmkr_ACIN_CLK_posedge(3),
         TestSignal           => ACIN_dly(3),
         TestSignalName       => "ACIN(3)",
         TestDelay            => tisd_ACIN_CLK(3),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_ACIN_CLK_posedge_posedge(3),
         SetupLow             => tsetup_ACIN_CLK_negedge_posedge(3),
         HoldHigh             => thold_ACIN_CLK_posedge_posedge(3),
         HoldLow              => thold_ACIN_CLK_negedge_posedge(3),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_ACIN_CLK_posedge(4),
         TimingData           => Tmkr_ACIN_CLK_posedge(4),
         TestSignal           => ACIN_dly(4),
         TestSignalName       => "ACIN(4)",
         TestDelay            => tisd_ACIN_CLK(4),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_ACIN_CLK_posedge_posedge(4),
         SetupLow             => tsetup_ACIN_CLK_negedge_posedge(4),
         HoldHigh             => thold_ACIN_CLK_posedge_posedge(4),
         HoldLow              => thold_ACIN_CLK_negedge_posedge(4),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_ACIN_CLK_posedge(5),
         TimingData           => Tmkr_ACIN_CLK_posedge(5),
         TestSignal           => ACIN_dly(5),
         TestSignalName       => "ACIN(5)",
         TestDelay            => tisd_ACIN_CLK(5),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_ACIN_CLK_posedge_posedge(5),
         SetupLow             => tsetup_ACIN_CLK_negedge_posedge(5),
         HoldHigh             => thold_ACIN_CLK_posedge_posedge(5),
         HoldLow              => thold_ACIN_CLK_negedge_posedge(5),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_ACIN_CLK_posedge(6),
         TimingData           => Tmkr_ACIN_CLK_posedge(6),
         TestSignal           => ACIN_dly(6),
         TestSignalName       => "ACIN(6)",
         TestDelay            => tisd_ACIN_CLK(6),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_ACIN_CLK_posedge_posedge(6),
         SetupLow             => tsetup_ACIN_CLK_negedge_posedge(6),
         HoldHigh             => thold_ACIN_CLK_posedge_posedge(6),
         HoldLow              => thold_ACIN_CLK_negedge_posedge(6),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_ACIN_CLK_posedge(7),
         TimingData           => Tmkr_ACIN_CLK_posedge(7),
         TestSignal           => ACIN_dly(7),
         TestSignalName       => "ACIN(7)",
         TestDelay            => tisd_ACIN_CLK(7),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_ACIN_CLK_posedge_posedge(7),
         SetupLow             => tsetup_ACIN_CLK_negedge_posedge(7),
         HoldHigh             => thold_ACIN_CLK_posedge_posedge(7),
         HoldLow              => thold_ACIN_CLK_negedge_posedge(7),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_ACIN_CLK_posedge(8),
         TimingData           => Tmkr_ACIN_CLK_posedge(8),
         TestSignal           => ACIN_dly(8),
         TestSignalName       => "ACIN(8)",
         TestDelay            => tisd_ACIN_CLK(8),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_ACIN_CLK_posedge_posedge(8),
         SetupLow             => tsetup_ACIN_CLK_negedge_posedge(8),
         HoldHigh             => thold_ACIN_CLK_posedge_posedge(8),
         HoldLow              => thold_ACIN_CLK_negedge_posedge(8),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_ACIN_CLK_posedge(9),
         TimingData           => Tmkr_ACIN_CLK_posedge(9),
         TestSignal           => ACIN_dly(9),
         TestSignalName       => "ACIN(9)",
         TestDelay            => tisd_ACIN_CLK(9),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_ACIN_CLK_posedge_posedge(9),
         SetupLow             => tsetup_ACIN_CLK_negedge_posedge(9),
         HoldHigh             => thold_ACIN_CLK_posedge_posedge(9),
         HoldLow              => thold_ACIN_CLK_negedge_posedge(9),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_ACIN_CLK_posedge(10),
         TimingData           => Tmkr_ACIN_CLK_posedge(10),
         TestSignal           => ACIN_dly(10),
         TestSignalName       => "ACIN(10)",
         TestDelay            => tisd_ACIN_CLK(10),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_ACIN_CLK_posedge_posedge(10),
         SetupLow             => tsetup_ACIN_CLK_negedge_posedge(10),
         HoldHigh             => thold_ACIN_CLK_posedge_posedge(10),
         HoldLow              => thold_ACIN_CLK_negedge_posedge(10),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_ACIN_CLK_posedge(11),
         TimingData           => Tmkr_ACIN_CLK_posedge(11),
         TestSignal           => ACIN_dly(11),
         TestSignalName       => "ACIN(11)",
         TestDelay            => tisd_ACIN_CLK(11),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_ACIN_CLK_posedge_posedge(11),
         SetupLow             => tsetup_ACIN_CLK_negedge_posedge(11),
         HoldHigh             => thold_ACIN_CLK_posedge_posedge(11),
         HoldLow              => thold_ACIN_CLK_negedge_posedge(11),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_ACIN_CLK_posedge(12),
         TimingData           => Tmkr_ACIN_CLK_posedge(12),
         TestSignal           => ACIN_dly(12),
         TestSignalName       => "ACIN(12)",
         TestDelay            => tisd_ACIN_CLK(12),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_ACIN_CLK_posedge_posedge(12),
         SetupLow             => tsetup_ACIN_CLK_negedge_posedge(12),
         HoldHigh             => thold_ACIN_CLK_posedge_posedge(12),
         HoldLow              => thold_ACIN_CLK_negedge_posedge(12),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_ACIN_CLK_posedge(13),
         TimingData           => Tmkr_ACIN_CLK_posedge(13),
         TestSignal           => ACIN_dly(13),
         TestSignalName       => "ACIN(13)",
         TestDelay            => tisd_ACIN_CLK(13),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_ACIN_CLK_posedge_posedge(13),
         SetupLow             => tsetup_ACIN_CLK_negedge_posedge(13),
         HoldHigh             => thold_ACIN_CLK_posedge_posedge(13),
         HoldLow              => thold_ACIN_CLK_negedge_posedge(13),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_ACIN_CLK_posedge(14),
         TimingData           => Tmkr_ACIN_CLK_posedge(14),
         TestSignal           => ACIN_dly(14),
         TestSignalName       => "ACIN(14)",
         TestDelay            => tisd_ACIN_CLK(14),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_ACIN_CLK_posedge_posedge(14),
         SetupLow             => tsetup_ACIN_CLK_negedge_posedge(14),
         HoldHigh             => thold_ACIN_CLK_posedge_posedge(14),
         HoldLow              => thold_ACIN_CLK_negedge_posedge(14),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_ACIN_CLK_posedge(15),
         TimingData           => Tmkr_ACIN_CLK_posedge(15),
         TestSignal           => ACIN_dly(15),
         TestSignalName       => "ACIN(15)",
         TestDelay            => tisd_ACIN_CLK(15),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_ACIN_CLK_posedge_posedge(15),
         SetupLow             => tsetup_ACIN_CLK_negedge_posedge(15),
         HoldHigh             => thold_ACIN_CLK_posedge_posedge(15),
         HoldLow              => thold_ACIN_CLK_negedge_posedge(15),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_ACIN_CLK_posedge(16),
         TimingData           => Tmkr_ACIN_CLK_posedge(16),
         TestSignal           => ACIN_dly(16),
         TestSignalName       => "ACIN(16)",
         TestDelay            => tisd_ACIN_CLK(16),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_ACIN_CLK_posedge_posedge(16),
         SetupLow             => tsetup_ACIN_CLK_negedge_posedge(16),
         HoldHigh             => thold_ACIN_CLK_posedge_posedge(16),
         HoldLow              => thold_ACIN_CLK_negedge_posedge(16),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_ACIN_CLK_posedge(17),
         TimingData           => Tmkr_ACIN_CLK_posedge(17),
         TestSignal           => ACIN_dly(17),
         TestSignalName       => "ACIN(17)",
         TestDelay            => tisd_ACIN_CLK(17),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_ACIN_CLK_posedge_posedge(17),
         SetupLow             => tsetup_ACIN_CLK_negedge_posedge(17),
         HoldHigh             => thold_ACIN_CLK_posedge_posedge(17),
         HoldLow              => thold_ACIN_CLK_negedge_posedge(17),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_ACIN_CLK_posedge(18),
         TimingData           => Tmkr_ACIN_CLK_posedge(18),
         TestSignal           => ACIN_dly(18),
         TestSignalName       => "ACIN(18)",
         TestDelay            => tisd_ACIN_CLK(18),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_ACIN_CLK_posedge_posedge(18),
         SetupLow             => tsetup_ACIN_CLK_negedge_posedge(18),
         HoldHigh             => thold_ACIN_CLK_posedge_posedge(18),
         HoldLow              => thold_ACIN_CLK_negedge_posedge(18),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_ACIN_CLK_posedge(19),
         TimingData           => Tmkr_ACIN_CLK_posedge(19),
         TestSignal           => ACIN_dly(19),
         TestSignalName       => "ACIN(19)",
         TestDelay            => tisd_ACIN_CLK(19),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_ACIN_CLK_posedge_posedge(19),
         SetupLow             => tsetup_ACIN_CLK_negedge_posedge(19),
         HoldHigh             => thold_ACIN_CLK_posedge_posedge(19),
         HoldLow              => thold_ACIN_CLK_negedge_posedge(19),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_ACIN_CLK_posedge(20),
         TimingData           => Tmkr_ACIN_CLK_posedge(20),
         TestSignal           => ACIN_dly(20),
         TestSignalName       => "ACIN(20)",
         TestDelay            => tisd_ACIN_CLK(20),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_ACIN_CLK_posedge_posedge(20),
         SetupLow             => tsetup_ACIN_CLK_negedge_posedge(20),
         HoldHigh             => thold_ACIN_CLK_posedge_posedge(20),
         HoldLow              => thold_ACIN_CLK_negedge_posedge(20),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_ACIN_CLK_posedge(21),
         TimingData           => Tmkr_ACIN_CLK_posedge(21),
         TestSignal           => ACIN_dly(21),
         TestSignalName       => "ACIN(21)",
         TestDelay            => tisd_ACIN_CLK(21),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_ACIN_CLK_posedge_posedge(21),
         SetupLow             => tsetup_ACIN_CLK_negedge_posedge(21),
         HoldHigh             => thold_ACIN_CLK_posedge_posedge(21),
         HoldLow              => thold_ACIN_CLK_negedge_posedge(21),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_ACIN_CLK_posedge(22),
         TimingData           => Tmkr_ACIN_CLK_posedge(22),
         TestSignal           => ACIN_dly(22),
         TestSignalName       => "ACIN(22)",
         TestDelay            => tisd_ACIN_CLK(22),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_ACIN_CLK_posedge_posedge(22),
         SetupLow             => tsetup_ACIN_CLK_negedge_posedge(22),
         HoldHigh             => thold_ACIN_CLK_posedge_posedge(22),
         HoldLow              => thold_ACIN_CLK_negedge_posedge(22),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_ACIN_CLK_posedge(23),
         TimingData           => Tmkr_ACIN_CLK_posedge(23),
         TestSignal           => ACIN_dly(23),
         TestSignalName       => "ACIN(23)",
         TestDelay            => tisd_ACIN_CLK(23),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_ACIN_CLK_posedge_posedge(23),
         SetupLow             => tsetup_ACIN_CLK_negedge_posedge(23),
         HoldHigh             => thold_ACIN_CLK_posedge_posedge(23),
         HoldLow              => thold_ACIN_CLK_negedge_posedge(23),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_ACIN_CLK_posedge(24),
         TimingData           => Tmkr_ACIN_CLK_posedge(24),
         TestSignal           => ACIN_dly(24),
         TestSignalName       => "ACIN(24)",
         TestDelay            => tisd_ACIN_CLK(24),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_ACIN_CLK_posedge_posedge(24),
         SetupLow             => tsetup_ACIN_CLK_negedge_posedge(24),
         HoldHigh             => thold_ACIN_CLK_posedge_posedge(24),
         HoldLow              => thold_ACIN_CLK_negedge_posedge(24),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_ACIN_CLK_posedge(25),
         TimingData           => Tmkr_ACIN_CLK_posedge(25),
         TestSignal           => ACIN_dly(25),
         TestSignalName       => "ACIN(25)",
         TestDelay            => tisd_ACIN_CLK(25),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_ACIN_CLK_posedge_posedge(25),
         SetupLow             => tsetup_ACIN_CLK_negedge_posedge(25),
         HoldHigh             => thold_ACIN_CLK_posedge_posedge(25),
         HoldLow              => thold_ACIN_CLK_negedge_posedge(25),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_ACIN_CLK_posedge(26),
         TimingData           => Tmkr_ACIN_CLK_posedge(26),
         TestSignal           => ACIN_dly(26),
         TestSignalName       => "ACIN(26)",
         TestDelay            => tisd_ACIN_CLK(26),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_ACIN_CLK_posedge_posedge(26),
         SetupLow             => tsetup_ACIN_CLK_negedge_posedge(26),
         HoldHigh             => thold_ACIN_CLK_posedge_posedge(26),
         HoldLow              => thold_ACIN_CLK_negedge_posedge(26),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_ACIN_CLK_posedge(27),
         TimingData           => Tmkr_ACIN_CLK_posedge(27),
         TestSignal           => ACIN_dly(27),
         TestSignalName       => "ACIN(27)",
         TestDelay            => tisd_ACIN_CLK(27),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_ACIN_CLK_posedge_posedge(27),
         SetupLow             => tsetup_ACIN_CLK_negedge_posedge(27),
         HoldHigh             => thold_ACIN_CLK_posedge_posedge(27),
         HoldLow              => thold_ACIN_CLK_negedge_posedge(27),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_ACIN_CLK_posedge(28),
         TimingData           => Tmkr_ACIN_CLK_posedge(28),
         TestSignal           => ACIN_dly(28),
         TestSignalName       => "ACIN(28)",
         TestDelay            => tisd_ACIN_CLK(28),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_ACIN_CLK_posedge_posedge(28),
         SetupLow             => tsetup_ACIN_CLK_negedge_posedge(28),
         HoldHigh             => thold_ACIN_CLK_posedge_posedge(28),
         HoldLow              => thold_ACIN_CLK_negedge_posedge(28),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_ACIN_CLK_posedge(29),
         TimingData           => Tmkr_ACIN_CLK_posedge(29),
         TestSignal           => ACIN_dly(29),
         TestSignalName       => "ACIN(29)",
         TestDelay            => tisd_ACIN_CLK(29),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_ACIN_CLK_posedge_posedge(29),
         SetupLow             => tsetup_ACIN_CLK_negedge_posedge(29),
         HoldHigh             => thold_ACIN_CLK_posedge_posedge(29),
         HoldLow              => thold_ACIN_CLK_negedge_posedge(29),
         CheckEnabled         => (((TO_X01((not RSTA_dly) and (CEA1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((AREG = 1) and (TO_X01(CEA2) = '1')) or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks for Bus signal ALUMODE =====
       VitalSetupHoldCheck (
         Violation            => Tviol_ALUMODE_CLK_posedge(0),
         TimingData           => Tmkr_ALUMODE_CLK_posedge(0),
         TestSignal           => ALUMODE_dly(0),
         TestSignalName       => "ALUMODE(0)",
         TestDelay            => tisd_ALUMODE_CLK(0),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_ALUMODE_CLK_posedge_posedge(0),
         SetupLow             => tsetup_ALUMODE_CLK_negedge_posedge(0),
         HoldHigh             => thold_ALUMODE_CLK_posedge_posedge(0),
         HoldLow              => thold_ALUMODE_CLK_negedge_posedge(0),
         CheckEnabled         => (TO_X01((not RSTALUMODE_dly) and (CEALUMODE_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_ALUMODE_CLK_posedge(1),
         TimingData           => Tmkr_ALUMODE_CLK_posedge(1),
         TestSignal           => ALUMODE_dly(1),
         TestSignalName       => "ALUMODE(1)",
         TestDelay            => tisd_ALUMODE_CLK(1),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_ALUMODE_CLK_posedge_posedge(1),
         SetupLow             => tsetup_ALUMODE_CLK_negedge_posedge(1),
         HoldHigh             => thold_ALUMODE_CLK_posedge_posedge(1),
         HoldLow              => thold_ALUMODE_CLK_negedge_posedge(1),
         CheckEnabled         => (TO_X01((not RSTALUMODE_dly) and (CEALUMODE_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_ALUMODE_CLK_posedge(2),
         TimingData           => Tmkr_ALUMODE_CLK_posedge(2),
         TestSignal           => ALUMODE_dly(2),
         TestSignalName       => "ALUMODE(2)",
         TestDelay            => tisd_ALUMODE_CLK(2),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_ALUMODE_CLK_posedge_posedge(2),
         SetupLow             => tsetup_ALUMODE_CLK_negedge_posedge(2),
         HoldHigh             => thold_ALUMODE_CLK_posedge_posedge(2),
         HoldLow              => thold_ALUMODE_CLK_negedge_posedge(2),
         CheckEnabled         => (TO_X01((not RSTALUMODE_dly) and (CEALUMODE_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_ALUMODE_CLK_posedge(3),
         TimingData           => Tmkr_ALUMODE_CLK_posedge(3),
         TestSignal           => ALUMODE_dly(3),
         TestSignalName       => "ALUMODE(3)",
         TestDelay            => tisd_ALUMODE_CLK(3),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_ALUMODE_CLK_posedge_posedge(3),
         SetupLow             => tsetup_ALUMODE_CLK_negedge_posedge(3),
         HoldHigh             => thold_ALUMODE_CLK_posedge_posedge(3),
         HoldLow              => thold_ALUMODE_CLK_negedge_posedge(3),
         CheckEnabled         => (TO_X01((not RSTALUMODE_dly) and (CEALUMODE_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks for Bus signal B =====
       VitalSetupHoldCheck (
         Violation            => Tviol_B_CLK_posedge(0),
         TimingData           => Tmkr_B_CLK_posedge(0),
         TestSignal           => B_dly(0),
         TestSignalName       => "B(0)",
         TestDelay            => tisd_B_CLK(0),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_B_CLK_posedge_posedge(0),
         SetupLow             => tsetup_B_CLK_negedge_posedge(0),
         HoldHigh             => thold_B_CLK_posedge_posedge(0),
         HoldLow              => thold_B_CLK_negedge_posedge(0),
         CheckEnabled         => (((TO_X01((not RSTB_dly) and (CEB1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((BREG = 1) and (TO_X01(CEB2) = '1')) or ((BREG = 2) and (TO_X01(CEB1) = '1') and (TO_X01(CEB2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_B_CLK_posedge(1),
         TimingData           => Tmkr_B_CLK_posedge(1),
         TestSignal           => B_dly(1),
         TestSignalName       => "B(1)",
         TestDelay            => tisd_B_CLK(1),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_B_CLK_posedge_posedge(1),
         SetupLow             => tsetup_B_CLK_negedge_posedge(1),
         HoldHigh             => thold_B_CLK_posedge_posedge(1),
         HoldLow              => thold_B_CLK_negedge_posedge(1),
         CheckEnabled         => (((TO_X01((not RSTB_dly) and (CEB1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((BREG = 1) and (TO_X01(CEB2) = '1')) or ((BREG = 2) and (TO_X01(CEB1) = '1') and (TO_X01(CEB2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_B_CLK_posedge(2),
         TimingData           => Tmkr_B_CLK_posedge(2),
         TestSignal           => B_dly(2),
         TestSignalName       => "B(2)",
         TestDelay            => tisd_B_CLK(2),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_B_CLK_posedge_posedge(2),
         SetupLow             => tsetup_B_CLK_negedge_posedge(2),
         HoldHigh             => thold_B_CLK_posedge_posedge(2),
         HoldLow              => thold_B_CLK_negedge_posedge(2),
         CheckEnabled         => (((TO_X01((not RSTB_dly) and (CEB1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((BREG = 1) and (TO_X01(CEB2) = '1')) or ((BREG = 2) and (TO_X01(CEB1) = '1') and (TO_X01(CEB2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_B_CLK_posedge(3),
         TimingData           => Tmkr_B_CLK_posedge(3),
         TestSignal           => B_dly(3),
         TestSignalName       => "B(3)",
         TestDelay            => tisd_B_CLK(3),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_B_CLK_posedge_posedge(3),
         SetupLow             => tsetup_B_CLK_negedge_posedge(3),
         HoldHigh             => thold_B_CLK_posedge_posedge(3),
         HoldLow              => thold_B_CLK_negedge_posedge(3),
         CheckEnabled         => (((TO_X01((not RSTB_dly) and (CEB1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((BREG = 1) and (TO_X01(CEB2) = '1')) or ((BREG = 2) and (TO_X01(CEB1) = '1') and (TO_X01(CEB2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_B_CLK_posedge(4),
         TimingData           => Tmkr_B_CLK_posedge(4),
         TestSignal           => B_dly(4),
         TestSignalName       => "B(4)",
         TestDelay            => tisd_B_CLK(4),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_B_CLK_posedge_posedge(4),
         SetupLow             => tsetup_B_CLK_negedge_posedge(4),
         HoldHigh             => thold_B_CLK_posedge_posedge(4),
         HoldLow              => thold_B_CLK_negedge_posedge(4),
         CheckEnabled         => (((TO_X01((not RSTB_dly) and (CEB1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((BREG = 1) and (TO_X01(CEB2) = '1')) or ((BREG = 2) and (TO_X01(CEB1) = '1') and (TO_X01(CEB2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_B_CLK_posedge(5),
         TimingData           => Tmkr_B_CLK_posedge(5),
         TestSignal           => B_dly(5),
         TestSignalName       => "B(5)",
         TestDelay            => tisd_B_CLK(5),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_B_CLK_posedge_posedge(5),
         SetupLow             => tsetup_B_CLK_negedge_posedge(5),
         HoldHigh             => thold_B_CLK_posedge_posedge(5),
         HoldLow              => thold_B_CLK_negedge_posedge(5),
         CheckEnabled         => (((TO_X01((not RSTB_dly) and (CEB1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((BREG = 1) and (TO_X01(CEB2) = '1')) or ((BREG = 2) and (TO_X01(CEB1) = '1') and (TO_X01(CEB2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_B_CLK_posedge(6),
         TimingData           => Tmkr_B_CLK_posedge(6),
         TestSignal           => B_dly(6),
         TestSignalName       => "B(6)",
         TestDelay            => tisd_B_CLK(6),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_B_CLK_posedge_posedge(6),
         SetupLow             => tsetup_B_CLK_negedge_posedge(6),
         HoldHigh             => thold_B_CLK_posedge_posedge(6),
         HoldLow              => thold_B_CLK_negedge_posedge(6),
         CheckEnabled         => (((TO_X01((not RSTB_dly) and (CEB1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((BREG = 1) and (TO_X01(CEB2) = '1')) or ((BREG = 2) and (TO_X01(CEB1) = '1') and (TO_X01(CEB2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_B_CLK_posedge(7),
         TimingData           => Tmkr_B_CLK_posedge(7),
         TestSignal           => B_dly(7),
         TestSignalName       => "B(7)",
         TestDelay            => tisd_B_CLK(7),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_B_CLK_posedge_posedge(7),
         SetupLow             => tsetup_B_CLK_negedge_posedge(7),
         HoldHigh             => thold_B_CLK_posedge_posedge(7),
         HoldLow              => thold_B_CLK_negedge_posedge(7),
         CheckEnabled         => (((TO_X01((not RSTB_dly) and (CEB1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((BREG = 1) and (TO_X01(CEB2) = '1')) or ((BREG = 2) and (TO_X01(CEB1) = '1') and (TO_X01(CEB2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_B_CLK_posedge(8),
         TimingData           => Tmkr_B_CLK_posedge(8),
         TestSignal           => B_dly(8),
         TestSignalName       => "B(8)",
         TestDelay            => tisd_B_CLK(8),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_B_CLK_posedge_posedge(8),
         SetupLow             => tsetup_B_CLK_negedge_posedge(8),
         HoldHigh             => thold_B_CLK_posedge_posedge(8),
         HoldLow              => thold_B_CLK_negedge_posedge(8),
         CheckEnabled         => (((TO_X01((not RSTB_dly) and (CEB1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((BREG = 1) and (TO_X01(CEB2) = '1')) or ((BREG = 2) and (TO_X01(CEB1) = '1') and (TO_X01(CEB2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_B_CLK_posedge(9),
         TimingData           => Tmkr_B_CLK_posedge(9),
         TestSignal           => B_dly(9),
         TestSignalName       => "B(9)",
         TestDelay            => tisd_B_CLK(9),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_B_CLK_posedge_posedge(9),
         SetupLow             => tsetup_B_CLK_negedge_posedge(9),
         HoldHigh             => thold_B_CLK_posedge_posedge(9),
         HoldLow              => thold_B_CLK_negedge_posedge(9),
         CheckEnabled         => (((TO_X01((not RSTB_dly) and (CEB1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((BREG = 1) and (TO_X01(CEB2) = '1')) or ((BREG = 2) and (TO_X01(CEB1) = '1') and (TO_X01(CEB2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_B_CLK_posedge(10),
         TimingData           => Tmkr_B_CLK_posedge(10),
         TestSignal           => B_dly(10),
         TestSignalName       => "B(10)",
         TestDelay            => tisd_B_CLK(10),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_B_CLK_posedge_posedge(10),
         SetupLow             => tsetup_B_CLK_negedge_posedge(10),
         HoldHigh             => thold_B_CLK_posedge_posedge(10),
         HoldLow              => thold_B_CLK_negedge_posedge(10),
         CheckEnabled         => (((TO_X01((not RSTB_dly) and (CEB1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((BREG = 1) and (TO_X01(CEB2) = '1')) or ((BREG = 2) and (TO_X01(CEB1) = '1') and (TO_X01(CEB2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_B_CLK_posedge(11),
         TimingData           => Tmkr_B_CLK_posedge(11),
         TestSignal           => B_dly(11),
         TestSignalName       => "B(11)",
         TestDelay            => tisd_B_CLK(11),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_B_CLK_posedge_posedge(11),
         SetupLow             => tsetup_B_CLK_negedge_posedge(11),
         HoldHigh             => thold_B_CLK_posedge_posedge(11),
         HoldLow              => thold_B_CLK_negedge_posedge(11),
         CheckEnabled         => (((TO_X01((not RSTB_dly) and (CEB1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((BREG = 1) and (TO_X01(CEB2) = '1')) or ((BREG = 2) and (TO_X01(CEB1) = '1') and (TO_X01(CEB2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_B_CLK_posedge(12),
         TimingData           => Tmkr_B_CLK_posedge(12),
         TestSignal           => B_dly(12),
         TestSignalName       => "B(12)",
         TestDelay            => tisd_B_CLK(12),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_B_CLK_posedge_posedge(12),
         SetupLow             => tsetup_B_CLK_negedge_posedge(12),
         HoldHigh             => thold_B_CLK_posedge_posedge(12),
         HoldLow              => thold_B_CLK_negedge_posedge(12),
         CheckEnabled         => (((TO_X01((not RSTB_dly) and (CEB1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((BREG = 1) and (TO_X01(CEB2) = '1')) or ((BREG = 2) and (TO_X01(CEB1) = '1') and (TO_X01(CEB2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_B_CLK_posedge(13),
         TimingData           => Tmkr_B_CLK_posedge(13),
         TestSignal           => B_dly(13),
         TestSignalName       => "B(13)",
         TestDelay            => tisd_B_CLK(13),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_B_CLK_posedge_posedge(13),
         SetupLow             => tsetup_B_CLK_negedge_posedge(13),
         HoldHigh             => thold_B_CLK_posedge_posedge(13),
         HoldLow              => thold_B_CLK_negedge_posedge(13),
         CheckEnabled         => (((TO_X01((not RSTB_dly) and (CEB1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((BREG = 1) and (TO_X01(CEB2) = '1')) or ((BREG = 2) and (TO_X01(CEB1) = '1') and (TO_X01(CEB2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_B_CLK_posedge(14),
         TimingData           => Tmkr_B_CLK_posedge(14),
         TestSignal           => B_dly(14),
         TestSignalName       => "B(14)",
         TestDelay            => tisd_B_CLK(14),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_B_CLK_posedge_posedge(14),
         SetupLow             => tsetup_B_CLK_negedge_posedge(14),
         HoldHigh             => thold_B_CLK_posedge_posedge(14),
         HoldLow              => thold_B_CLK_negedge_posedge(14),
         CheckEnabled         => (((TO_X01((not RSTB_dly) and (CEB1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((BREG = 1) and (TO_X01(CEB2) = '1')) or ((BREG = 2) and (TO_X01(CEB1) = '1') and (TO_X01(CEB2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_B_CLK_posedge(15),
         TimingData           => Tmkr_B_CLK_posedge(15),
         TestSignal           => B_dly(15),
         TestSignalName       => "B(15)",
         TestDelay            => tisd_B_CLK(15),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_B_CLK_posedge_posedge(15),
         SetupLow             => tsetup_B_CLK_negedge_posedge(15),
         HoldHigh             => thold_B_CLK_posedge_posedge(15),
         HoldLow              => thold_B_CLK_negedge_posedge(15),
         CheckEnabled         => (((TO_X01((not RSTB_dly) and (CEB1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((BREG = 1) and (TO_X01(CEB2) = '1')) or ((BREG = 2) and (TO_X01(CEB1) = '1') and (TO_X01(CEB2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_B_CLK_posedge(16),
         TimingData           => Tmkr_B_CLK_posedge(16),
         TestSignal           => B_dly(16),
         TestSignalName       => "B(16)",
         TestDelay            => tisd_B_CLK(16),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_B_CLK_posedge_posedge(16),
         SetupLow             => tsetup_B_CLK_negedge_posedge(16),
         HoldHigh             => thold_B_CLK_posedge_posedge(16),
         HoldLow              => thold_B_CLK_negedge_posedge(16),
         CheckEnabled         => (((TO_X01((not RSTB_dly) and (CEB1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((BREG = 1) and (TO_X01(CEB2) = '1')) or ((BREG = 2) and (TO_X01(CEB1) = '1') and (TO_X01(CEB2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_B_CLK_posedge(17),
         TimingData           => Tmkr_B_CLK_posedge(17),
         TestSignal           => B_dly(17),
         TestSignalName       => "B(17)",
         TestDelay            => tisd_B_CLK(17),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_B_CLK_posedge_posedge(17),
         SetupLow             => tsetup_B_CLK_negedge_posedge(17),
         HoldHigh             => thold_B_CLK_posedge_posedge(17),
         HoldLow              => thold_B_CLK_negedge_posedge(17),
         CheckEnabled         => (((TO_X01((not RSTB_dly) and (CEB1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((BREG = 1) and (TO_X01(CEB2) = '1')) or ((BREG = 2) and (TO_X01(CEB1) = '1') and (TO_X01(CEB2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks for Bus signal BCIN =====
       VitalSetupHoldCheck (
         Violation            => Tviol_BCIN_CLK_posedge(0),
         TimingData           => Tmkr_BCIN_CLK_posedge(0),
         TestSignal           => BCIN_dly(0),
         TestSignalName       => "BCIN(0)",
         TestDelay            => tisd_BCIN_CLK(0),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_BCIN_CLK_posedge_posedge(0),
         SetupLow             => tsetup_BCIN_CLK_negedge_posedge(0),
         HoldHigh             => thold_BCIN_CLK_posedge_posedge(0),
         HoldLow              => thold_BCIN_CLK_negedge_posedge(0),
         CheckEnabled         => (((TO_X01((not RSTB_dly) and (CEB1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((BREG = 1) and (TO_X01(CEB2) = '1')) or ((BREG = 2) and (TO_X01(CEB1) = '1') and (TO_X01(CEB2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_BCIN_CLK_posedge(1),
         TimingData           => Tmkr_BCIN_CLK_posedge(1),
         TestSignal           => BCIN_dly(1),
         TestSignalName       => "BCIN(1)",
         TestDelay            => tisd_BCIN_CLK(1),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_BCIN_CLK_posedge_posedge(1),
         SetupLow             => tsetup_BCIN_CLK_negedge_posedge(1),
         HoldHigh             => thold_BCIN_CLK_posedge_posedge(1),
         HoldLow              => thold_BCIN_CLK_negedge_posedge(1),
         CheckEnabled         => (((TO_X01((not RSTB_dly) and (CEB1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((BREG = 1) and (TO_X01(CEB2) = '1')) or ((BREG = 2) and (TO_X01(CEB1) = '1') and (TO_X01(CEB2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_BCIN_CLK_posedge(2),
         TimingData           => Tmkr_BCIN_CLK_posedge(2),
         TestSignal           => BCIN_dly(2),
         TestSignalName       => "BCIN(2)",
         TestDelay            => tisd_BCIN_CLK(2),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_BCIN_CLK_posedge_posedge(2),
         SetupLow             => tsetup_BCIN_CLK_negedge_posedge(2),
         HoldHigh             => thold_BCIN_CLK_posedge_posedge(2),
         HoldLow              => thold_BCIN_CLK_negedge_posedge(2),
         CheckEnabled         => (((TO_X01((not RSTB_dly) and (CEB1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((BREG = 1) and (TO_X01(CEB2) = '1')) or ((BREG = 2) and (TO_X01(CEB1) = '1') and (TO_X01(CEB2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_BCIN_CLK_posedge(3),
         TimingData           => Tmkr_BCIN_CLK_posedge(3),
         TestSignal           => BCIN_dly(3),
         TestSignalName       => "BCIN(3)",
         TestDelay            => tisd_BCIN_CLK(3),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_BCIN_CLK_posedge_posedge(3),
         SetupLow             => tsetup_BCIN_CLK_negedge_posedge(3),
         HoldHigh             => thold_BCIN_CLK_posedge_posedge(3),
         HoldLow              => thold_BCIN_CLK_negedge_posedge(3),
         CheckEnabled         => (((TO_X01((not RSTB_dly) and (CEB1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((BREG = 1) and (TO_X01(CEB2) = '1')) or ((BREG = 2) and (TO_X01(CEB1) = '1') and (TO_X01(CEB2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_BCIN_CLK_posedge(4),
         TimingData           => Tmkr_BCIN_CLK_posedge(4),
         TestSignal           => BCIN_dly(4),
         TestSignalName       => "BCIN(4)",
         TestDelay            => tisd_BCIN_CLK(4),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_BCIN_CLK_posedge_posedge(4),
         SetupLow             => tsetup_BCIN_CLK_negedge_posedge(4),
         HoldHigh             => thold_BCIN_CLK_posedge_posedge(4),
         HoldLow              => thold_BCIN_CLK_negedge_posedge(4),
         CheckEnabled         => (((TO_X01((not RSTB_dly) and (CEB1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((BREG = 1) and (TO_X01(CEB2) = '1')) or ((BREG = 2) and (TO_X01(CEB1) = '1') and (TO_X01(CEB2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_BCIN_CLK_posedge(5),
         TimingData           => Tmkr_BCIN_CLK_posedge(5),
         TestSignal           => BCIN_dly(5),
         TestSignalName       => "BCIN(5)",
         TestDelay            => tisd_BCIN_CLK(5),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_BCIN_CLK_posedge_posedge(5),
         SetupLow             => tsetup_BCIN_CLK_negedge_posedge(5),
         HoldHigh             => thold_BCIN_CLK_posedge_posedge(5),
         HoldLow              => thold_BCIN_CLK_negedge_posedge(5),
         CheckEnabled         => (((TO_X01((not RSTB_dly) and (CEB1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((BREG = 1) and (TO_X01(CEB2) = '1')) or ((BREG = 2) and (TO_X01(CEB1) = '1') and (TO_X01(CEB2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_BCIN_CLK_posedge(6),
         TimingData           => Tmkr_BCIN_CLK_posedge(6),
         TestSignal           => BCIN_dly(6),
         TestSignalName       => "BCIN(6)",
         TestDelay            => tisd_BCIN_CLK(6),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_BCIN_CLK_posedge_posedge(6),
         SetupLow             => tsetup_BCIN_CLK_negedge_posedge(6),
         HoldHigh             => thold_BCIN_CLK_posedge_posedge(6),
         HoldLow              => thold_BCIN_CLK_negedge_posedge(6),
         CheckEnabled         => (((TO_X01((not RSTB_dly) and (CEB1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((BREG = 1) and (TO_X01(CEB2) = '1')) or ((BREG = 2) and (TO_X01(CEB1) = '1') and (TO_X01(CEB2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_BCIN_CLK_posedge(7),
         TimingData           => Tmkr_BCIN_CLK_posedge(7),
         TestSignal           => BCIN_dly(7),
         TestSignalName       => "BCIN(7)",
         TestDelay            => tisd_BCIN_CLK(7),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_BCIN_CLK_posedge_posedge(7),
         SetupLow             => tsetup_BCIN_CLK_negedge_posedge(7),
         HoldHigh             => thold_BCIN_CLK_posedge_posedge(7),
         HoldLow              => thold_BCIN_CLK_negedge_posedge(7),
         CheckEnabled         => (((TO_X01((not RSTB_dly) and (CEB1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((BREG = 1) and (TO_X01(CEB2) = '1')) or ((BREG = 2) and (TO_X01(CEB1) = '1') and (TO_X01(CEB2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_BCIN_CLK_posedge(8),
         TimingData           => Tmkr_BCIN_CLK_posedge(8),
         TestSignal           => BCIN_dly(8),
         TestSignalName       => "BCIN(8)",
         TestDelay            => tisd_BCIN_CLK(8),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_BCIN_CLK_posedge_posedge(8),
         SetupLow             => tsetup_BCIN_CLK_negedge_posedge(8),
         HoldHigh             => thold_BCIN_CLK_posedge_posedge(8),
         HoldLow              => thold_BCIN_CLK_negedge_posedge(8),
         CheckEnabled         => (((TO_X01((not RSTB_dly) and (CEB1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((BREG = 1) and (TO_X01(CEB2) = '1')) or ((BREG = 2) and (TO_X01(CEB1) = '1') and (TO_X01(CEB2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_BCIN_CLK_posedge(9),
         TimingData           => Tmkr_BCIN_CLK_posedge(9),
         TestSignal           => BCIN_dly(9),
         TestSignalName       => "BCIN(9)",
         TestDelay            => tisd_BCIN_CLK(9),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_BCIN_CLK_posedge_posedge(9),
         SetupLow             => tsetup_BCIN_CLK_negedge_posedge(9),
         HoldHigh             => thold_BCIN_CLK_posedge_posedge(9),
         HoldLow              => thold_BCIN_CLK_negedge_posedge(9),
         CheckEnabled         => (((TO_X01((not RSTB_dly) and (CEB1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((BREG = 1) and (TO_X01(CEB2) = '1')) or ((BREG = 2) and (TO_X01(CEB1) = '1') and (TO_X01(CEB2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_BCIN_CLK_posedge(10),
         TimingData           => Tmkr_BCIN_CLK_posedge(10),
         TestSignal           => BCIN_dly(10),
         TestSignalName       => "BCIN(10)",
         TestDelay            => tisd_BCIN_CLK(10),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_BCIN_CLK_posedge_posedge(10),
         SetupLow             => tsetup_BCIN_CLK_negedge_posedge(10),
         HoldHigh             => thold_BCIN_CLK_posedge_posedge(10),
         HoldLow              => thold_BCIN_CLK_negedge_posedge(10),
         CheckEnabled         => (((TO_X01((not RSTB_dly) and (CEB1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((BREG = 1) and (TO_X01(CEB2) = '1')) or ((BREG = 2) and (TO_X01(CEB1) = '1') and (TO_X01(CEB2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_BCIN_CLK_posedge(11),
         TimingData           => Tmkr_BCIN_CLK_posedge(11),
         TestSignal           => BCIN_dly(11),
         TestSignalName       => "BCIN(11)",
         TestDelay            => tisd_BCIN_CLK(11),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_BCIN_CLK_posedge_posedge(11),
         SetupLow             => tsetup_BCIN_CLK_negedge_posedge(11),
         HoldHigh             => thold_BCIN_CLK_posedge_posedge(11),
         HoldLow              => thold_BCIN_CLK_negedge_posedge(11),
         CheckEnabled         => (((TO_X01((not RSTB_dly) and (CEB1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((BREG = 1) and (TO_X01(CEB2) = '1')) or ((BREG = 2) and (TO_X01(CEB1) = '1') and (TO_X01(CEB2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_BCIN_CLK_posedge(12),
         TimingData           => Tmkr_BCIN_CLK_posedge(12),
         TestSignal           => BCIN_dly(12),
         TestSignalName       => "BCIN(12)",
         TestDelay            => tisd_BCIN_CLK(12),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_BCIN_CLK_posedge_posedge(12),
         SetupLow             => tsetup_BCIN_CLK_negedge_posedge(12),
         HoldHigh             => thold_BCIN_CLK_posedge_posedge(12),
         HoldLow              => thold_BCIN_CLK_negedge_posedge(12),
         CheckEnabled         => (((TO_X01((not RSTB_dly) and (CEB1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((BREG = 1) and (TO_X01(CEB2) = '1')) or ((BREG = 2) and (TO_X01(CEB1) = '1') and (TO_X01(CEB2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_BCIN_CLK_posedge(13),
         TimingData           => Tmkr_BCIN_CLK_posedge(13),
         TestSignal           => BCIN_dly(13),
         TestSignalName       => "BCIN(13)",
         TestDelay            => tisd_BCIN_CLK(13),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_BCIN_CLK_posedge_posedge(13),
         SetupLow             => tsetup_BCIN_CLK_negedge_posedge(13),
         HoldHigh             => thold_BCIN_CLK_posedge_posedge(13),
         HoldLow              => thold_BCIN_CLK_negedge_posedge(13),
         CheckEnabled         => (((TO_X01((not RSTB_dly) and (CEB1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((BREG = 1) and (TO_X01(CEB2) = '1')) or ((BREG = 2) and (TO_X01(CEB1) = '1') and (TO_X01(CEB2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_BCIN_CLK_posedge(14),
         TimingData           => Tmkr_BCIN_CLK_posedge(14),
         TestSignal           => BCIN_dly(14),
         TestSignalName       => "BCIN(14)",
         TestDelay            => tisd_BCIN_CLK(14),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_BCIN_CLK_posedge_posedge(14),
         SetupLow             => tsetup_BCIN_CLK_negedge_posedge(14),
         HoldHigh             => thold_BCIN_CLK_posedge_posedge(14),
         HoldLow              => thold_BCIN_CLK_negedge_posedge(14),
         CheckEnabled         => (((TO_X01((not RSTB_dly) and (CEB1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((BREG = 1) and (TO_X01(CEB2) = '1')) or ((BREG = 2) and (TO_X01(CEB1) = '1') and (TO_X01(CEB2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_BCIN_CLK_posedge(15),
         TimingData           => Tmkr_BCIN_CLK_posedge(15),
         TestSignal           => BCIN_dly(15),
         TestSignalName       => "BCIN(15)",
         TestDelay            => tisd_BCIN_CLK(15),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_BCIN_CLK_posedge_posedge(15),
         SetupLow             => tsetup_BCIN_CLK_negedge_posedge(15),
         HoldHigh             => thold_BCIN_CLK_posedge_posedge(15),
         HoldLow              => thold_BCIN_CLK_negedge_posedge(15),
         CheckEnabled         => (((TO_X01((not RSTB_dly) and (CEB1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((BREG = 1) and (TO_X01(CEB2) = '1')) or ((BREG = 2) and (TO_X01(CEB1) = '1') and (TO_X01(CEB2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_BCIN_CLK_posedge(16),
         TimingData           => Tmkr_BCIN_CLK_posedge(16),
         TestSignal           => BCIN_dly(16),
         TestSignalName       => "BCIN(16)",
         TestDelay            => tisd_BCIN_CLK(16),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_BCIN_CLK_posedge_posedge(16),
         SetupLow             => tsetup_BCIN_CLK_negedge_posedge(16),
         HoldHigh             => thold_BCIN_CLK_posedge_posedge(16),
         HoldLow              => thold_BCIN_CLK_negedge_posedge(16),
         CheckEnabled         => (((TO_X01((not RSTB_dly) and (CEB1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((BREG = 1) and (TO_X01(CEB2) = '1')) or ((BREG = 2) and (TO_X01(CEB1) = '1') and (TO_X01(CEB2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_BCIN_CLK_posedge(17),
         TimingData           => Tmkr_BCIN_CLK_posedge(17),
         TestSignal           => BCIN_dly(17),
         TestSignalName       => "BCIN(17)",
         TestDelay            => tisd_BCIN_CLK(17),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_BCIN_CLK_posedge_posedge(17),
         SetupLow             => tsetup_BCIN_CLK_negedge_posedge(17),
         HoldHigh             => thold_BCIN_CLK_posedge_posedge(17),
         HoldLow              => thold_BCIN_CLK_negedge_posedge(17),
         CheckEnabled         => (((TO_X01((not RSTB_dly) and (CEB1_dly)) /= '0') and (TO_X01(GSR_dly) = '0') and (((BREG = 1) and (TO_X01(CEB2) = '1')) or ((BREG = 2) and (TO_X01(CEB1) = '1') and (TO_X01(CEB2) =  '1'))))),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks for Bus signal C =====
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(0),
         TimingData           => Tmkr_C_CLK_posedge(0),
         TestSignal           => C_dly(0),
         TestSignalName       => "C(0)",
         TestDelay            => tisd_C_CLK(0),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(0),
         SetupLow             => tsetup_C_CLK_negedge_posedge(0),
         HoldHigh             => thold_C_CLK_posedge_posedge(0),
         HoldLow              => thold_C_CLK_negedge_posedge(0),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(1),
         TimingData           => Tmkr_C_CLK_posedge(1),
         TestSignal           => C_dly(1),
         TestSignalName       => "C(1)",
         TestDelay            => tisd_C_CLK(1),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(1),
         SetupLow             => tsetup_C_CLK_negedge_posedge(1),
         HoldHigh             => thold_C_CLK_posedge_posedge(1),
         HoldLow              => thold_C_CLK_negedge_posedge(1),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(2),
         TimingData           => Tmkr_C_CLK_posedge(2),
         TestSignal           => C_dly(2),
         TestSignalName       => "C(2)",
         TestDelay            => tisd_C_CLK(2),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(2),
         SetupLow             => tsetup_C_CLK_negedge_posedge(2),
         HoldHigh             => thold_C_CLK_posedge_posedge(2),
         HoldLow              => thold_C_CLK_negedge_posedge(2),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(3),
         TimingData           => Tmkr_C_CLK_posedge(3),
         TestSignal           => C_dly(3),
         TestSignalName       => "C(3)",
         TestDelay            => tisd_C_CLK(3),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(3),
         SetupLow             => tsetup_C_CLK_negedge_posedge(3),
         HoldHigh             => thold_C_CLK_posedge_posedge(3),
         HoldLow              => thold_C_CLK_negedge_posedge(3),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(4),
         TimingData           => Tmkr_C_CLK_posedge(4),
         TestSignal           => C_dly(4),
         TestSignalName       => "C(4)",
         TestDelay            => tisd_C_CLK(4),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(4),
         SetupLow             => tsetup_C_CLK_negedge_posedge(4),
         HoldHigh             => thold_C_CLK_posedge_posedge(4),
         HoldLow              => thold_C_CLK_negedge_posedge(4),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(5),
         TimingData           => Tmkr_C_CLK_posedge(5),
         TestSignal           => C_dly(5),
         TestSignalName       => "C(5)",
         TestDelay            => tisd_C_CLK(5),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(5),
         SetupLow             => tsetup_C_CLK_negedge_posedge(5),
         HoldHigh             => thold_C_CLK_posedge_posedge(5),
         HoldLow              => thold_C_CLK_negedge_posedge(5),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(6),
         TimingData           => Tmkr_C_CLK_posedge(6),
         TestSignal           => C_dly(6),
         TestSignalName       => "C(6)",
         TestDelay            => tisd_C_CLK(6),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(6),
         SetupLow             => tsetup_C_CLK_negedge_posedge(6),
         HoldHigh             => thold_C_CLK_posedge_posedge(6),
         HoldLow              => thold_C_CLK_negedge_posedge(6),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(7),
         TimingData           => Tmkr_C_CLK_posedge(7),
         TestSignal           => C_dly(7),
         TestSignalName       => "C(7)",
         TestDelay            => tisd_C_CLK(7),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(7),
         SetupLow             => tsetup_C_CLK_negedge_posedge(7),
         HoldHigh             => thold_C_CLK_posedge_posedge(7),
         HoldLow              => thold_C_CLK_negedge_posedge(7),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(8),
         TimingData           => Tmkr_C_CLK_posedge(8),
         TestSignal           => C_dly(8),
         TestSignalName       => "C(8)",
         TestDelay            => tisd_C_CLK(8),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(8),
         SetupLow             => tsetup_C_CLK_negedge_posedge(8),
         HoldHigh             => thold_C_CLK_posedge_posedge(8),
         HoldLow              => thold_C_CLK_negedge_posedge(8),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(9),
         TimingData           => Tmkr_C_CLK_posedge(9),
         TestSignal           => C_dly(9),
         TestSignalName       => "C(9)",
         TestDelay            => tisd_C_CLK(9),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(9),
         SetupLow             => tsetup_C_CLK_negedge_posedge(9),
         HoldHigh             => thold_C_CLK_posedge_posedge(9),
         HoldLow              => thold_C_CLK_negedge_posedge(9),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(10),
         TimingData           => Tmkr_C_CLK_posedge(10),
         TestSignal           => C_dly(10),
         TestSignalName       => "C(10)",
         TestDelay            => tisd_C_CLK(10),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(10),
         SetupLow             => tsetup_C_CLK_negedge_posedge(10),
         HoldHigh             => thold_C_CLK_posedge_posedge(10),
         HoldLow              => thold_C_CLK_negedge_posedge(10),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(11),
         TimingData           => Tmkr_C_CLK_posedge(11),
         TestSignal           => C_dly(11),
         TestSignalName       => "C(11)",
         TestDelay            => tisd_C_CLK(11),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(11),
         SetupLow             => tsetup_C_CLK_negedge_posedge(11),
         HoldHigh             => thold_C_CLK_posedge_posedge(11),
         HoldLow              => thold_C_CLK_negedge_posedge(11),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(12),
         TimingData           => Tmkr_C_CLK_posedge(12),
         TestSignal           => C_dly(12),
         TestSignalName       => "C(12)",
         TestDelay            => tisd_C_CLK(12),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(12),
         SetupLow             => tsetup_C_CLK_negedge_posedge(12),
         HoldHigh             => thold_C_CLK_posedge_posedge(12),
         HoldLow              => thold_C_CLK_negedge_posedge(12),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(13),
         TimingData           => Tmkr_C_CLK_posedge(13),
         TestSignal           => C_dly(13),
         TestSignalName       => "C(13)",
         TestDelay            => tisd_C_CLK(13),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(13),
         SetupLow             => tsetup_C_CLK_negedge_posedge(13),
         HoldHigh             => thold_C_CLK_posedge_posedge(13),
         HoldLow              => thold_C_CLK_negedge_posedge(13),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(14),
         TimingData           => Tmkr_C_CLK_posedge(14),
         TestSignal           => C_dly(14),
         TestSignalName       => "C(14)",
         TestDelay            => tisd_C_CLK(14),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(14),
         SetupLow             => tsetup_C_CLK_negedge_posedge(14),
         HoldHigh             => thold_C_CLK_posedge_posedge(14),
         HoldLow              => thold_C_CLK_negedge_posedge(14),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(15),
         TimingData           => Tmkr_C_CLK_posedge(15),
         TestSignal           => C_dly(15),
         TestSignalName       => "C(15)",
         TestDelay            => tisd_C_CLK(15),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(15),
         SetupLow             => tsetup_C_CLK_negedge_posedge(15),
         HoldHigh             => thold_C_CLK_posedge_posedge(15),
         HoldLow              => thold_C_CLK_negedge_posedge(15),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(16),
         TimingData           => Tmkr_C_CLK_posedge(16),
         TestSignal           => C_dly(16),
         TestSignalName       => "C(16)",
         TestDelay            => tisd_C_CLK(16),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(16),
         SetupLow             => tsetup_C_CLK_negedge_posedge(16),
         HoldHigh             => thold_C_CLK_posedge_posedge(16),
         HoldLow              => thold_C_CLK_negedge_posedge(16),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(17),
         TimingData           => Tmkr_C_CLK_posedge(17),
         TestSignal           => C_dly(17),
         TestSignalName       => "C(17)",
         TestDelay            => tisd_C_CLK(17),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(17),
         SetupLow             => tsetup_C_CLK_negedge_posedge(17),
         HoldHigh             => thold_C_CLK_posedge_posedge(17),
         HoldLow              => thold_C_CLK_negedge_posedge(17),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(18),
         TimingData           => Tmkr_C_CLK_posedge(18),
         TestSignal           => C_dly(18),
         TestSignalName       => "C(18)",
         TestDelay            => tisd_C_CLK(18),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(18),
         SetupLow             => tsetup_C_CLK_negedge_posedge(18),
         HoldHigh             => thold_C_CLK_posedge_posedge(18),
         HoldLow              => thold_C_CLK_negedge_posedge(18),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(19),
         TimingData           => Tmkr_C_CLK_posedge(19),
         TestSignal           => C_dly(19),
         TestSignalName       => "C(19)",
         TestDelay            => tisd_C_CLK(19),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(19),
         SetupLow             => tsetup_C_CLK_negedge_posedge(19),
         HoldHigh             => thold_C_CLK_posedge_posedge(19),
         HoldLow              => thold_C_CLK_negedge_posedge(19),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(20),
         TimingData           => Tmkr_C_CLK_posedge(20),
         TestSignal           => C_dly(20),
         TestSignalName       => "C(20)",
         TestDelay            => tisd_C_CLK(20),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(20),
         SetupLow             => tsetup_C_CLK_negedge_posedge(20),
         HoldHigh             => thold_C_CLK_posedge_posedge(20),
         HoldLow              => thold_C_CLK_negedge_posedge(20),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(21),
         TimingData           => Tmkr_C_CLK_posedge(21),
         TestSignal           => C_dly(21),
         TestSignalName       => "C(21)",
         TestDelay            => tisd_C_CLK(21),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(21),
         SetupLow             => tsetup_C_CLK_negedge_posedge(21),
         HoldHigh             => thold_C_CLK_posedge_posedge(21),
         HoldLow              => thold_C_CLK_negedge_posedge(21),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(22),
         TimingData           => Tmkr_C_CLK_posedge(22),
         TestSignal           => C_dly(22),
         TestSignalName       => "C(22)",
         TestDelay            => tisd_C_CLK(22),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(22),
         SetupLow             => tsetup_C_CLK_negedge_posedge(22),
         HoldHigh             => thold_C_CLK_posedge_posedge(22),
         HoldLow              => thold_C_CLK_negedge_posedge(22),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(23),
         TimingData           => Tmkr_C_CLK_posedge(23),
         TestSignal           => C_dly(23),
         TestSignalName       => "C(23)",
         TestDelay            => tisd_C_CLK(23),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(23),
         SetupLow             => tsetup_C_CLK_negedge_posedge(23),
         HoldHigh             => thold_C_CLK_posedge_posedge(23),
         HoldLow              => thold_C_CLK_negedge_posedge(23),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(24),
         TimingData           => Tmkr_C_CLK_posedge(24),
         TestSignal           => C_dly(24),
         TestSignalName       => "C(24)",
         TestDelay            => tisd_C_CLK(24),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(24),
         SetupLow             => tsetup_C_CLK_negedge_posedge(24),
         HoldHigh             => thold_C_CLK_posedge_posedge(24),
         HoldLow              => thold_C_CLK_negedge_posedge(24),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(25),
         TimingData           => Tmkr_C_CLK_posedge(25),
         TestSignal           => C_dly(25),
         TestSignalName       => "C(25)",
         TestDelay            => tisd_C_CLK(25),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(25),
         SetupLow             => tsetup_C_CLK_negedge_posedge(25),
         HoldHigh             => thold_C_CLK_posedge_posedge(25),
         HoldLow              => thold_C_CLK_negedge_posedge(25),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(26),
         TimingData           => Tmkr_C_CLK_posedge(26),
         TestSignal           => C_dly(26),
         TestSignalName       => "C(26)",
         TestDelay            => tisd_C_CLK(26),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(26),
         SetupLow             => tsetup_C_CLK_negedge_posedge(26),
         HoldHigh             => thold_C_CLK_posedge_posedge(26),
         HoldLow              => thold_C_CLK_negedge_posedge(26),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(27),
         TimingData           => Tmkr_C_CLK_posedge(27),
         TestSignal           => C_dly(27),
         TestSignalName       => "C(27)",
         TestDelay            => tisd_C_CLK(27),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(27),
         SetupLow             => tsetup_C_CLK_negedge_posedge(27),
         HoldHigh             => thold_C_CLK_posedge_posedge(27),
         HoldLow              => thold_C_CLK_negedge_posedge(27),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(28),
         TimingData           => Tmkr_C_CLK_posedge(28),
         TestSignal           => C_dly(28),
         TestSignalName       => "C(28)",
         TestDelay            => tisd_C_CLK(28),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(28),
         SetupLow             => tsetup_C_CLK_negedge_posedge(28),
         HoldHigh             => thold_C_CLK_posedge_posedge(28),
         HoldLow              => thold_C_CLK_negedge_posedge(28),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(29),
         TimingData           => Tmkr_C_CLK_posedge(29),
         TestSignal           => C_dly(29),
         TestSignalName       => "C(29)",
         TestDelay            => tisd_C_CLK(29),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(29),
         SetupLow             => tsetup_C_CLK_negedge_posedge(29),
         HoldHigh             => thold_C_CLK_posedge_posedge(29),
         HoldLow              => thold_C_CLK_negedge_posedge(29),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(30),
         TimingData           => Tmkr_C_CLK_posedge(30),
         TestSignal           => C_dly(30),
         TestSignalName       => "C(30)",
         TestDelay            => tisd_C_CLK(30),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(30),
         SetupLow             => tsetup_C_CLK_negedge_posedge(30),
         HoldHigh             => thold_C_CLK_posedge_posedge(30),
         HoldLow              => thold_C_CLK_negedge_posedge(30),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(31),
         TimingData           => Tmkr_C_CLK_posedge(31),
         TestSignal           => C_dly(31),
         TestSignalName       => "C(31)",
         TestDelay            => tisd_C_CLK(31),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(31),
         SetupLow             => tsetup_C_CLK_negedge_posedge(31),
         HoldHigh             => thold_C_CLK_posedge_posedge(31),
         HoldLow              => thold_C_CLK_negedge_posedge(31),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(32),
         TimingData           => Tmkr_C_CLK_posedge(32),
         TestSignal           => C_dly(32),
         TestSignalName       => "C(32)",
         TestDelay            => tisd_C_CLK(32),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(32),
         SetupLow             => tsetup_C_CLK_negedge_posedge(32),
         HoldHigh             => thold_C_CLK_posedge_posedge(32),
         HoldLow              => thold_C_CLK_negedge_posedge(32),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(33),
         TimingData           => Tmkr_C_CLK_posedge(33),
         TestSignal           => C_dly(33),
         TestSignalName       => "C(33)",
         TestDelay            => tisd_C_CLK(33),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(33),
         SetupLow             => tsetup_C_CLK_negedge_posedge(33),
         HoldHigh             => thold_C_CLK_posedge_posedge(33),
         HoldLow              => thold_C_CLK_negedge_posedge(33),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(34),
         TimingData           => Tmkr_C_CLK_posedge(34),
         TestSignal           => C_dly(34),
         TestSignalName       => "C(34)",
         TestDelay            => tisd_C_CLK(34),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(34),
         SetupLow             => tsetup_C_CLK_negedge_posedge(34),
         HoldHigh             => thold_C_CLK_posedge_posedge(34),
         HoldLow              => thold_C_CLK_negedge_posedge(34),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(35),
         TimingData           => Tmkr_C_CLK_posedge(35),
         TestSignal           => C_dly(35),
         TestSignalName       => "C(35)",
         TestDelay            => tisd_C_CLK(35),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(35),
         SetupLow             => tsetup_C_CLK_negedge_posedge(35),
         HoldHigh             => thold_C_CLK_posedge_posedge(35),
         HoldLow              => thold_C_CLK_negedge_posedge(35),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(36),
         TimingData           => Tmkr_C_CLK_posedge(36),
         TestSignal           => C_dly(36),
         TestSignalName       => "C(36)",
         TestDelay            => tisd_C_CLK(36),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(36),
         SetupLow             => tsetup_C_CLK_negedge_posedge(36),
         HoldHigh             => thold_C_CLK_posedge_posedge(36),
         HoldLow              => thold_C_CLK_negedge_posedge(36),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(37),
         TimingData           => Tmkr_C_CLK_posedge(37),
         TestSignal           => C_dly(37),
         TestSignalName       => "C(37)",
         TestDelay            => tisd_C_CLK(37),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(37),
         SetupLow             => tsetup_C_CLK_negedge_posedge(37),
         HoldHigh             => thold_C_CLK_posedge_posedge(37),
         HoldLow              => thold_C_CLK_negedge_posedge(37),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(38),
         TimingData           => Tmkr_C_CLK_posedge(38),
         TestSignal           => C_dly(38),
         TestSignalName       => "C(38)",
         TestDelay            => tisd_C_CLK(38),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(38),
         SetupLow             => tsetup_C_CLK_negedge_posedge(38),
         HoldHigh             => thold_C_CLK_posedge_posedge(38),
         HoldLow              => thold_C_CLK_negedge_posedge(38),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(39),
         TimingData           => Tmkr_C_CLK_posedge(39),
         TestSignal           => C_dly(39),
         TestSignalName       => "C(39)",
         TestDelay            => tisd_C_CLK(39),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(39),
         SetupLow             => tsetup_C_CLK_negedge_posedge(39),
         HoldHigh             => thold_C_CLK_posedge_posedge(39),
         HoldLow              => thold_C_CLK_negedge_posedge(39),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(40),
         TimingData           => Tmkr_C_CLK_posedge(40),
         TestSignal           => C_dly(40),
         TestSignalName       => "C(40)",
         TestDelay            => tisd_C_CLK(40),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(40),
         SetupLow             => tsetup_C_CLK_negedge_posedge(40),
         HoldHigh             => thold_C_CLK_posedge_posedge(40),
         HoldLow              => thold_C_CLK_negedge_posedge(40),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(41),
         TimingData           => Tmkr_C_CLK_posedge(41),
         TestSignal           => C_dly(41),
         TestSignalName       => "C(41)",
         TestDelay            => tisd_C_CLK(41),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(41),
         SetupLow             => tsetup_C_CLK_negedge_posedge(41),
         HoldHigh             => thold_C_CLK_posedge_posedge(41),
         HoldLow              => thold_C_CLK_negedge_posedge(41),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(42),
         TimingData           => Tmkr_C_CLK_posedge(42),
         TestSignal           => C_dly(42),
         TestSignalName       => "C(42)",
         TestDelay            => tisd_C_CLK(42),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(42),
         SetupLow             => tsetup_C_CLK_negedge_posedge(42),
         HoldHigh             => thold_C_CLK_posedge_posedge(42),
         HoldLow              => thold_C_CLK_negedge_posedge(42),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(43),
         TimingData           => Tmkr_C_CLK_posedge(43),
         TestSignal           => C_dly(43),
         TestSignalName       => "C(43)",
         TestDelay            => tisd_C_CLK(43),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(43),
         SetupLow             => tsetup_C_CLK_negedge_posedge(43),
         HoldHigh             => thold_C_CLK_posedge_posedge(43),
         HoldLow              => thold_C_CLK_negedge_posedge(43),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(44),
         TimingData           => Tmkr_C_CLK_posedge(44),
         TestSignal           => C_dly(44),
         TestSignalName       => "C(44)",
         TestDelay            => tisd_C_CLK(44),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(44),
         SetupLow             => tsetup_C_CLK_negedge_posedge(44),
         HoldHigh             => thold_C_CLK_posedge_posedge(44),
         HoldLow              => thold_C_CLK_negedge_posedge(44),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(45),
         TimingData           => Tmkr_C_CLK_posedge(45),
         TestSignal           => C_dly(45),
         TestSignalName       => "C(45)",
         TestDelay            => tisd_C_CLK(45),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(45),
         SetupLow             => tsetup_C_CLK_negedge_posedge(45),
         HoldHigh             => thold_C_CLK_posedge_posedge(45),
         HoldLow              => thold_C_CLK_negedge_posedge(45),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(46),
         TimingData           => Tmkr_C_CLK_posedge(46),
         TestSignal           => C_dly(46),
         TestSignalName       => "C(46)",
         TestDelay            => tisd_C_CLK(46),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(46),
         SetupLow             => tsetup_C_CLK_negedge_posedge(46),
         HoldHigh             => thold_C_CLK_posedge_posedge(46),
         HoldLow              => thold_C_CLK_negedge_posedge(46),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_C_CLK_posedge(47),
         TimingData           => Tmkr_C_CLK_posedge(47),
         TestSignal           => C_dly(47),
         TestSignalName       => "C(47)",
         TestDelay            => tisd_C_CLK(47),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_C_CLK_posedge_posedge(47),
         SetupLow             => tsetup_C_CLK_negedge_posedge(47),
         HoldHigh             => thold_C_CLK_posedge_posedge(47),
         HoldLow              => thold_C_CLK_negedge_posedge(47),
         CheckEnabled         => (TO_X01((not RSTC_dly) and (CEC_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks signal CARRYCASCIN =====
       VitalSetupHoldCheck (
         Violation            => Tviol_CARRYCASCIN_CLK_posedge,
         TimingData           => Tmkr_CARRYCASCIN_CLK_posedge,
         TestSignal           => CARRYCASCIN_dly,
         TestSignalName       => "CARRYCASCIN",
         TestDelay            => tisd_CARRYCASCIN_CLK,
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_CARRYCASCIN_CLK_posedge_posedge,
         SetupLow             => tsetup_CARRYCASCIN_CLK_negedge_posedge,
         HoldHigh             => thold_CARRYCASCIN_CLK_posedge_posedge,
         HoldLow              => thold_CARRYCASCIN_CLK_negedge_posedge,
         CheckEnabled         => (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => true,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks signal CARRYIN =====
       VitalSetupHoldCheck (
         Violation            => Tviol_CARRYIN_CLK_posedge,
         TimingData           => Tmkr_CARRYIN_CLK_posedge,
         TestSignal           => CARRYIN_dly,
         TestSignalName       => "CARRYIN",
         TestDelay            => tisd_CARRYIN_CLK,
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_CARRYIN_CLK_posedge_posedge,
         SetupLow             => tsetup_CARRYIN_CLK_negedge_posedge,
         HoldHigh             => thold_CARRYIN_CLK_posedge_posedge,
         HoldLow              => thold_CARRYIN_CLK_negedge_posedge,
         CheckEnabled         => (TO_X01((not RSTALLCARRYIN_dly) and (CECARRYIN_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => true,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks for Bus signal CARRYINSEL =====
       VitalSetupHoldCheck (
         Violation            => Tviol_CARRYINSEL_CLK_posedge(0),
         TimingData           => Tmkr_CARRYINSEL_CLK_posedge(0),
         TestSignal           => CARRYINSEL_dly(0),
         TestSignalName       => "CARRYINSEL(0)",
         TestDelay            => tisd_CARRYINSEL_CLK(0),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_CARRYINSEL_CLK_posedge_posedge(0),
         SetupLow             => tsetup_CARRYINSEL_CLK_negedge_posedge(0),
         HoldHigh             => thold_CARRYINSEL_CLK_posedge_posedge(0),
         HoldLow              => thold_CARRYINSEL_CLK_negedge_posedge(0),
         CheckEnabled         => (TO_X01((not RSTA_dly) and (not RSTB_dly) and (not RSTCTRL_dly) and (CECTRL_dly)) /= '0') and (((AREG = 1) and (TO_X01(CEA2) = '1'))  or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))) and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_CARRYINSEL_CLK_posedge(1),
         TimingData           => Tmkr_CARRYINSEL_CLK_posedge(1),
         TestSignal           => CARRYINSEL_dly(1),
         TestSignalName       => "CARRYINSEL(1)",
         TestDelay            => tisd_CARRYINSEL_CLK(1),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_CARRYINSEL_CLK_posedge_posedge(1),
         SetupLow             => tsetup_CARRYINSEL_CLK_negedge_posedge(1),
         HoldHigh             => thold_CARRYINSEL_CLK_posedge_posedge(1),
         HoldLow              => thold_CARRYINSEL_CLK_negedge_posedge(1),
         CheckEnabled         => (TO_X01((not RSTA_dly) and (not RSTB_dly) and (not RSTCTRL_dly) and (CECTRL_dly)) /= '0') and (((AREG = 1) and (TO_X01(CEA2) = '1'))  or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))) and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_CARRYINSEL_CLK_posedge(2),
         TimingData           => Tmkr_CARRYINSEL_CLK_posedge(2),
         TestSignal           => CARRYINSEL_dly(2),
         TestSignalName       => "CARRYINSEL(2)",
         TestDelay            => tisd_CARRYINSEL_CLK(2),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_CARRYINSEL_CLK_posedge_posedge(2),
         SetupLow             => tsetup_CARRYINSEL_CLK_negedge_posedge(2),
         HoldHigh             => thold_CARRYINSEL_CLK_posedge_posedge(2),
         HoldLow              => thold_CARRYINSEL_CLK_negedge_posedge(2),
         CheckEnabled         => (TO_X01((not RSTA_dly) and (not RSTB_dly) and (not RSTCTRL_dly) and (CECTRL_dly)) /= '0') and (((AREG = 1) and (TO_X01(CEA2) = '1'))  or ((AREG = 2) and (TO_X01(CEA1) = '1') and (TO_X01(CEA2) =  '1'))) and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks signal CEA1 =====
       VitalSetupHoldCheck (
         Violation            => Tviol_CEA1_CLK_posedge,
         TimingData           => Tmkr_CEA1_CLK_posedge,
         TestSignal           => CEA1_dly,
         TestSignalName       => "CEA1",
         TestDelay            => tisd_CEA1_CLK,
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_CEA1_CLK_posedge_posedge,
         SetupLow             => tsetup_CEA1_CLK_negedge_posedge,
         HoldHigh             => thold_CEA1_CLK_posedge_posedge,
         HoldLow              => thold_CEA1_CLK_negedge_posedge,
         CheckEnabled         => (TO_X01(not RSTA_dly) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => true,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks signal CEA2 =====
       VitalSetupHoldCheck (
         Violation            => Tviol_CEA2_CLK_posedge,
         TimingData           => Tmkr_CEA2_CLK_posedge,
         TestSignal           => CEA2_dly,
         TestSignalName       => "CEA2",
         TestDelay            => tisd_CEA2_CLK,
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_CEA2_CLK_posedge_posedge,
         SetupLow             => tsetup_CEA2_CLK_negedge_posedge,
         HoldHigh             => thold_CEA2_CLK_posedge_posedge,
         HoldLow              => thold_CEA2_CLK_negedge_posedge,
         CheckEnabled         => (TO_X01(not RSTA_dly) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => true,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks signal CEALUMODE =====
       VitalSetupHoldCheck (
         Violation            => Tviol_CEALUMODE_CLK_posedge,
         TimingData           => Tmkr_CEALUMODE_CLK_posedge,
         TestSignal           => CEALUMODE_dly,
         TestSignalName       => "CEALUMODE",
         TestDelay            => tisd_CEALUMODE_CLK,
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_CEALUMODE_CLK_posedge_posedge,
         SetupLow             => tsetup_CEALUMODE_CLK_negedge_posedge,
         HoldHigh             => thold_CEALUMODE_CLK_posedge_posedge,
         HoldLow              => thold_CEALUMODE_CLK_negedge_posedge,
         CheckEnabled         => (TO_X01(not RSTALUMODE_dly) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => true,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks signal CEB1 =====
       VitalSetupHoldCheck (
         Violation            => Tviol_CEB1_CLK_posedge,
         TimingData           => Tmkr_CEB1_CLK_posedge,
         TestSignal           => CEB1_dly,
         TestSignalName       => "CEB1",
         TestDelay            => tisd_CEB1_CLK,
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_CEB1_CLK_posedge_posedge,
         SetupLow             => tsetup_CEB1_CLK_negedge_posedge,
         HoldHigh             => thold_CEB1_CLK_posedge_posedge,
         HoldLow              => thold_CEB1_CLK_negedge_posedge,
         CheckEnabled         => (TO_X01(not RSTB_dly) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => true,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks signal CEB2 =====
       VitalSetupHoldCheck (
         Violation            => Tviol_CEB2_CLK_posedge,
         TimingData           => Tmkr_CEB2_CLK_posedge,
         TestSignal           => CEB2_dly,
         TestSignalName       => "CEB2",
         TestDelay            => tisd_CEB2_CLK,
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_CEB2_CLK_posedge_posedge,
         SetupLow             => tsetup_CEB2_CLK_negedge_posedge,
         HoldHigh             => thold_CEB2_CLK_posedge_posedge,
         HoldLow              => thold_CEB2_CLK_negedge_posedge,
         CheckEnabled         => (TO_X01(not RSTB_dly) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => true,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks signal CEC =====
       VitalSetupHoldCheck (
         Violation            => Tviol_CEC_CLK_posedge,
         TimingData           => Tmkr_CEC_CLK_posedge,
         TestSignal           => CEC_dly,
         TestSignalName       => "CEC",
         TestDelay            => tisd_CEC_CLK,
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_CEC_CLK_posedge_posedge,
         SetupLow             => tsetup_CEC_CLK_negedge_posedge,
         HoldHigh             => thold_CEC_CLK_posedge_posedge,
         HoldLow              => thold_CEC_CLK_negedge_posedge,
         CheckEnabled         => (TO_X01(not RSTC_dly) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => true,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks signal CECARRYIN =====
       VitalSetupHoldCheck (
         Violation            => Tviol_CECARRYIN_CLK_posedge,
         TimingData           => Tmkr_CECARRYIN_CLK_posedge,
         TestSignal           => CECARRYIN_dly,
         TestSignalName       => "CECARRYIN",
         TestDelay            => tisd_CECARRYIN_CLK,
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_CECARRYIN_CLK_posedge_posedge,
         SetupLow             => tsetup_CECARRYIN_CLK_negedge_posedge,
         HoldHigh             => thold_CECARRYIN_CLK_posedge_posedge,
         HoldLow              => thold_CECARRYIN_CLK_negedge_posedge,
         CheckEnabled         => (TO_X01((not RSTALLCARRYIN_dly) and (CECARRYIN_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => true,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks signal CECTRL =====
       VitalSetupHoldCheck (
         Violation            => Tviol_CECTRL_CLK_posedge,
         TimingData           => Tmkr_CECTRL_CLK_posedge,
         TestSignal           => CECTRL_dly,
         TestSignalName       => "CECTRL",
         TestDelay            => tisd_CECTRL_CLK,
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_CECTRL_CLK_posedge_posedge,
         SetupLow             => tsetup_CECTRL_CLK_negedge_posedge,
         HoldHigh             => thold_CECTRL_CLK_posedge_posedge,
         HoldLow              => thold_CECTRL_CLK_negedge_posedge,
         CheckEnabled         => (TO_X01(not RSTCTRL_dly) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => true,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks signal CEM =====
       VitalSetupHoldCheck (
         Violation            => Tviol_CEM_CLK_posedge,
         TimingData           => Tmkr_CEM_CLK_posedge,
         TestSignal           => CEM_dly,
         TestSignalName       => "CEM",
         TestDelay            => tisd_CEM_CLK,
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_CEM_CLK_posedge_posedge,
         SetupLow             => tsetup_CEM_CLK_negedge_posedge,
         HoldHigh             => thold_CEM_CLK_posedge_posedge,
         HoldLow              => thold_CEM_CLK_negedge_posedge,
         CheckEnabled         => (TO_X01(not RSTM_dly) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => true,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks signal CEP =====
       VitalSetupHoldCheck (
         Violation            => Tviol_CEP_CLK_posedge,
         TimingData           => Tmkr_CEP_CLK_posedge,
         TestSignal           => CEP_dly,
         TestSignalName       => "CEP",
         TestDelay            => tisd_CEP_CLK,
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_CEP_CLK_posedge_posedge,
         SetupLow             => tsetup_CEP_CLK_negedge_posedge,
         HoldHigh             => thold_CEP_CLK_posedge_posedge,
         HoldLow              => thold_CEP_CLK_negedge_posedge,
         CheckEnabled         => (TO_X01(not RSTP_dly) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => true,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks for Bus signal OPMODE =====
       VitalSetupHoldCheck (
         Violation            => Tviol_OPMODE_CLK_posedge(0),
         TimingData           => Tmkr_OPMODE_CLK_posedge(0),
         TestSignal           => OPMODE_dly(0),
         TestSignalName       => "OPMODE(0)",
         TestDelay            => tisd_OPMODE_CLK(0),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_OPMODE_CLK_posedge_posedge(0),
         SetupLow             => tsetup_OPMODE_CLK_negedge_posedge(0),
         HoldHigh             => thold_OPMODE_CLK_posedge_posedge(0),
         HoldLow              => thold_OPMODE_CLK_negedge_posedge(0),
         CheckEnabled         => (TO_X01((not RSTCTRL_dly) and (CECTRL_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_OPMODE_CLK_posedge(1),
         TimingData           => Tmkr_OPMODE_CLK_posedge(1),
         TestSignal           => OPMODE_dly(1),
         TestSignalName       => "OPMODE(1)",
         TestDelay            => tisd_OPMODE_CLK(1),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_OPMODE_CLK_posedge_posedge(1),
         SetupLow             => tsetup_OPMODE_CLK_negedge_posedge(1),
         HoldHigh             => thold_OPMODE_CLK_posedge_posedge(1),
         HoldLow              => thold_OPMODE_CLK_negedge_posedge(1),
         CheckEnabled         => (TO_X01((not RSTCTRL_dly) and (CECTRL_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_OPMODE_CLK_posedge(2),
         TimingData           => Tmkr_OPMODE_CLK_posedge(2),
         TestSignal           => OPMODE_dly(2),
         TestSignalName       => "OPMODE(2)",
         TestDelay            => tisd_OPMODE_CLK(2),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_OPMODE_CLK_posedge_posedge(2),
         SetupLow             => tsetup_OPMODE_CLK_negedge_posedge(2),
         HoldHigh             => thold_OPMODE_CLK_posedge_posedge(2),
         HoldLow              => thold_OPMODE_CLK_negedge_posedge(2),
         CheckEnabled         => (TO_X01((not RSTCTRL_dly) and (CECTRL_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_OPMODE_CLK_posedge(3),
         TimingData           => Tmkr_OPMODE_CLK_posedge(3),
         TestSignal           => OPMODE_dly(3),
         TestSignalName       => "OPMODE(3)",
         TestDelay            => tisd_OPMODE_CLK(3),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_OPMODE_CLK_posedge_posedge(3),
         SetupLow             => tsetup_OPMODE_CLK_negedge_posedge(3),
         HoldHigh             => thold_OPMODE_CLK_posedge_posedge(3),
         HoldLow              => thold_OPMODE_CLK_negedge_posedge(3),
         CheckEnabled         => (TO_X01((not RSTCTRL_dly) and (CECTRL_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_OPMODE_CLK_posedge(4),
         TimingData           => Tmkr_OPMODE_CLK_posedge(4),
         TestSignal           => OPMODE_dly(4),
         TestSignalName       => "OPMODE(4)",
         TestDelay            => tisd_OPMODE_CLK(4),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_OPMODE_CLK_posedge_posedge(4),
         SetupLow             => tsetup_OPMODE_CLK_negedge_posedge(4),
         HoldHigh             => thold_OPMODE_CLK_posedge_posedge(4),
         HoldLow              => thold_OPMODE_CLK_negedge_posedge(4),
         CheckEnabled         => (TO_X01((not RSTCTRL_dly) and (CECTRL_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_OPMODE_CLK_posedge(5),
         TimingData           => Tmkr_OPMODE_CLK_posedge(5),
         TestSignal           => OPMODE_dly(5),
         TestSignalName       => "OPMODE(5)",
         TestDelay            => tisd_OPMODE_CLK(5),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_OPMODE_CLK_posedge_posedge(5),
         SetupLow             => tsetup_OPMODE_CLK_negedge_posedge(5),
         HoldHigh             => thold_OPMODE_CLK_posedge_posedge(5),
         HoldLow              => thold_OPMODE_CLK_negedge_posedge(5),
         CheckEnabled         => (TO_X01((not RSTCTRL_dly) and (CECTRL_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_OPMODE_CLK_posedge(6),
         TimingData           => Tmkr_OPMODE_CLK_posedge(6),
         TestSignal           => OPMODE_dly(6),
         TestSignalName       => "OPMODE(6)",
         TestDelay            => tisd_OPMODE_CLK(6),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_OPMODE_CLK_posedge_posedge(6),
         SetupLow             => tsetup_OPMODE_CLK_negedge_posedge(6),
         HoldHigh             => thold_OPMODE_CLK_posedge_posedge(6),
         HoldLow              => thold_OPMODE_CLK_negedge_posedge(6),
         CheckEnabled         => (TO_X01((not RSTCTRL_dly) and (CECTRL_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks for Bus signal PCIN =====
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(0),
         TimingData           => Tmkr_PCIN_CLK_posedge(0),
         TestSignal           => PCIN_dly(0),
         TestSignalName       => "PCIN(0)",
         TestDelay            => tisd_PCIN_CLK(0),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(0),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(0),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(0),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(0),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(1),
         TimingData           => Tmkr_PCIN_CLK_posedge(1),
         TestSignal           => PCIN_dly(1),
         TestSignalName       => "PCIN(1)",
         TestDelay            => tisd_PCIN_CLK(1),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(1),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(1),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(1),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(1),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(2),
         TimingData           => Tmkr_PCIN_CLK_posedge(2),
         TestSignal           => PCIN_dly(2),
         TestSignalName       => "PCIN(2)",
         TestDelay            => tisd_PCIN_CLK(2),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(2),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(2),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(2),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(2),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(3),
         TimingData           => Tmkr_PCIN_CLK_posedge(3),
         TestSignal           => PCIN_dly(3),
         TestSignalName       => "PCIN(3)",
         TestDelay            => tisd_PCIN_CLK(3),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(3),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(3),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(3),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(3),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(4),
         TimingData           => Tmkr_PCIN_CLK_posedge(4),
         TestSignal           => PCIN_dly(4),
         TestSignalName       => "PCIN(4)",
         TestDelay            => tisd_PCIN_CLK(4),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(4),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(4),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(4),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(4),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(5),
         TimingData           => Tmkr_PCIN_CLK_posedge(5),
         TestSignal           => PCIN_dly(5),
         TestSignalName       => "PCIN(5)",
         TestDelay            => tisd_PCIN_CLK(5),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(5),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(5),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(5),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(5),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(6),
         TimingData           => Tmkr_PCIN_CLK_posedge(6),
         TestSignal           => PCIN_dly(6),
         TestSignalName       => "PCIN(6)",
         TestDelay            => tisd_PCIN_CLK(6),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(6),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(6),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(6),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(6),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(7),
         TimingData           => Tmkr_PCIN_CLK_posedge(7),
         TestSignal           => PCIN_dly(7),
         TestSignalName       => "PCIN(7)",
         TestDelay            => tisd_PCIN_CLK(7),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(7),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(7),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(7),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(7),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(8),
         TimingData           => Tmkr_PCIN_CLK_posedge(8),
         TestSignal           => PCIN_dly(8),
         TestSignalName       => "PCIN(8)",
         TestDelay            => tisd_PCIN_CLK(8),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(8),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(8),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(8),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(8),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(9),
         TimingData           => Tmkr_PCIN_CLK_posedge(9),
         TestSignal           => PCIN_dly(9),
         TestSignalName       => "PCIN(9)",
         TestDelay            => tisd_PCIN_CLK(9),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(9),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(9),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(9),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(9),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(10),
         TimingData           => Tmkr_PCIN_CLK_posedge(10),
         TestSignal           => PCIN_dly(10),
         TestSignalName       => "PCIN(10)",
         TestDelay            => tisd_PCIN_CLK(10),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(10),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(10),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(10),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(10),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(11),
         TimingData           => Tmkr_PCIN_CLK_posedge(11),
         TestSignal           => PCIN_dly(11),
         TestSignalName       => "PCIN(11)",
         TestDelay            => tisd_PCIN_CLK(11),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(11),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(11),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(11),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(11),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(12),
         TimingData           => Tmkr_PCIN_CLK_posedge(12),
         TestSignal           => PCIN_dly(12),
         TestSignalName       => "PCIN(12)",
         TestDelay            => tisd_PCIN_CLK(12),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(12),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(12),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(12),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(12),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(13),
         TimingData           => Tmkr_PCIN_CLK_posedge(13),
         TestSignal           => PCIN_dly(13),
         TestSignalName       => "PCIN(13)",
         TestDelay            => tisd_PCIN_CLK(13),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(13),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(13),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(13),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(13),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(14),
         TimingData           => Tmkr_PCIN_CLK_posedge(14),
         TestSignal           => PCIN_dly(14),
         TestSignalName       => "PCIN(14)",
         TestDelay            => tisd_PCIN_CLK(14),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(14),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(14),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(14),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(14),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(15),
         TimingData           => Tmkr_PCIN_CLK_posedge(15),
         TestSignal           => PCIN_dly(15),
         TestSignalName       => "PCIN(15)",
         TestDelay            => tisd_PCIN_CLK(15),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(15),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(15),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(15),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(15),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(16),
         TimingData           => Tmkr_PCIN_CLK_posedge(16),
         TestSignal           => PCIN_dly(16),
         TestSignalName       => "PCIN(16)",
         TestDelay            => tisd_PCIN_CLK(16),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(16),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(16),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(16),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(16),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(17),
         TimingData           => Tmkr_PCIN_CLK_posedge(17),
         TestSignal           => PCIN_dly(17),
         TestSignalName       => "PCIN(17)",
         TestDelay            => tisd_PCIN_CLK(17),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(17),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(17),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(17),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(17),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(18),
         TimingData           => Tmkr_PCIN_CLK_posedge(18),
         TestSignal           => PCIN_dly(18),
         TestSignalName       => "PCIN(18)",
         TestDelay            => tisd_PCIN_CLK(18),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(18),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(18),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(18),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(18),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(19),
         TimingData           => Tmkr_PCIN_CLK_posedge(19),
         TestSignal           => PCIN_dly(19),
         TestSignalName       => "PCIN(19)",
         TestDelay            => tisd_PCIN_CLK(19),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(19),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(19),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(19),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(19),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(20),
         TimingData           => Tmkr_PCIN_CLK_posedge(20),
         TestSignal           => PCIN_dly(20),
         TestSignalName       => "PCIN(20)",
         TestDelay            => tisd_PCIN_CLK(20),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(20),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(20),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(20),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(20),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(21),
         TimingData           => Tmkr_PCIN_CLK_posedge(21),
         TestSignal           => PCIN_dly(21),
         TestSignalName       => "PCIN(21)",
         TestDelay            => tisd_PCIN_CLK(21),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(21),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(21),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(21),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(21),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(22),
         TimingData           => Tmkr_PCIN_CLK_posedge(22),
         TestSignal           => PCIN_dly(22),
         TestSignalName       => "PCIN(22)",
         TestDelay            => tisd_PCIN_CLK(22),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(22),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(22),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(22),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(22),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(23),
         TimingData           => Tmkr_PCIN_CLK_posedge(23),
         TestSignal           => PCIN_dly(23),
         TestSignalName       => "PCIN(23)",
         TestDelay            => tisd_PCIN_CLK(23),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(23),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(23),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(23),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(23),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(24),
         TimingData           => Tmkr_PCIN_CLK_posedge(24),
         TestSignal           => PCIN_dly(24),
         TestSignalName       => "PCIN(24)",
         TestDelay            => tisd_PCIN_CLK(24),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(24),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(24),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(24),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(24),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(25),
         TimingData           => Tmkr_PCIN_CLK_posedge(25),
         TestSignal           => PCIN_dly(25),
         TestSignalName       => "PCIN(25)",
         TestDelay            => tisd_PCIN_CLK(25),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(25),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(25),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(25),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(25),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(26),
         TimingData           => Tmkr_PCIN_CLK_posedge(26),
         TestSignal           => PCIN_dly(26),
         TestSignalName       => "PCIN(26)",
         TestDelay            => tisd_PCIN_CLK(26),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(26),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(26),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(26),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(26),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(27),
         TimingData           => Tmkr_PCIN_CLK_posedge(27),
         TestSignal           => PCIN_dly(27),
         TestSignalName       => "PCIN(27)",
         TestDelay            => tisd_PCIN_CLK(27),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(27),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(27),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(27),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(27),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(28),
         TimingData           => Tmkr_PCIN_CLK_posedge(28),
         TestSignal           => PCIN_dly(28),
         TestSignalName       => "PCIN(28)",
         TestDelay            => tisd_PCIN_CLK(28),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(28),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(28),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(28),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(28),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(29),
         TimingData           => Tmkr_PCIN_CLK_posedge(29),
         TestSignal           => PCIN_dly(29),
         TestSignalName       => "PCIN(29)",
         TestDelay            => tisd_PCIN_CLK(29),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(29),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(29),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(29),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(29),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(30),
         TimingData           => Tmkr_PCIN_CLK_posedge(30),
         TestSignal           => PCIN_dly(30),
         TestSignalName       => "PCIN(30)",
         TestDelay            => tisd_PCIN_CLK(30),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(30),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(30),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(30),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(30),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(31),
         TimingData           => Tmkr_PCIN_CLK_posedge(31),
         TestSignal           => PCIN_dly(31),
         TestSignalName       => "PCIN(31)",
         TestDelay            => tisd_PCIN_CLK(31),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(31),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(31),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(31),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(31),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(32),
         TimingData           => Tmkr_PCIN_CLK_posedge(32),
         TestSignal           => PCIN_dly(32),
         TestSignalName       => "PCIN(32)",
         TestDelay            => tisd_PCIN_CLK(32),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(32),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(32),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(32),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(32),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(33),
         TimingData           => Tmkr_PCIN_CLK_posedge(33),
         TestSignal           => PCIN_dly(33),
         TestSignalName       => "PCIN(33)",
         TestDelay            => tisd_PCIN_CLK(33),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(33),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(33),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(33),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(33),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(34),
         TimingData           => Tmkr_PCIN_CLK_posedge(34),
         TestSignal           => PCIN_dly(34),
         TestSignalName       => "PCIN(34)",
         TestDelay            => tisd_PCIN_CLK(34),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(34),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(34),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(34),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(34),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(35),
         TimingData           => Tmkr_PCIN_CLK_posedge(35),
         TestSignal           => PCIN_dly(35),
         TestSignalName       => "PCIN(35)",
         TestDelay            => tisd_PCIN_CLK(35),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(35),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(35),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(35),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(35),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(36),
         TimingData           => Tmkr_PCIN_CLK_posedge(36),
         TestSignal           => PCIN_dly(36),
         TestSignalName       => "PCIN(36)",
         TestDelay            => tisd_PCIN_CLK(36),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(36),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(36),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(36),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(36),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(37),
         TimingData           => Tmkr_PCIN_CLK_posedge(37),
         TestSignal           => PCIN_dly(37),
         TestSignalName       => "PCIN(37)",
         TestDelay            => tisd_PCIN_CLK(37),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(37),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(37),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(37),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(37),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(38),
         TimingData           => Tmkr_PCIN_CLK_posedge(38),
         TestSignal           => PCIN_dly(38),
         TestSignalName       => "PCIN(38)",
         TestDelay            => tisd_PCIN_CLK(38),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(38),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(38),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(38),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(38),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(39),
         TimingData           => Tmkr_PCIN_CLK_posedge(39),
         TestSignal           => PCIN_dly(39),
         TestSignalName       => "PCIN(39)",
         TestDelay            => tisd_PCIN_CLK(39),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(39),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(39),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(39),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(39),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(40),
         TimingData           => Tmkr_PCIN_CLK_posedge(40),
         TestSignal           => PCIN_dly(40),
         TestSignalName       => "PCIN(40)",
         TestDelay            => tisd_PCIN_CLK(40),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(40),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(40),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(40),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(40),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(41),
         TimingData           => Tmkr_PCIN_CLK_posedge(41),
         TestSignal           => PCIN_dly(41),
         TestSignalName       => "PCIN(41)",
         TestDelay            => tisd_PCIN_CLK(41),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(41),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(41),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(41),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(41),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(42),
         TimingData           => Tmkr_PCIN_CLK_posedge(42),
         TestSignal           => PCIN_dly(42),
         TestSignalName       => "PCIN(42)",
         TestDelay            => tisd_PCIN_CLK(42),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(42),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(42),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(42),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(42),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(43),
         TimingData           => Tmkr_PCIN_CLK_posedge(43),
         TestSignal           => PCIN_dly(43),
         TestSignalName       => "PCIN(43)",
         TestDelay            => tisd_PCIN_CLK(43),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(43),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(43),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(43),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(43),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(44),
         TimingData           => Tmkr_PCIN_CLK_posedge(44),
         TestSignal           => PCIN_dly(44),
         TestSignalName       => "PCIN(44)",
         TestDelay            => tisd_PCIN_CLK(44),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(44),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(44),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(44),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(44),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(45),
         TimingData           => Tmkr_PCIN_CLK_posedge(45),
         TestSignal           => PCIN_dly(45),
         TestSignalName       => "PCIN(45)",
         TestDelay            => tisd_PCIN_CLK(45),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(45),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(45),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(45),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(45),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(46),
         TimingData           => Tmkr_PCIN_CLK_posedge(46),
         TestSignal           => PCIN_dly(46),
         TestSignalName       => "PCIN(46)",
         TestDelay            => tisd_PCIN_CLK(46),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(46),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(46),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(46),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(46),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(47),
         TimingData           => Tmkr_PCIN_CLK_posedge(47),
         TestSignal           => PCIN_dly(47),
         TestSignalName       => "PCIN(47)",
         TestDelay            => tisd_PCIN_CLK(47),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(47),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(47),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(47),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(47),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks signal RSTA =====
       VitalSetupHoldCheck (
         Violation            => Tviol_RSTA_CLK_posedge,
         TimingData           => Tmkr_RSTA_CLK_posedge,
         TestSignal           => RSTA_dly,
         TestSignalName       => "RSTA",
         TestDelay            => tisd_RSTA_CLK,
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_RSTA_CLK_posedge_posedge,
         SetupLow             => tsetup_RSTA_CLK_negedge_posedge,
         HoldHigh             => thold_RSTA_CLK_posedge_posedge,
         HoldLow              => thold_RSTA_CLK_negedge_posedge,
         CheckEnabled         => (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => true,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks signal RSTALUMODE =====
       VitalSetupHoldCheck (
         Violation            => Tviol_RSTALUMODE_CLK_posedge,
         TimingData           => Tmkr_RSTALUMODE_CLK_posedge,
         TestSignal           => RSTALUMODE_dly,
         TestSignalName       => "RSTALUMODE",
         TestDelay            => tisd_RSTALUMODE_CLK,
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_RSTALUMODE_CLK_posedge_posedge,
         SetupLow             => tsetup_RSTALUMODE_CLK_negedge_posedge,
         HoldHigh             => thold_RSTALUMODE_CLK_posedge_posedge,
         HoldLow              => thold_RSTALUMODE_CLK_negedge_posedge,
         CheckEnabled         => (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => true,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks signal RSTB =====
       VitalSetupHoldCheck (
         Violation            => Tviol_RSTB_CLK_posedge,
         TimingData           => Tmkr_RSTB_CLK_posedge,
         TestSignal           => RSTB_dly,
         TestSignalName       => "RSTB",
         TestDelay            => tisd_RSTB_CLK,
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_RSTB_CLK_posedge_posedge,
         SetupLow             => tsetup_RSTB_CLK_negedge_posedge,
         HoldHigh             => thold_RSTB_CLK_posedge_posedge,
         HoldLow              => thold_RSTB_CLK_negedge_posedge,
         CheckEnabled         => (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => true,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks signal RSTC =====
       VitalSetupHoldCheck (
         Violation            => Tviol_RSTC_CLK_posedge,
         TimingData           => Tmkr_RSTC_CLK_posedge,
         TestSignal           => RSTC_dly,
         TestSignalName       => "RSTC",
         TestDelay            => tisd_RSTC_CLK,
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_RSTC_CLK_posedge_posedge,
         SetupLow             => tsetup_RSTC_CLK_negedge_posedge,
         HoldHigh             => thold_RSTC_CLK_posedge_posedge,
         HoldLow              => thold_RSTC_CLK_negedge_posedge,
         CheckEnabled         => (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => true,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks signal RSTALLCARRYIN =====
       VitalSetupHoldCheck (
         Violation            => Tviol_RSTALLCARRYIN_CLK_posedge,
         TimingData           => Tmkr_RSTALLCARRYIN_CLK_posedge,
         TestSignal           => RSTALLCARRYIN_dly,
         TestSignalName       => "RSTALLCARRYIN",
         TestDelay            => tisd_RSTALLCARRYIN_CLK,
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_RSTALLCARRYIN_CLK_posedge_posedge,
         SetupLow             => tsetup_RSTALLCARRYIN_CLK_negedge_posedge,
         HoldHigh             => thold_RSTALLCARRYIN_CLK_posedge_posedge,
         HoldLow              => thold_RSTALLCARRYIN_CLK_negedge_posedge,
         CheckEnabled         => (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => true,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks signal RSTCTRL =====
       VitalSetupHoldCheck (
         Violation            => Tviol_RSTCTRL_CLK_posedge,
         TimingData           => Tmkr_RSTCTRL_CLK_posedge,
         TestSignal           => RSTCTRL_dly,
         TestSignalName       => "RSTCTRL",
         TestDelay            => tisd_RSTCTRL_CLK,
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_RSTCTRL_CLK_posedge_posedge,
         SetupLow             => tsetup_RSTCTRL_CLK_negedge_posedge,
         HoldHigh             => thold_RSTCTRL_CLK_posedge_posedge,
         HoldLow              => thold_RSTCTRL_CLK_negedge_posedge,
         CheckEnabled         => (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => true,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks signal RSTM =====
       VitalSetupHoldCheck (
         Violation            => Tviol_RSTM_CLK_posedge,
         TimingData           => Tmkr_RSTM_CLK_posedge,
         TestSignal           => RSTM_dly,
         TestSignalName       => "RSTM",
         TestDelay            => tisd_RSTM_CLK,
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_RSTM_CLK_posedge_posedge,
         SetupLow             => tsetup_RSTM_CLK_negedge_posedge,
         HoldHigh             => thold_RSTM_CLK_posedge_posedge,
         HoldLow              => thold_RSTM_CLK_negedge_posedge,
         CheckEnabled         => (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => true,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks signal RSTP =====
       VitalSetupHoldCheck (
         Violation            => Tviol_RSTP_CLK_posedge,
         TimingData           => Tmkr_RSTP_CLK_posedge,
         TestSignal           => RSTP_dly,
         TestSignalName       => "RSTP",
         TestDelay            => tisd_RSTP_CLK,
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_RSTP_CLK_posedge_posedge,
         SetupLow             => tsetup_RSTP_CLK_negedge_posedge,
         HoldHigh             => thold_RSTP_CLK_posedge_posedge,
         HoldLow              => thold_RSTP_CLK_negedge_posedge,
         CheckEnabled         => (TO_X01(GSR_dly) = '0'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48E",
         Xon                  => Xon,
         MsgOn                => true,
         MsgSeverity          => Warning);
   end if;
-- End of (TimingChecksOn)

--  Output-to-Clock path delay
-- START
       VitalPathDelay01 (
         OutSignal	=> ACOUT(29),
         GlitchData	=> ACOUT_GlitchData(29),
         OutSignalName	=> "ACOUT(29)",
         OutTemp	=> ACOUT_zd(29),
         Paths		=> (
			0 => (A_ipd(29)'last_event, tpd_A_ACOUT((899 - 0)- 30*0), true),
			1 => (A_ipd(28)'last_event, tpd_A_ACOUT((899 - 0)- 30*1), true),
			2 => (A_ipd(27)'last_event, tpd_A_ACOUT((899 - 0)- 30*2), true),
			3 => (A_ipd(26)'last_event, tpd_A_ACOUT((899 - 0)- 30*3), true),
			4 => (A_ipd(25)'last_event, tpd_A_ACOUT((899 - 0)- 30*4), true),
			5 => (A_ipd(24)'last_event, tpd_A_ACOUT((899 - 0)- 30*5), true),
			6 => (A_ipd(23)'last_event, tpd_A_ACOUT((899 - 0)- 30*6), true),
			7 => (A_ipd(22)'last_event, tpd_A_ACOUT((899 - 0)- 30*7), true),
			8 => (A_ipd(21)'last_event, tpd_A_ACOUT((899 - 0)- 30*8), true),
			9 => (A_ipd(20)'last_event, tpd_A_ACOUT((899 - 0)- 30*9), true),
			10 => (A_ipd(19)'last_event, tpd_A_ACOUT((899 - 0)- 30*10), true),
			11 => (A_ipd(18)'last_event, tpd_A_ACOUT((899 - 0)- 30*11), true),
			12 => (A_ipd(17)'last_event, tpd_A_ACOUT((899 - 0)- 30*12), true),
			13 => (A_ipd(16)'last_event, tpd_A_ACOUT((899 - 0)- 30*13), true),
			14 => (A_ipd(15)'last_event, tpd_A_ACOUT((899 - 0)- 30*14), true),
			15 => (A_ipd(14)'last_event, tpd_A_ACOUT((899 - 0)- 30*15), true),
			16 => (A_ipd(13)'last_event, tpd_A_ACOUT((899 - 0)- 30*16), true),
			17 => (A_ipd(12)'last_event, tpd_A_ACOUT((899 - 0)- 30*17), true),
			18 => (A_ipd(11)'last_event, tpd_A_ACOUT((899 - 0)- 30*18), true),
			19 => (A_ipd(10)'last_event, tpd_A_ACOUT((899 - 0)- 30*19), true),
			20 => (A_ipd(9)'last_event, tpd_A_ACOUT((899 - 0)- 30*20), true),
			21 => (A_ipd(8)'last_event, tpd_A_ACOUT((899 - 0)- 30*21), true),
			22 => (A_ipd(7)'last_event, tpd_A_ACOUT((899 - 0)- 30*22), true),
			23 => (A_ipd(6)'last_event, tpd_A_ACOUT((899 - 0)- 30*23), true),
			24 => (A_ipd(5)'last_event, tpd_A_ACOUT((899 - 0)- 30*24), true),
			25 => (A_ipd(4)'last_event, tpd_A_ACOUT((899 - 0)- 30*25), true),
			26 => (A_ipd(3)'last_event, tpd_A_ACOUT((899 - 0)- 30*26), true),
			27 => (A_ipd(2)'last_event, tpd_A_ACOUT((899 - 0)- 30*27), true),
			28 => (A_ipd(1)'last_event, tpd_A_ACOUT((899 - 0)- 30*28), true),
			29 => (A_ipd(0)'last_event, tpd_A_ACOUT((899 - 0)- 30*29), true),
			30 => (ACIN_ipd(29)'last_event, tpd_ACIN_ACOUT((899 - 0)- 30*0), true),
			31 => (ACIN_ipd(28)'last_event, tpd_ACIN_ACOUT((899 - 0)- 30*1), true),
			32 => (ACIN_ipd(27)'last_event, tpd_ACIN_ACOUT((899 - 0)- 30*2), true),
			33 => (ACIN_ipd(26)'last_event, tpd_ACIN_ACOUT((899 - 0)- 30*3), true),
			34 => (ACIN_ipd(25)'last_event, tpd_ACIN_ACOUT((899 - 0)- 30*4), true),
			35 => (ACIN_ipd(24)'last_event, tpd_ACIN_ACOUT((899 - 0)- 30*5), true),
			36 => (ACIN_ipd(23)'last_event, tpd_ACIN_ACOUT((899 - 0)- 30*6), true),
			37 => (ACIN_ipd(22)'last_event, tpd_ACIN_ACOUT((899 - 0)- 30*7), true),
			38 => (ACIN_ipd(21)'last_event, tpd_ACIN_ACOUT((899 - 0)- 30*8), true),
			39 => (ACIN_ipd(20)'last_event, tpd_ACIN_ACOUT((899 - 0)- 30*9), true),
			40 => (ACIN_ipd(19)'last_event, tpd_ACIN_ACOUT((899 - 0)- 30*10), true),
			41 => (ACIN_ipd(18)'last_event, tpd_ACIN_ACOUT((899 - 0)- 30*11), true),
			42 => (ACIN_ipd(17)'last_event, tpd_ACIN_ACOUT((899 - 0)- 30*12), true),
			43 => (ACIN_ipd(16)'last_event, tpd_ACIN_ACOUT((899 - 0)- 30*13), true),
			44 => (ACIN_ipd(15)'last_event, tpd_ACIN_ACOUT((899 - 0)- 30*14), true),
			45 => (ACIN_ipd(14)'last_event, tpd_ACIN_ACOUT((899 - 0)- 30*15), true),
			46 => (ACIN_ipd(13)'last_event, tpd_ACIN_ACOUT((899 - 0)- 30*16), true),
			47 => (ACIN_ipd(12)'last_event, tpd_ACIN_ACOUT((899 - 0)- 30*17), true),
			48 => (ACIN_ipd(11)'last_event, tpd_ACIN_ACOUT((899 - 0)- 30*18), true),
			49 => (ACIN_ipd(10)'last_event, tpd_ACIN_ACOUT((899 - 0)- 30*19), true),
			50 => (ACIN_ipd(9)'last_event, tpd_ACIN_ACOUT((899 - 0)- 30*20), true),
			51 => (ACIN_ipd(8)'last_event, tpd_ACIN_ACOUT((899 - 0)- 30*21), true),
			52 => (ACIN_ipd(7)'last_event, tpd_ACIN_ACOUT((899 - 0)- 30*22), true),
			53 => (ACIN_ipd(6)'last_event, tpd_ACIN_ACOUT((899 - 0)- 30*23), true),
			54 => (ACIN_ipd(5)'last_event, tpd_ACIN_ACOUT((899 - 0)- 30*24), true),
			55 => (ACIN_ipd(4)'last_event, tpd_ACIN_ACOUT((899 - 0)- 30*25), true),
			56 => (ACIN_ipd(3)'last_event, tpd_ACIN_ACOUT((899 - 0)- 30*26), true),
			57 => (ACIN_ipd(2)'last_event, tpd_ACIN_ACOUT((899 - 0)- 30*27), true),
			58 => (ACIN_ipd(1)'last_event, tpd_ACIN_ACOUT((899 - 0)- 30*28), true),
			59 => (ACIN_ipd(0)'last_event, tpd_ACIN_ACOUT((899 - 0)- 30*29), true),
			60 => (CLK_dly'last_event, tpd_CLK_ACOUT(29), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> ACOUT(28),
         GlitchData	=> ACOUT_GlitchData(28),
         OutSignalName	=> "ACOUT(28)",
         OutTemp	=> ACOUT_zd(28),
         Paths		=> (
			0 => (A_ipd(28)'last_event, tpd_A_ACOUT((899 - 1)- 30*1), true),
			1 => (A_ipd(27)'last_event, tpd_A_ACOUT((899 - 1)- 30*2), true),
			2 => (A_ipd(26)'last_event, tpd_A_ACOUT((899 - 1)- 30*3), true),
			3 => (A_ipd(25)'last_event, tpd_A_ACOUT((899 - 1)- 30*4), true),
			4 => (A_ipd(24)'last_event, tpd_A_ACOUT((899 - 1)- 30*5), true),
			5 => (A_ipd(23)'last_event, tpd_A_ACOUT((899 - 1)- 30*6), true),
			6 => (A_ipd(22)'last_event, tpd_A_ACOUT((899 - 1)- 30*7), true),
			7 => (A_ipd(21)'last_event, tpd_A_ACOUT((899 - 1)- 30*8), true),
			8 => (A_ipd(20)'last_event, tpd_A_ACOUT((899 - 1)- 30*9), true),
			9 => (A_ipd(19)'last_event, tpd_A_ACOUT((899 - 1)- 30*10), true),
			10 => (A_ipd(18)'last_event, tpd_A_ACOUT((899 - 1)- 30*11), true),
			11 => (A_ipd(17)'last_event, tpd_A_ACOUT((899 - 1)- 30*12), true),
			12 => (A_ipd(16)'last_event, tpd_A_ACOUT((899 - 1)- 30*13), true),
			13 => (A_ipd(15)'last_event, tpd_A_ACOUT((899 - 1)- 30*14), true),
			14 => (A_ipd(14)'last_event, tpd_A_ACOUT((899 - 1)- 30*15), true),
			15 => (A_ipd(13)'last_event, tpd_A_ACOUT((899 - 1)- 30*16), true),
			16 => (A_ipd(12)'last_event, tpd_A_ACOUT((899 - 1)- 30*17), true),
			17 => (A_ipd(11)'last_event, tpd_A_ACOUT((899 - 1)- 30*18), true),
			18 => (A_ipd(10)'last_event, tpd_A_ACOUT((899 - 1)- 30*19), true),
			19 => (A_ipd(9)'last_event, tpd_A_ACOUT((899 - 1)- 30*20), true),
			20 => (A_ipd(8)'last_event, tpd_A_ACOUT((899 - 1)- 30*21), true),
			21 => (A_ipd(7)'last_event, tpd_A_ACOUT((899 - 1)- 30*22), true),
			22 => (A_ipd(6)'last_event, tpd_A_ACOUT((899 - 1)- 30*23), true),
			23 => (A_ipd(5)'last_event, tpd_A_ACOUT((899 - 1)- 30*24), true),
			24 => (A_ipd(4)'last_event, tpd_A_ACOUT((899 - 1)- 30*25), true),
			25 => (A_ipd(3)'last_event, tpd_A_ACOUT((899 - 1)- 30*26), true),
			26 => (A_ipd(2)'last_event, tpd_A_ACOUT((899 - 1)- 30*27), true),
			27 => (A_ipd(1)'last_event, tpd_A_ACOUT((899 - 1)- 30*28), true),
			28 => (A_ipd(0)'last_event, tpd_A_ACOUT((899 - 1)- 30*29), true),
			29 => (ACIN_ipd(28)'last_event, tpd_ACIN_ACOUT((899 - 1)- 30*1), true),
			30 => (ACIN_ipd(27)'last_event, tpd_ACIN_ACOUT((899 - 1)- 30*2), true),
			31 => (ACIN_ipd(26)'last_event, tpd_ACIN_ACOUT((899 - 1)- 30*3), true),
			32 => (ACIN_ipd(25)'last_event, tpd_ACIN_ACOUT((899 - 1)- 30*4), true),
			33 => (ACIN_ipd(24)'last_event, tpd_ACIN_ACOUT((899 - 1)- 30*5), true),
			34 => (ACIN_ipd(23)'last_event, tpd_ACIN_ACOUT((899 - 1)- 30*6), true),
			35 => (ACIN_ipd(22)'last_event, tpd_ACIN_ACOUT((899 - 1)- 30*7), true),
			36 => (ACIN_ipd(21)'last_event, tpd_ACIN_ACOUT((899 - 1)- 30*8), true),
			37 => (ACIN_ipd(20)'last_event, tpd_ACIN_ACOUT((899 - 1)- 30*9), true),
			38 => (ACIN_ipd(19)'last_event, tpd_ACIN_ACOUT((899 - 1)- 30*10), true),
			39 => (ACIN_ipd(18)'last_event, tpd_ACIN_ACOUT((899 - 1)- 30*11), true),
			40 => (ACIN_ipd(17)'last_event, tpd_ACIN_ACOUT((899 - 1)- 30*12), true),
			41 => (ACIN_ipd(16)'last_event, tpd_ACIN_ACOUT((899 - 1)- 30*13), true),
			42 => (ACIN_ipd(15)'last_event, tpd_ACIN_ACOUT((899 - 1)- 30*14), true),
			43 => (ACIN_ipd(14)'last_event, tpd_ACIN_ACOUT((899 - 1)- 30*15), true),
			44 => (ACIN_ipd(13)'last_event, tpd_ACIN_ACOUT((899 - 1)- 30*16), true),
			45 => (ACIN_ipd(12)'last_event, tpd_ACIN_ACOUT((899 - 1)- 30*17), true),
			46 => (ACIN_ipd(11)'last_event, tpd_ACIN_ACOUT((899 - 1)- 30*18), true),
			47 => (ACIN_ipd(10)'last_event, tpd_ACIN_ACOUT((899 - 1)- 30*19), true),
			48 => (ACIN_ipd(9)'last_event, tpd_ACIN_ACOUT((899 - 1)- 30*20), true),
			49 => (ACIN_ipd(8)'last_event, tpd_ACIN_ACOUT((899 - 1)- 30*21), true),
			50 => (ACIN_ipd(7)'last_event, tpd_ACIN_ACOUT((899 - 1)- 30*22), true),
			51 => (ACIN_ipd(6)'last_event, tpd_ACIN_ACOUT((899 - 1)- 30*23), true),
			52 => (ACIN_ipd(5)'last_event, tpd_ACIN_ACOUT((899 - 1)- 30*24), true),
			53 => (ACIN_ipd(4)'last_event, tpd_ACIN_ACOUT((899 - 1)- 30*25), true),
			54 => (ACIN_ipd(3)'last_event, tpd_ACIN_ACOUT((899 - 1)- 30*26), true),
			55 => (ACIN_ipd(2)'last_event, tpd_ACIN_ACOUT((899 - 1)- 30*27), true),
			56 => (ACIN_ipd(1)'last_event, tpd_ACIN_ACOUT((899 - 1)- 30*28), true),
			57 => (ACIN_ipd(0)'last_event, tpd_ACIN_ACOUT((899 - 1)- 30*29), true),
			58 => (CLK_dly'last_event, tpd_CLK_ACOUT(28), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> ACOUT(27),
         GlitchData	=> ACOUT_GlitchData(27),
         OutSignalName	=> "ACOUT(27)",
         OutTemp	=> ACOUT_zd(27),
         Paths		=> (
			0 => (A_ipd(27)'last_event, tpd_A_ACOUT((899 - 2)- 30*2), true),
			1 => (A_ipd(26)'last_event, tpd_A_ACOUT((899 - 2)- 30*3), true),
			2 => (A_ipd(25)'last_event, tpd_A_ACOUT((899 - 2)- 30*4), true),
			3 => (A_ipd(24)'last_event, tpd_A_ACOUT((899 - 2)- 30*5), true),
			4 => (A_ipd(23)'last_event, tpd_A_ACOUT((899 - 2)- 30*6), true),
			5 => (A_ipd(22)'last_event, tpd_A_ACOUT((899 - 2)- 30*7), true),
			6 => (A_ipd(21)'last_event, tpd_A_ACOUT((899 - 2)- 30*8), true),
			7 => (A_ipd(20)'last_event, tpd_A_ACOUT((899 - 2)- 30*9), true),
			8 => (A_ipd(19)'last_event, tpd_A_ACOUT((899 - 2)- 30*10), true),
			9 => (A_ipd(18)'last_event, tpd_A_ACOUT((899 - 2)- 30*11), true),
			10 => (A_ipd(17)'last_event, tpd_A_ACOUT((899 - 2)- 30*12), true),
			11 => (A_ipd(16)'last_event, tpd_A_ACOUT((899 - 2)- 30*13), true),
			12 => (A_ipd(15)'last_event, tpd_A_ACOUT((899 - 2)- 30*14), true),
			13 => (A_ipd(14)'last_event, tpd_A_ACOUT((899 - 2)- 30*15), true),
			14 => (A_ipd(13)'last_event, tpd_A_ACOUT((899 - 2)- 30*16), true),
			15 => (A_ipd(12)'last_event, tpd_A_ACOUT((899 - 2)- 30*17), true),
			16 => (A_ipd(11)'last_event, tpd_A_ACOUT((899 - 2)- 30*18), true),
			17 => (A_ipd(10)'last_event, tpd_A_ACOUT((899 - 2)- 30*19), true),
			18 => (A_ipd(9)'last_event, tpd_A_ACOUT((899 - 2)- 30*20), true),
			19 => (A_ipd(8)'last_event, tpd_A_ACOUT((899 - 2)- 30*21), true),
			20 => (A_ipd(7)'last_event, tpd_A_ACOUT((899 - 2)- 30*22), true),
			21 => (A_ipd(6)'last_event, tpd_A_ACOUT((899 - 2)- 30*23), true),
			22 => (A_ipd(5)'last_event, tpd_A_ACOUT((899 - 2)- 30*24), true),
			23 => (A_ipd(4)'last_event, tpd_A_ACOUT((899 - 2)- 30*25), true),
			24 => (A_ipd(3)'last_event, tpd_A_ACOUT((899 - 2)- 30*26), true),
			25 => (A_ipd(2)'last_event, tpd_A_ACOUT((899 - 2)- 30*27), true),
			26 => (A_ipd(1)'last_event, tpd_A_ACOUT((899 - 2)- 30*28), true),
			27 => (A_ipd(0)'last_event, tpd_A_ACOUT((899 - 2)- 30*29), true),
			28 => (ACIN_ipd(27)'last_event, tpd_ACIN_ACOUT((899 - 2)- 30*2), true),
			29 => (ACIN_ipd(26)'last_event, tpd_ACIN_ACOUT((899 - 2)- 30*3), true),
			30 => (ACIN_ipd(25)'last_event, tpd_ACIN_ACOUT((899 - 2)- 30*4), true),
			31 => (ACIN_ipd(24)'last_event, tpd_ACIN_ACOUT((899 - 2)- 30*5), true),
			32 => (ACIN_ipd(23)'last_event, tpd_ACIN_ACOUT((899 - 2)- 30*6), true),
			33 => (ACIN_ipd(22)'last_event, tpd_ACIN_ACOUT((899 - 2)- 30*7), true),
			34 => (ACIN_ipd(21)'last_event, tpd_ACIN_ACOUT((899 - 2)- 30*8), true),
			35 => (ACIN_ipd(20)'last_event, tpd_ACIN_ACOUT((899 - 2)- 30*9), true),
			36 => (ACIN_ipd(19)'last_event, tpd_ACIN_ACOUT((899 - 2)- 30*10), true),
			37 => (ACIN_ipd(18)'last_event, tpd_ACIN_ACOUT((899 - 2)- 30*11), true),
			38 => (ACIN_ipd(17)'last_event, tpd_ACIN_ACOUT((899 - 2)- 30*12), true),
			39 => (ACIN_ipd(16)'last_event, tpd_ACIN_ACOUT((899 - 2)- 30*13), true),
			40 => (ACIN_ipd(15)'last_event, tpd_ACIN_ACOUT((899 - 2)- 30*14), true),
			41 => (ACIN_ipd(14)'last_event, tpd_ACIN_ACOUT((899 - 2)- 30*15), true),
			42 => (ACIN_ipd(13)'last_event, tpd_ACIN_ACOUT((899 - 2)- 30*16), true),
			43 => (ACIN_ipd(12)'last_event, tpd_ACIN_ACOUT((899 - 2)- 30*17), true),
			44 => (ACIN_ipd(11)'last_event, tpd_ACIN_ACOUT((899 - 2)- 30*18), true),
			45 => (ACIN_ipd(10)'last_event, tpd_ACIN_ACOUT((899 - 2)- 30*19), true),
			46 => (ACIN_ipd(9)'last_event, tpd_ACIN_ACOUT((899 - 2)- 30*20), true),
			47 => (ACIN_ipd(8)'last_event, tpd_ACIN_ACOUT((899 - 2)- 30*21), true),
			48 => (ACIN_ipd(7)'last_event, tpd_ACIN_ACOUT((899 - 2)- 30*22), true),
			49 => (ACIN_ipd(6)'last_event, tpd_ACIN_ACOUT((899 - 2)- 30*23), true),
			50 => (ACIN_ipd(5)'last_event, tpd_ACIN_ACOUT((899 - 2)- 30*24), true),
			51 => (ACIN_ipd(4)'last_event, tpd_ACIN_ACOUT((899 - 2)- 30*25), true),
			52 => (ACIN_ipd(3)'last_event, tpd_ACIN_ACOUT((899 - 2)- 30*26), true),
			53 => (ACIN_ipd(2)'last_event, tpd_ACIN_ACOUT((899 - 2)- 30*27), true),
			54 => (ACIN_ipd(1)'last_event, tpd_ACIN_ACOUT((899 - 2)- 30*28), true),
			55 => (ACIN_ipd(0)'last_event, tpd_ACIN_ACOUT((899 - 2)- 30*29), true),
			56 => (CLK_dly'last_event, tpd_CLK_ACOUT(27), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> ACOUT(26),
         GlitchData	=> ACOUT_GlitchData(26),
         OutSignalName	=> "ACOUT(26)",
         OutTemp	=> ACOUT_zd(26),
         Paths		=> (
			0 => (A_ipd(26)'last_event, tpd_A_ACOUT((899 - 3)- 30*3), true),
			1 => (A_ipd(25)'last_event, tpd_A_ACOUT((899 - 3)- 30*4), true),
			2 => (A_ipd(24)'last_event, tpd_A_ACOUT((899 - 3)- 30*5), true),
			3 => (A_ipd(23)'last_event, tpd_A_ACOUT((899 - 3)- 30*6), true),
			4 => (A_ipd(22)'last_event, tpd_A_ACOUT((899 - 3)- 30*7), true),
			5 => (A_ipd(21)'last_event, tpd_A_ACOUT((899 - 3)- 30*8), true),
			6 => (A_ipd(20)'last_event, tpd_A_ACOUT((899 - 3)- 30*9), true),
			7 => (A_ipd(19)'last_event, tpd_A_ACOUT((899 - 3)- 30*10), true),
			8 => (A_ipd(18)'last_event, tpd_A_ACOUT((899 - 3)- 30*11), true),
			9 => (A_ipd(17)'last_event, tpd_A_ACOUT((899 - 3)- 30*12), true),
			10 => (A_ipd(16)'last_event, tpd_A_ACOUT((899 - 3)- 30*13), true),
			11 => (A_ipd(15)'last_event, tpd_A_ACOUT((899 - 3)- 30*14), true),
			12 => (A_ipd(14)'last_event, tpd_A_ACOUT((899 - 3)- 30*15), true),
			13 => (A_ipd(13)'last_event, tpd_A_ACOUT((899 - 3)- 30*16), true),
			14 => (A_ipd(12)'last_event, tpd_A_ACOUT((899 - 3)- 30*17), true),
			15 => (A_ipd(11)'last_event, tpd_A_ACOUT((899 - 3)- 30*18), true),
			16 => (A_ipd(10)'last_event, tpd_A_ACOUT((899 - 3)- 30*19), true),
			17 => (A_ipd(9)'last_event, tpd_A_ACOUT((899 - 3)- 30*20), true),
			18 => (A_ipd(8)'last_event, tpd_A_ACOUT((899 - 3)- 30*21), true),
			19 => (A_ipd(7)'last_event, tpd_A_ACOUT((899 - 3)- 30*22), true),
			20 => (A_ipd(6)'last_event, tpd_A_ACOUT((899 - 3)- 30*23), true),
			21 => (A_ipd(5)'last_event, tpd_A_ACOUT((899 - 3)- 30*24), true),
			22 => (A_ipd(4)'last_event, tpd_A_ACOUT((899 - 3)- 30*25), true),
			23 => (A_ipd(3)'last_event, tpd_A_ACOUT((899 - 3)- 30*26), true),
			24 => (A_ipd(2)'last_event, tpd_A_ACOUT((899 - 3)- 30*27), true),
			25 => (A_ipd(1)'last_event, tpd_A_ACOUT((899 - 3)- 30*28), true),
			26 => (A_ipd(0)'last_event, tpd_A_ACOUT((899 - 3)- 30*29), true),
			27 => (ACIN_ipd(26)'last_event, tpd_ACIN_ACOUT((899 - 3)- 30*3), true),
			28 => (ACIN_ipd(25)'last_event, tpd_ACIN_ACOUT((899 - 3)- 30*4), true),
			29 => (ACIN_ipd(24)'last_event, tpd_ACIN_ACOUT((899 - 3)- 30*5), true),
			30 => (ACIN_ipd(23)'last_event, tpd_ACIN_ACOUT((899 - 3)- 30*6), true),
			31 => (ACIN_ipd(22)'last_event, tpd_ACIN_ACOUT((899 - 3)- 30*7), true),
			32 => (ACIN_ipd(21)'last_event, tpd_ACIN_ACOUT((899 - 3)- 30*8), true),
			33 => (ACIN_ipd(20)'last_event, tpd_ACIN_ACOUT((899 - 3)- 30*9), true),
			34 => (ACIN_ipd(19)'last_event, tpd_ACIN_ACOUT((899 - 3)- 30*10), true),
			35 => (ACIN_ipd(18)'last_event, tpd_ACIN_ACOUT((899 - 3)- 30*11), true),
			36 => (ACIN_ipd(17)'last_event, tpd_ACIN_ACOUT((899 - 3)- 30*12), true),
			37 => (ACIN_ipd(16)'last_event, tpd_ACIN_ACOUT((899 - 3)- 30*13), true),
			38 => (ACIN_ipd(15)'last_event, tpd_ACIN_ACOUT((899 - 3)- 30*14), true),
			39 => (ACIN_ipd(14)'last_event, tpd_ACIN_ACOUT((899 - 3)- 30*15), true),
			40 => (ACIN_ipd(13)'last_event, tpd_ACIN_ACOUT((899 - 3)- 30*16), true),
			41 => (ACIN_ipd(12)'last_event, tpd_ACIN_ACOUT((899 - 3)- 30*17), true),
			42 => (ACIN_ipd(11)'last_event, tpd_ACIN_ACOUT((899 - 3)- 30*18), true),
			43 => (ACIN_ipd(10)'last_event, tpd_ACIN_ACOUT((899 - 3)- 30*19), true),
			44 => (ACIN_ipd(9)'last_event, tpd_ACIN_ACOUT((899 - 3)- 30*20), true),
			45 => (ACIN_ipd(8)'last_event, tpd_ACIN_ACOUT((899 - 3)- 30*21), true),
			46 => (ACIN_ipd(7)'last_event, tpd_ACIN_ACOUT((899 - 3)- 30*22), true),
			47 => (ACIN_ipd(6)'last_event, tpd_ACIN_ACOUT((899 - 3)- 30*23), true),
			48 => (ACIN_ipd(5)'last_event, tpd_ACIN_ACOUT((899 - 3)- 30*24), true),
			49 => (ACIN_ipd(4)'last_event, tpd_ACIN_ACOUT((899 - 3)- 30*25), true),
			50 => (ACIN_ipd(3)'last_event, tpd_ACIN_ACOUT((899 - 3)- 30*26), true),
			51 => (ACIN_ipd(2)'last_event, tpd_ACIN_ACOUT((899 - 3)- 30*27), true),
			52 => (ACIN_ipd(1)'last_event, tpd_ACIN_ACOUT((899 - 3)- 30*28), true),
			53 => (ACIN_ipd(0)'last_event, tpd_ACIN_ACOUT((899 - 3)- 30*29), true),
			54 => (CLK_dly'last_event, tpd_CLK_ACOUT(26), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> ACOUT(25),
         GlitchData	=> ACOUT_GlitchData(25),
         OutSignalName	=> "ACOUT(25)",
         OutTemp	=> ACOUT_zd(25),
         Paths		=> (
			0 => (A_ipd(25)'last_event, tpd_A_ACOUT((899 - 4)- 30*4), true),
			1 => (A_ipd(24)'last_event, tpd_A_ACOUT((899 - 4)- 30*5), true),
			2 => (A_ipd(23)'last_event, tpd_A_ACOUT((899 - 4)- 30*6), true),
			3 => (A_ipd(22)'last_event, tpd_A_ACOUT((899 - 4)- 30*7), true),
			4 => (A_ipd(21)'last_event, tpd_A_ACOUT((899 - 4)- 30*8), true),
			5 => (A_ipd(20)'last_event, tpd_A_ACOUT((899 - 4)- 30*9), true),
			6 => (A_ipd(19)'last_event, tpd_A_ACOUT((899 - 4)- 30*10), true),
			7 => (A_ipd(18)'last_event, tpd_A_ACOUT((899 - 4)- 30*11), true),
			8 => (A_ipd(17)'last_event, tpd_A_ACOUT((899 - 4)- 30*12), true),
			9 => (A_ipd(16)'last_event, tpd_A_ACOUT((899 - 4)- 30*13), true),
			10 => (A_ipd(15)'last_event, tpd_A_ACOUT((899 - 4)- 30*14), true),
			11 => (A_ipd(14)'last_event, tpd_A_ACOUT((899 - 4)- 30*15), true),
			12 => (A_ipd(13)'last_event, tpd_A_ACOUT((899 - 4)- 30*16), true),
			13 => (A_ipd(12)'last_event, tpd_A_ACOUT((899 - 4)- 30*17), true),
			14 => (A_ipd(11)'last_event, tpd_A_ACOUT((899 - 4)- 30*18), true),
			15 => (A_ipd(10)'last_event, tpd_A_ACOUT((899 - 4)- 30*19), true),
			16 => (A_ipd(9)'last_event, tpd_A_ACOUT((899 - 4)- 30*20), true),
			17 => (A_ipd(8)'last_event, tpd_A_ACOUT((899 - 4)- 30*21), true),
			18 => (A_ipd(7)'last_event, tpd_A_ACOUT((899 - 4)- 30*22), true),
			19 => (A_ipd(6)'last_event, tpd_A_ACOUT((899 - 4)- 30*23), true),
			20 => (A_ipd(5)'last_event, tpd_A_ACOUT((899 - 4)- 30*24), true),
			21 => (A_ipd(4)'last_event, tpd_A_ACOUT((899 - 4)- 30*25), true),
			22 => (A_ipd(3)'last_event, tpd_A_ACOUT((899 - 4)- 30*26), true),
			23 => (A_ipd(2)'last_event, tpd_A_ACOUT((899 - 4)- 30*27), true),
			24 => (A_ipd(1)'last_event, tpd_A_ACOUT((899 - 4)- 30*28), true),
			25 => (A_ipd(0)'last_event, tpd_A_ACOUT((899 - 4)- 30*29), true),
			26 => (ACIN_ipd(25)'last_event, tpd_ACIN_ACOUT((899 - 4)- 30*4), true),
			27 => (ACIN_ipd(24)'last_event, tpd_ACIN_ACOUT((899 - 4)- 30*5), true),
			28 => (ACIN_ipd(23)'last_event, tpd_ACIN_ACOUT((899 - 4)- 30*6), true),
			29 => (ACIN_ipd(22)'last_event, tpd_ACIN_ACOUT((899 - 4)- 30*7), true),
			30 => (ACIN_ipd(21)'last_event, tpd_ACIN_ACOUT((899 - 4)- 30*8), true),
			31 => (ACIN_ipd(20)'last_event, tpd_ACIN_ACOUT((899 - 4)- 30*9), true),
			32 => (ACIN_ipd(19)'last_event, tpd_ACIN_ACOUT((899 - 4)- 30*10), true),
			33 => (ACIN_ipd(18)'last_event, tpd_ACIN_ACOUT((899 - 4)- 30*11), true),
			34 => (ACIN_ipd(17)'last_event, tpd_ACIN_ACOUT((899 - 4)- 30*12), true),
			35 => (ACIN_ipd(16)'last_event, tpd_ACIN_ACOUT((899 - 4)- 30*13), true),
			36 => (ACIN_ipd(15)'last_event, tpd_ACIN_ACOUT((899 - 4)- 30*14), true),
			37 => (ACIN_ipd(14)'last_event, tpd_ACIN_ACOUT((899 - 4)- 30*15), true),
			38 => (ACIN_ipd(13)'last_event, tpd_ACIN_ACOUT((899 - 4)- 30*16), true),
			39 => (ACIN_ipd(12)'last_event, tpd_ACIN_ACOUT((899 - 4)- 30*17), true),
			40 => (ACIN_ipd(11)'last_event, tpd_ACIN_ACOUT((899 - 4)- 30*18), true),
			41 => (ACIN_ipd(10)'last_event, tpd_ACIN_ACOUT((899 - 4)- 30*19), true),
			42 => (ACIN_ipd(9)'last_event, tpd_ACIN_ACOUT((899 - 4)- 30*20), true),
			43 => (ACIN_ipd(8)'last_event, tpd_ACIN_ACOUT((899 - 4)- 30*21), true),
			44 => (ACIN_ipd(7)'last_event, tpd_ACIN_ACOUT((899 - 4)- 30*22), true),
			45 => (ACIN_ipd(6)'last_event, tpd_ACIN_ACOUT((899 - 4)- 30*23), true),
			46 => (ACIN_ipd(5)'last_event, tpd_ACIN_ACOUT((899 - 4)- 30*24), true),
			47 => (ACIN_ipd(4)'last_event, tpd_ACIN_ACOUT((899 - 4)- 30*25), true),
			48 => (ACIN_ipd(3)'last_event, tpd_ACIN_ACOUT((899 - 4)- 30*26), true),
			49 => (ACIN_ipd(2)'last_event, tpd_ACIN_ACOUT((899 - 4)- 30*27), true),
			50 => (ACIN_ipd(1)'last_event, tpd_ACIN_ACOUT((899 - 4)- 30*28), true),
			51 => (ACIN_ipd(0)'last_event, tpd_ACIN_ACOUT((899 - 4)- 30*29), true),
			52 => (CLK_dly'last_event, tpd_CLK_ACOUT(25), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> ACOUT(24),
         GlitchData	=> ACOUT_GlitchData(24),
         OutSignalName	=> "ACOUT(24)",
         OutTemp	=> ACOUT_zd(24),
         Paths		=> (
			0 => (A_ipd(24)'last_event, tpd_A_ACOUT((899 - 5)- 30*5), true),
			1 => (A_ipd(23)'last_event, tpd_A_ACOUT((899 - 5)- 30*6), true),
			2 => (A_ipd(22)'last_event, tpd_A_ACOUT((899 - 5)- 30*7), true),
			3 => (A_ipd(21)'last_event, tpd_A_ACOUT((899 - 5)- 30*8), true),
			4 => (A_ipd(20)'last_event, tpd_A_ACOUT((899 - 5)- 30*9), true),
			5 => (A_ipd(19)'last_event, tpd_A_ACOUT((899 - 5)- 30*10), true),
			6 => (A_ipd(18)'last_event, tpd_A_ACOUT((899 - 5)- 30*11), true),
			7 => (A_ipd(17)'last_event, tpd_A_ACOUT((899 - 5)- 30*12), true),
			8 => (A_ipd(16)'last_event, tpd_A_ACOUT((899 - 5)- 30*13), true),
			9 => (A_ipd(15)'last_event, tpd_A_ACOUT((899 - 5)- 30*14), true),
			10 => (A_ipd(14)'last_event, tpd_A_ACOUT((899 - 5)- 30*15), true),
			11 => (A_ipd(13)'last_event, tpd_A_ACOUT((899 - 5)- 30*16), true),
			12 => (A_ipd(12)'last_event, tpd_A_ACOUT((899 - 5)- 30*17), true),
			13 => (A_ipd(11)'last_event, tpd_A_ACOUT((899 - 5)- 30*18), true),
			14 => (A_ipd(10)'last_event, tpd_A_ACOUT((899 - 5)- 30*19), true),
			15 => (A_ipd(9)'last_event, tpd_A_ACOUT((899 - 5)- 30*20), true),
			16 => (A_ipd(8)'last_event, tpd_A_ACOUT((899 - 5)- 30*21), true),
			17 => (A_ipd(7)'last_event, tpd_A_ACOUT((899 - 5)- 30*22), true),
			18 => (A_ipd(6)'last_event, tpd_A_ACOUT((899 - 5)- 30*23), true),
			19 => (A_ipd(5)'last_event, tpd_A_ACOUT((899 - 5)- 30*24), true),
			20 => (A_ipd(4)'last_event, tpd_A_ACOUT((899 - 5)- 30*25), true),
			21 => (A_ipd(3)'last_event, tpd_A_ACOUT((899 - 5)- 30*26), true),
			22 => (A_ipd(2)'last_event, tpd_A_ACOUT((899 - 5)- 30*27), true),
			23 => (A_ipd(1)'last_event, tpd_A_ACOUT((899 - 5)- 30*28), true),
			24 => (A_ipd(0)'last_event, tpd_A_ACOUT((899 - 5)- 30*29), true),
			25 => (ACIN_ipd(24)'last_event, tpd_ACIN_ACOUT((899 - 5)- 30*5), true),
			26 => (ACIN_ipd(23)'last_event, tpd_ACIN_ACOUT((899 - 5)- 30*6), true),
			27 => (ACIN_ipd(22)'last_event, tpd_ACIN_ACOUT((899 - 5)- 30*7), true),
			28 => (ACIN_ipd(21)'last_event, tpd_ACIN_ACOUT((899 - 5)- 30*8), true),
			29 => (ACIN_ipd(20)'last_event, tpd_ACIN_ACOUT((899 - 5)- 30*9), true),
			30 => (ACIN_ipd(19)'last_event, tpd_ACIN_ACOUT((899 - 5)- 30*10), true),
			31 => (ACIN_ipd(18)'last_event, tpd_ACIN_ACOUT((899 - 5)- 30*11), true),
			32 => (ACIN_ipd(17)'last_event, tpd_ACIN_ACOUT((899 - 5)- 30*12), true),
			33 => (ACIN_ipd(16)'last_event, tpd_ACIN_ACOUT((899 - 5)- 30*13), true),
			34 => (ACIN_ipd(15)'last_event, tpd_ACIN_ACOUT((899 - 5)- 30*14), true),
			35 => (ACIN_ipd(14)'last_event, tpd_ACIN_ACOUT((899 - 5)- 30*15), true),
			36 => (ACIN_ipd(13)'last_event, tpd_ACIN_ACOUT((899 - 5)- 30*16), true),
			37 => (ACIN_ipd(12)'last_event, tpd_ACIN_ACOUT((899 - 5)- 30*17), true),
			38 => (ACIN_ipd(11)'last_event, tpd_ACIN_ACOUT((899 - 5)- 30*18), true),
			39 => (ACIN_ipd(10)'last_event, tpd_ACIN_ACOUT((899 - 5)- 30*19), true),
			40 => (ACIN_ipd(9)'last_event, tpd_ACIN_ACOUT((899 - 5)- 30*20), true),
			41 => (ACIN_ipd(8)'last_event, tpd_ACIN_ACOUT((899 - 5)- 30*21), true),
			42 => (ACIN_ipd(7)'last_event, tpd_ACIN_ACOUT((899 - 5)- 30*22), true),
			43 => (ACIN_ipd(6)'last_event, tpd_ACIN_ACOUT((899 - 5)- 30*23), true),
			44 => (ACIN_ipd(5)'last_event, tpd_ACIN_ACOUT((899 - 5)- 30*24), true),
			45 => (ACIN_ipd(4)'last_event, tpd_ACIN_ACOUT((899 - 5)- 30*25), true),
			46 => (ACIN_ipd(3)'last_event, tpd_ACIN_ACOUT((899 - 5)- 30*26), true),
			47 => (ACIN_ipd(2)'last_event, tpd_ACIN_ACOUT((899 - 5)- 30*27), true),
			48 => (ACIN_ipd(1)'last_event, tpd_ACIN_ACOUT((899 - 5)- 30*28), true),
			49 => (ACIN_ipd(0)'last_event, tpd_ACIN_ACOUT((899 - 5)- 30*29), true),
			50 => (CLK_dly'last_event, tpd_CLK_ACOUT(24), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> ACOUT(23),
         GlitchData	=> ACOUT_GlitchData(23),
         OutSignalName	=> "ACOUT(23)",
         OutTemp	=> ACOUT_zd(23),
         Paths		=> (
			0 => (A_ipd(23)'last_event, tpd_A_ACOUT((899 - 6)- 30*6), true),
			1 => (A_ipd(22)'last_event, tpd_A_ACOUT((899 - 6)- 30*7), true),
			2 => (A_ipd(21)'last_event, tpd_A_ACOUT((899 - 6)- 30*8), true),
			3 => (A_ipd(20)'last_event, tpd_A_ACOUT((899 - 6)- 30*9), true),
			4 => (A_ipd(19)'last_event, tpd_A_ACOUT((899 - 6)- 30*10), true),
			5 => (A_ipd(18)'last_event, tpd_A_ACOUT((899 - 6)- 30*11), true),
			6 => (A_ipd(17)'last_event, tpd_A_ACOUT((899 - 6)- 30*12), true),
			7 => (A_ipd(16)'last_event, tpd_A_ACOUT((899 - 6)- 30*13), true),
			8 => (A_ipd(15)'last_event, tpd_A_ACOUT((899 - 6)- 30*14), true),
			9 => (A_ipd(14)'last_event, tpd_A_ACOUT((899 - 6)- 30*15), true),
			10 => (A_ipd(13)'last_event, tpd_A_ACOUT((899 - 6)- 30*16), true),
			11 => (A_ipd(12)'last_event, tpd_A_ACOUT((899 - 6)- 30*17), true),
			12 => (A_ipd(11)'last_event, tpd_A_ACOUT((899 - 6)- 30*18), true),
			13 => (A_ipd(10)'last_event, tpd_A_ACOUT((899 - 6)- 30*19), true),
			14 => (A_ipd(9)'last_event, tpd_A_ACOUT((899 - 6)- 30*20), true),
			15 => (A_ipd(8)'last_event, tpd_A_ACOUT((899 - 6)- 30*21), true),
			16 => (A_ipd(7)'last_event, tpd_A_ACOUT((899 - 6)- 30*22), true),
			17 => (A_ipd(6)'last_event, tpd_A_ACOUT((899 - 6)- 30*23), true),
			18 => (A_ipd(5)'last_event, tpd_A_ACOUT((899 - 6)- 30*24), true),
			19 => (A_ipd(4)'last_event, tpd_A_ACOUT((899 - 6)- 30*25), true),
			20 => (A_ipd(3)'last_event, tpd_A_ACOUT((899 - 6)- 30*26), true),
			21 => (A_ipd(2)'last_event, tpd_A_ACOUT((899 - 6)- 30*27), true),
			22 => (A_ipd(1)'last_event, tpd_A_ACOUT((899 - 6)- 30*28), true),
			23 => (A_ipd(0)'last_event, tpd_A_ACOUT((899 - 6)- 30*29), true),
			24 => (ACIN_ipd(23)'last_event, tpd_ACIN_ACOUT((899 - 6)- 30*6), true),
			25 => (ACIN_ipd(22)'last_event, tpd_ACIN_ACOUT((899 - 6)- 30*7), true),
			26 => (ACIN_ipd(21)'last_event, tpd_ACIN_ACOUT((899 - 6)- 30*8), true),
			27 => (ACIN_ipd(20)'last_event, tpd_ACIN_ACOUT((899 - 6)- 30*9), true),
			28 => (ACIN_ipd(19)'last_event, tpd_ACIN_ACOUT((899 - 6)- 30*10), true),
			29 => (ACIN_ipd(18)'last_event, tpd_ACIN_ACOUT((899 - 6)- 30*11), true),
			30 => (ACIN_ipd(17)'last_event, tpd_ACIN_ACOUT((899 - 6)- 30*12), true),
			31 => (ACIN_ipd(16)'last_event, tpd_ACIN_ACOUT((899 - 6)- 30*13), true),
			32 => (ACIN_ipd(15)'last_event, tpd_ACIN_ACOUT((899 - 6)- 30*14), true),
			33 => (ACIN_ipd(14)'last_event, tpd_ACIN_ACOUT((899 - 6)- 30*15), true),
			34 => (ACIN_ipd(13)'last_event, tpd_ACIN_ACOUT((899 - 6)- 30*16), true),
			35 => (ACIN_ipd(12)'last_event, tpd_ACIN_ACOUT((899 - 6)- 30*17), true),
			36 => (ACIN_ipd(11)'last_event, tpd_ACIN_ACOUT((899 - 6)- 30*18), true),
			37 => (ACIN_ipd(10)'last_event, tpd_ACIN_ACOUT((899 - 6)- 30*19), true),
			38 => (ACIN_ipd(9)'last_event, tpd_ACIN_ACOUT((899 - 6)- 30*20), true),
			39 => (ACIN_ipd(8)'last_event, tpd_ACIN_ACOUT((899 - 6)- 30*21), true),
			40 => (ACIN_ipd(7)'last_event, tpd_ACIN_ACOUT((899 - 6)- 30*22), true),
			41 => (ACIN_ipd(6)'last_event, tpd_ACIN_ACOUT((899 - 6)- 30*23), true),
			42 => (ACIN_ipd(5)'last_event, tpd_ACIN_ACOUT((899 - 6)- 30*24), true),
			43 => (ACIN_ipd(4)'last_event, tpd_ACIN_ACOUT((899 - 6)- 30*25), true),
			44 => (ACIN_ipd(3)'last_event, tpd_ACIN_ACOUT((899 - 6)- 30*26), true),
			45 => (ACIN_ipd(2)'last_event, tpd_ACIN_ACOUT((899 - 6)- 30*27), true),
			46 => (ACIN_ipd(1)'last_event, tpd_ACIN_ACOUT((899 - 6)- 30*28), true),
			47 => (ACIN_ipd(0)'last_event, tpd_ACIN_ACOUT((899 - 6)- 30*29), true),
			48 => (CLK_dly'last_event, tpd_CLK_ACOUT(23), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> ACOUT(22),
         GlitchData	=> ACOUT_GlitchData(22),
         OutSignalName	=> "ACOUT(22)",
         OutTemp	=> ACOUT_zd(22),
         Paths		=> (
			0 => (A_ipd(22)'last_event, tpd_A_ACOUT((899 - 7)- 30*7), true),
			1 => (A_ipd(21)'last_event, tpd_A_ACOUT((899 - 7)- 30*8), true),
			2 => (A_ipd(20)'last_event, tpd_A_ACOUT((899 - 7)- 30*9), true),
			3 => (A_ipd(19)'last_event, tpd_A_ACOUT((899 - 7)- 30*10), true),
			4 => (A_ipd(18)'last_event, tpd_A_ACOUT((899 - 7)- 30*11), true),
			5 => (A_ipd(17)'last_event, tpd_A_ACOUT((899 - 7)- 30*12), true),
			6 => (A_ipd(16)'last_event, tpd_A_ACOUT((899 - 7)- 30*13), true),
			7 => (A_ipd(15)'last_event, tpd_A_ACOUT((899 - 7)- 30*14), true),
			8 => (A_ipd(14)'last_event, tpd_A_ACOUT((899 - 7)- 30*15), true),
			9 => (A_ipd(13)'last_event, tpd_A_ACOUT((899 - 7)- 30*16), true),
			10 => (A_ipd(12)'last_event, tpd_A_ACOUT((899 - 7)- 30*17), true),
			11 => (A_ipd(11)'last_event, tpd_A_ACOUT((899 - 7)- 30*18), true),
			12 => (A_ipd(10)'last_event, tpd_A_ACOUT((899 - 7)- 30*19), true),
			13 => (A_ipd(9)'last_event, tpd_A_ACOUT((899 - 7)- 30*20), true),
			14 => (A_ipd(8)'last_event, tpd_A_ACOUT((899 - 7)- 30*21), true),
			15 => (A_ipd(7)'last_event, tpd_A_ACOUT((899 - 7)- 30*22), true),
			16 => (A_ipd(6)'last_event, tpd_A_ACOUT((899 - 7)- 30*23), true),
			17 => (A_ipd(5)'last_event, tpd_A_ACOUT((899 - 7)- 30*24), true),
			18 => (A_ipd(4)'last_event, tpd_A_ACOUT((899 - 7)- 30*25), true),
			19 => (A_ipd(3)'last_event, tpd_A_ACOUT((899 - 7)- 30*26), true),
			20 => (A_ipd(2)'last_event, tpd_A_ACOUT((899 - 7)- 30*27), true),
			21 => (A_ipd(1)'last_event, tpd_A_ACOUT((899 - 7)- 30*28), true),
			22 => (A_ipd(0)'last_event, tpd_A_ACOUT((899 - 7)- 30*29), true),
			23 => (ACIN_ipd(22)'last_event, tpd_ACIN_ACOUT((899 - 7)- 30*7), true),
			24 => (ACIN_ipd(21)'last_event, tpd_ACIN_ACOUT((899 - 7)- 30*8), true),
			25 => (ACIN_ipd(20)'last_event, tpd_ACIN_ACOUT((899 - 7)- 30*9), true),
			26 => (ACIN_ipd(19)'last_event, tpd_ACIN_ACOUT((899 - 7)- 30*10), true),
			27 => (ACIN_ipd(18)'last_event, tpd_ACIN_ACOUT((899 - 7)- 30*11), true),
			28 => (ACIN_ipd(17)'last_event, tpd_ACIN_ACOUT((899 - 7)- 30*12), true),
			29 => (ACIN_ipd(16)'last_event, tpd_ACIN_ACOUT((899 - 7)- 30*13), true),
			30 => (ACIN_ipd(15)'last_event, tpd_ACIN_ACOUT((899 - 7)- 30*14), true),
			31 => (ACIN_ipd(14)'last_event, tpd_ACIN_ACOUT((899 - 7)- 30*15), true),
			32 => (ACIN_ipd(13)'last_event, tpd_ACIN_ACOUT((899 - 7)- 30*16), true),
			33 => (ACIN_ipd(12)'last_event, tpd_ACIN_ACOUT((899 - 7)- 30*17), true),
			34 => (ACIN_ipd(11)'last_event, tpd_ACIN_ACOUT((899 - 7)- 30*18), true),
			35 => (ACIN_ipd(10)'last_event, tpd_ACIN_ACOUT((899 - 7)- 30*19), true),
			36 => (ACIN_ipd(9)'last_event, tpd_ACIN_ACOUT((899 - 7)- 30*20), true),
			37 => (ACIN_ipd(8)'last_event, tpd_ACIN_ACOUT((899 - 7)- 30*21), true),
			38 => (ACIN_ipd(7)'last_event, tpd_ACIN_ACOUT((899 - 7)- 30*22), true),
			39 => (ACIN_ipd(6)'last_event, tpd_ACIN_ACOUT((899 - 7)- 30*23), true),
			40 => (ACIN_ipd(5)'last_event, tpd_ACIN_ACOUT((899 - 7)- 30*24), true),
			41 => (ACIN_ipd(4)'last_event, tpd_ACIN_ACOUT((899 - 7)- 30*25), true),
			42 => (ACIN_ipd(3)'last_event, tpd_ACIN_ACOUT((899 - 7)- 30*26), true),
			43 => (ACIN_ipd(2)'last_event, tpd_ACIN_ACOUT((899 - 7)- 30*27), true),
			44 => (ACIN_ipd(1)'last_event, tpd_ACIN_ACOUT((899 - 7)- 30*28), true),
			45 => (ACIN_ipd(0)'last_event, tpd_ACIN_ACOUT((899 - 7)- 30*29), true),
			46 => (CLK_dly'last_event, tpd_CLK_ACOUT(22), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> ACOUT(21),
         GlitchData	=> ACOUT_GlitchData(21),
         OutSignalName	=> "ACOUT(21)",
         OutTemp	=> ACOUT_zd(21),
         Paths		=> (
			0 => (A_ipd(21)'last_event, tpd_A_ACOUT((899 - 8)- 30*8), true),
			1 => (A_ipd(20)'last_event, tpd_A_ACOUT((899 - 8)- 30*9), true),
			2 => (A_ipd(19)'last_event, tpd_A_ACOUT((899 - 8)- 30*10), true),
			3 => (A_ipd(18)'last_event, tpd_A_ACOUT((899 - 8)- 30*11), true),
			4 => (A_ipd(17)'last_event, tpd_A_ACOUT((899 - 8)- 30*12), true),
			5 => (A_ipd(16)'last_event, tpd_A_ACOUT((899 - 8)- 30*13), true),
			6 => (A_ipd(15)'last_event, tpd_A_ACOUT((899 - 8)- 30*14), true),
			7 => (A_ipd(14)'last_event, tpd_A_ACOUT((899 - 8)- 30*15), true),
			8 => (A_ipd(13)'last_event, tpd_A_ACOUT((899 - 8)- 30*16), true),
			9 => (A_ipd(12)'last_event, tpd_A_ACOUT((899 - 8)- 30*17), true),
			10 => (A_ipd(11)'last_event, tpd_A_ACOUT((899 - 8)- 30*18), true),
			11 => (A_ipd(10)'last_event, tpd_A_ACOUT((899 - 8)- 30*19), true),
			12 => (A_ipd(9)'last_event, tpd_A_ACOUT((899 - 8)- 30*20), true),
			13 => (A_ipd(8)'last_event, tpd_A_ACOUT((899 - 8)- 30*21), true),
			14 => (A_ipd(7)'last_event, tpd_A_ACOUT((899 - 8)- 30*22), true),
			15 => (A_ipd(6)'last_event, tpd_A_ACOUT((899 - 8)- 30*23), true),
			16 => (A_ipd(5)'last_event, tpd_A_ACOUT((899 - 8)- 30*24), true),
			17 => (A_ipd(4)'last_event, tpd_A_ACOUT((899 - 8)- 30*25), true),
			18 => (A_ipd(3)'last_event, tpd_A_ACOUT((899 - 8)- 30*26), true),
			19 => (A_ipd(2)'last_event, tpd_A_ACOUT((899 - 8)- 30*27), true),
			20 => (A_ipd(1)'last_event, tpd_A_ACOUT((899 - 8)- 30*28), true),
			21 => (A_ipd(0)'last_event, tpd_A_ACOUT((899 - 8)- 30*29), true),
			22 => (ACIN_ipd(21)'last_event, tpd_ACIN_ACOUT((899 - 8)- 30*8), true),
			23 => (ACIN_ipd(20)'last_event, tpd_ACIN_ACOUT((899 - 8)- 30*9), true),
			24 => (ACIN_ipd(19)'last_event, tpd_ACIN_ACOUT((899 - 8)- 30*10), true),
			25 => (ACIN_ipd(18)'last_event, tpd_ACIN_ACOUT((899 - 8)- 30*11), true),
			26 => (ACIN_ipd(17)'last_event, tpd_ACIN_ACOUT((899 - 8)- 30*12), true),
			27 => (ACIN_ipd(16)'last_event, tpd_ACIN_ACOUT((899 - 8)- 30*13), true),
			28 => (ACIN_ipd(15)'last_event, tpd_ACIN_ACOUT((899 - 8)- 30*14), true),
			29 => (ACIN_ipd(14)'last_event, tpd_ACIN_ACOUT((899 - 8)- 30*15), true),
			30 => (ACIN_ipd(13)'last_event, tpd_ACIN_ACOUT((899 - 8)- 30*16), true),
			31 => (ACIN_ipd(12)'last_event, tpd_ACIN_ACOUT((899 - 8)- 30*17), true),
			32 => (ACIN_ipd(11)'last_event, tpd_ACIN_ACOUT((899 - 8)- 30*18), true),
			33 => (ACIN_ipd(10)'last_event, tpd_ACIN_ACOUT((899 - 8)- 30*19), true),
			34 => (ACIN_ipd(9)'last_event, tpd_ACIN_ACOUT((899 - 8)- 30*20), true),
			35 => (ACIN_ipd(8)'last_event, tpd_ACIN_ACOUT((899 - 8)- 30*21), true),
			36 => (ACIN_ipd(7)'last_event, tpd_ACIN_ACOUT((899 - 8)- 30*22), true),
			37 => (ACIN_ipd(6)'last_event, tpd_ACIN_ACOUT((899 - 8)- 30*23), true),
			38 => (ACIN_ipd(5)'last_event, tpd_ACIN_ACOUT((899 - 8)- 30*24), true),
			39 => (ACIN_ipd(4)'last_event, tpd_ACIN_ACOUT((899 - 8)- 30*25), true),
			40 => (ACIN_ipd(3)'last_event, tpd_ACIN_ACOUT((899 - 8)- 30*26), true),
			41 => (ACIN_ipd(2)'last_event, tpd_ACIN_ACOUT((899 - 8)- 30*27), true),
			42 => (ACIN_ipd(1)'last_event, tpd_ACIN_ACOUT((899 - 8)- 30*28), true),
			43 => (ACIN_ipd(0)'last_event, tpd_ACIN_ACOUT((899 - 8)- 30*29), true),
			44 => (CLK_dly'last_event, tpd_CLK_ACOUT(21), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> ACOUT(20),
         GlitchData	=> ACOUT_GlitchData(20),
         OutSignalName	=> "ACOUT(20)",
         OutTemp	=> ACOUT_zd(20),
         Paths		=> (
			0 => (A_ipd(20)'last_event, tpd_A_ACOUT((899 - 9)- 30*9), true),
			1 => (A_ipd(19)'last_event, tpd_A_ACOUT((899 - 9)- 30*10), true),
			2 => (A_ipd(18)'last_event, tpd_A_ACOUT((899 - 9)- 30*11), true),
			3 => (A_ipd(17)'last_event, tpd_A_ACOUT((899 - 9)- 30*12), true),
			4 => (A_ipd(16)'last_event, tpd_A_ACOUT((899 - 9)- 30*13), true),
			5 => (A_ipd(15)'last_event, tpd_A_ACOUT((899 - 9)- 30*14), true),
			6 => (A_ipd(14)'last_event, tpd_A_ACOUT((899 - 9)- 30*15), true),
			7 => (A_ipd(13)'last_event, tpd_A_ACOUT((899 - 9)- 30*16), true),
			8 => (A_ipd(12)'last_event, tpd_A_ACOUT((899 - 9)- 30*17), true),
			9 => (A_ipd(11)'last_event, tpd_A_ACOUT((899 - 9)- 30*18), true),
			10 => (A_ipd(10)'last_event, tpd_A_ACOUT((899 - 9)- 30*19), true),
			11 => (A_ipd(9)'last_event, tpd_A_ACOUT((899 - 9)- 30*20), true),
			12 => (A_ipd(8)'last_event, tpd_A_ACOUT((899 - 9)- 30*21), true),
			13 => (A_ipd(7)'last_event, tpd_A_ACOUT((899 - 9)- 30*22), true),
			14 => (A_ipd(6)'last_event, tpd_A_ACOUT((899 - 9)- 30*23), true),
			15 => (A_ipd(5)'last_event, tpd_A_ACOUT((899 - 9)- 30*24), true),
			16 => (A_ipd(4)'last_event, tpd_A_ACOUT((899 - 9)- 30*25), true),
			17 => (A_ipd(3)'last_event, tpd_A_ACOUT((899 - 9)- 30*26), true),
			18 => (A_ipd(2)'last_event, tpd_A_ACOUT((899 - 9)- 30*27), true),
			19 => (A_ipd(1)'last_event, tpd_A_ACOUT((899 - 9)- 30*28), true),
			20 => (A_ipd(0)'last_event, tpd_A_ACOUT((899 - 9)- 30*29), true),
			21 => (ACIN_ipd(20)'last_event, tpd_ACIN_ACOUT((899 - 9)- 30*9), true),
			22 => (ACIN_ipd(19)'last_event, tpd_ACIN_ACOUT((899 - 9)- 30*10), true),
			23 => (ACIN_ipd(18)'last_event, tpd_ACIN_ACOUT((899 - 9)- 30*11), true),
			24 => (ACIN_ipd(17)'last_event, tpd_ACIN_ACOUT((899 - 9)- 30*12), true),
			25 => (ACIN_ipd(16)'last_event, tpd_ACIN_ACOUT((899 - 9)- 30*13), true),
			26 => (ACIN_ipd(15)'last_event, tpd_ACIN_ACOUT((899 - 9)- 30*14), true),
			27 => (ACIN_ipd(14)'last_event, tpd_ACIN_ACOUT((899 - 9)- 30*15), true),
			28 => (ACIN_ipd(13)'last_event, tpd_ACIN_ACOUT((899 - 9)- 30*16), true),
			29 => (ACIN_ipd(12)'last_event, tpd_ACIN_ACOUT((899 - 9)- 30*17), true),
			30 => (ACIN_ipd(11)'last_event, tpd_ACIN_ACOUT((899 - 9)- 30*18), true),
			31 => (ACIN_ipd(10)'last_event, tpd_ACIN_ACOUT((899 - 9)- 30*19), true),
			32 => (ACIN_ipd(9)'last_event, tpd_ACIN_ACOUT((899 - 9)- 30*20), true),
			33 => (ACIN_ipd(8)'last_event, tpd_ACIN_ACOUT((899 - 9)- 30*21), true),
			34 => (ACIN_ipd(7)'last_event, tpd_ACIN_ACOUT((899 - 9)- 30*22), true),
			35 => (ACIN_ipd(6)'last_event, tpd_ACIN_ACOUT((899 - 9)- 30*23), true),
			36 => (ACIN_ipd(5)'last_event, tpd_ACIN_ACOUT((899 - 9)- 30*24), true),
			37 => (ACIN_ipd(4)'last_event, tpd_ACIN_ACOUT((899 - 9)- 30*25), true),
			38 => (ACIN_ipd(3)'last_event, tpd_ACIN_ACOUT((899 - 9)- 30*26), true),
			39 => (ACIN_ipd(2)'last_event, tpd_ACIN_ACOUT((899 - 9)- 30*27), true),
			40 => (ACIN_ipd(1)'last_event, tpd_ACIN_ACOUT((899 - 9)- 30*28), true),
			41 => (ACIN_ipd(0)'last_event, tpd_ACIN_ACOUT((899 - 9)- 30*29), true),
			42 => (CLK_dly'last_event, tpd_CLK_ACOUT(20), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> ACOUT(19),
         GlitchData	=> ACOUT_GlitchData(19),
         OutSignalName	=> "ACOUT(19)",
         OutTemp	=> ACOUT_zd(19),
         Paths		=> (
			0 => (A_ipd(19)'last_event, tpd_A_ACOUT((899 - 10)- 30*10), true),
			1 => (A_ipd(18)'last_event, tpd_A_ACOUT((899 - 10)- 30*11), true),
			2 => (A_ipd(17)'last_event, tpd_A_ACOUT((899 - 10)- 30*12), true),
			3 => (A_ipd(16)'last_event, tpd_A_ACOUT((899 - 10)- 30*13), true),
			4 => (A_ipd(15)'last_event, tpd_A_ACOUT((899 - 10)- 30*14), true),
			5 => (A_ipd(14)'last_event, tpd_A_ACOUT((899 - 10)- 30*15), true),
			6 => (A_ipd(13)'last_event, tpd_A_ACOUT((899 - 10)- 30*16), true),
			7 => (A_ipd(12)'last_event, tpd_A_ACOUT((899 - 10)- 30*17), true),
			8 => (A_ipd(11)'last_event, tpd_A_ACOUT((899 - 10)- 30*18), true),
			9 => (A_ipd(10)'last_event, tpd_A_ACOUT((899 - 10)- 30*19), true),
			10 => (A_ipd(9)'last_event, tpd_A_ACOUT((899 - 10)- 30*20), true),
			11 => (A_ipd(8)'last_event, tpd_A_ACOUT((899 - 10)- 30*21), true),
			12 => (A_ipd(7)'last_event, tpd_A_ACOUT((899 - 10)- 30*22), true),
			13 => (A_ipd(6)'last_event, tpd_A_ACOUT((899 - 10)- 30*23), true),
			14 => (A_ipd(5)'last_event, tpd_A_ACOUT((899 - 10)- 30*24), true),
			15 => (A_ipd(4)'last_event, tpd_A_ACOUT((899 - 10)- 30*25), true),
			16 => (A_ipd(3)'last_event, tpd_A_ACOUT((899 - 10)- 30*26), true),
			17 => (A_ipd(2)'last_event, tpd_A_ACOUT((899 - 10)- 30*27), true),
			18 => (A_ipd(1)'last_event, tpd_A_ACOUT((899 - 10)- 30*28), true),
			19 => (A_ipd(0)'last_event, tpd_A_ACOUT((899 - 10)- 30*29), true),
			20 => (ACIN_ipd(19)'last_event, tpd_ACIN_ACOUT((899 - 10)- 30*10), true),
			21 => (ACIN_ipd(18)'last_event, tpd_ACIN_ACOUT((899 - 10)- 30*11), true),
			22 => (ACIN_ipd(17)'last_event, tpd_ACIN_ACOUT((899 - 10)- 30*12), true),
			23 => (ACIN_ipd(16)'last_event, tpd_ACIN_ACOUT((899 - 10)- 30*13), true),
			24 => (ACIN_ipd(15)'last_event, tpd_ACIN_ACOUT((899 - 10)- 30*14), true),
			25 => (ACIN_ipd(14)'last_event, tpd_ACIN_ACOUT((899 - 10)- 30*15), true),
			26 => (ACIN_ipd(13)'last_event, tpd_ACIN_ACOUT((899 - 10)- 30*16), true),
			27 => (ACIN_ipd(12)'last_event, tpd_ACIN_ACOUT((899 - 10)- 30*17), true),
			28 => (ACIN_ipd(11)'last_event, tpd_ACIN_ACOUT((899 - 10)- 30*18), true),
			29 => (ACIN_ipd(10)'last_event, tpd_ACIN_ACOUT((899 - 10)- 30*19), true),
			30 => (ACIN_ipd(9)'last_event, tpd_ACIN_ACOUT((899 - 10)- 30*20), true),
			31 => (ACIN_ipd(8)'last_event, tpd_ACIN_ACOUT((899 - 10)- 30*21), true),
			32 => (ACIN_ipd(7)'last_event, tpd_ACIN_ACOUT((899 - 10)- 30*22), true),
			33 => (ACIN_ipd(6)'last_event, tpd_ACIN_ACOUT((899 - 10)- 30*23), true),
			34 => (ACIN_ipd(5)'last_event, tpd_ACIN_ACOUT((899 - 10)- 30*24), true),
			35 => (ACIN_ipd(4)'last_event, tpd_ACIN_ACOUT((899 - 10)- 30*25), true),
			36 => (ACIN_ipd(3)'last_event, tpd_ACIN_ACOUT((899 - 10)- 30*26), true),
			37 => (ACIN_ipd(2)'last_event, tpd_ACIN_ACOUT((899 - 10)- 30*27), true),
			38 => (ACIN_ipd(1)'last_event, tpd_ACIN_ACOUT((899 - 10)- 30*28), true),
			39 => (ACIN_ipd(0)'last_event, tpd_ACIN_ACOUT((899 - 10)- 30*29), true),
			40 => (CLK_dly'last_event, tpd_CLK_ACOUT(19), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> ACOUT(18),
         GlitchData	=> ACOUT_GlitchData(18),
         OutSignalName	=> "ACOUT(18)",
         OutTemp	=> ACOUT_zd(18),
         Paths		=> (
			0 => (A_ipd(18)'last_event, tpd_A_ACOUT((899 - 11)- 30*11), true),
			1 => (A_ipd(17)'last_event, tpd_A_ACOUT((899 - 11)- 30*12), true),
			2 => (A_ipd(16)'last_event, tpd_A_ACOUT((899 - 11)- 30*13), true),
			3 => (A_ipd(15)'last_event, tpd_A_ACOUT((899 - 11)- 30*14), true),
			4 => (A_ipd(14)'last_event, tpd_A_ACOUT((899 - 11)- 30*15), true),
			5 => (A_ipd(13)'last_event, tpd_A_ACOUT((899 - 11)- 30*16), true),
			6 => (A_ipd(12)'last_event, tpd_A_ACOUT((899 - 11)- 30*17), true),
			7 => (A_ipd(11)'last_event, tpd_A_ACOUT((899 - 11)- 30*18), true),
			8 => (A_ipd(10)'last_event, tpd_A_ACOUT((899 - 11)- 30*19), true),
			9 => (A_ipd(9)'last_event, tpd_A_ACOUT((899 - 11)- 30*20), true),
			10 => (A_ipd(8)'last_event, tpd_A_ACOUT((899 - 11)- 30*21), true),
			11 => (A_ipd(7)'last_event, tpd_A_ACOUT((899 - 11)- 30*22), true),
			12 => (A_ipd(6)'last_event, tpd_A_ACOUT((899 - 11)- 30*23), true),
			13 => (A_ipd(5)'last_event, tpd_A_ACOUT((899 - 11)- 30*24), true),
			14 => (A_ipd(4)'last_event, tpd_A_ACOUT((899 - 11)- 30*25), true),
			15 => (A_ipd(3)'last_event, tpd_A_ACOUT((899 - 11)- 30*26), true),
			16 => (A_ipd(2)'last_event, tpd_A_ACOUT((899 - 11)- 30*27), true),
			17 => (A_ipd(1)'last_event, tpd_A_ACOUT((899 - 11)- 30*28), true),
			18 => (A_ipd(0)'last_event, tpd_A_ACOUT((899 - 11)- 30*29), true),
			19 => (ACIN_ipd(18)'last_event, tpd_ACIN_ACOUT((899 - 11)- 30*11), true),
			20 => (ACIN_ipd(17)'last_event, tpd_ACIN_ACOUT((899 - 11)- 30*12), true),
			21 => (ACIN_ipd(16)'last_event, tpd_ACIN_ACOUT((899 - 11)- 30*13), true),
			22 => (ACIN_ipd(15)'last_event, tpd_ACIN_ACOUT((899 - 11)- 30*14), true),
			23 => (ACIN_ipd(14)'last_event, tpd_ACIN_ACOUT((899 - 11)- 30*15), true),
			24 => (ACIN_ipd(13)'last_event, tpd_ACIN_ACOUT((899 - 11)- 30*16), true),
			25 => (ACIN_ipd(12)'last_event, tpd_ACIN_ACOUT((899 - 11)- 30*17), true),
			26 => (ACIN_ipd(11)'last_event, tpd_ACIN_ACOUT((899 - 11)- 30*18), true),
			27 => (ACIN_ipd(10)'last_event, tpd_ACIN_ACOUT((899 - 11)- 30*19), true),
			28 => (ACIN_ipd(9)'last_event, tpd_ACIN_ACOUT((899 - 11)- 30*20), true),
			29 => (ACIN_ipd(8)'last_event, tpd_ACIN_ACOUT((899 - 11)- 30*21), true),
			30 => (ACIN_ipd(7)'last_event, tpd_ACIN_ACOUT((899 - 11)- 30*22), true),
			31 => (ACIN_ipd(6)'last_event, tpd_ACIN_ACOUT((899 - 11)- 30*23), true),
			32 => (ACIN_ipd(5)'last_event, tpd_ACIN_ACOUT((899 - 11)- 30*24), true),
			33 => (ACIN_ipd(4)'last_event, tpd_ACIN_ACOUT((899 - 11)- 30*25), true),
			34 => (ACIN_ipd(3)'last_event, tpd_ACIN_ACOUT((899 - 11)- 30*26), true),
			35 => (ACIN_ipd(2)'last_event, tpd_ACIN_ACOUT((899 - 11)- 30*27), true),
			36 => (ACIN_ipd(1)'last_event, tpd_ACIN_ACOUT((899 - 11)- 30*28), true),
			37 => (ACIN_ipd(0)'last_event, tpd_ACIN_ACOUT((899 - 11)- 30*29), true),
			38 => (CLK_dly'last_event, tpd_CLK_ACOUT(18), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> ACOUT(17),
         GlitchData	=> ACOUT_GlitchData(17),
         OutSignalName	=> "ACOUT(17)",
         OutTemp	=> ACOUT_zd(17),
         Paths		=> (
			0 => (A_ipd(17)'last_event, tpd_A_ACOUT((899 - 12)- 30*12), true),
			1 => (A_ipd(16)'last_event, tpd_A_ACOUT((899 - 12)- 30*13), true),
			2 => (A_ipd(15)'last_event, tpd_A_ACOUT((899 - 12)- 30*14), true),
			3 => (A_ipd(14)'last_event, tpd_A_ACOUT((899 - 12)- 30*15), true),
			4 => (A_ipd(13)'last_event, tpd_A_ACOUT((899 - 12)- 30*16), true),
			5 => (A_ipd(12)'last_event, tpd_A_ACOUT((899 - 12)- 30*17), true),
			6 => (A_ipd(11)'last_event, tpd_A_ACOUT((899 - 12)- 30*18), true),
			7 => (A_ipd(10)'last_event, tpd_A_ACOUT((899 - 12)- 30*19), true),
			8 => (A_ipd(9)'last_event, tpd_A_ACOUT((899 - 12)- 30*20), true),
			9 => (A_ipd(8)'last_event, tpd_A_ACOUT((899 - 12)- 30*21), true),
			10 => (A_ipd(7)'last_event, tpd_A_ACOUT((899 - 12)- 30*22), true),
			11 => (A_ipd(6)'last_event, tpd_A_ACOUT((899 - 12)- 30*23), true),
			12 => (A_ipd(5)'last_event, tpd_A_ACOUT((899 - 12)- 30*24), true),
			13 => (A_ipd(4)'last_event, tpd_A_ACOUT((899 - 12)- 30*25), true),
			14 => (A_ipd(3)'last_event, tpd_A_ACOUT((899 - 12)- 30*26), true),
			15 => (A_ipd(2)'last_event, tpd_A_ACOUT((899 - 12)- 30*27), true),
			16 => (A_ipd(1)'last_event, tpd_A_ACOUT((899 - 12)- 30*28), true),
			17 => (A_ipd(0)'last_event, tpd_A_ACOUT((899 - 12)- 30*29), true),
			18 => (ACIN_ipd(17)'last_event, tpd_ACIN_ACOUT((899 - 12)- 30*12), true),
			19 => (ACIN_ipd(16)'last_event, tpd_ACIN_ACOUT((899 - 12)- 30*13), true),
			20 => (ACIN_ipd(15)'last_event, tpd_ACIN_ACOUT((899 - 12)- 30*14), true),
			21 => (ACIN_ipd(14)'last_event, tpd_ACIN_ACOUT((899 - 12)- 30*15), true),
			22 => (ACIN_ipd(13)'last_event, tpd_ACIN_ACOUT((899 - 12)- 30*16), true),
			23 => (ACIN_ipd(12)'last_event, tpd_ACIN_ACOUT((899 - 12)- 30*17), true),
			24 => (ACIN_ipd(11)'last_event, tpd_ACIN_ACOUT((899 - 12)- 30*18), true),
			25 => (ACIN_ipd(10)'last_event, tpd_ACIN_ACOUT((899 - 12)- 30*19), true),
			26 => (ACIN_ipd(9)'last_event, tpd_ACIN_ACOUT((899 - 12)- 30*20), true),
			27 => (ACIN_ipd(8)'last_event, tpd_ACIN_ACOUT((899 - 12)- 30*21), true),
			28 => (ACIN_ipd(7)'last_event, tpd_ACIN_ACOUT((899 - 12)- 30*22), true),
			29 => (ACIN_ipd(6)'last_event, tpd_ACIN_ACOUT((899 - 12)- 30*23), true),
			30 => (ACIN_ipd(5)'last_event, tpd_ACIN_ACOUT((899 - 12)- 30*24), true),
			31 => (ACIN_ipd(4)'last_event, tpd_ACIN_ACOUT((899 - 12)- 30*25), true),
			32 => (ACIN_ipd(3)'last_event, tpd_ACIN_ACOUT((899 - 12)- 30*26), true),
			33 => (ACIN_ipd(2)'last_event, tpd_ACIN_ACOUT((899 - 12)- 30*27), true),
			34 => (ACIN_ipd(1)'last_event, tpd_ACIN_ACOUT((899 - 12)- 30*28), true),
			35 => (ACIN_ipd(0)'last_event, tpd_ACIN_ACOUT((899 - 12)- 30*29), true),
			36 => (CLK_dly'last_event, tpd_CLK_ACOUT(17), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> ACOUT(16),
         GlitchData	=> ACOUT_GlitchData(16),
         OutSignalName	=> "ACOUT(16)",
         OutTemp	=> ACOUT_zd(16),
         Paths		=> (
			0 => (A_ipd(16)'last_event, tpd_A_ACOUT((899 - 13)- 30*13), true),
			1 => (A_ipd(15)'last_event, tpd_A_ACOUT((899 - 13)- 30*14), true),
			2 => (A_ipd(14)'last_event, tpd_A_ACOUT((899 - 13)- 30*15), true),
			3 => (A_ipd(13)'last_event, tpd_A_ACOUT((899 - 13)- 30*16), true),
			4 => (A_ipd(12)'last_event, tpd_A_ACOUT((899 - 13)- 30*17), true),
			5 => (A_ipd(11)'last_event, tpd_A_ACOUT((899 - 13)- 30*18), true),
			6 => (A_ipd(10)'last_event, tpd_A_ACOUT((899 - 13)- 30*19), true),
			7 => (A_ipd(9)'last_event, tpd_A_ACOUT((899 - 13)- 30*20), true),
			8 => (A_ipd(8)'last_event, tpd_A_ACOUT((899 - 13)- 30*21), true),
			9 => (A_ipd(7)'last_event, tpd_A_ACOUT((899 - 13)- 30*22), true),
			10 => (A_ipd(6)'last_event, tpd_A_ACOUT((899 - 13)- 30*23), true),
			11 => (A_ipd(5)'last_event, tpd_A_ACOUT((899 - 13)- 30*24), true),
			12 => (A_ipd(4)'last_event, tpd_A_ACOUT((899 - 13)- 30*25), true),
			13 => (A_ipd(3)'last_event, tpd_A_ACOUT((899 - 13)- 30*26), true),
			14 => (A_ipd(2)'last_event, tpd_A_ACOUT((899 - 13)- 30*27), true),
			15 => (A_ipd(1)'last_event, tpd_A_ACOUT((899 - 13)- 30*28), true),
			16 => (A_ipd(0)'last_event, tpd_A_ACOUT((899 - 13)- 30*29), true),
			17 => (ACIN_ipd(16)'last_event, tpd_ACIN_ACOUT((899 - 13)- 30*13), true),
			18 => (ACIN_ipd(15)'last_event, tpd_ACIN_ACOUT((899 - 13)- 30*14), true),
			19 => (ACIN_ipd(14)'last_event, tpd_ACIN_ACOUT((899 - 13)- 30*15), true),
			20 => (ACIN_ipd(13)'last_event, tpd_ACIN_ACOUT((899 - 13)- 30*16), true),
			21 => (ACIN_ipd(12)'last_event, tpd_ACIN_ACOUT((899 - 13)- 30*17), true),
			22 => (ACIN_ipd(11)'last_event, tpd_ACIN_ACOUT((899 - 13)- 30*18), true),
			23 => (ACIN_ipd(10)'last_event, tpd_ACIN_ACOUT((899 - 13)- 30*19), true),
			24 => (ACIN_ipd(9)'last_event, tpd_ACIN_ACOUT((899 - 13)- 30*20), true),
			25 => (ACIN_ipd(8)'last_event, tpd_ACIN_ACOUT((899 - 13)- 30*21), true),
			26 => (ACIN_ipd(7)'last_event, tpd_ACIN_ACOUT((899 - 13)- 30*22), true),
			27 => (ACIN_ipd(6)'last_event, tpd_ACIN_ACOUT((899 - 13)- 30*23), true),
			28 => (ACIN_ipd(5)'last_event, tpd_ACIN_ACOUT((899 - 13)- 30*24), true),
			29 => (ACIN_ipd(4)'last_event, tpd_ACIN_ACOUT((899 - 13)- 30*25), true),
			30 => (ACIN_ipd(3)'last_event, tpd_ACIN_ACOUT((899 - 13)- 30*26), true),
			31 => (ACIN_ipd(2)'last_event, tpd_ACIN_ACOUT((899 - 13)- 30*27), true),
			32 => (ACIN_ipd(1)'last_event, tpd_ACIN_ACOUT((899 - 13)- 30*28), true),
			33 => (ACIN_ipd(0)'last_event, tpd_ACIN_ACOUT((899 - 13)- 30*29), true),
			34 => (CLK_dly'last_event, tpd_CLK_ACOUT(16), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> ACOUT(15),
         GlitchData	=> ACOUT_GlitchData(15),
         OutSignalName	=> "ACOUT(15)",
         OutTemp	=> ACOUT_zd(15),
         Paths		=> (
			0 => (A_ipd(15)'last_event, tpd_A_ACOUT((899 - 14)- 30*14), true),
			1 => (A_ipd(14)'last_event, tpd_A_ACOUT((899 - 14)- 30*15), true),
			2 => (A_ipd(13)'last_event, tpd_A_ACOUT((899 - 14)- 30*16), true),
			3 => (A_ipd(12)'last_event, tpd_A_ACOUT((899 - 14)- 30*17), true),
			4 => (A_ipd(11)'last_event, tpd_A_ACOUT((899 - 14)- 30*18), true),
			5 => (A_ipd(10)'last_event, tpd_A_ACOUT((899 - 14)- 30*19), true),
			6 => (A_ipd(9)'last_event, tpd_A_ACOUT((899 - 14)- 30*20), true),
			7 => (A_ipd(8)'last_event, tpd_A_ACOUT((899 - 14)- 30*21), true),
			8 => (A_ipd(7)'last_event, tpd_A_ACOUT((899 - 14)- 30*22), true),
			9 => (A_ipd(6)'last_event, tpd_A_ACOUT((899 - 14)- 30*23), true),
			10 => (A_ipd(5)'last_event, tpd_A_ACOUT((899 - 14)- 30*24), true),
			11 => (A_ipd(4)'last_event, tpd_A_ACOUT((899 - 14)- 30*25), true),
			12 => (A_ipd(3)'last_event, tpd_A_ACOUT((899 - 14)- 30*26), true),
			13 => (A_ipd(2)'last_event, tpd_A_ACOUT((899 - 14)- 30*27), true),
			14 => (A_ipd(1)'last_event, tpd_A_ACOUT((899 - 14)- 30*28), true),
			15 => (A_ipd(0)'last_event, tpd_A_ACOUT((899 - 14)- 30*29), true),
			16 => (ACIN_ipd(15)'last_event, tpd_ACIN_ACOUT((899 - 14)- 30*14), true),
			17 => (ACIN_ipd(14)'last_event, tpd_ACIN_ACOUT((899 - 14)- 30*15), true),
			18 => (ACIN_ipd(13)'last_event, tpd_ACIN_ACOUT((899 - 14)- 30*16), true),
			19 => (ACIN_ipd(12)'last_event, tpd_ACIN_ACOUT((899 - 14)- 30*17), true),
			20 => (ACIN_ipd(11)'last_event, tpd_ACIN_ACOUT((899 - 14)- 30*18), true),
			21 => (ACIN_ipd(10)'last_event, tpd_ACIN_ACOUT((899 - 14)- 30*19), true),
			22 => (ACIN_ipd(9)'last_event, tpd_ACIN_ACOUT((899 - 14)- 30*20), true),
			23 => (ACIN_ipd(8)'last_event, tpd_ACIN_ACOUT((899 - 14)- 30*21), true),
			24 => (ACIN_ipd(7)'last_event, tpd_ACIN_ACOUT((899 - 14)- 30*22), true),
			25 => (ACIN_ipd(6)'last_event, tpd_ACIN_ACOUT((899 - 14)- 30*23), true),
			26 => (ACIN_ipd(5)'last_event, tpd_ACIN_ACOUT((899 - 14)- 30*24), true),
			27 => (ACIN_ipd(4)'last_event, tpd_ACIN_ACOUT((899 - 14)- 30*25), true),
			28 => (ACIN_ipd(3)'last_event, tpd_ACIN_ACOUT((899 - 14)- 30*26), true),
			29 => (ACIN_ipd(2)'last_event, tpd_ACIN_ACOUT((899 - 14)- 30*27), true),
			30 => (ACIN_ipd(1)'last_event, tpd_ACIN_ACOUT((899 - 14)- 30*28), true),
			31 => (ACIN_ipd(0)'last_event, tpd_ACIN_ACOUT((899 - 14)- 30*29), true),
			32 => (CLK_dly'last_event, tpd_CLK_ACOUT(15), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> ACOUT(14),
         GlitchData	=> ACOUT_GlitchData(14),
         OutSignalName	=> "ACOUT(14)",
         OutTemp	=> ACOUT_zd(14),
         Paths		=> (
			0 => (A_ipd(14)'last_event, tpd_A_ACOUT((899 - 15)- 30*15), true),
			1 => (A_ipd(13)'last_event, tpd_A_ACOUT((899 - 15)- 30*16), true),
			2 => (A_ipd(12)'last_event, tpd_A_ACOUT((899 - 15)- 30*17), true),
			3 => (A_ipd(11)'last_event, tpd_A_ACOUT((899 - 15)- 30*18), true),
			4 => (A_ipd(10)'last_event, tpd_A_ACOUT((899 - 15)- 30*19), true),
			5 => (A_ipd(9)'last_event, tpd_A_ACOUT((899 - 15)- 30*20), true),
			6 => (A_ipd(8)'last_event, tpd_A_ACOUT((899 - 15)- 30*21), true),
			7 => (A_ipd(7)'last_event, tpd_A_ACOUT((899 - 15)- 30*22), true),
			8 => (A_ipd(6)'last_event, tpd_A_ACOUT((899 - 15)- 30*23), true),
			9 => (A_ipd(5)'last_event, tpd_A_ACOUT((899 - 15)- 30*24), true),
			10 => (A_ipd(4)'last_event, tpd_A_ACOUT((899 - 15)- 30*25), true),
			11 => (A_ipd(3)'last_event, tpd_A_ACOUT((899 - 15)- 30*26), true),
			12 => (A_ipd(2)'last_event, tpd_A_ACOUT((899 - 15)- 30*27), true),
			13 => (A_ipd(1)'last_event, tpd_A_ACOUT((899 - 15)- 30*28), true),
			14 => (A_ipd(0)'last_event, tpd_A_ACOUT((899 - 15)- 30*29), true),
			15 => (ACIN_ipd(14)'last_event, tpd_ACIN_ACOUT((899 - 15)- 30*15), true),
			16 => (ACIN_ipd(13)'last_event, tpd_ACIN_ACOUT((899 - 15)- 30*16), true),
			17 => (ACIN_ipd(12)'last_event, tpd_ACIN_ACOUT((899 - 15)- 30*17), true),
			18 => (ACIN_ipd(11)'last_event, tpd_ACIN_ACOUT((899 - 15)- 30*18), true),
			19 => (ACIN_ipd(10)'last_event, tpd_ACIN_ACOUT((899 - 15)- 30*19), true),
			20 => (ACIN_ipd(9)'last_event, tpd_ACIN_ACOUT((899 - 15)- 30*20), true),
			21 => (ACIN_ipd(8)'last_event, tpd_ACIN_ACOUT((899 - 15)- 30*21), true),
			22 => (ACIN_ipd(7)'last_event, tpd_ACIN_ACOUT((899 - 15)- 30*22), true),
			23 => (ACIN_ipd(6)'last_event, tpd_ACIN_ACOUT((899 - 15)- 30*23), true),
			24 => (ACIN_ipd(5)'last_event, tpd_ACIN_ACOUT((899 - 15)- 30*24), true),
			25 => (ACIN_ipd(4)'last_event, tpd_ACIN_ACOUT((899 - 15)- 30*25), true),
			26 => (ACIN_ipd(3)'last_event, tpd_ACIN_ACOUT((899 - 15)- 30*26), true),
			27 => (ACIN_ipd(2)'last_event, tpd_ACIN_ACOUT((899 - 15)- 30*27), true),
			28 => (ACIN_ipd(1)'last_event, tpd_ACIN_ACOUT((899 - 15)- 30*28), true),
			29 => (ACIN_ipd(0)'last_event, tpd_ACIN_ACOUT((899 - 15)- 30*29), true),
			30 => (CLK_dly'last_event, tpd_CLK_ACOUT(14), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> ACOUT(13),
         GlitchData	=> ACOUT_GlitchData(13),
         OutSignalName	=> "ACOUT(13)",
         OutTemp	=> ACOUT_zd(13),
         Paths		=> (
			0 => (A_ipd(13)'last_event, tpd_A_ACOUT((899 - 16)- 30*16), true),
			1 => (A_ipd(12)'last_event, tpd_A_ACOUT((899 - 16)- 30*17), true),
			2 => (A_ipd(11)'last_event, tpd_A_ACOUT((899 - 16)- 30*18), true),
			3 => (A_ipd(10)'last_event, tpd_A_ACOUT((899 - 16)- 30*19), true),
			4 => (A_ipd(9)'last_event, tpd_A_ACOUT((899 - 16)- 30*20), true),
			5 => (A_ipd(8)'last_event, tpd_A_ACOUT((899 - 16)- 30*21), true),
			6 => (A_ipd(7)'last_event, tpd_A_ACOUT((899 - 16)- 30*22), true),
			7 => (A_ipd(6)'last_event, tpd_A_ACOUT((899 - 16)- 30*23), true),
			8 => (A_ipd(5)'last_event, tpd_A_ACOUT((899 - 16)- 30*24), true),
			9 => (A_ipd(4)'last_event, tpd_A_ACOUT((899 - 16)- 30*25), true),
			10 => (A_ipd(3)'last_event, tpd_A_ACOUT((899 - 16)- 30*26), true),
			11 => (A_ipd(2)'last_event, tpd_A_ACOUT((899 - 16)- 30*27), true),
			12 => (A_ipd(1)'last_event, tpd_A_ACOUT((899 - 16)- 30*28), true),
			13 => (A_ipd(0)'last_event, tpd_A_ACOUT((899 - 16)- 30*29), true),
			14 => (ACIN_ipd(13)'last_event, tpd_ACIN_ACOUT((899 - 16)- 30*16), true),
			15 => (ACIN_ipd(12)'last_event, tpd_ACIN_ACOUT((899 - 16)- 30*17), true),
			16 => (ACIN_ipd(11)'last_event, tpd_ACIN_ACOUT((899 - 16)- 30*18), true),
			17 => (ACIN_ipd(10)'last_event, tpd_ACIN_ACOUT((899 - 16)- 30*19), true),
			18 => (ACIN_ipd(9)'last_event, tpd_ACIN_ACOUT((899 - 16)- 30*20), true),
			19 => (ACIN_ipd(8)'last_event, tpd_ACIN_ACOUT((899 - 16)- 30*21), true),
			20 => (ACIN_ipd(7)'last_event, tpd_ACIN_ACOUT((899 - 16)- 30*22), true),
			21 => (ACIN_ipd(6)'last_event, tpd_ACIN_ACOUT((899 - 16)- 30*23), true),
			22 => (ACIN_ipd(5)'last_event, tpd_ACIN_ACOUT((899 - 16)- 30*24), true),
			23 => (ACIN_ipd(4)'last_event, tpd_ACIN_ACOUT((899 - 16)- 30*25), true),
			24 => (ACIN_ipd(3)'last_event, tpd_ACIN_ACOUT((899 - 16)- 30*26), true),
			25 => (ACIN_ipd(2)'last_event, tpd_ACIN_ACOUT((899 - 16)- 30*27), true),
			26 => (ACIN_ipd(1)'last_event, tpd_ACIN_ACOUT((899 - 16)- 30*28), true),
			27 => (ACIN_ipd(0)'last_event, tpd_ACIN_ACOUT((899 - 16)- 30*29), true),
			28 => (CLK_dly'last_event, tpd_CLK_ACOUT(13), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> ACOUT(12),
         GlitchData	=> ACOUT_GlitchData(12),
         OutSignalName	=> "ACOUT(12)",
         OutTemp	=> ACOUT_zd(12),
         Paths		=> (
			0 => (A_ipd(12)'last_event, tpd_A_ACOUT((899 - 17)- 30*17), true),
			1 => (A_ipd(11)'last_event, tpd_A_ACOUT((899 - 17)- 30*18), true),
			2 => (A_ipd(10)'last_event, tpd_A_ACOUT((899 - 17)- 30*19), true),
			3 => (A_ipd(9)'last_event, tpd_A_ACOUT((899 - 17)- 30*20), true),
			4 => (A_ipd(8)'last_event, tpd_A_ACOUT((899 - 17)- 30*21), true),
			5 => (A_ipd(7)'last_event, tpd_A_ACOUT((899 - 17)- 30*22), true),
			6 => (A_ipd(6)'last_event, tpd_A_ACOUT((899 - 17)- 30*23), true),
			7 => (A_ipd(5)'last_event, tpd_A_ACOUT((899 - 17)- 30*24), true),
			8 => (A_ipd(4)'last_event, tpd_A_ACOUT((899 - 17)- 30*25), true),
			9 => (A_ipd(3)'last_event, tpd_A_ACOUT((899 - 17)- 30*26), true),
			10 => (A_ipd(2)'last_event, tpd_A_ACOUT((899 - 17)- 30*27), true),
			11 => (A_ipd(1)'last_event, tpd_A_ACOUT((899 - 17)- 30*28), true),
			12 => (A_ipd(0)'last_event, tpd_A_ACOUT((899 - 17)- 30*29), true),
			13 => (ACIN_ipd(12)'last_event, tpd_ACIN_ACOUT((899 - 17)- 30*17), true),
			14 => (ACIN_ipd(11)'last_event, tpd_ACIN_ACOUT((899 - 17)- 30*18), true),
			15 => (ACIN_ipd(10)'last_event, tpd_ACIN_ACOUT((899 - 17)- 30*19), true),
			16 => (ACIN_ipd(9)'last_event, tpd_ACIN_ACOUT((899 - 17)- 30*20), true),
			17 => (ACIN_ipd(8)'last_event, tpd_ACIN_ACOUT((899 - 17)- 30*21), true),
			18 => (ACIN_ipd(7)'last_event, tpd_ACIN_ACOUT((899 - 17)- 30*22), true),
			19 => (ACIN_ipd(6)'last_event, tpd_ACIN_ACOUT((899 - 17)- 30*23), true),
			20 => (ACIN_ipd(5)'last_event, tpd_ACIN_ACOUT((899 - 17)- 30*24), true),
			21 => (ACIN_ipd(4)'last_event, tpd_ACIN_ACOUT((899 - 17)- 30*25), true),
			22 => (ACIN_ipd(3)'last_event, tpd_ACIN_ACOUT((899 - 17)- 30*26), true),
			23 => (ACIN_ipd(2)'last_event, tpd_ACIN_ACOUT((899 - 17)- 30*27), true),
			24 => (ACIN_ipd(1)'last_event, tpd_ACIN_ACOUT((899 - 17)- 30*28), true),
			25 => (ACIN_ipd(0)'last_event, tpd_ACIN_ACOUT((899 - 17)- 30*29), true),
			26 => (CLK_dly'last_event, tpd_CLK_ACOUT(12), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> ACOUT(11),
         GlitchData	=> ACOUT_GlitchData(11),
         OutSignalName	=> "ACOUT(11)",
         OutTemp	=> ACOUT_zd(11),
         Paths		=> (
			0 => (A_ipd(11)'last_event, tpd_A_ACOUT((899 - 18)- 30*18), true),
			1 => (A_ipd(10)'last_event, tpd_A_ACOUT((899 - 18)- 30*19), true),
			2 => (A_ipd(9)'last_event, tpd_A_ACOUT((899 - 18)- 30*20), true),
			3 => (A_ipd(8)'last_event, tpd_A_ACOUT((899 - 18)- 30*21), true),
			4 => (A_ipd(7)'last_event, tpd_A_ACOUT((899 - 18)- 30*22), true),
			5 => (A_ipd(6)'last_event, tpd_A_ACOUT((899 - 18)- 30*23), true),
			6 => (A_ipd(5)'last_event, tpd_A_ACOUT((899 - 18)- 30*24), true),
			7 => (A_ipd(4)'last_event, tpd_A_ACOUT((899 - 18)- 30*25), true),
			8 => (A_ipd(3)'last_event, tpd_A_ACOUT((899 - 18)- 30*26), true),
			9 => (A_ipd(2)'last_event, tpd_A_ACOUT((899 - 18)- 30*27), true),
			10 => (A_ipd(1)'last_event, tpd_A_ACOUT((899 - 18)- 30*28), true),
			11 => (A_ipd(0)'last_event, tpd_A_ACOUT((899 - 18)- 30*29), true),
			12 => (ACIN_ipd(11)'last_event, tpd_ACIN_ACOUT((899 - 18)- 30*18), true),
			13 => (ACIN_ipd(10)'last_event, tpd_ACIN_ACOUT((899 - 18)- 30*19), true),
			14 => (ACIN_ipd(9)'last_event, tpd_ACIN_ACOUT((899 - 18)- 30*20), true),
			15 => (ACIN_ipd(8)'last_event, tpd_ACIN_ACOUT((899 - 18)- 30*21), true),
			16 => (ACIN_ipd(7)'last_event, tpd_ACIN_ACOUT((899 - 18)- 30*22), true),
			17 => (ACIN_ipd(6)'last_event, tpd_ACIN_ACOUT((899 - 18)- 30*23), true),
			18 => (ACIN_ipd(5)'last_event, tpd_ACIN_ACOUT((899 - 18)- 30*24), true),
			19 => (ACIN_ipd(4)'last_event, tpd_ACIN_ACOUT((899 - 18)- 30*25), true),
			20 => (ACIN_ipd(3)'last_event, tpd_ACIN_ACOUT((899 - 18)- 30*26), true),
			21 => (ACIN_ipd(2)'last_event, tpd_ACIN_ACOUT((899 - 18)- 30*27), true),
			22 => (ACIN_ipd(1)'last_event, tpd_ACIN_ACOUT((899 - 18)- 30*28), true),
			23 => (ACIN_ipd(0)'last_event, tpd_ACIN_ACOUT((899 - 18)- 30*29), true),
			24 => (CLK_dly'last_event, tpd_CLK_ACOUT(11), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> ACOUT(10),
         GlitchData	=> ACOUT_GlitchData(10),
         OutSignalName	=> "ACOUT(10)",
         OutTemp	=> ACOUT_zd(10),
         Paths		=> (
			0 => (A_ipd(10)'last_event, tpd_A_ACOUT((899 - 19)- 30*19), true),
			1 => (A_ipd(9)'last_event, tpd_A_ACOUT((899 - 19)- 30*20), true),
			2 => (A_ipd(8)'last_event, tpd_A_ACOUT((899 - 19)- 30*21), true),
			3 => (A_ipd(7)'last_event, tpd_A_ACOUT((899 - 19)- 30*22), true),
			4 => (A_ipd(6)'last_event, tpd_A_ACOUT((899 - 19)- 30*23), true),
			5 => (A_ipd(5)'last_event, tpd_A_ACOUT((899 - 19)- 30*24), true),
			6 => (A_ipd(4)'last_event, tpd_A_ACOUT((899 - 19)- 30*25), true),
			7 => (A_ipd(3)'last_event, tpd_A_ACOUT((899 - 19)- 30*26), true),
			8 => (A_ipd(2)'last_event, tpd_A_ACOUT((899 - 19)- 30*27), true),
			9 => (A_ipd(1)'last_event, tpd_A_ACOUT((899 - 19)- 30*28), true),
			10 => (A_ipd(0)'last_event, tpd_A_ACOUT((899 - 19)- 30*29), true),
			11 => (ACIN_ipd(10)'last_event, tpd_ACIN_ACOUT((899 - 19)- 30*19), true),
			12 => (ACIN_ipd(9)'last_event, tpd_ACIN_ACOUT((899 - 19)- 30*20), true),
			13 => (ACIN_ipd(8)'last_event, tpd_ACIN_ACOUT((899 - 19)- 30*21), true),
			14 => (ACIN_ipd(7)'last_event, tpd_ACIN_ACOUT((899 - 19)- 30*22), true),
			15 => (ACIN_ipd(6)'last_event, tpd_ACIN_ACOUT((899 - 19)- 30*23), true),
			16 => (ACIN_ipd(5)'last_event, tpd_ACIN_ACOUT((899 - 19)- 30*24), true),
			17 => (ACIN_ipd(4)'last_event, tpd_ACIN_ACOUT((899 - 19)- 30*25), true),
			18 => (ACIN_ipd(3)'last_event, tpd_ACIN_ACOUT((899 - 19)- 30*26), true),
			19 => (ACIN_ipd(2)'last_event, tpd_ACIN_ACOUT((899 - 19)- 30*27), true),
			20 => (ACIN_ipd(1)'last_event, tpd_ACIN_ACOUT((899 - 19)- 30*28), true),
			21 => (ACIN_ipd(0)'last_event, tpd_ACIN_ACOUT((899 - 19)- 30*29), true),
			22 => (CLK_dly'last_event, tpd_CLK_ACOUT(10), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> ACOUT(9),
         GlitchData	=> ACOUT_GlitchData(9),
         OutSignalName	=> "ACOUT(9)",
         OutTemp	=> ACOUT_zd(9),
         Paths		=> (
			0 => (A_ipd(9)'last_event, tpd_A_ACOUT((899 - 20)- 30*20), true),
			1 => (A_ipd(8)'last_event, tpd_A_ACOUT((899 - 20)- 30*21), true),
			2 => (A_ipd(7)'last_event, tpd_A_ACOUT((899 - 20)- 30*22), true),
			3 => (A_ipd(6)'last_event, tpd_A_ACOUT((899 - 20)- 30*23), true),
			4 => (A_ipd(5)'last_event, tpd_A_ACOUT((899 - 20)- 30*24), true),
			5 => (A_ipd(4)'last_event, tpd_A_ACOUT((899 - 20)- 30*25), true),
			6 => (A_ipd(3)'last_event, tpd_A_ACOUT((899 - 20)- 30*26), true),
			7 => (A_ipd(2)'last_event, tpd_A_ACOUT((899 - 20)- 30*27), true),
			8 => (A_ipd(1)'last_event, tpd_A_ACOUT((899 - 20)- 30*28), true),
			9 => (A_ipd(0)'last_event, tpd_A_ACOUT((899 - 20)- 30*29), true),
			10 => (ACIN_ipd(9)'last_event, tpd_ACIN_ACOUT((899 - 20)- 30*20), true),
			11 => (ACIN_ipd(8)'last_event, tpd_ACIN_ACOUT((899 - 20)- 30*21), true),
			12 => (ACIN_ipd(7)'last_event, tpd_ACIN_ACOUT((899 - 20)- 30*22), true),
			13 => (ACIN_ipd(6)'last_event, tpd_ACIN_ACOUT((899 - 20)- 30*23), true),
			14 => (ACIN_ipd(5)'last_event, tpd_ACIN_ACOUT((899 - 20)- 30*24), true),
			15 => (ACIN_ipd(4)'last_event, tpd_ACIN_ACOUT((899 - 20)- 30*25), true),
			16 => (ACIN_ipd(3)'last_event, tpd_ACIN_ACOUT((899 - 20)- 30*26), true),
			17 => (ACIN_ipd(2)'last_event, tpd_ACIN_ACOUT((899 - 20)- 30*27), true),
			18 => (ACIN_ipd(1)'last_event, tpd_ACIN_ACOUT((899 - 20)- 30*28), true),
			19 => (ACIN_ipd(0)'last_event, tpd_ACIN_ACOUT((899 - 20)- 30*29), true),
			20 => (CLK_dly'last_event, tpd_CLK_ACOUT(9), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> ACOUT(8),
         GlitchData	=> ACOUT_GlitchData(8),
         OutSignalName	=> "ACOUT(8)",
         OutTemp	=> ACOUT_zd(8),
         Paths		=> (
			0 => (A_ipd(8)'last_event, tpd_A_ACOUT((899 - 21)- 30*21), true),
			1 => (A_ipd(7)'last_event, tpd_A_ACOUT((899 - 21)- 30*22), true),
			2 => (A_ipd(6)'last_event, tpd_A_ACOUT((899 - 21)- 30*23), true),
			3 => (A_ipd(5)'last_event, tpd_A_ACOUT((899 - 21)- 30*24), true),
			4 => (A_ipd(4)'last_event, tpd_A_ACOUT((899 - 21)- 30*25), true),
			5 => (A_ipd(3)'last_event, tpd_A_ACOUT((899 - 21)- 30*26), true),
			6 => (A_ipd(2)'last_event, tpd_A_ACOUT((899 - 21)- 30*27), true),
			7 => (A_ipd(1)'last_event, tpd_A_ACOUT((899 - 21)- 30*28), true),
			8 => (A_ipd(0)'last_event, tpd_A_ACOUT((899 - 21)- 30*29), true),
			9 => (ACIN_ipd(8)'last_event, tpd_ACIN_ACOUT((899 - 21)- 30*21), true),
			10 => (ACIN_ipd(7)'last_event, tpd_ACIN_ACOUT((899 - 21)- 30*22), true),
			11 => (ACIN_ipd(6)'last_event, tpd_ACIN_ACOUT((899 - 21)- 30*23), true),
			12 => (ACIN_ipd(5)'last_event, tpd_ACIN_ACOUT((899 - 21)- 30*24), true),
			13 => (ACIN_ipd(4)'last_event, tpd_ACIN_ACOUT((899 - 21)- 30*25), true),
			14 => (ACIN_ipd(3)'last_event, tpd_ACIN_ACOUT((899 - 21)- 30*26), true),
			15 => (ACIN_ipd(2)'last_event, tpd_ACIN_ACOUT((899 - 21)- 30*27), true),
			16 => (ACIN_ipd(1)'last_event, tpd_ACIN_ACOUT((899 - 21)- 30*28), true),
			17 => (ACIN_ipd(0)'last_event, tpd_ACIN_ACOUT((899 - 21)- 30*29), true),
			18 => (CLK_dly'last_event, tpd_CLK_ACOUT(8), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> ACOUT(7),
         GlitchData	=> ACOUT_GlitchData(7),
         OutSignalName	=> "ACOUT(7)",
         OutTemp	=> ACOUT_zd(7),
         Paths		=> (
			0 => (A_ipd(7)'last_event, tpd_A_ACOUT((899 - 22)- 30*22), true),
			1 => (A_ipd(6)'last_event, tpd_A_ACOUT((899 - 22)- 30*23), true),
			2 => (A_ipd(5)'last_event, tpd_A_ACOUT((899 - 22)- 30*24), true),
			3 => (A_ipd(4)'last_event, tpd_A_ACOUT((899 - 22)- 30*25), true),
			4 => (A_ipd(3)'last_event, tpd_A_ACOUT((899 - 22)- 30*26), true),
			5 => (A_ipd(2)'last_event, tpd_A_ACOUT((899 - 22)- 30*27), true),
			6 => (A_ipd(1)'last_event, tpd_A_ACOUT((899 - 22)- 30*28), true),
			7 => (A_ipd(0)'last_event, tpd_A_ACOUT((899 - 22)- 30*29), true),
			8 => (ACIN_ipd(7)'last_event, tpd_ACIN_ACOUT((899 - 22)- 30*22), true),
			9 => (ACIN_ipd(6)'last_event, tpd_ACIN_ACOUT((899 - 22)- 30*23), true),
			10 => (ACIN_ipd(5)'last_event, tpd_ACIN_ACOUT((899 - 22)- 30*24), true),
			11 => (ACIN_ipd(4)'last_event, tpd_ACIN_ACOUT((899 - 22)- 30*25), true),
			12 => (ACIN_ipd(3)'last_event, tpd_ACIN_ACOUT((899 - 22)- 30*26), true),
			13 => (ACIN_ipd(2)'last_event, tpd_ACIN_ACOUT((899 - 22)- 30*27), true),
			14 => (ACIN_ipd(1)'last_event, tpd_ACIN_ACOUT((899 - 22)- 30*28), true),
			15 => (ACIN_ipd(0)'last_event, tpd_ACIN_ACOUT((899 - 22)- 30*29), true),
			16 => (CLK_dly'last_event, tpd_CLK_ACOUT(7), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> ACOUT(6),
         GlitchData	=> ACOUT_GlitchData(6),
         OutSignalName	=> "ACOUT(6)",
         OutTemp	=> ACOUT_zd(6),
         Paths		=> (
			0 => (A_ipd(6)'last_event, tpd_A_ACOUT((899 - 23)- 30*23), true),
			1 => (A_ipd(5)'last_event, tpd_A_ACOUT((899 - 23)- 30*24), true),
			2 => (A_ipd(4)'last_event, tpd_A_ACOUT((899 - 23)- 30*25), true),
			3 => (A_ipd(3)'last_event, tpd_A_ACOUT((899 - 23)- 30*26), true),
			4 => (A_ipd(2)'last_event, tpd_A_ACOUT((899 - 23)- 30*27), true),
			5 => (A_ipd(1)'last_event, tpd_A_ACOUT((899 - 23)- 30*28), true),
			6 => (A_ipd(0)'last_event, tpd_A_ACOUT((899 - 23)- 30*29), true),
			7 => (ACIN_ipd(6)'last_event, tpd_ACIN_ACOUT((899 - 23)- 30*23), true),
			8 => (ACIN_ipd(5)'last_event, tpd_ACIN_ACOUT((899 - 23)- 30*24), true),
			9 => (ACIN_ipd(4)'last_event, tpd_ACIN_ACOUT((899 - 23)- 30*25), true),
			10 => (ACIN_ipd(3)'last_event, tpd_ACIN_ACOUT((899 - 23)- 30*26), true),
			11 => (ACIN_ipd(2)'last_event, tpd_ACIN_ACOUT((899 - 23)- 30*27), true),
			12 => (ACIN_ipd(1)'last_event, tpd_ACIN_ACOUT((899 - 23)- 30*28), true),
			13 => (ACIN_ipd(0)'last_event, tpd_ACIN_ACOUT((899 - 23)- 30*29), true),
			14 => (CLK_dly'last_event, tpd_CLK_ACOUT(6), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> ACOUT(5),
         GlitchData	=> ACOUT_GlitchData(5),
         OutSignalName	=> "ACOUT(5)",
         OutTemp	=> ACOUT_zd(5),
         Paths		=> (
			0 => (A_ipd(5)'last_event, tpd_A_ACOUT((899 - 24)- 30*24), true),
			1 => (A_ipd(4)'last_event, tpd_A_ACOUT((899 - 24)- 30*25), true),
			2 => (A_ipd(3)'last_event, tpd_A_ACOUT((899 - 24)- 30*26), true),
			3 => (A_ipd(2)'last_event, tpd_A_ACOUT((899 - 24)- 30*27), true),
			4 => (A_ipd(1)'last_event, tpd_A_ACOUT((899 - 24)- 30*28), true),
			5 => (A_ipd(0)'last_event, tpd_A_ACOUT((899 - 24)- 30*29), true),
			6 => (ACIN_ipd(5)'last_event, tpd_ACIN_ACOUT((899 - 24)- 30*24), true),
			7 => (ACIN_ipd(4)'last_event, tpd_ACIN_ACOUT((899 - 24)- 30*25), true),
			8 => (ACIN_ipd(3)'last_event, tpd_ACIN_ACOUT((899 - 24)- 30*26), true),
			9 => (ACIN_ipd(2)'last_event, tpd_ACIN_ACOUT((899 - 24)- 30*27), true),
			10 => (ACIN_ipd(1)'last_event, tpd_ACIN_ACOUT((899 - 24)- 30*28), true),
			11 => (ACIN_ipd(0)'last_event, tpd_ACIN_ACOUT((899 - 24)- 30*29), true),
			12 => (CLK_dly'last_event, tpd_CLK_ACOUT(5), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> ACOUT(4),
         GlitchData	=> ACOUT_GlitchData(4),
         OutSignalName	=> "ACOUT(4)",
         OutTemp	=> ACOUT_zd(4),
         Paths		=> (
			0 => (A_ipd(4)'last_event, tpd_A_ACOUT((899 - 25)- 30*25), true),
			1 => (A_ipd(3)'last_event, tpd_A_ACOUT((899 - 25)- 30*26), true),
			2 => (A_ipd(2)'last_event, tpd_A_ACOUT((899 - 25)- 30*27), true),
			3 => (A_ipd(1)'last_event, tpd_A_ACOUT((899 - 25)- 30*28), true),
			4 => (A_ipd(0)'last_event, tpd_A_ACOUT((899 - 25)- 30*29), true),
			5 => (ACIN_ipd(4)'last_event, tpd_ACIN_ACOUT((899 - 25)- 30*25), true),
			6 => (ACIN_ipd(3)'last_event, tpd_ACIN_ACOUT((899 - 25)- 30*26), true),
			7 => (ACIN_ipd(2)'last_event, tpd_ACIN_ACOUT((899 - 25)- 30*27), true),
			8 => (ACIN_ipd(1)'last_event, tpd_ACIN_ACOUT((899 - 25)- 30*28), true),
			9 => (ACIN_ipd(0)'last_event, tpd_ACIN_ACOUT((899 - 25)- 30*29), true),
			10 => (CLK_dly'last_event, tpd_CLK_ACOUT(4), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> ACOUT(3),
         GlitchData	=> ACOUT_GlitchData(3),
         OutSignalName	=> "ACOUT(3)",
         OutTemp	=> ACOUT_zd(3),
         Paths		=> (
			0 => (A_ipd(3)'last_event, tpd_A_ACOUT((899 - 26)- 30*26), true),
			1 => (A_ipd(2)'last_event, tpd_A_ACOUT((899 - 26)- 30*27), true),
			2 => (A_ipd(1)'last_event, tpd_A_ACOUT((899 - 26)- 30*28), true),
			3 => (A_ipd(0)'last_event, tpd_A_ACOUT((899 - 26)- 30*29), true),
			4 => (ACIN_ipd(3)'last_event, tpd_ACIN_ACOUT((899 - 26)- 30*26), true),
			5 => (ACIN_ipd(2)'last_event, tpd_ACIN_ACOUT((899 - 26)- 30*27), true),
			6 => (ACIN_ipd(1)'last_event, tpd_ACIN_ACOUT((899 - 26)- 30*28), true),
			7 => (ACIN_ipd(0)'last_event, tpd_ACIN_ACOUT((899 - 26)- 30*29), true),
			8 => (CLK_dly'last_event, tpd_CLK_ACOUT(3), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> ACOUT(2),
         GlitchData	=> ACOUT_GlitchData(2),
         OutSignalName	=> "ACOUT(2)",
         OutTemp	=> ACOUT_zd(2),
         Paths		=> (
			0 => (A_ipd(2)'last_event, tpd_A_ACOUT((899 - 27)- 30*27), true),
			1 => (A_ipd(1)'last_event, tpd_A_ACOUT((899 - 27)- 30*28), true),
			2 => (A_ipd(0)'last_event, tpd_A_ACOUT((899 - 27)- 30*29), true),
			3 => (ACIN_ipd(2)'last_event, tpd_ACIN_ACOUT((899 - 27)- 30*27), true),
			4 => (ACIN_ipd(1)'last_event, tpd_ACIN_ACOUT((899 - 27)- 30*28), true),
			5 => (ACIN_ipd(0)'last_event, tpd_ACIN_ACOUT((899 - 27)- 30*29), true),
			6 => (CLK_dly'last_event, tpd_CLK_ACOUT(2), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> ACOUT(1),
         GlitchData	=> ACOUT_GlitchData(1),
         OutSignalName	=> "ACOUT(1)",
         OutTemp	=> ACOUT_zd(1),
         Paths		=> (
			0 => (A_ipd(1)'last_event, tpd_A_ACOUT((899 - 28)- 30*28), true),
			1 => (A_ipd(0)'last_event, tpd_A_ACOUT((899 - 28)- 30*29), true),
			2 => (ACIN_ipd(1)'last_event, tpd_ACIN_ACOUT((899 - 28)- 30*28), true),
			3 => (ACIN_ipd(0)'last_event, tpd_ACIN_ACOUT((899 - 28)- 30*29), true),
			4 => (CLK_dly'last_event, tpd_CLK_ACOUT(1), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> ACOUT(0),
         GlitchData	=> ACOUT_GlitchData(0),
         OutSignalName	=> "ACOUT(0)",
         OutTemp	=> ACOUT_zd(0),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_ACOUT((899 - 29)- 30*29), true),
			1 => (ACIN_ipd(0)'last_event, tpd_ACIN_ACOUT((899 - 29)- 30*29), true),
			2 => (CLK_dly'last_event, tpd_CLK_ACOUT(0), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> BCOUT(17),
         GlitchData	=> BCOUT_GlitchData(17),
         OutSignalName	=> "BCOUT(17)",
         OutTemp	=> BCOUT_zd(17),
         Paths		=> (
			0 => (B_ipd(17)'last_event, tpd_B_BCOUT((323 - 0)- 18*0), true),
			1 => (B_ipd(16)'last_event, tpd_B_BCOUT((323 - 0)- 18*1), true),
			2 => (B_ipd(15)'last_event, tpd_B_BCOUT((323 - 0)- 18*2), true),
			3 => (B_ipd(14)'last_event, tpd_B_BCOUT((323 - 0)- 18*3), true),
			4 => (B_ipd(13)'last_event, tpd_B_BCOUT((323 - 0)- 18*4), true),
			5 => (B_ipd(12)'last_event, tpd_B_BCOUT((323 - 0)- 18*5), true),
			6 => (B_ipd(11)'last_event, tpd_B_BCOUT((323 - 0)- 18*6), true),
			7 => (B_ipd(10)'last_event, tpd_B_BCOUT((323 - 0)- 18*7), true),
			8 => (B_ipd(9)'last_event, tpd_B_BCOUT((323 - 0)- 18*8), true),
			9 => (B_ipd(8)'last_event, tpd_B_BCOUT((323 - 0)- 18*9), true),
			10 => (B_ipd(7)'last_event, tpd_B_BCOUT((323 - 0)- 18*10), true),
			11 => (B_ipd(6)'last_event, tpd_B_BCOUT((323 - 0)- 18*11), true),
			12 => (B_ipd(5)'last_event, tpd_B_BCOUT((323 - 0)- 18*12), true),
			13 => (B_ipd(4)'last_event, tpd_B_BCOUT((323 - 0)- 18*13), true),
			14 => (B_ipd(3)'last_event, tpd_B_BCOUT((323 - 0)- 18*14), true),
			15 => (B_ipd(2)'last_event, tpd_B_BCOUT((323 - 0)- 18*15), true),
			16 => (B_ipd(1)'last_event, tpd_B_BCOUT((323 - 0)- 18*16), true),
			17 => (B_ipd(0)'last_event, tpd_B_BCOUT((323 - 0)- 18*17), true),
			18 => (BCIN_ipd(17)'last_event, tpd_BCIN_BCOUT((323 - 0)- 18*0), true),
			19 => (BCIN_ipd(16)'last_event, tpd_BCIN_BCOUT((323 - 0)- 18*1), true),
			20 => (BCIN_ipd(15)'last_event, tpd_BCIN_BCOUT((323 - 0)- 18*2), true),
			21 => (BCIN_ipd(14)'last_event, tpd_BCIN_BCOUT((323 - 0)- 18*3), true),
			22 => (BCIN_ipd(13)'last_event, tpd_BCIN_BCOUT((323 - 0)- 18*4), true),
			23 => (BCIN_ipd(12)'last_event, tpd_BCIN_BCOUT((323 - 0)- 18*5), true),
			24 => (BCIN_ipd(11)'last_event, tpd_BCIN_BCOUT((323 - 0)- 18*6), true),
			25 => (BCIN_ipd(10)'last_event, tpd_BCIN_BCOUT((323 - 0)- 18*7), true),
			26 => (BCIN_ipd(9)'last_event, tpd_BCIN_BCOUT((323 - 0)- 18*8), true),
			27 => (BCIN_ipd(8)'last_event, tpd_BCIN_BCOUT((323 - 0)- 18*9), true),
			28 => (BCIN_ipd(7)'last_event, tpd_BCIN_BCOUT((323 - 0)- 18*10), true),
			29 => (BCIN_ipd(6)'last_event, tpd_BCIN_BCOUT((323 - 0)- 18*11), true),
			30 => (BCIN_ipd(5)'last_event, tpd_BCIN_BCOUT((323 - 0)- 18*12), true),
			31 => (BCIN_ipd(4)'last_event, tpd_BCIN_BCOUT((323 - 0)- 18*13), true),
			32 => (BCIN_ipd(3)'last_event, tpd_BCIN_BCOUT((323 - 0)- 18*14), true),
			33 => (BCIN_ipd(2)'last_event, tpd_BCIN_BCOUT((323 - 0)- 18*15), true),
			34 => (BCIN_ipd(1)'last_event, tpd_BCIN_BCOUT((323 - 0)- 18*16), true),
			35 => (BCIN_ipd(0)'last_event, tpd_BCIN_BCOUT((323 - 0)- 18*17), true),
			36 => (CLK_dly'last_event, tpd_CLK_BCOUT(17), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> BCOUT(16),
         GlitchData	=> BCOUT_GlitchData(16),
         OutSignalName	=> "BCOUT(16)",
         OutTemp	=> BCOUT_zd(16),
         Paths		=> (
			0 => (B_ipd(16)'last_event, tpd_B_BCOUT((323 - 1)- 18*1), true),
			1 => (B_ipd(15)'last_event, tpd_B_BCOUT((323 - 1)- 18*2), true),
			2 => (B_ipd(14)'last_event, tpd_B_BCOUT((323 - 1)- 18*3), true),
			3 => (B_ipd(13)'last_event, tpd_B_BCOUT((323 - 1)- 18*4), true),
			4 => (B_ipd(12)'last_event, tpd_B_BCOUT((323 - 1)- 18*5), true),
			5 => (B_ipd(11)'last_event, tpd_B_BCOUT((323 - 1)- 18*6), true),
			6 => (B_ipd(10)'last_event, tpd_B_BCOUT((323 - 1)- 18*7), true),
			7 => (B_ipd(9)'last_event, tpd_B_BCOUT((323 - 1)- 18*8), true),
			8 => (B_ipd(8)'last_event, tpd_B_BCOUT((323 - 1)- 18*9), true),
			9 => (B_ipd(7)'last_event, tpd_B_BCOUT((323 - 1)- 18*10), true),
			10 => (B_ipd(6)'last_event, tpd_B_BCOUT((323 - 1)- 18*11), true),
			11 => (B_ipd(5)'last_event, tpd_B_BCOUT((323 - 1)- 18*12), true),
			12 => (B_ipd(4)'last_event, tpd_B_BCOUT((323 - 1)- 18*13), true),
			13 => (B_ipd(3)'last_event, tpd_B_BCOUT((323 - 1)- 18*14), true),
			14 => (B_ipd(2)'last_event, tpd_B_BCOUT((323 - 1)- 18*15), true),
			15 => (B_ipd(1)'last_event, tpd_B_BCOUT((323 - 1)- 18*16), true),
			16 => (B_ipd(0)'last_event, tpd_B_BCOUT((323 - 1)- 18*17), true),
			17 => (BCIN_ipd(16)'last_event, tpd_BCIN_BCOUT((323 - 1)- 18*1), true),
			18 => (BCIN_ipd(15)'last_event, tpd_BCIN_BCOUT((323 - 1)- 18*2), true),
			19 => (BCIN_ipd(14)'last_event, tpd_BCIN_BCOUT((323 - 1)- 18*3), true),
			20 => (BCIN_ipd(13)'last_event, tpd_BCIN_BCOUT((323 - 1)- 18*4), true),
			21 => (BCIN_ipd(12)'last_event, tpd_BCIN_BCOUT((323 - 1)- 18*5), true),
			22 => (BCIN_ipd(11)'last_event, tpd_BCIN_BCOUT((323 - 1)- 18*6), true),
			23 => (BCIN_ipd(10)'last_event, tpd_BCIN_BCOUT((323 - 1)- 18*7), true),
			24 => (BCIN_ipd(9)'last_event, tpd_BCIN_BCOUT((323 - 1)- 18*8), true),
			25 => (BCIN_ipd(8)'last_event, tpd_BCIN_BCOUT((323 - 1)- 18*9), true),
			26 => (BCIN_ipd(7)'last_event, tpd_BCIN_BCOUT((323 - 1)- 18*10), true),
			27 => (BCIN_ipd(6)'last_event, tpd_BCIN_BCOUT((323 - 1)- 18*11), true),
			28 => (BCIN_ipd(5)'last_event, tpd_BCIN_BCOUT((323 - 1)- 18*12), true),
			29 => (BCIN_ipd(4)'last_event, tpd_BCIN_BCOUT((323 - 1)- 18*13), true),
			30 => (BCIN_ipd(3)'last_event, tpd_BCIN_BCOUT((323 - 1)- 18*14), true),
			31 => (BCIN_ipd(2)'last_event, tpd_BCIN_BCOUT((323 - 1)- 18*15), true),
			32 => (BCIN_ipd(1)'last_event, tpd_BCIN_BCOUT((323 - 1)- 18*16), true),
			33 => (BCIN_ipd(0)'last_event, tpd_BCIN_BCOUT((323 - 1)- 18*17), true),
			34 => (CLK_dly'last_event, tpd_CLK_BCOUT(16), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> BCOUT(15),
         GlitchData	=> BCOUT_GlitchData(15),
         OutSignalName	=> "BCOUT(15)",
         OutTemp	=> BCOUT_zd(15),
         Paths		=> (
			0 => (B_ipd(15)'last_event, tpd_B_BCOUT((323 - 2)- 18*2), true),
			1 => (B_ipd(14)'last_event, tpd_B_BCOUT((323 - 2)- 18*3), true),
			2 => (B_ipd(13)'last_event, tpd_B_BCOUT((323 - 2)- 18*4), true),
			3 => (B_ipd(12)'last_event, tpd_B_BCOUT((323 - 2)- 18*5), true),
			4 => (B_ipd(11)'last_event, tpd_B_BCOUT((323 - 2)- 18*6), true),
			5 => (B_ipd(10)'last_event, tpd_B_BCOUT((323 - 2)- 18*7), true),
			6 => (B_ipd(9)'last_event, tpd_B_BCOUT((323 - 2)- 18*8), true),
			7 => (B_ipd(8)'last_event, tpd_B_BCOUT((323 - 2)- 18*9), true),
			8 => (B_ipd(7)'last_event, tpd_B_BCOUT((323 - 2)- 18*10), true),
			9 => (B_ipd(6)'last_event, tpd_B_BCOUT((323 - 2)- 18*11), true),
			10 => (B_ipd(5)'last_event, tpd_B_BCOUT((323 - 2)- 18*12), true),
			11 => (B_ipd(4)'last_event, tpd_B_BCOUT((323 - 2)- 18*13), true),
			12 => (B_ipd(3)'last_event, tpd_B_BCOUT((323 - 2)- 18*14), true),
			13 => (B_ipd(2)'last_event, tpd_B_BCOUT((323 - 2)- 18*15), true),
			14 => (B_ipd(1)'last_event, tpd_B_BCOUT((323 - 2)- 18*16), true),
			15 => (B_ipd(0)'last_event, tpd_B_BCOUT((323 - 2)- 18*17), true),
			16 => (BCIN_ipd(15)'last_event, tpd_BCIN_BCOUT((323 - 2)- 18*2), true),
			17 => (BCIN_ipd(14)'last_event, tpd_BCIN_BCOUT((323 - 2)- 18*3), true),
			18 => (BCIN_ipd(13)'last_event, tpd_BCIN_BCOUT((323 - 2)- 18*4), true),
			19 => (BCIN_ipd(12)'last_event, tpd_BCIN_BCOUT((323 - 2)- 18*5), true),
			20 => (BCIN_ipd(11)'last_event, tpd_BCIN_BCOUT((323 - 2)- 18*6), true),
			21 => (BCIN_ipd(10)'last_event, tpd_BCIN_BCOUT((323 - 2)- 18*7), true),
			22 => (BCIN_ipd(9)'last_event, tpd_BCIN_BCOUT((323 - 2)- 18*8), true),
			23 => (BCIN_ipd(8)'last_event, tpd_BCIN_BCOUT((323 - 2)- 18*9), true),
			24 => (BCIN_ipd(7)'last_event, tpd_BCIN_BCOUT((323 - 2)- 18*10), true),
			25 => (BCIN_ipd(6)'last_event, tpd_BCIN_BCOUT((323 - 2)- 18*11), true),
			26 => (BCIN_ipd(5)'last_event, tpd_BCIN_BCOUT((323 - 2)- 18*12), true),
			27 => (BCIN_ipd(4)'last_event, tpd_BCIN_BCOUT((323 - 2)- 18*13), true),
			28 => (BCIN_ipd(3)'last_event, tpd_BCIN_BCOUT((323 - 2)- 18*14), true),
			29 => (BCIN_ipd(2)'last_event, tpd_BCIN_BCOUT((323 - 2)- 18*15), true),
			30 => (BCIN_ipd(1)'last_event, tpd_BCIN_BCOUT((323 - 2)- 18*16), true),
			31 => (BCIN_ipd(0)'last_event, tpd_BCIN_BCOUT((323 - 2)- 18*17), true),
			32 => (CLK_dly'last_event, tpd_CLK_BCOUT(15), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> BCOUT(14),
         GlitchData	=> BCOUT_GlitchData(14),
         OutSignalName	=> "BCOUT(14)",
         OutTemp	=> BCOUT_zd(14),
         Paths		=> (
			0 => (B_ipd(14)'last_event, tpd_B_BCOUT((323 - 3)- 18*3), true),
			1 => (B_ipd(13)'last_event, tpd_B_BCOUT((323 - 3)- 18*4), true),
			2 => (B_ipd(12)'last_event, tpd_B_BCOUT((323 - 3)- 18*5), true),
			3 => (B_ipd(11)'last_event, tpd_B_BCOUT((323 - 3)- 18*6), true),
			4 => (B_ipd(10)'last_event, tpd_B_BCOUT((323 - 3)- 18*7), true),
			5 => (B_ipd(9)'last_event, tpd_B_BCOUT((323 - 3)- 18*8), true),
			6 => (B_ipd(8)'last_event, tpd_B_BCOUT((323 - 3)- 18*9), true),
			7 => (B_ipd(7)'last_event, tpd_B_BCOUT((323 - 3)- 18*10), true),
			8 => (B_ipd(6)'last_event, tpd_B_BCOUT((323 - 3)- 18*11), true),
			9 => (B_ipd(5)'last_event, tpd_B_BCOUT((323 - 3)- 18*12), true),
			10 => (B_ipd(4)'last_event, tpd_B_BCOUT((323 - 3)- 18*13), true),
			11 => (B_ipd(3)'last_event, tpd_B_BCOUT((323 - 3)- 18*14), true),
			12 => (B_ipd(2)'last_event, tpd_B_BCOUT((323 - 3)- 18*15), true),
			13 => (B_ipd(1)'last_event, tpd_B_BCOUT((323 - 3)- 18*16), true),
			14 => (B_ipd(0)'last_event, tpd_B_BCOUT((323 - 3)- 18*17), true),
			15 => (BCIN_ipd(14)'last_event, tpd_BCIN_BCOUT((323 - 3)- 18*3), true),
			16 => (BCIN_ipd(13)'last_event, tpd_BCIN_BCOUT((323 - 3)- 18*4), true),
			17 => (BCIN_ipd(12)'last_event, tpd_BCIN_BCOUT((323 - 3)- 18*5), true),
			18 => (BCIN_ipd(11)'last_event, tpd_BCIN_BCOUT((323 - 3)- 18*6), true),
			19 => (BCIN_ipd(10)'last_event, tpd_BCIN_BCOUT((323 - 3)- 18*7), true),
			20 => (BCIN_ipd(9)'last_event, tpd_BCIN_BCOUT((323 - 3)- 18*8), true),
			21 => (BCIN_ipd(8)'last_event, tpd_BCIN_BCOUT((323 - 3)- 18*9), true),
			22 => (BCIN_ipd(7)'last_event, tpd_BCIN_BCOUT((323 - 3)- 18*10), true),
			23 => (BCIN_ipd(6)'last_event, tpd_BCIN_BCOUT((323 - 3)- 18*11), true),
			24 => (BCIN_ipd(5)'last_event, tpd_BCIN_BCOUT((323 - 3)- 18*12), true),
			25 => (BCIN_ipd(4)'last_event, tpd_BCIN_BCOUT((323 - 3)- 18*13), true),
			26 => (BCIN_ipd(3)'last_event, tpd_BCIN_BCOUT((323 - 3)- 18*14), true),
			27 => (BCIN_ipd(2)'last_event, tpd_BCIN_BCOUT((323 - 3)- 18*15), true),
			28 => (BCIN_ipd(1)'last_event, tpd_BCIN_BCOUT((323 - 3)- 18*16), true),
			29 => (BCIN_ipd(0)'last_event, tpd_BCIN_BCOUT((323 - 3)- 18*17), true),
			30 => (CLK_dly'last_event, tpd_CLK_BCOUT(14), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> BCOUT(13),
         GlitchData	=> BCOUT_GlitchData(13),
         OutSignalName	=> "BCOUT(13)",
         OutTemp	=> BCOUT_zd(13),
         Paths		=> (
			0 => (B_ipd(13)'last_event, tpd_B_BCOUT((323 - 4)- 18*4), true),
			1 => (B_ipd(12)'last_event, tpd_B_BCOUT((323 - 4)- 18*5), true),
			2 => (B_ipd(11)'last_event, tpd_B_BCOUT((323 - 4)- 18*6), true),
			3 => (B_ipd(10)'last_event, tpd_B_BCOUT((323 - 4)- 18*7), true),
			4 => (B_ipd(9)'last_event, tpd_B_BCOUT((323 - 4)- 18*8), true),
			5 => (B_ipd(8)'last_event, tpd_B_BCOUT((323 - 4)- 18*9), true),
			6 => (B_ipd(7)'last_event, tpd_B_BCOUT((323 - 4)- 18*10), true),
			7 => (B_ipd(6)'last_event, tpd_B_BCOUT((323 - 4)- 18*11), true),
			8 => (B_ipd(5)'last_event, tpd_B_BCOUT((323 - 4)- 18*12), true),
			9 => (B_ipd(4)'last_event, tpd_B_BCOUT((323 - 4)- 18*13), true),
			10 => (B_ipd(3)'last_event, tpd_B_BCOUT((323 - 4)- 18*14), true),
			11 => (B_ipd(2)'last_event, tpd_B_BCOUT((323 - 4)- 18*15), true),
			12 => (B_ipd(1)'last_event, tpd_B_BCOUT((323 - 4)- 18*16), true),
			13 => (B_ipd(0)'last_event, tpd_B_BCOUT((323 - 4)- 18*17), true),
			14 => (BCIN_ipd(13)'last_event, tpd_BCIN_BCOUT((323 - 4)- 18*4), true),
			15 => (BCIN_ipd(12)'last_event, tpd_BCIN_BCOUT((323 - 4)- 18*5), true),
			16 => (BCIN_ipd(11)'last_event, tpd_BCIN_BCOUT((323 - 4)- 18*6), true),
			17 => (BCIN_ipd(10)'last_event, tpd_BCIN_BCOUT((323 - 4)- 18*7), true),
			18 => (BCIN_ipd(9)'last_event, tpd_BCIN_BCOUT((323 - 4)- 18*8), true),
			19 => (BCIN_ipd(8)'last_event, tpd_BCIN_BCOUT((323 - 4)- 18*9), true),
			20 => (BCIN_ipd(7)'last_event, tpd_BCIN_BCOUT((323 - 4)- 18*10), true),
			21 => (BCIN_ipd(6)'last_event, tpd_BCIN_BCOUT((323 - 4)- 18*11), true),
			22 => (BCIN_ipd(5)'last_event, tpd_BCIN_BCOUT((323 - 4)- 18*12), true),
			23 => (BCIN_ipd(4)'last_event, tpd_BCIN_BCOUT((323 - 4)- 18*13), true),
			24 => (BCIN_ipd(3)'last_event, tpd_BCIN_BCOUT((323 - 4)- 18*14), true),
			25 => (BCIN_ipd(2)'last_event, tpd_BCIN_BCOUT((323 - 4)- 18*15), true),
			26 => (BCIN_ipd(1)'last_event, tpd_BCIN_BCOUT((323 - 4)- 18*16), true),
			27 => (BCIN_ipd(0)'last_event, tpd_BCIN_BCOUT((323 - 4)- 18*17), true),
			28 => (CLK_dly'last_event, tpd_CLK_BCOUT(13), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> BCOUT(12),
         GlitchData	=> BCOUT_GlitchData(12),
         OutSignalName	=> "BCOUT(12)",
         OutTemp	=> BCOUT_zd(12),
         Paths		=> (
			0 => (B_ipd(12)'last_event, tpd_B_BCOUT((323 - 5)- 18*5), true),
			1 => (B_ipd(11)'last_event, tpd_B_BCOUT((323 - 5)- 18*6), true),
			2 => (B_ipd(10)'last_event, tpd_B_BCOUT((323 - 5)- 18*7), true),
			3 => (B_ipd(9)'last_event, tpd_B_BCOUT((323 - 5)- 18*8), true),
			4 => (B_ipd(8)'last_event, tpd_B_BCOUT((323 - 5)- 18*9), true),
			5 => (B_ipd(7)'last_event, tpd_B_BCOUT((323 - 5)- 18*10), true),
			6 => (B_ipd(6)'last_event, tpd_B_BCOUT((323 - 5)- 18*11), true),
			7 => (B_ipd(5)'last_event, tpd_B_BCOUT((323 - 5)- 18*12), true),
			8 => (B_ipd(4)'last_event, tpd_B_BCOUT((323 - 5)- 18*13), true),
			9 => (B_ipd(3)'last_event, tpd_B_BCOUT((323 - 5)- 18*14), true),
			10 => (B_ipd(2)'last_event, tpd_B_BCOUT((323 - 5)- 18*15), true),
			11 => (B_ipd(1)'last_event, tpd_B_BCOUT((323 - 5)- 18*16), true),
			12 => (B_ipd(0)'last_event, tpd_B_BCOUT((323 - 5)- 18*17), true),
			13 => (BCIN_ipd(12)'last_event, tpd_BCIN_BCOUT((323 - 5)- 18*5), true),
			14 => (BCIN_ipd(11)'last_event, tpd_BCIN_BCOUT((323 - 5)- 18*6), true),
			15 => (BCIN_ipd(10)'last_event, tpd_BCIN_BCOUT((323 - 5)- 18*7), true),
			16 => (BCIN_ipd(9)'last_event, tpd_BCIN_BCOUT((323 - 5)- 18*8), true),
			17 => (BCIN_ipd(8)'last_event, tpd_BCIN_BCOUT((323 - 5)- 18*9), true),
			18 => (BCIN_ipd(7)'last_event, tpd_BCIN_BCOUT((323 - 5)- 18*10), true),
			19 => (BCIN_ipd(6)'last_event, tpd_BCIN_BCOUT((323 - 5)- 18*11), true),
			20 => (BCIN_ipd(5)'last_event, tpd_BCIN_BCOUT((323 - 5)- 18*12), true),
			21 => (BCIN_ipd(4)'last_event, tpd_BCIN_BCOUT((323 - 5)- 18*13), true),
			22 => (BCIN_ipd(3)'last_event, tpd_BCIN_BCOUT((323 - 5)- 18*14), true),
			23 => (BCIN_ipd(2)'last_event, tpd_BCIN_BCOUT((323 - 5)- 18*15), true),
			24 => (BCIN_ipd(1)'last_event, tpd_BCIN_BCOUT((323 - 5)- 18*16), true),
			25 => (BCIN_ipd(0)'last_event, tpd_BCIN_BCOUT((323 - 5)- 18*17), true),
			26 => (CLK_dly'last_event, tpd_CLK_BCOUT(12), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> BCOUT(11),
         GlitchData	=> BCOUT_GlitchData(11),
         OutSignalName	=> "BCOUT(11)",
         OutTemp	=> BCOUT_zd(11),
         Paths		=> (
			0 => (B_ipd(11)'last_event, tpd_B_BCOUT((323 - 6)- 18*6), true),
			1 => (B_ipd(10)'last_event, tpd_B_BCOUT((323 - 6)- 18*7), true),
			2 => (B_ipd(9)'last_event, tpd_B_BCOUT((323 - 6)- 18*8), true),
			3 => (B_ipd(8)'last_event, tpd_B_BCOUT((323 - 6)- 18*9), true),
			4 => (B_ipd(7)'last_event, tpd_B_BCOUT((323 - 6)- 18*10), true),
			5 => (B_ipd(6)'last_event, tpd_B_BCOUT((323 - 6)- 18*11), true),
			6 => (B_ipd(5)'last_event, tpd_B_BCOUT((323 - 6)- 18*12), true),
			7 => (B_ipd(4)'last_event, tpd_B_BCOUT((323 - 6)- 18*13), true),
			8 => (B_ipd(3)'last_event, tpd_B_BCOUT((323 - 6)- 18*14), true),
			9 => (B_ipd(2)'last_event, tpd_B_BCOUT((323 - 6)- 18*15), true),
			10 => (B_ipd(1)'last_event, tpd_B_BCOUT((323 - 6)- 18*16), true),
			11 => (B_ipd(0)'last_event, tpd_B_BCOUT((323 - 6)- 18*17), true),
			12 => (BCIN_ipd(11)'last_event, tpd_BCIN_BCOUT((323 - 6)- 18*6), true),
			13 => (BCIN_ipd(10)'last_event, tpd_BCIN_BCOUT((323 - 6)- 18*7), true),
			14 => (BCIN_ipd(9)'last_event, tpd_BCIN_BCOUT((323 - 6)- 18*8), true),
			15 => (BCIN_ipd(8)'last_event, tpd_BCIN_BCOUT((323 - 6)- 18*9), true),
			16 => (BCIN_ipd(7)'last_event, tpd_BCIN_BCOUT((323 - 6)- 18*10), true),
			17 => (BCIN_ipd(6)'last_event, tpd_BCIN_BCOUT((323 - 6)- 18*11), true),
			18 => (BCIN_ipd(5)'last_event, tpd_BCIN_BCOUT((323 - 6)- 18*12), true),
			19 => (BCIN_ipd(4)'last_event, tpd_BCIN_BCOUT((323 - 6)- 18*13), true),
			20 => (BCIN_ipd(3)'last_event, tpd_BCIN_BCOUT((323 - 6)- 18*14), true),
			21 => (BCIN_ipd(2)'last_event, tpd_BCIN_BCOUT((323 - 6)- 18*15), true),
			22 => (BCIN_ipd(1)'last_event, tpd_BCIN_BCOUT((323 - 6)- 18*16), true),
			23 => (BCIN_ipd(0)'last_event, tpd_BCIN_BCOUT((323 - 6)- 18*17), true),
			24 => (CLK_dly'last_event, tpd_CLK_BCOUT(11), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> BCOUT(10),
         GlitchData	=> BCOUT_GlitchData(10),
         OutSignalName	=> "BCOUT(10)",
         OutTemp	=> BCOUT_zd(10),
         Paths		=> (
			0 => (B_ipd(10)'last_event, tpd_B_BCOUT((323 - 7)- 18*7), true),
			1 => (B_ipd(9)'last_event, tpd_B_BCOUT((323 - 7)- 18*8), true),
			2 => (B_ipd(8)'last_event, tpd_B_BCOUT((323 - 7)- 18*9), true),
			3 => (B_ipd(7)'last_event, tpd_B_BCOUT((323 - 7)- 18*10), true),
			4 => (B_ipd(6)'last_event, tpd_B_BCOUT((323 - 7)- 18*11), true),
			5 => (B_ipd(5)'last_event, tpd_B_BCOUT((323 - 7)- 18*12), true),
			6 => (B_ipd(4)'last_event, tpd_B_BCOUT((323 - 7)- 18*13), true),
			7 => (B_ipd(3)'last_event, tpd_B_BCOUT((323 - 7)- 18*14), true),
			8 => (B_ipd(2)'last_event, tpd_B_BCOUT((323 - 7)- 18*15), true),
			9 => (B_ipd(1)'last_event, tpd_B_BCOUT((323 - 7)- 18*16), true),
			10 => (B_ipd(0)'last_event, tpd_B_BCOUT((323 - 7)- 18*17), true),
			11 => (BCIN_ipd(10)'last_event, tpd_BCIN_BCOUT((323 - 7)- 18*7), true),
			12 => (BCIN_ipd(9)'last_event, tpd_BCIN_BCOUT((323 - 7)- 18*8), true),
			13 => (BCIN_ipd(8)'last_event, tpd_BCIN_BCOUT((323 - 7)- 18*9), true),
			14 => (BCIN_ipd(7)'last_event, tpd_BCIN_BCOUT((323 - 7)- 18*10), true),
			15 => (BCIN_ipd(6)'last_event, tpd_BCIN_BCOUT((323 - 7)- 18*11), true),
			16 => (BCIN_ipd(5)'last_event, tpd_BCIN_BCOUT((323 - 7)- 18*12), true),
			17 => (BCIN_ipd(4)'last_event, tpd_BCIN_BCOUT((323 - 7)- 18*13), true),
			18 => (BCIN_ipd(3)'last_event, tpd_BCIN_BCOUT((323 - 7)- 18*14), true),
			19 => (BCIN_ipd(2)'last_event, tpd_BCIN_BCOUT((323 - 7)- 18*15), true),
			20 => (BCIN_ipd(1)'last_event, tpd_BCIN_BCOUT((323 - 7)- 18*16), true),
			21 => (BCIN_ipd(0)'last_event, tpd_BCIN_BCOUT((323 - 7)- 18*17), true),
			22 => (CLK_dly'last_event, tpd_CLK_BCOUT(10), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> BCOUT(9),
         GlitchData	=> BCOUT_GlitchData(9),
         OutSignalName	=> "BCOUT(9)",
         OutTemp	=> BCOUT_zd(9),
         Paths		=> (
			0 => (B_ipd(9)'last_event, tpd_B_BCOUT((323 - 8)- 18*8), true),
			1 => (B_ipd(8)'last_event, tpd_B_BCOUT((323 - 8)- 18*9), true),
			2 => (B_ipd(7)'last_event, tpd_B_BCOUT((323 - 8)- 18*10), true),
			3 => (B_ipd(6)'last_event, tpd_B_BCOUT((323 - 8)- 18*11), true),
			4 => (B_ipd(5)'last_event, tpd_B_BCOUT((323 - 8)- 18*12), true),
			5 => (B_ipd(4)'last_event, tpd_B_BCOUT((323 - 8)- 18*13), true),
			6 => (B_ipd(3)'last_event, tpd_B_BCOUT((323 - 8)- 18*14), true),
			7 => (B_ipd(2)'last_event, tpd_B_BCOUT((323 - 8)- 18*15), true),
			8 => (B_ipd(1)'last_event, tpd_B_BCOUT((323 - 8)- 18*16), true),
			9 => (B_ipd(0)'last_event, tpd_B_BCOUT((323 - 8)- 18*17), true),
			10 => (BCIN_ipd(9)'last_event, tpd_BCIN_BCOUT((323 - 8)- 18*8), true),
			11 => (BCIN_ipd(8)'last_event, tpd_BCIN_BCOUT((323 - 8)- 18*9), true),
			12 => (BCIN_ipd(7)'last_event, tpd_BCIN_BCOUT((323 - 8)- 18*10), true),
			13 => (BCIN_ipd(6)'last_event, tpd_BCIN_BCOUT((323 - 8)- 18*11), true),
			14 => (BCIN_ipd(5)'last_event, tpd_BCIN_BCOUT((323 - 8)- 18*12), true),
			15 => (BCIN_ipd(4)'last_event, tpd_BCIN_BCOUT((323 - 8)- 18*13), true),
			16 => (BCIN_ipd(3)'last_event, tpd_BCIN_BCOUT((323 - 8)- 18*14), true),
			17 => (BCIN_ipd(2)'last_event, tpd_BCIN_BCOUT((323 - 8)- 18*15), true),
			18 => (BCIN_ipd(1)'last_event, tpd_BCIN_BCOUT((323 - 8)- 18*16), true),
			19 => (BCIN_ipd(0)'last_event, tpd_BCIN_BCOUT((323 - 8)- 18*17), true),
			20 => (CLK_dly'last_event, tpd_CLK_BCOUT(9), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> BCOUT(8),
         GlitchData	=> BCOUT_GlitchData(8),
         OutSignalName	=> "BCOUT(8)",
         OutTemp	=> BCOUT_zd(8),
         Paths		=> (
			0 => (B_ipd(8)'last_event, tpd_B_BCOUT((323 - 9)- 18*9), true),
			1 => (B_ipd(7)'last_event, tpd_B_BCOUT((323 - 9)- 18*10), true),
			2 => (B_ipd(6)'last_event, tpd_B_BCOUT((323 - 9)- 18*11), true),
			3 => (B_ipd(5)'last_event, tpd_B_BCOUT((323 - 9)- 18*12), true),
			4 => (B_ipd(4)'last_event, tpd_B_BCOUT((323 - 9)- 18*13), true),
			5 => (B_ipd(3)'last_event, tpd_B_BCOUT((323 - 9)- 18*14), true),
			6 => (B_ipd(2)'last_event, tpd_B_BCOUT((323 - 9)- 18*15), true),
			7 => (B_ipd(1)'last_event, tpd_B_BCOUT((323 - 9)- 18*16), true),
			8 => (B_ipd(0)'last_event, tpd_B_BCOUT((323 - 9)- 18*17), true),
			9 => (BCIN_ipd(8)'last_event, tpd_BCIN_BCOUT((323 - 9)- 18*9), true),
			10 => (BCIN_ipd(7)'last_event, tpd_BCIN_BCOUT((323 - 9)- 18*10), true),
			11 => (BCIN_ipd(6)'last_event, tpd_BCIN_BCOUT((323 - 9)- 18*11), true),
			12 => (BCIN_ipd(5)'last_event, tpd_BCIN_BCOUT((323 - 9)- 18*12), true),
			13 => (BCIN_ipd(4)'last_event, tpd_BCIN_BCOUT((323 - 9)- 18*13), true),
			14 => (BCIN_ipd(3)'last_event, tpd_BCIN_BCOUT((323 - 9)- 18*14), true),
			15 => (BCIN_ipd(2)'last_event, tpd_BCIN_BCOUT((323 - 9)- 18*15), true),
			16 => (BCIN_ipd(1)'last_event, tpd_BCIN_BCOUT((323 - 9)- 18*16), true),
			17 => (BCIN_ipd(0)'last_event, tpd_BCIN_BCOUT((323 - 9)- 18*17), true),
			18 => (CLK_dly'last_event, tpd_CLK_BCOUT(8), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> BCOUT(7),
         GlitchData	=> BCOUT_GlitchData(7),
         OutSignalName	=> "BCOUT(7)",
         OutTemp	=> BCOUT_zd(7),
         Paths		=> (
			0 => (B_ipd(7)'last_event, tpd_B_BCOUT((323 - 10)- 18*10), true),
			1 => (B_ipd(6)'last_event, tpd_B_BCOUT((323 - 10)- 18*11), true),
			2 => (B_ipd(5)'last_event, tpd_B_BCOUT((323 - 10)- 18*12), true),
			3 => (B_ipd(4)'last_event, tpd_B_BCOUT((323 - 10)- 18*13), true),
			4 => (B_ipd(3)'last_event, tpd_B_BCOUT((323 - 10)- 18*14), true),
			5 => (B_ipd(2)'last_event, tpd_B_BCOUT((323 - 10)- 18*15), true),
			6 => (B_ipd(1)'last_event, tpd_B_BCOUT((323 - 10)- 18*16), true),
			7 => (B_ipd(0)'last_event, tpd_B_BCOUT((323 - 10)- 18*17), true),
			8 => (BCIN_ipd(7)'last_event, tpd_BCIN_BCOUT((323 - 10)- 18*10), true),
			9 => (BCIN_ipd(6)'last_event, tpd_BCIN_BCOUT((323 - 10)- 18*11), true),
			10 => (BCIN_ipd(5)'last_event, tpd_BCIN_BCOUT((323 - 10)- 18*12), true),
			11 => (BCIN_ipd(4)'last_event, tpd_BCIN_BCOUT((323 - 10)- 18*13), true),
			12 => (BCIN_ipd(3)'last_event, tpd_BCIN_BCOUT((323 - 10)- 18*14), true),
			13 => (BCIN_ipd(2)'last_event, tpd_BCIN_BCOUT((323 - 10)- 18*15), true),
			14 => (BCIN_ipd(1)'last_event, tpd_BCIN_BCOUT((323 - 10)- 18*16), true),
			15 => (BCIN_ipd(0)'last_event, tpd_BCIN_BCOUT((323 - 10)- 18*17), true),
			16 => (CLK_dly'last_event, tpd_CLK_BCOUT(7), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> BCOUT(6),
         GlitchData	=> BCOUT_GlitchData(6),
         OutSignalName	=> "BCOUT(6)",
         OutTemp	=> BCOUT_zd(6),
         Paths		=> (
			0 => (B_ipd(6)'last_event, tpd_B_BCOUT((323 - 11)- 18*11), true),
			1 => (B_ipd(5)'last_event, tpd_B_BCOUT((323 - 11)- 18*12), true),
			2 => (B_ipd(4)'last_event, tpd_B_BCOUT((323 - 11)- 18*13), true),
			3 => (B_ipd(3)'last_event, tpd_B_BCOUT((323 - 11)- 18*14), true),
			4 => (B_ipd(2)'last_event, tpd_B_BCOUT((323 - 11)- 18*15), true),
			5 => (B_ipd(1)'last_event, tpd_B_BCOUT((323 - 11)- 18*16), true),
			6 => (B_ipd(0)'last_event, tpd_B_BCOUT((323 - 11)- 18*17), true),
			7 => (BCIN_ipd(6)'last_event, tpd_BCIN_BCOUT((323 - 11)- 18*11), true),
			8 => (BCIN_ipd(5)'last_event, tpd_BCIN_BCOUT((323 - 11)- 18*12), true),
			9 => (BCIN_ipd(4)'last_event, tpd_BCIN_BCOUT((323 - 11)- 18*13), true),
			10 => (BCIN_ipd(3)'last_event, tpd_BCIN_BCOUT((323 - 11)- 18*14), true),
			11 => (BCIN_ipd(2)'last_event, tpd_BCIN_BCOUT((323 - 11)- 18*15), true),
			12 => (BCIN_ipd(1)'last_event, tpd_BCIN_BCOUT((323 - 11)- 18*16), true),
			13 => (BCIN_ipd(0)'last_event, tpd_BCIN_BCOUT((323 - 11)- 18*17), true),
			14 => (CLK_dly'last_event, tpd_CLK_BCOUT(6), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> BCOUT(5),
         GlitchData	=> BCOUT_GlitchData(5),
         OutSignalName	=> "BCOUT(5)",
         OutTemp	=> BCOUT_zd(5),
         Paths		=> (
			0 => (B_ipd(5)'last_event, tpd_B_BCOUT((323 - 12)- 18*12), true),
			1 => (B_ipd(4)'last_event, tpd_B_BCOUT((323 - 12)- 18*13), true),
			2 => (B_ipd(3)'last_event, tpd_B_BCOUT((323 - 12)- 18*14), true),
			3 => (B_ipd(2)'last_event, tpd_B_BCOUT((323 - 12)- 18*15), true),
			4 => (B_ipd(1)'last_event, tpd_B_BCOUT((323 - 12)- 18*16), true),
			5 => (B_ipd(0)'last_event, tpd_B_BCOUT((323 - 12)- 18*17), true),
			6 => (BCIN_ipd(5)'last_event, tpd_BCIN_BCOUT((323 - 12)- 18*12), true),
			7 => (BCIN_ipd(4)'last_event, tpd_BCIN_BCOUT((323 - 12)- 18*13), true),
			8 => (BCIN_ipd(3)'last_event, tpd_BCIN_BCOUT((323 - 12)- 18*14), true),
			9 => (BCIN_ipd(2)'last_event, tpd_BCIN_BCOUT((323 - 12)- 18*15), true),
			10 => (BCIN_ipd(1)'last_event, tpd_BCIN_BCOUT((323 - 12)- 18*16), true),
			11 => (BCIN_ipd(0)'last_event, tpd_BCIN_BCOUT((323 - 12)- 18*17), true),
			12 => (CLK_dly'last_event, tpd_CLK_BCOUT(5), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> BCOUT(4),
         GlitchData	=> BCOUT_GlitchData(4),
         OutSignalName	=> "BCOUT(4)",
         OutTemp	=> BCOUT_zd(4),
         Paths		=> (
			0 => (B_ipd(4)'last_event, tpd_B_BCOUT((323 - 13)- 18*13), true),
			1 => (B_ipd(3)'last_event, tpd_B_BCOUT((323 - 13)- 18*14), true),
			2 => (B_ipd(2)'last_event, tpd_B_BCOUT((323 - 13)- 18*15), true),
			3 => (B_ipd(1)'last_event, tpd_B_BCOUT((323 - 13)- 18*16), true),
			4 => (B_ipd(0)'last_event, tpd_B_BCOUT((323 - 13)- 18*17), true),
			5 => (BCIN_ipd(4)'last_event, tpd_BCIN_BCOUT((323 - 13)- 18*13), true),
			6 => (BCIN_ipd(3)'last_event, tpd_BCIN_BCOUT((323 - 13)- 18*14), true),
			7 => (BCIN_ipd(2)'last_event, tpd_BCIN_BCOUT((323 - 13)- 18*15), true),
			8 => (BCIN_ipd(1)'last_event, tpd_BCIN_BCOUT((323 - 13)- 18*16), true),
			9 => (BCIN_ipd(0)'last_event, tpd_BCIN_BCOUT((323 - 13)- 18*17), true),
			10 => (CLK_dly'last_event, tpd_CLK_BCOUT(4), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> BCOUT(3),
         GlitchData	=> BCOUT_GlitchData(3),
         OutSignalName	=> "BCOUT(3)",
         OutTemp	=> BCOUT_zd(3),
         Paths		=> (
			0 => (B_ipd(3)'last_event, tpd_B_BCOUT((323 - 14)- 18*14), true),
			1 => (B_ipd(2)'last_event, tpd_B_BCOUT((323 - 14)- 18*15), true),
			2 => (B_ipd(1)'last_event, tpd_B_BCOUT((323 - 14)- 18*16), true),
			3 => (B_ipd(0)'last_event, tpd_B_BCOUT((323 - 14)- 18*17), true),
			4 => (BCIN_ipd(3)'last_event, tpd_BCIN_BCOUT((323 - 14)- 18*14), true),
			5 => (BCIN_ipd(2)'last_event, tpd_BCIN_BCOUT((323 - 14)- 18*15), true),
			6 => (BCIN_ipd(1)'last_event, tpd_BCIN_BCOUT((323 - 14)- 18*16), true),
			7 => (BCIN_ipd(0)'last_event, tpd_BCIN_BCOUT((323 - 14)- 18*17), true),
			8 => (CLK_dly'last_event, tpd_CLK_BCOUT(3), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> BCOUT(2),
         GlitchData	=> BCOUT_GlitchData(2),
         OutSignalName	=> "BCOUT(2)",
         OutTemp	=> BCOUT_zd(2),
         Paths		=> (
			0 => (B_ipd(2)'last_event, tpd_B_BCOUT((323 - 15)- 18*15), true),
			1 => (B_ipd(1)'last_event, tpd_B_BCOUT((323 - 15)- 18*16), true),
			2 => (B_ipd(0)'last_event, tpd_B_BCOUT((323 - 15)- 18*17), true),
			3 => (BCIN_ipd(2)'last_event, tpd_BCIN_BCOUT((323 - 15)- 18*15), true),
			4 => (BCIN_ipd(1)'last_event, tpd_BCIN_BCOUT((323 - 15)- 18*16), true),
			5 => (BCIN_ipd(0)'last_event, tpd_BCIN_BCOUT((323 - 15)- 18*17), true),
			6 => (CLK_dly'last_event, tpd_CLK_BCOUT(2), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> BCOUT(1),
         GlitchData	=> BCOUT_GlitchData(1),
         OutSignalName	=> "BCOUT(1)",
         OutTemp	=> BCOUT_zd(1),
         Paths		=> (
			0 => (B_ipd(1)'last_event, tpd_B_BCOUT((323 - 16)- 18*16), true),
			1 => (B_ipd(0)'last_event, tpd_B_BCOUT((323 - 16)- 18*17), true),
			2 => (BCIN_ipd(1)'last_event, tpd_BCIN_BCOUT((323 - 16)- 18*16), true),
			3 => (BCIN_ipd(0)'last_event, tpd_BCIN_BCOUT((323 - 16)- 18*17), true),
			4 => (CLK_dly'last_event, tpd_CLK_BCOUT(1), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> BCOUT(0),
         GlitchData	=> BCOUT_GlitchData(0),
         OutSignalName	=> "BCOUT(0)",
         OutTemp	=> BCOUT_zd(0),
         Paths		=> (
			0 => (B_ipd(0)'last_event, tpd_B_BCOUT((323 - 17)- 18*17), true),
			1 => (BCIN_ipd(0)'last_event, tpd_BCIN_BCOUT((323 - 17)- 18*17), true),
			2 => (CLK_dly'last_event, tpd_CLK_BCOUT(0), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> CARRYCASCOUT,
         GlitchData	=> CARRYCASCOUT_GlitchData,
         OutSignalName	=> "CARRYCASCOUT",
         OutTemp	=> CARRYCASCOUT_zd,
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_CARRYCASCOUT((29 - 0)- 1*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_CARRYCASCOUT((29 - 0)- 1*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_CARRYCASCOUT((29 - 0)- 1*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_CARRYCASCOUT((29 - 0)- 1*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_CARRYCASCOUT((29 - 0)- 1*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_CARRYCASCOUT((29 - 0)- 1*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_CARRYCASCOUT((29 - 0)- 1*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_CARRYCASCOUT((29 - 0)- 1*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_CARRYCASCOUT((29 - 0)- 1*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_CARRYCASCOUT((29 - 0)- 1*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_CARRYCASCOUT((29 - 0)- 1*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_CARRYCASCOUT((29 - 0)- 1*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_CARRYCASCOUT((29 - 0)- 1*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_CARRYCASCOUT((29 - 0)- 1*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_CARRYCASCOUT((29 - 0)- 1*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_CARRYCASCOUT((29 - 0)- 1*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_CARRYCASCOUT((29 - 0)- 1*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_CARRYCASCOUT((29 - 0)- 1*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_CARRYCASCOUT((29 - 0)- 1*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_CARRYCASCOUT((29 - 0)- 1*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_CARRYCASCOUT((29 - 0)- 1*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_CARRYCASCOUT((29 - 0)- 1*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_CARRYCASCOUT((29 - 0)- 1*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_CARRYCASCOUT((29 - 0)- 1*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_CARRYCASCOUT((29 - 0)- 1*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_CARRYCASCOUT((29 - 0)- 1*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_CARRYCASCOUT((29 - 0)- 1*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_CARRYCASCOUT((29 - 0)- 1*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_CARRYCASCOUT((29 - 0)- 1*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_CARRYCASCOUT((29 - 0)- 1*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_CARRYCASCOUT((29 - 0)- 1*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_CARRYCASCOUT((29 - 0)- 1*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_CARRYCASCOUT((29 - 0)- 1*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_CARRYCASCOUT((29 - 0)- 1*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_CARRYCASCOUT((29 - 0)- 1*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_CARRYCASCOUT((29 - 0)- 1*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_CARRYCASCOUT((29 - 0)- 1*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_CARRYCASCOUT((29 - 0)- 1*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_CARRYCASCOUT((29 - 0)- 1*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_CARRYCASCOUT((29 - 0)- 1*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_CARRYCASCOUT((29 - 0)- 1*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_CARRYCASCOUT((29 - 0)- 1*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_CARRYCASCOUT((29 - 0)- 1*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_CARRYCASCOUT((29 - 0)- 1*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_CARRYCASCOUT((29 - 0)- 1*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_CARRYCASCOUT((29 - 0)- 1*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_CARRYCASCOUT((29 - 0)- 1*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_CARRYCASCOUT((29 - 0)- 1*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_CARRYCASCOUT((29 - 0)- 1*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_CARRYCASCOUT((29 - 0)- 1*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_CARRYCASCOUT((29 - 0)- 1*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_CARRYCASCOUT((29 - 0)- 1*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_CARRYCASCOUT((29 - 0)- 1*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_CARRYCASCOUT((29 - 0)- 1*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_CARRYCASCOUT((29 - 0)- 1*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_CARRYCASCOUT((29 - 0)- 1*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_CARRYCASCOUT((29 - 0)- 1*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_CARRYCASCOUT((29 - 0)- 1*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_CARRYCASCOUT((29 - 0)- 1*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_CARRYCASCOUT((29 - 0)- 1*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_CARRYCASCOUT((3 - 0)- 1*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_CARRYCASCOUT((3 - 0)- 1*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_CARRYCASCOUT((3 - 0)- 1*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_CARRYCASCOUT((3 - 0)- 1*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_CARRYCASCOUT((17 - 0)- 1*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_CARRYCASCOUT((17 - 0)- 1*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_CARRYCASCOUT((17 - 0)- 1*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_CARRYCASCOUT((17 - 0)- 1*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_CARRYCASCOUT((17 - 0)- 1*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_CARRYCASCOUT((17 - 0)- 1*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_CARRYCASCOUT((17 - 0)- 1*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_CARRYCASCOUT((17 - 0)- 1*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_CARRYCASCOUT((17 - 0)- 1*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_CARRYCASCOUT((17 - 0)- 1*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_CARRYCASCOUT((17 - 0)- 1*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_CARRYCASCOUT((17 - 0)- 1*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_CARRYCASCOUT((17 - 0)- 1*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_CARRYCASCOUT((17 - 0)- 1*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_CARRYCASCOUT((17 - 0)- 1*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_CARRYCASCOUT((17 - 0)- 1*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_CARRYCASCOUT((17 - 0)- 1*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_CARRYCASCOUT((17 - 0)- 1*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_CARRYCASCOUT((17 - 0)- 1*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_CARRYCASCOUT((17 - 0)- 1*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_CARRYCASCOUT((17 - 0)- 1*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_CARRYCASCOUT((17 - 0)- 1*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_CARRYCASCOUT((17 - 0)- 1*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_CARRYCASCOUT((17 - 0)- 1*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_CARRYCASCOUT((17 - 0)- 1*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_CARRYCASCOUT((17 - 0)- 1*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_CARRYCASCOUT((17 - 0)- 1*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_CARRYCASCOUT((17 - 0)- 1*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_CARRYCASCOUT((17 - 0)- 1*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_CARRYCASCOUT((17 - 0)- 1*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_CARRYCASCOUT((17 - 0)- 1*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_CARRYCASCOUT((17 - 0)- 1*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_CARRYCASCOUT((17 - 0)- 1*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_CARRYCASCOUT((17 - 0)- 1*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_CARRYCASCOUT((17 - 0)- 1*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_CARRYCASCOUT((17 - 0)- 1*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_CARRYCASCOUT((47 - 0)- 1*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_CARRYCASCOUT, true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_CARRYCASCOUT, true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_CARRYCASCOUT((2 - 0)- 1*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_CARRYCASCOUT((2 - 0)- 1*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_CARRYCASCOUT((2 - 0)- 1*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_CARRYCASCOUT, true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_CARRYCASCOUT((6 - 0)- 1*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_CARRYCASCOUT((6 - 0)- 1*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_CARRYCASCOUT((6 - 0)- 1*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_CARRYCASCOUT((6 - 0)- 1*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_CARRYCASCOUT((6 - 0)- 1*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_CARRYCASCOUT((6 - 0)- 1*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_CARRYCASCOUT((6 - 0)- 1*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_CARRYCASCOUT((47 - 0)- 1*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_CARRYCASCOUT, true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> CARRYOUT(3),
         GlitchData	=> CARRYOUT_GlitchData(3),
         OutSignalName	=> "CARRYOUT(3)",
         OutTemp	=> CARRYOUT_zd(3),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_CARRYOUT((119 - 0)- 4*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_CARRYOUT((119 - 0)- 4*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_CARRYOUT((119 - 0)- 4*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_CARRYOUT((119 - 0)- 4*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_CARRYOUT((119 - 0)- 4*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_CARRYOUT((119 - 0)- 4*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_CARRYOUT((119 - 0)- 4*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_CARRYOUT((119 - 0)- 4*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_CARRYOUT((119 - 0)- 4*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_CARRYOUT((119 - 0)- 4*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_CARRYOUT((119 - 0)- 4*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_CARRYOUT((119 - 0)- 4*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_CARRYOUT((119 - 0)- 4*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_CARRYOUT((119 - 0)- 4*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_CARRYOUT((119 - 0)- 4*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_CARRYOUT((119 - 0)- 4*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_CARRYOUT((119 - 0)- 4*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_CARRYOUT((119 - 0)- 4*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_CARRYOUT((119 - 0)- 4*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_CARRYOUT((119 - 0)- 4*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_CARRYOUT((119 - 0)- 4*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_CARRYOUT((119 - 0)- 4*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_CARRYOUT((119 - 0)- 4*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_CARRYOUT((119 - 0)- 4*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_CARRYOUT((119 - 0)- 4*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_CARRYOUT((119 - 0)- 4*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_CARRYOUT((119 - 0)- 4*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_CARRYOUT((119 - 0)- 4*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_CARRYOUT((119 - 0)- 4*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_CARRYOUT((119 - 0)- 4*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_CARRYOUT((119 - 0)- 4*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_CARRYOUT((119 - 0)- 4*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_CARRYOUT((119 - 0)- 4*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_CARRYOUT((119 - 0)- 4*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_CARRYOUT((119 - 0)- 4*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_CARRYOUT((119 - 0)- 4*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_CARRYOUT((119 - 0)- 4*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_CARRYOUT((119 - 0)- 4*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_CARRYOUT((119 - 0)- 4*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_CARRYOUT((119 - 0)- 4*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_CARRYOUT((119 - 0)- 4*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_CARRYOUT((119 - 0)- 4*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_CARRYOUT((119 - 0)- 4*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_CARRYOUT((119 - 0)- 4*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_CARRYOUT((119 - 0)- 4*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_CARRYOUT((119 - 0)- 4*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_CARRYOUT((119 - 0)- 4*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_CARRYOUT((119 - 0)- 4*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_CARRYOUT((119 - 0)- 4*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_CARRYOUT((119 - 0)- 4*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_CARRYOUT((119 - 0)- 4*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_CARRYOUT((119 - 0)- 4*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_CARRYOUT((119 - 0)- 4*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_CARRYOUT((119 - 0)- 4*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_CARRYOUT((119 - 0)- 4*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_CARRYOUT((119 - 0)- 4*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_CARRYOUT((119 - 0)- 4*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_CARRYOUT((119 - 0)- 4*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_CARRYOUT((119 - 0)- 4*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_CARRYOUT((119 - 0)- 4*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_CARRYOUT((15 - 0)- 4*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_CARRYOUT((15 - 0)- 4*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_CARRYOUT((15 - 0)- 4*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_CARRYOUT((15 - 0)- 4*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_CARRYOUT((71 - 0)- 4*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_CARRYOUT((71 - 0)- 4*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_CARRYOUT((71 - 0)- 4*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_CARRYOUT((71 - 0)- 4*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_CARRYOUT((71 - 0)- 4*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_CARRYOUT((71 - 0)- 4*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_CARRYOUT((71 - 0)- 4*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_CARRYOUT((71 - 0)- 4*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_CARRYOUT((71 - 0)- 4*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_CARRYOUT((71 - 0)- 4*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_CARRYOUT((71 - 0)- 4*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_CARRYOUT((71 - 0)- 4*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_CARRYOUT((71 - 0)- 4*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_CARRYOUT((71 - 0)- 4*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_CARRYOUT((71 - 0)- 4*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_CARRYOUT((71 - 0)- 4*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_CARRYOUT((71 - 0)- 4*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_CARRYOUT((71 - 0)- 4*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_CARRYOUT((71 - 0)- 4*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_CARRYOUT((71 - 0)- 4*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_CARRYOUT((71 - 0)- 4*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_CARRYOUT((71 - 0)- 4*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_CARRYOUT((71 - 0)- 4*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_CARRYOUT((71 - 0)- 4*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_CARRYOUT((71 - 0)- 4*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_CARRYOUT((71 - 0)- 4*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_CARRYOUT((71 - 0)- 4*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_CARRYOUT((71 - 0)- 4*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_CARRYOUT((71 - 0)- 4*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_CARRYOUT((71 - 0)- 4*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_CARRYOUT((71 - 0)- 4*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_CARRYOUT((71 - 0)- 4*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_CARRYOUT((71 - 0)- 4*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_CARRYOUT((71 - 0)- 4*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_CARRYOUT((71 - 0)- 4*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_CARRYOUT((71 - 0)- 4*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_CARRYOUT((191 - 0)- 4*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_CARRYOUT(3), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_CARRYOUT(3), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_CARRYOUT((11 - 0)- 4*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_CARRYOUT((11 - 0)- 4*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_CARRYOUT((11 - 0)- 4*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_CARRYOUT(3), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_CARRYOUT((27 - 0)- 4*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_CARRYOUT((27 - 0)- 4*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_CARRYOUT((27 - 0)- 4*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_CARRYOUT((27 - 0)- 4*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_CARRYOUT((27 - 0)- 4*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_CARRYOUT((27 - 0)- 4*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_CARRYOUT((27 - 0)- 4*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_CARRYOUT((191 - 0)- 4*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_CARRYOUT(3), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> CARRYOUT(2),
         GlitchData	=> CARRYOUT_GlitchData(2),
         OutSignalName	=> "CARRYOUT(2)",
         OutTemp	=> CARRYOUT_zd(2),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_CARRYOUT((119 - 1)- 4*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_CARRYOUT((119 - 1)- 4*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_CARRYOUT((119 - 1)- 4*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_CARRYOUT((119 - 1)- 4*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_CARRYOUT((119 - 1)- 4*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_CARRYOUT((119 - 1)- 4*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_CARRYOUT((119 - 1)- 4*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_CARRYOUT((119 - 1)- 4*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_CARRYOUT((119 - 1)- 4*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_CARRYOUT((119 - 1)- 4*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_CARRYOUT((119 - 1)- 4*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_CARRYOUT((119 - 1)- 4*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_CARRYOUT((119 - 1)- 4*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_CARRYOUT((119 - 1)- 4*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_CARRYOUT((119 - 1)- 4*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_CARRYOUT((119 - 1)- 4*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_CARRYOUT((119 - 1)- 4*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_CARRYOUT((119 - 1)- 4*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_CARRYOUT((119 - 1)- 4*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_CARRYOUT((119 - 1)- 4*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_CARRYOUT((119 - 1)- 4*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_CARRYOUT((119 - 1)- 4*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_CARRYOUT((119 - 1)- 4*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_CARRYOUT((119 - 1)- 4*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_CARRYOUT((119 - 1)- 4*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_CARRYOUT((119 - 1)- 4*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_CARRYOUT((119 - 1)- 4*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_CARRYOUT((119 - 1)- 4*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_CARRYOUT((119 - 1)- 4*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_CARRYOUT((119 - 1)- 4*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_CARRYOUT((119 - 1)- 4*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_CARRYOUT((119 - 1)- 4*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_CARRYOUT((119 - 1)- 4*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_CARRYOUT((119 - 1)- 4*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_CARRYOUT((119 - 1)- 4*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_CARRYOUT((119 - 1)- 4*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_CARRYOUT((119 - 1)- 4*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_CARRYOUT((119 - 1)- 4*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_CARRYOUT((119 - 1)- 4*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_CARRYOUT((119 - 1)- 4*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_CARRYOUT((119 - 1)- 4*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_CARRYOUT((119 - 1)- 4*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_CARRYOUT((119 - 1)- 4*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_CARRYOUT((119 - 1)- 4*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_CARRYOUT((119 - 1)- 4*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_CARRYOUT((119 - 1)- 4*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_CARRYOUT((119 - 1)- 4*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_CARRYOUT((119 - 1)- 4*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_CARRYOUT((119 - 1)- 4*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_CARRYOUT((119 - 1)- 4*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_CARRYOUT((119 - 1)- 4*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_CARRYOUT((119 - 1)- 4*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_CARRYOUT((119 - 1)- 4*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_CARRYOUT((119 - 1)- 4*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_CARRYOUT((119 - 1)- 4*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_CARRYOUT((119 - 1)- 4*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_CARRYOUT((119 - 1)- 4*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_CARRYOUT((119 - 1)- 4*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_CARRYOUT((119 - 1)- 4*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_CARRYOUT((119 - 1)- 4*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_CARRYOUT((15 - 1)- 4*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_CARRYOUT((15 - 1)- 4*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_CARRYOUT((15 - 1)- 4*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_CARRYOUT((15 - 1)- 4*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_CARRYOUT((71 - 1)- 4*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_CARRYOUT((71 - 1)- 4*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_CARRYOUT((71 - 1)- 4*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_CARRYOUT((71 - 1)- 4*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_CARRYOUT((71 - 1)- 4*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_CARRYOUT((71 - 1)- 4*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_CARRYOUT((71 - 1)- 4*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_CARRYOUT((71 - 1)- 4*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_CARRYOUT((71 - 1)- 4*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_CARRYOUT((71 - 1)- 4*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_CARRYOUT((71 - 1)- 4*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_CARRYOUT((71 - 1)- 4*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_CARRYOUT((71 - 1)- 4*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_CARRYOUT((71 - 1)- 4*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_CARRYOUT((71 - 1)- 4*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_CARRYOUT((71 - 1)- 4*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_CARRYOUT((71 - 1)- 4*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_CARRYOUT((71 - 1)- 4*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_CARRYOUT((71 - 1)- 4*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_CARRYOUT((71 - 1)- 4*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_CARRYOUT((71 - 1)- 4*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_CARRYOUT((71 - 1)- 4*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_CARRYOUT((71 - 1)- 4*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_CARRYOUT((71 - 1)- 4*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_CARRYOUT((71 - 1)- 4*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_CARRYOUT((71 - 1)- 4*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_CARRYOUT((71 - 1)- 4*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_CARRYOUT((71 - 1)- 4*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_CARRYOUT((71 - 1)- 4*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_CARRYOUT((71 - 1)- 4*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_CARRYOUT((71 - 1)- 4*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_CARRYOUT((71 - 1)- 4*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_CARRYOUT((71 - 1)- 4*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_CARRYOUT((71 - 1)- 4*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_CARRYOUT((71 - 1)- 4*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_CARRYOUT((71 - 1)- 4*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_CARRYOUT((191 - 1)- 4*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_CARRYOUT(2), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_CARRYOUT(2), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_CARRYOUT((11 - 1)- 4*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_CARRYOUT((11 - 1)- 4*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_CARRYOUT((11 - 1)- 4*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_CARRYOUT(2), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_CARRYOUT((27 - 1)- 4*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_CARRYOUT((27 - 1)- 4*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_CARRYOUT((27 - 1)- 4*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_CARRYOUT((27 - 1)- 4*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_CARRYOUT((27 - 1)- 4*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_CARRYOUT((27 - 1)- 4*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_CARRYOUT((27 - 1)- 4*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_CARRYOUT((191 - 1)- 4*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_CARRYOUT(2), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> CARRYOUT(1),
         GlitchData	=> CARRYOUT_GlitchData(1),
         OutSignalName	=> "CARRYOUT(1)",
         OutTemp	=> CARRYOUT_zd(1),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_CARRYOUT((119 - 2)- 4*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_CARRYOUT((119 - 2)- 4*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_CARRYOUT((119 - 2)- 4*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_CARRYOUT((119 - 2)- 4*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_CARRYOUT((119 - 2)- 4*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_CARRYOUT((119 - 2)- 4*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_CARRYOUT((119 - 2)- 4*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_CARRYOUT((119 - 2)- 4*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_CARRYOUT((119 - 2)- 4*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_CARRYOUT((119 - 2)- 4*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_CARRYOUT((119 - 2)- 4*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_CARRYOUT((119 - 2)- 4*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_CARRYOUT((119 - 2)- 4*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_CARRYOUT((119 - 2)- 4*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_CARRYOUT((119 - 2)- 4*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_CARRYOUT((119 - 2)- 4*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_CARRYOUT((119 - 2)- 4*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_CARRYOUT((119 - 2)- 4*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_CARRYOUT((119 - 2)- 4*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_CARRYOUT((119 - 2)- 4*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_CARRYOUT((119 - 2)- 4*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_CARRYOUT((119 - 2)- 4*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_CARRYOUT((119 - 2)- 4*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_CARRYOUT((119 - 2)- 4*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_CARRYOUT((119 - 2)- 4*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_CARRYOUT((119 - 2)- 4*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_CARRYOUT((119 - 2)- 4*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_CARRYOUT((119 - 2)- 4*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_CARRYOUT((119 - 2)- 4*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_CARRYOUT((119 - 2)- 4*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_CARRYOUT((119 - 2)- 4*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_CARRYOUT((119 - 2)- 4*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_CARRYOUT((119 - 2)- 4*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_CARRYOUT((119 - 2)- 4*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_CARRYOUT((119 - 2)- 4*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_CARRYOUT((119 - 2)- 4*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_CARRYOUT((119 - 2)- 4*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_CARRYOUT((119 - 2)- 4*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_CARRYOUT((119 - 2)- 4*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_CARRYOUT((119 - 2)- 4*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_CARRYOUT((119 - 2)- 4*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_CARRYOUT((119 - 2)- 4*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_CARRYOUT((119 - 2)- 4*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_CARRYOUT((119 - 2)- 4*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_CARRYOUT((119 - 2)- 4*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_CARRYOUT((119 - 2)- 4*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_CARRYOUT((119 - 2)- 4*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_CARRYOUT((119 - 2)- 4*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_CARRYOUT((119 - 2)- 4*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_CARRYOUT((119 - 2)- 4*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_CARRYOUT((119 - 2)- 4*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_CARRYOUT((119 - 2)- 4*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_CARRYOUT((119 - 2)- 4*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_CARRYOUT((119 - 2)- 4*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_CARRYOUT((119 - 2)- 4*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_CARRYOUT((119 - 2)- 4*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_CARRYOUT((119 - 2)- 4*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_CARRYOUT((119 - 2)- 4*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_CARRYOUT((119 - 2)- 4*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_CARRYOUT((119 - 2)- 4*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_CARRYOUT((15 - 2)- 4*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_CARRYOUT((15 - 2)- 4*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_CARRYOUT((15 - 2)- 4*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_CARRYOUT((15 - 2)- 4*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_CARRYOUT((71 - 2)- 4*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_CARRYOUT((71 - 2)- 4*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_CARRYOUT((71 - 2)- 4*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_CARRYOUT((71 - 2)- 4*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_CARRYOUT((71 - 2)- 4*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_CARRYOUT((71 - 2)- 4*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_CARRYOUT((71 - 2)- 4*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_CARRYOUT((71 - 2)- 4*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_CARRYOUT((71 - 2)- 4*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_CARRYOUT((71 - 2)- 4*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_CARRYOUT((71 - 2)- 4*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_CARRYOUT((71 - 2)- 4*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_CARRYOUT((71 - 2)- 4*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_CARRYOUT((71 - 2)- 4*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_CARRYOUT((71 - 2)- 4*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_CARRYOUT((71 - 2)- 4*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_CARRYOUT((71 - 2)- 4*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_CARRYOUT((71 - 2)- 4*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_CARRYOUT((71 - 2)- 4*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_CARRYOUT((71 - 2)- 4*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_CARRYOUT((71 - 2)- 4*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_CARRYOUT((71 - 2)- 4*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_CARRYOUT((71 - 2)- 4*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_CARRYOUT((71 - 2)- 4*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_CARRYOUT((71 - 2)- 4*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_CARRYOUT((71 - 2)- 4*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_CARRYOUT((71 - 2)- 4*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_CARRYOUT((71 - 2)- 4*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_CARRYOUT((71 - 2)- 4*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_CARRYOUT((71 - 2)- 4*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_CARRYOUT((71 - 2)- 4*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_CARRYOUT((71 - 2)- 4*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_CARRYOUT((71 - 2)- 4*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_CARRYOUT((71 - 2)- 4*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_CARRYOUT((71 - 2)- 4*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_CARRYOUT((71 - 2)- 4*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_CARRYOUT((191 - 2)- 4*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_CARRYOUT(1), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_CARRYOUT(1), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_CARRYOUT((11 - 2)- 4*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_CARRYOUT((11 - 2)- 4*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_CARRYOUT((11 - 2)- 4*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_CARRYOUT(1), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_CARRYOUT((27 - 2)- 4*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_CARRYOUT((27 - 2)- 4*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_CARRYOUT((27 - 2)- 4*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_CARRYOUT((27 - 2)- 4*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_CARRYOUT((27 - 2)- 4*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_CARRYOUT((27 - 2)- 4*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_CARRYOUT((27 - 2)- 4*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_CARRYOUT((191 - 2)- 4*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_CARRYOUT(1), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> CARRYOUT(0),
         GlitchData	=> CARRYOUT_GlitchData(0),
         OutSignalName	=> "CARRYOUT(0)",
         OutTemp	=> CARRYOUT_zd(0),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_CARRYOUT((119 - 3)- 4*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_CARRYOUT((119 - 3)- 4*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_CARRYOUT((119 - 3)- 4*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_CARRYOUT((119 - 3)- 4*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_CARRYOUT((119 - 3)- 4*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_CARRYOUT((119 - 3)- 4*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_CARRYOUT((119 - 3)- 4*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_CARRYOUT((119 - 3)- 4*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_CARRYOUT((119 - 3)- 4*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_CARRYOUT((119 - 3)- 4*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_CARRYOUT((119 - 3)- 4*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_CARRYOUT((119 - 3)- 4*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_CARRYOUT((119 - 3)- 4*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_CARRYOUT((119 - 3)- 4*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_CARRYOUT((119 - 3)- 4*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_CARRYOUT((119 - 3)- 4*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_CARRYOUT((119 - 3)- 4*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_CARRYOUT((119 - 3)- 4*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_CARRYOUT((119 - 3)- 4*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_CARRYOUT((119 - 3)- 4*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_CARRYOUT((119 - 3)- 4*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_CARRYOUT((119 - 3)- 4*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_CARRYOUT((119 - 3)- 4*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_CARRYOUT((119 - 3)- 4*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_CARRYOUT((119 - 3)- 4*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_CARRYOUT((119 - 3)- 4*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_CARRYOUT((119 - 3)- 4*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_CARRYOUT((119 - 3)- 4*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_CARRYOUT((119 - 3)- 4*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_CARRYOUT((119 - 3)- 4*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_CARRYOUT((119 - 3)- 4*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_CARRYOUT((119 - 3)- 4*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_CARRYOUT((119 - 3)- 4*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_CARRYOUT((119 - 3)- 4*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_CARRYOUT((119 - 3)- 4*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_CARRYOUT((119 - 3)- 4*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_CARRYOUT((119 - 3)- 4*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_CARRYOUT((119 - 3)- 4*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_CARRYOUT((119 - 3)- 4*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_CARRYOUT((119 - 3)- 4*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_CARRYOUT((119 - 3)- 4*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_CARRYOUT((119 - 3)- 4*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_CARRYOUT((119 - 3)- 4*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_CARRYOUT((119 - 3)- 4*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_CARRYOUT((119 - 3)- 4*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_CARRYOUT((119 - 3)- 4*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_CARRYOUT((119 - 3)- 4*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_CARRYOUT((119 - 3)- 4*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_CARRYOUT((119 - 3)- 4*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_CARRYOUT((119 - 3)- 4*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_CARRYOUT((119 - 3)- 4*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_CARRYOUT((119 - 3)- 4*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_CARRYOUT((119 - 3)- 4*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_CARRYOUT((119 - 3)- 4*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_CARRYOUT((119 - 3)- 4*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_CARRYOUT((119 - 3)- 4*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_CARRYOUT((119 - 3)- 4*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_CARRYOUT((119 - 3)- 4*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_CARRYOUT((119 - 3)- 4*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_CARRYOUT((119 - 3)- 4*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_CARRYOUT((15 - 3)- 4*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_CARRYOUT((15 - 3)- 4*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_CARRYOUT((15 - 3)- 4*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_CARRYOUT((15 - 3)- 4*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_CARRYOUT((71 - 3)- 4*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_CARRYOUT((71 - 3)- 4*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_CARRYOUT((71 - 3)- 4*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_CARRYOUT((71 - 3)- 4*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_CARRYOUT((71 - 3)- 4*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_CARRYOUT((71 - 3)- 4*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_CARRYOUT((71 - 3)- 4*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_CARRYOUT((71 - 3)- 4*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_CARRYOUT((71 - 3)- 4*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_CARRYOUT((71 - 3)- 4*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_CARRYOUT((71 - 3)- 4*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_CARRYOUT((71 - 3)- 4*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_CARRYOUT((71 - 3)- 4*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_CARRYOUT((71 - 3)- 4*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_CARRYOUT((71 - 3)- 4*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_CARRYOUT((71 - 3)- 4*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_CARRYOUT((71 - 3)- 4*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_CARRYOUT((71 - 3)- 4*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_CARRYOUT((71 - 3)- 4*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_CARRYOUT((71 - 3)- 4*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_CARRYOUT((71 - 3)- 4*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_CARRYOUT((71 - 3)- 4*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_CARRYOUT((71 - 3)- 4*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_CARRYOUT((71 - 3)- 4*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_CARRYOUT((71 - 3)- 4*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_CARRYOUT((71 - 3)- 4*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_CARRYOUT((71 - 3)- 4*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_CARRYOUT((71 - 3)- 4*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_CARRYOUT((71 - 3)- 4*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_CARRYOUT((71 - 3)- 4*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_CARRYOUT((71 - 3)- 4*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_CARRYOUT((71 - 3)- 4*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_CARRYOUT((71 - 3)- 4*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_CARRYOUT((71 - 3)- 4*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_CARRYOUT((71 - 3)- 4*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_CARRYOUT((71 - 3)- 4*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_CARRYOUT((191 - 3)- 4*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_CARRYOUT(0), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_CARRYOUT(0), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_CARRYOUT((11 - 3)- 4*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_CARRYOUT((11 - 3)- 4*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_CARRYOUT((11 - 3)- 4*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_CARRYOUT(0), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_CARRYOUT((27 - 3)- 4*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_CARRYOUT((27 - 3)- 4*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_CARRYOUT((27 - 3)- 4*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_CARRYOUT((27 - 3)- 4*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_CARRYOUT((27 - 3)- 4*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_CARRYOUT((27 - 3)- 4*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_CARRYOUT((27 - 3)- 4*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_CARRYOUT((191 - 3)- 4*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_CARRYOUT(0), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> MULTSIGNOUT,
         GlitchData	=> MULTSIGNOUT_GlitchData,
         OutSignalName	=> "MULTSIGNOUT",
         OutTemp	=> MULTSIGNOUT_zd,
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_MULTSIGNOUT((29 - 0)- 1*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_MULTSIGNOUT((29 - 0)- 1*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_MULTSIGNOUT((29 - 0)- 1*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_MULTSIGNOUT((29 - 0)- 1*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_MULTSIGNOUT((29 - 0)- 1*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_MULTSIGNOUT((29 - 0)- 1*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_MULTSIGNOUT((29 - 0)- 1*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_MULTSIGNOUT((29 - 0)- 1*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_MULTSIGNOUT((29 - 0)- 1*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_MULTSIGNOUT((29 - 0)- 1*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_MULTSIGNOUT((29 - 0)- 1*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_MULTSIGNOUT((29 - 0)- 1*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_MULTSIGNOUT((29 - 0)- 1*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_MULTSIGNOUT((29 - 0)- 1*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_MULTSIGNOUT((29 - 0)- 1*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_MULTSIGNOUT((29 - 0)- 1*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_MULTSIGNOUT((29 - 0)- 1*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_MULTSIGNOUT((29 - 0)- 1*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_MULTSIGNOUT((29 - 0)- 1*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_MULTSIGNOUT((29 - 0)- 1*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_MULTSIGNOUT((29 - 0)- 1*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_MULTSIGNOUT((29 - 0)- 1*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_MULTSIGNOUT((29 - 0)- 1*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_MULTSIGNOUT((29 - 0)- 1*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_MULTSIGNOUT((29 - 0)- 1*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_MULTSIGNOUT((29 - 0)- 1*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_MULTSIGNOUT((29 - 0)- 1*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_MULTSIGNOUT((29 - 0)- 1*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_MULTSIGNOUT((29 - 0)- 1*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_MULTSIGNOUT((29 - 0)- 1*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_MULTSIGNOUT((29 - 0)- 1*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_MULTSIGNOUT((29 - 0)- 1*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_MULTSIGNOUT((29 - 0)- 1*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_MULTSIGNOUT((29 - 0)- 1*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_MULTSIGNOUT((29 - 0)- 1*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_MULTSIGNOUT((29 - 0)- 1*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_MULTSIGNOUT((29 - 0)- 1*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_MULTSIGNOUT((29 - 0)- 1*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_MULTSIGNOUT((29 - 0)- 1*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_MULTSIGNOUT((29 - 0)- 1*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_MULTSIGNOUT((29 - 0)- 1*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_MULTSIGNOUT((29 - 0)- 1*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_MULTSIGNOUT((29 - 0)- 1*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_MULTSIGNOUT((29 - 0)- 1*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_MULTSIGNOUT((29 - 0)- 1*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_MULTSIGNOUT((29 - 0)- 1*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_MULTSIGNOUT((29 - 0)- 1*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_MULTSIGNOUT((29 - 0)- 1*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_MULTSIGNOUT((29 - 0)- 1*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_MULTSIGNOUT((29 - 0)- 1*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_MULTSIGNOUT((29 - 0)- 1*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_MULTSIGNOUT((29 - 0)- 1*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_MULTSIGNOUT((29 - 0)- 1*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_MULTSIGNOUT((29 - 0)- 1*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_MULTSIGNOUT((29 - 0)- 1*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_MULTSIGNOUT((29 - 0)- 1*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_MULTSIGNOUT((29 - 0)- 1*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_MULTSIGNOUT((29 - 0)- 1*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_MULTSIGNOUT((29 - 0)- 1*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_MULTSIGNOUT((29 - 0)- 1*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_MULTSIGNOUT((3 - 0)- 1*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_MULTSIGNOUT((3 - 0)- 1*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_MULTSIGNOUT((3 - 0)- 1*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_MULTSIGNOUT((3 - 0)- 1*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_MULTSIGNOUT((17 - 0)- 1*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_MULTSIGNOUT((17 - 0)- 1*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_MULTSIGNOUT((17 - 0)- 1*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_MULTSIGNOUT((17 - 0)- 1*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_MULTSIGNOUT((17 - 0)- 1*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_MULTSIGNOUT((17 - 0)- 1*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_MULTSIGNOUT((17 - 0)- 1*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_MULTSIGNOUT((17 - 0)- 1*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_MULTSIGNOUT((17 - 0)- 1*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_MULTSIGNOUT((17 - 0)- 1*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_MULTSIGNOUT((17 - 0)- 1*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_MULTSIGNOUT((17 - 0)- 1*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_MULTSIGNOUT((17 - 0)- 1*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_MULTSIGNOUT((17 - 0)- 1*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_MULTSIGNOUT((17 - 0)- 1*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_MULTSIGNOUT((17 - 0)- 1*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_MULTSIGNOUT((17 - 0)- 1*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_MULTSIGNOUT((17 - 0)- 1*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_MULTSIGNOUT((17 - 0)- 1*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_MULTSIGNOUT((17 - 0)- 1*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_MULTSIGNOUT((17 - 0)- 1*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_MULTSIGNOUT((17 - 0)- 1*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_MULTSIGNOUT((17 - 0)- 1*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_MULTSIGNOUT((17 - 0)- 1*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_MULTSIGNOUT((17 - 0)- 1*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_MULTSIGNOUT((17 - 0)- 1*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_MULTSIGNOUT((17 - 0)- 1*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_MULTSIGNOUT((17 - 0)- 1*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_MULTSIGNOUT((17 - 0)- 1*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_MULTSIGNOUT((17 - 0)- 1*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_MULTSIGNOUT((17 - 0)- 1*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_MULTSIGNOUT((17 - 0)- 1*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_MULTSIGNOUT((17 - 0)- 1*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_MULTSIGNOUT((17 - 0)- 1*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_MULTSIGNOUT((17 - 0)- 1*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_MULTSIGNOUT((17 - 0)- 1*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_MULTSIGNOUT((47 - 0)- 1*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_MULTSIGNOUT, true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_MULTSIGNOUT, true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_MULTSIGNOUT((2 - 0)- 1*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_MULTSIGNOUT((2 - 0)- 1*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_MULTSIGNOUT((2 - 0)- 1*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_MULTSIGNOUT, true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_MULTSIGNOUT((6 - 0)- 1*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_MULTSIGNOUT((6 - 0)- 1*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_MULTSIGNOUT((6 - 0)- 1*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_MULTSIGNOUT((6 - 0)- 1*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_MULTSIGNOUT((6 - 0)- 1*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_MULTSIGNOUT((6 - 0)- 1*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_MULTSIGNOUT((6 - 0)- 1*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_MULTSIGNOUT((47 - 0)- 1*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_MULTSIGNOUT, true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> OVERFLOW,
         GlitchData	=> OVERFLOW_GlitchData,
         OutSignalName	=> "OVERFLOW",
         OutTemp	=> OVERFLOW_zd,
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_OVERFLOW((29 - 0)- 1*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_OVERFLOW((29 - 0)- 1*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_OVERFLOW((29 - 0)- 1*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_OVERFLOW((29 - 0)- 1*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_OVERFLOW((29 - 0)- 1*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_OVERFLOW((29 - 0)- 1*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_OVERFLOW((29 - 0)- 1*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_OVERFLOW((29 - 0)- 1*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_OVERFLOW((29 - 0)- 1*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_OVERFLOW((29 - 0)- 1*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_OVERFLOW((29 - 0)- 1*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_OVERFLOW((29 - 0)- 1*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_OVERFLOW((29 - 0)- 1*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_OVERFLOW((29 - 0)- 1*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_OVERFLOW((29 - 0)- 1*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_OVERFLOW((29 - 0)- 1*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_OVERFLOW((29 - 0)- 1*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_OVERFLOW((29 - 0)- 1*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_OVERFLOW((29 - 0)- 1*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_OVERFLOW((29 - 0)- 1*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_OVERFLOW((29 - 0)- 1*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_OVERFLOW((29 - 0)- 1*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_OVERFLOW((29 - 0)- 1*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_OVERFLOW((29 - 0)- 1*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_OVERFLOW((29 - 0)- 1*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_OVERFLOW((29 - 0)- 1*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_OVERFLOW((29 - 0)- 1*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_OVERFLOW((29 - 0)- 1*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_OVERFLOW((29 - 0)- 1*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_OVERFLOW((29 - 0)- 1*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_OVERFLOW((29 - 0)- 1*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_OVERFLOW((29 - 0)- 1*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_OVERFLOW((29 - 0)- 1*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_OVERFLOW((29 - 0)- 1*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_OVERFLOW((29 - 0)- 1*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_OVERFLOW((29 - 0)- 1*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_OVERFLOW((29 - 0)- 1*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_OVERFLOW((29 - 0)- 1*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_OVERFLOW((29 - 0)- 1*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_OVERFLOW((29 - 0)- 1*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_OVERFLOW((29 - 0)- 1*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_OVERFLOW((29 - 0)- 1*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_OVERFLOW((29 - 0)- 1*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_OVERFLOW((29 - 0)- 1*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_OVERFLOW((29 - 0)- 1*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_OVERFLOW((29 - 0)- 1*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_OVERFLOW((29 - 0)- 1*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_OVERFLOW((29 - 0)- 1*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_OVERFLOW((29 - 0)- 1*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_OVERFLOW((29 - 0)- 1*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_OVERFLOW((29 - 0)- 1*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_OVERFLOW((29 - 0)- 1*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_OVERFLOW((29 - 0)- 1*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_OVERFLOW((29 - 0)- 1*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_OVERFLOW((29 - 0)- 1*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_OVERFLOW((29 - 0)- 1*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_OVERFLOW((29 - 0)- 1*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_OVERFLOW((29 - 0)- 1*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_OVERFLOW((29 - 0)- 1*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_OVERFLOW((29 - 0)- 1*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_OVERFLOW((3 - 0)- 1*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_OVERFLOW((3 - 0)- 1*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_OVERFLOW((3 - 0)- 1*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_OVERFLOW((3 - 0)- 1*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_OVERFLOW((17 - 0)- 1*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_OVERFLOW((17 - 0)- 1*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_OVERFLOW((17 - 0)- 1*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_OVERFLOW((17 - 0)- 1*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_OVERFLOW((17 - 0)- 1*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_OVERFLOW((17 - 0)- 1*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_OVERFLOW((17 - 0)- 1*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_OVERFLOW((17 - 0)- 1*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_OVERFLOW((17 - 0)- 1*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_OVERFLOW((17 - 0)- 1*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_OVERFLOW((17 - 0)- 1*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_OVERFLOW((17 - 0)- 1*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_OVERFLOW((17 - 0)- 1*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_OVERFLOW((17 - 0)- 1*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_OVERFLOW((17 - 0)- 1*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_OVERFLOW((17 - 0)- 1*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_OVERFLOW((17 - 0)- 1*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_OVERFLOW((17 - 0)- 1*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_OVERFLOW((17 - 0)- 1*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_OVERFLOW((17 - 0)- 1*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_OVERFLOW((17 - 0)- 1*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_OVERFLOW((17 - 0)- 1*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_OVERFLOW((17 - 0)- 1*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_OVERFLOW((17 - 0)- 1*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_OVERFLOW((17 - 0)- 1*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_OVERFLOW((17 - 0)- 1*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_OVERFLOW((17 - 0)- 1*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_OVERFLOW((17 - 0)- 1*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_OVERFLOW((17 - 0)- 1*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_OVERFLOW((17 - 0)- 1*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_OVERFLOW((17 - 0)- 1*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_OVERFLOW((17 - 0)- 1*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_OVERFLOW((17 - 0)- 1*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_OVERFLOW((17 - 0)- 1*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_OVERFLOW((17 - 0)- 1*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_OVERFLOW((17 - 0)- 1*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_OVERFLOW((47 - 0)- 1*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_OVERFLOW, true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_OVERFLOW, true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_OVERFLOW((2 - 0)- 1*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_OVERFLOW((2 - 0)- 1*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_OVERFLOW((2 - 0)- 1*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_OVERFLOW, true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_OVERFLOW((6 - 0)- 1*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_OVERFLOW((6 - 0)- 1*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_OVERFLOW((6 - 0)- 1*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_OVERFLOW((6 - 0)- 1*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_OVERFLOW((6 - 0)- 1*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_OVERFLOW((6 - 0)- 1*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_OVERFLOW((6 - 0)- 1*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_OVERFLOW((47 - 0)- 1*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_OVERFLOW, true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(47),
         GlitchData	=> P_GlitchData(47),
         OutSignalName	=> "P(47)",
         OutTemp	=> P_zd(47),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 0)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 0)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 0)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 0)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 0)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 0)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 0)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 0)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 0)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 0)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 0)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 0)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 0)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 0)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 0)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 0)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 0)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 0)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 0)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 0)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 0)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 0)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 0)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 0)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 0)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 0)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 0)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 0)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 0)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 0)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 0)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 0)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 0)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 0)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 0)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 0)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 0)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 0)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 0)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 0)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 0)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 0)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 0)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 0)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 0)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 0)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 0)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 0)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 0)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 0)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 0)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 0)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 0)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 0)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 0)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 0)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 0)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 0)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 0)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 0)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 0)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 0)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 0)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 0)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 0)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 0)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 0)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 0)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 0)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 0)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 0)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 0)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 0)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 0)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 0)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 0)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 0)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 0)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 0)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 0)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 0)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 0)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 0)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 0)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 0)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 0)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 0)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 0)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 0)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 0)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 0)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 0)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 0)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 0)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 0)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 0)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 0)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 0)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 0)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 0)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(47), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(47), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 0)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 0)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 0)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(47), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 0)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 0)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 0)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 0)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 0)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 0)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 0)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(47), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(46),
         GlitchData	=> P_GlitchData(46),
         OutSignalName	=> "P(46)",
         OutTemp	=> P_zd(46),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 1)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 1)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 1)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 1)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 1)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 1)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 1)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 1)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 1)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 1)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 1)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 1)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 1)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 1)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 1)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 1)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 1)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 1)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 1)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 1)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 1)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 1)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 1)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 1)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 1)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 1)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 1)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 1)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 1)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 1)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 1)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 1)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 1)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 1)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 1)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 1)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 1)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 1)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 1)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 1)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 1)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 1)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 1)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 1)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 1)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 1)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 1)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 1)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 1)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 1)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 1)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 1)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 1)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 1)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 1)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 1)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 1)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 1)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 1)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 1)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 1)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 1)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 1)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 1)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 1)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 1)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 1)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 1)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 1)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 1)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 1)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 1)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 1)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 1)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 1)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 1)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 1)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 1)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 1)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 1)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 1)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 1)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 1)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 1)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 1)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 1)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 1)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 1)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 1)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 1)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 1)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 1)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 1)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 1)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 1)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 1)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 1)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 1)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 1)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 1)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 1)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(46), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(46), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 1)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 1)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 1)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(46), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 1)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 1)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 1)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 1)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 1)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 1)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 1)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 1)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(46), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(45),
         GlitchData	=> P_GlitchData(45),
         OutSignalName	=> "P(45)",
         OutTemp	=> P_zd(45),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 2)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 2)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 2)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 2)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 2)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 2)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 2)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 2)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 2)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 2)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 2)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 2)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 2)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 2)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 2)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 2)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 2)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 2)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 2)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 2)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 2)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 2)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 2)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 2)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 2)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 2)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 2)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 2)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 2)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 2)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 2)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 2)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 2)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 2)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 2)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 2)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 2)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 2)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 2)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 2)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 2)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 2)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 2)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 2)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 2)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 2)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 2)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 2)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 2)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 2)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 2)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 2)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 2)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 2)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 2)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 2)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 2)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 2)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 2)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 2)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 2)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 2)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 2)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 2)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 2)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 2)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 2)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 2)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 2)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 2)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 2)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 2)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 2)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 2)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 2)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 2)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 2)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 2)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 2)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 2)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 2)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 2)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 2)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 2)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 2)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 2)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 2)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 2)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 2)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 2)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 2)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 2)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 2)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 2)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 2)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 2)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 2)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 2)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 2)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 2)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 2)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(45), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(45), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 2)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 2)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 2)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(45), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 2)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 2)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 2)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 2)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 2)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 2)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 2)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 2)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(45), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(44),
         GlitchData	=> P_GlitchData(44),
         OutSignalName	=> "P(44)",
         OutTemp	=> P_zd(44),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 3)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 3)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 3)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 3)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 3)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 3)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 3)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 3)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 3)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 3)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 3)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 3)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 3)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 3)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 3)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 3)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 3)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 3)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 3)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 3)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 3)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 3)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 3)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 3)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 3)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 3)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 3)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 3)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 3)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 3)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 3)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 3)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 3)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 3)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 3)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 3)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 3)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 3)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 3)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 3)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 3)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 3)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 3)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 3)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 3)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 3)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 3)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 3)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 3)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 3)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 3)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 3)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 3)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 3)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 3)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 3)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 3)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 3)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 3)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 3)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 3)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 3)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 3)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 3)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 3)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 3)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 3)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 3)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 3)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 3)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 3)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 3)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 3)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 3)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 3)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 3)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 3)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 3)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 3)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 3)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 3)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 3)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 3)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 3)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 3)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 3)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 3)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 3)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 3)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 3)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 3)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 3)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 3)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 3)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 3)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 3)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 3)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 3)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 3)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 3)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 3)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(44), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(44), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 3)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 3)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 3)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(44), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 3)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 3)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 3)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 3)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 3)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 3)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 3)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 3)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(44), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(43),
         GlitchData	=> P_GlitchData(43),
         OutSignalName	=> "P(43)",
         OutTemp	=> P_zd(43),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 4)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 4)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 4)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 4)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 4)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 4)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 4)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 4)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 4)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 4)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 4)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 4)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 4)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 4)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 4)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 4)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 4)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 4)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 4)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 4)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 4)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 4)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 4)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 4)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 4)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 4)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 4)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 4)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 4)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 4)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 4)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 4)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 4)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 4)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 4)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 4)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 4)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 4)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 4)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 4)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 4)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 4)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 4)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 4)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 4)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 4)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 4)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 4)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 4)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 4)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 4)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 4)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 4)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 4)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 4)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 4)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 4)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 4)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 4)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 4)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 4)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 4)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 4)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 4)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 4)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 4)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 4)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 4)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 4)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 4)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 4)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 4)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 4)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 4)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 4)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 4)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 4)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 4)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 4)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 4)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 4)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 4)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 4)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 4)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 4)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 4)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 4)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 4)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 4)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 4)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 4)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 4)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 4)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 4)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 4)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 4)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 4)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 4)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 4)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 4)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 4)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(43), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(43), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 4)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 4)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 4)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(43), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 4)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 4)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 4)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 4)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 4)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 4)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 4)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 4)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(43), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(42),
         GlitchData	=> P_GlitchData(42),
         OutSignalName	=> "P(42)",
         OutTemp	=> P_zd(42),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 5)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 5)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 5)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 5)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 5)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 5)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 5)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 5)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 5)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 5)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 5)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 5)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 5)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 5)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 5)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 5)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 5)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 5)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 5)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 5)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 5)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 5)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 5)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 5)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 5)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 5)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 5)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 5)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 5)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 5)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 5)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 5)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 5)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 5)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 5)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 5)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 5)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 5)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 5)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 5)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 5)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 5)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 5)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 5)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 5)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 5)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 5)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 5)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 5)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 5)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 5)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 5)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 5)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 5)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 5)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 5)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 5)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 5)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 5)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 5)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 5)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 5)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 5)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 5)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 5)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 5)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 5)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 5)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 5)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 5)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 5)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 5)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 5)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 5)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 5)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 5)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 5)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 5)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 5)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 5)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 5)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 5)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 5)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 5)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 5)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 5)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 5)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 5)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 5)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 5)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 5)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 5)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 5)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 5)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 5)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 5)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 5)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 5)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 5)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 5)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 5)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(42), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(42), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 5)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 5)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 5)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(42), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 5)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 5)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 5)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 5)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 5)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 5)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 5)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 5)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(42), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(41),
         GlitchData	=> P_GlitchData(41),
         OutSignalName	=> "P(41)",
         OutTemp	=> P_zd(41),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 6)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 6)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 6)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 6)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 6)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 6)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 6)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 6)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 6)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 6)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 6)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 6)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 6)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 6)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 6)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 6)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 6)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 6)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 6)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 6)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 6)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 6)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 6)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 6)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 6)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 6)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 6)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 6)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 6)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 6)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 6)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 6)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 6)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 6)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 6)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 6)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 6)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 6)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 6)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 6)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 6)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 6)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 6)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 6)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 6)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 6)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 6)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 6)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 6)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 6)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 6)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 6)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 6)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 6)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 6)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 6)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 6)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 6)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 6)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 6)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 6)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 6)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 6)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 6)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 6)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 6)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 6)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 6)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 6)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 6)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 6)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 6)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 6)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 6)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 6)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 6)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 6)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 6)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 6)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 6)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 6)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 6)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 6)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 6)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 6)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 6)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 6)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 6)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 6)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 6)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 6)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 6)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 6)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 6)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 6)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 6)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 6)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 6)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 6)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 6)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 6)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(41), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(41), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 6)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 6)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 6)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(41), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 6)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 6)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 6)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 6)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 6)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 6)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 6)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 6)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(41), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(40),
         GlitchData	=> P_GlitchData(40),
         OutSignalName	=> "P(40)",
         OutTemp	=> P_zd(40),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 7)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 7)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 7)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 7)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 7)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 7)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 7)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 7)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 7)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 7)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 7)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 7)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 7)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 7)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 7)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 7)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 7)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 7)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 7)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 7)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 7)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 7)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 7)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 7)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 7)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 7)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 7)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 7)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 7)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 7)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 7)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 7)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 7)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 7)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 7)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 7)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 7)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 7)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 7)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 7)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 7)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 7)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 7)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 7)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 7)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 7)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 7)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 7)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 7)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 7)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 7)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 7)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 7)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 7)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 7)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 7)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 7)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 7)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 7)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 7)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 7)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 7)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 7)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 7)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 7)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 7)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 7)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 7)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 7)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 7)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 7)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 7)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 7)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 7)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 7)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 7)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 7)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 7)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 7)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 7)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 7)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 7)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 7)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 7)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 7)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 7)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 7)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 7)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 7)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 7)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 7)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 7)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 7)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 7)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 7)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 7)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 7)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 7)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 7)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 7)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 7)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(40), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(40), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 7)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 7)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 7)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(40), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 7)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 7)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 7)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 7)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 7)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 7)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 7)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 7)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(40), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(39),
         GlitchData	=> P_GlitchData(39),
         OutSignalName	=> "P(39)",
         OutTemp	=> P_zd(39),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 8)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 8)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 8)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 8)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 8)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 8)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 8)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 8)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 8)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 8)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 8)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 8)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 8)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 8)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 8)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 8)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 8)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 8)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 8)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 8)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 8)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 8)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 8)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 8)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 8)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 8)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 8)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 8)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 8)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 8)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 8)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 8)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 8)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 8)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 8)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 8)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 8)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 8)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 8)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 8)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 8)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 8)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 8)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 8)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 8)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 8)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 8)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 8)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 8)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 8)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 8)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 8)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 8)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 8)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 8)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 8)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 8)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 8)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 8)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 8)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 8)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 8)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 8)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 8)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 8)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 8)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 8)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 8)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 8)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 8)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 8)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 8)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 8)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 8)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 8)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 8)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 8)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 8)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 8)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 8)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 8)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 8)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 8)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 8)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 8)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 8)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 8)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 8)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 8)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 8)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 8)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 8)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 8)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 8)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 8)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 8)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 8)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 8)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 8)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 8)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 8)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(39), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(39), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 8)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 8)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 8)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(39), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 8)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 8)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 8)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 8)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 8)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 8)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 8)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 8)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(39), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(38),
         GlitchData	=> P_GlitchData(38),
         OutSignalName	=> "P(38)",
         OutTemp	=> P_zd(38),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 9)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 9)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 9)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 9)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 9)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 9)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 9)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 9)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 9)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 9)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 9)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 9)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 9)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 9)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 9)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 9)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 9)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 9)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 9)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 9)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 9)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 9)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 9)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 9)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 9)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 9)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 9)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 9)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 9)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 9)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 9)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 9)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 9)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 9)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 9)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 9)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 9)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 9)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 9)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 9)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 9)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 9)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 9)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 9)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 9)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 9)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 9)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 9)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 9)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 9)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 9)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 9)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 9)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 9)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 9)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 9)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 9)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 9)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 9)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 9)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 9)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 9)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 9)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 9)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 9)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 9)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 9)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 9)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 9)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 9)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 9)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 9)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 9)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 9)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 9)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 9)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 9)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 9)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 9)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 9)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 9)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 9)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 9)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 9)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 9)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 9)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 9)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 9)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 9)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 9)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 9)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 9)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 9)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 9)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 9)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 9)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 9)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 9)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 9)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 9)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 9)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(38), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(38), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 9)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 9)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 9)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(38), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 9)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 9)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 9)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 9)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 9)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 9)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 9)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 9)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(38), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(37),
         GlitchData	=> P_GlitchData(37),
         OutSignalName	=> "P(37)",
         OutTemp	=> P_zd(37),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 10)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 10)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 10)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 10)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 10)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 10)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 10)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 10)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 10)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 10)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 10)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 10)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 10)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 10)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 10)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 10)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 10)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 10)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 10)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 10)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 10)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 10)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 10)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 10)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 10)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 10)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 10)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 10)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 10)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 10)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 10)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 10)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 10)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 10)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 10)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 10)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 10)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 10)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 10)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 10)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 10)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 10)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 10)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 10)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 10)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 10)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 10)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 10)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 10)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 10)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 10)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 10)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 10)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 10)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 10)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 10)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 10)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 10)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 10)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 10)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 10)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 10)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 10)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 10)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 10)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 10)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 10)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 10)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 10)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 10)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 10)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 10)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 10)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 10)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 10)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 10)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 10)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 10)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 10)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 10)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 10)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 10)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 10)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 10)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 10)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 10)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 10)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 10)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 10)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 10)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 10)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 10)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 10)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 10)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 10)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 10)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 10)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 10)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 10)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 10)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 10)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(37), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(37), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 10)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 10)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 10)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(37), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 10)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 10)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 10)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 10)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 10)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 10)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 10)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 10)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(37), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(36),
         GlitchData	=> P_GlitchData(36),
         OutSignalName	=> "P(36)",
         OutTemp	=> P_zd(36),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 11)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 11)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 11)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 11)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 11)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 11)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 11)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 11)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 11)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 11)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 11)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 11)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 11)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 11)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 11)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 11)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 11)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 11)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 11)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 11)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 11)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 11)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 11)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 11)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 11)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 11)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 11)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 11)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 11)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 11)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 11)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 11)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 11)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 11)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 11)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 11)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 11)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 11)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 11)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 11)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 11)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 11)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 11)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 11)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 11)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 11)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 11)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 11)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 11)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 11)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 11)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 11)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 11)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 11)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 11)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 11)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 11)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 11)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 11)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 11)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 11)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 11)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 11)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 11)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 11)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 11)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 11)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 11)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 11)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 11)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 11)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 11)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 11)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 11)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 11)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 11)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 11)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 11)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 11)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 11)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 11)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 11)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 11)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 11)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 11)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 11)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 11)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 11)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 11)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 11)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 11)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 11)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 11)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 11)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 11)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 11)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 11)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 11)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 11)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 11)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 11)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(36), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(36), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 11)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 11)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 11)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(36), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 11)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 11)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 11)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 11)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 11)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 11)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 11)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 11)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(36), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(35),
         GlitchData	=> P_GlitchData(35),
         OutSignalName	=> "P(35)",
         OutTemp	=> P_zd(35),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 12)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 12)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 12)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 12)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 12)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 12)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 12)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 12)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 12)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 12)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 12)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 12)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 12)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 12)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 12)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 12)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 12)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 12)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 12)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 12)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 12)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 12)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 12)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 12)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 12)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 12)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 12)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 12)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 12)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 12)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 12)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 12)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 12)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 12)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 12)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 12)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 12)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 12)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 12)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 12)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 12)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 12)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 12)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 12)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 12)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 12)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 12)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 12)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 12)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 12)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 12)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 12)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 12)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 12)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 12)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 12)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 12)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 12)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 12)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 12)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 12)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 12)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 12)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 12)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 12)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 12)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 12)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 12)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 12)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 12)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 12)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 12)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 12)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 12)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 12)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 12)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 12)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 12)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 12)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 12)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 12)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 12)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 12)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 12)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 12)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 12)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 12)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 12)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 12)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 12)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 12)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 12)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 12)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 12)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 12)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 12)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 12)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 12)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 12)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 12)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 12)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(35), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(35), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 12)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 12)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 12)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(35), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 12)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 12)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 12)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 12)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 12)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 12)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 12)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 12)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(35), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(34),
         GlitchData	=> P_GlitchData(34),
         OutSignalName	=> "P(34)",
         OutTemp	=> P_zd(34),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 13)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 13)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 13)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 13)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 13)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 13)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 13)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 13)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 13)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 13)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 13)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 13)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 13)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 13)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 13)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 13)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 13)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 13)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 13)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 13)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 13)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 13)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 13)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 13)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 13)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 13)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 13)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 13)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 13)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 13)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 13)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 13)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 13)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 13)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 13)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 13)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 13)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 13)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 13)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 13)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 13)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 13)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 13)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 13)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 13)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 13)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 13)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 13)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 13)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 13)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 13)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 13)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 13)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 13)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 13)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 13)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 13)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 13)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 13)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 13)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 13)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 13)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 13)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 13)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 13)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 13)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 13)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 13)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 13)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 13)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 13)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 13)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 13)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 13)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 13)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 13)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 13)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 13)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 13)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 13)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 13)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 13)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 13)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 13)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 13)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 13)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 13)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 13)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 13)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 13)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 13)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 13)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 13)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 13)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 13)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 13)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 13)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 13)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 13)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 13)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 13)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(34), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(34), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 13)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 13)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 13)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(34), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 13)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 13)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 13)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 13)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 13)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 13)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 13)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 13)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(34), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(33),
         GlitchData	=> P_GlitchData(33),
         OutSignalName	=> "P(33)",
         OutTemp	=> P_zd(33),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 14)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 14)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 14)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 14)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 14)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 14)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 14)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 14)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 14)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 14)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 14)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 14)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 14)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 14)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 14)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 14)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 14)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 14)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 14)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 14)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 14)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 14)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 14)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 14)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 14)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 14)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 14)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 14)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 14)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 14)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 14)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 14)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 14)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 14)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 14)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 14)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 14)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 14)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 14)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 14)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 14)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 14)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 14)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 14)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 14)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 14)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 14)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 14)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 14)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 14)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 14)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 14)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 14)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 14)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 14)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 14)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 14)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 14)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 14)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 14)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 14)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 14)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 14)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 14)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 14)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 14)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 14)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 14)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 14)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 14)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 14)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 14)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 14)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 14)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 14)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 14)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 14)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 14)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 14)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 14)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 14)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 14)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 14)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 14)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 14)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 14)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 14)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 14)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 14)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 14)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 14)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 14)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 14)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 14)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 14)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 14)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 14)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 14)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 14)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 14)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 14)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(33), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(33), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 14)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 14)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 14)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(33), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 14)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 14)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 14)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 14)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 14)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 14)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 14)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 14)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(33), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(32),
         GlitchData	=> P_GlitchData(32),
         OutSignalName	=> "P(32)",
         OutTemp	=> P_zd(32),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 15)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 15)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 15)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 15)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 15)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 15)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 15)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 15)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 15)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 15)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 15)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 15)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 15)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 15)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 15)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 15)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 15)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 15)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 15)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 15)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 15)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 15)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 15)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 15)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 15)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 15)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 15)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 15)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 15)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 15)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 15)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 15)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 15)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 15)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 15)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 15)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 15)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 15)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 15)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 15)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 15)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 15)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 15)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 15)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 15)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 15)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 15)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 15)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 15)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 15)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 15)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 15)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 15)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 15)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 15)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 15)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 15)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 15)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 15)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 15)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 15)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 15)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 15)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 15)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 15)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 15)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 15)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 15)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 15)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 15)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 15)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 15)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 15)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 15)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 15)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 15)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 15)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 15)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 15)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 15)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 15)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 15)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 15)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 15)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 15)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 15)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 15)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 15)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 15)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 15)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 15)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 15)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 15)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 15)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 15)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 15)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 15)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 15)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 15)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 15)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 15)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(32), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(32), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 15)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 15)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 15)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(32), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 15)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 15)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 15)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 15)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 15)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 15)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 15)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 15)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(32), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(31),
         GlitchData	=> P_GlitchData(31),
         OutSignalName	=> "P(31)",
         OutTemp	=> P_zd(31),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 16)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 16)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 16)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 16)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 16)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 16)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 16)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 16)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 16)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 16)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 16)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 16)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 16)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 16)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 16)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 16)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 16)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 16)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 16)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 16)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 16)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 16)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 16)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 16)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 16)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 16)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 16)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 16)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 16)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 16)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 16)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 16)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 16)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 16)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 16)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 16)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 16)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 16)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 16)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 16)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 16)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 16)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 16)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 16)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 16)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 16)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 16)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 16)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 16)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 16)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 16)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 16)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 16)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 16)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 16)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 16)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 16)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 16)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 16)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 16)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 16)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 16)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 16)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 16)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 16)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 16)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 16)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 16)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 16)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 16)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 16)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 16)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 16)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 16)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 16)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 16)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 16)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 16)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 16)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 16)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 16)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 16)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 16)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 16)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 16)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 16)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 16)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 16)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 16)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 16)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 16)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 16)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 16)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 16)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 16)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 16)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 16)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 16)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 16)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 16)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 16)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(31), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(31), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 16)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 16)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 16)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(31), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 16)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 16)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 16)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 16)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 16)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 16)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 16)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 16)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(31), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(30),
         GlitchData	=> P_GlitchData(30),
         OutSignalName	=> "P(30)",
         OutTemp	=> P_zd(30),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 17)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 17)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 17)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 17)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 17)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 17)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 17)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 17)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 17)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 17)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 17)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 17)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 17)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 17)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 17)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 17)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 17)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 17)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 17)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 17)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 17)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 17)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 17)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 17)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 17)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 17)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 17)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 17)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 17)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 17)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 17)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 17)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 17)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 17)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 17)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 17)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 17)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 17)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 17)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 17)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 17)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 17)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 17)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 17)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 17)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 17)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 17)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 17)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 17)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 17)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 17)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 17)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 17)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 17)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 17)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 17)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 17)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 17)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 17)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 17)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 17)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 17)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 17)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 17)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 17)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 17)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 17)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 17)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 17)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 17)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 17)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 17)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 17)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 17)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 17)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 17)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 17)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 17)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 17)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 17)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 17)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 17)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 17)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 17)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 17)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 17)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 17)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 17)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 17)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 17)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 17)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 17)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 17)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 17)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 17)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 17)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 17)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 17)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 17)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 17)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 17)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(30), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(30), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 17)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 17)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 17)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(30), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 17)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 17)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 17)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 17)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 17)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 17)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 17)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 17)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(30), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(29),
         GlitchData	=> P_GlitchData(29),
         OutSignalName	=> "P(29)",
         OutTemp	=> P_zd(29),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 18)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 18)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 18)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 18)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 18)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 18)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 18)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 18)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 18)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 18)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 18)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 18)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 18)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 18)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 18)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 18)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 18)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 18)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 18)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 18)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 18)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 18)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 18)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 18)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 18)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 18)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 18)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 18)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 18)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 18)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 18)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 18)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 18)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 18)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 18)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 18)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 18)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 18)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 18)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 18)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 18)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 18)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 18)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 18)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 18)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 18)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 18)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 18)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 18)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 18)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 18)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 18)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 18)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 18)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 18)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 18)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 18)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 18)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 18)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 18)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 18)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 18)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 18)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 18)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 18)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 18)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 18)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 18)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 18)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 18)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 18)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 18)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 18)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 18)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 18)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 18)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 18)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 18)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 18)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 18)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 18)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 18)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 18)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 18)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 18)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 18)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 18)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 18)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 18)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 18)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 18)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 18)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 18)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 18)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 18)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 18)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 18)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 18)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 18)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 18)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 18)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(29), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(29), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 18)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 18)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 18)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(29), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 18)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 18)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 18)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 18)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 18)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 18)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 18)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 18)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(29), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(28),
         GlitchData	=> P_GlitchData(28),
         OutSignalName	=> "P(28)",
         OutTemp	=> P_zd(28),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 19)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 19)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 19)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 19)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 19)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 19)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 19)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 19)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 19)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 19)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 19)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 19)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 19)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 19)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 19)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 19)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 19)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 19)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 19)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 19)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 19)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 19)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 19)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 19)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 19)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 19)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 19)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 19)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 19)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 19)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 19)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 19)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 19)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 19)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 19)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 19)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 19)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 19)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 19)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 19)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 19)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 19)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 19)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 19)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 19)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 19)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 19)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 19)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 19)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 19)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 19)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 19)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 19)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 19)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 19)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 19)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 19)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 19)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 19)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 19)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 19)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 19)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 19)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 19)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 19)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 19)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 19)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 19)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 19)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 19)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 19)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 19)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 19)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 19)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 19)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 19)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 19)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 19)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 19)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 19)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 19)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 19)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 19)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 19)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 19)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 19)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 19)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 19)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 19)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 19)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 19)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 19)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 19)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 19)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 19)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 19)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 19)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 19)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 19)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 19)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 19)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(28), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(28), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 19)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 19)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 19)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(28), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 19)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 19)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 19)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 19)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 19)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 19)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 19)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 19)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(28), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(27),
         GlitchData	=> P_GlitchData(27),
         OutSignalName	=> "P(27)",
         OutTemp	=> P_zd(27),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 20)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 20)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 20)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 20)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 20)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 20)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 20)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 20)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 20)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 20)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 20)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 20)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 20)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 20)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 20)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 20)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 20)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 20)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 20)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 20)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 20)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 20)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 20)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 20)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 20)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 20)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 20)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 20)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 20)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 20)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 20)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 20)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 20)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 20)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 20)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 20)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 20)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 20)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 20)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 20)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 20)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 20)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 20)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 20)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 20)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 20)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 20)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 20)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 20)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 20)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 20)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 20)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 20)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 20)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 20)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 20)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 20)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 20)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 20)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 20)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 20)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 20)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 20)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 20)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 20)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 20)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 20)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 20)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 20)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 20)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 20)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 20)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 20)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 20)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 20)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 20)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 20)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 20)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 20)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 20)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 20)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 20)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 20)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 20)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 20)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 20)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 20)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 20)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 20)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 20)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 20)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 20)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 20)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 20)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 20)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 20)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 20)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 20)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 20)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 20)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 20)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(27), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(27), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 20)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 20)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 20)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(27), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 20)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 20)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 20)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 20)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 20)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 20)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 20)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 20)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(27), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(26),
         GlitchData	=> P_GlitchData(26),
         OutSignalName	=> "P(26)",
         OutTemp	=> P_zd(26),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 21)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 21)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 21)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 21)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 21)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 21)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 21)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 21)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 21)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 21)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 21)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 21)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 21)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 21)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 21)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 21)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 21)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 21)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 21)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 21)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 21)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 21)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 21)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 21)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 21)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 21)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 21)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 21)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 21)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 21)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 21)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 21)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 21)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 21)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 21)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 21)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 21)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 21)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 21)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 21)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 21)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 21)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 21)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 21)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 21)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 21)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 21)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 21)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 21)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 21)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 21)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 21)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 21)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 21)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 21)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 21)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 21)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 21)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 21)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 21)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 21)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 21)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 21)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 21)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 21)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 21)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 21)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 21)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 21)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 21)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 21)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 21)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 21)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 21)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 21)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 21)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 21)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 21)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 21)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 21)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 21)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 21)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 21)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 21)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 21)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 21)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 21)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 21)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 21)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 21)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 21)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 21)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 21)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 21)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 21)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 21)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 21)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 21)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 21)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 21)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 21)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(26), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(26), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 21)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 21)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 21)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(26), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 21)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 21)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 21)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 21)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 21)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 21)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 21)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 21)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(26), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(25),
         GlitchData	=> P_GlitchData(25),
         OutSignalName	=> "P(25)",
         OutTemp	=> P_zd(25),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 22)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 22)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 22)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 22)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 22)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 22)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 22)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 22)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 22)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 22)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 22)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 22)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 22)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 22)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 22)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 22)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 22)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 22)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 22)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 22)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 22)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 22)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 22)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 22)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 22)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 22)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 22)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 22)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 22)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 22)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 22)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 22)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 22)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 22)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 22)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 22)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 22)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 22)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 22)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 22)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 22)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 22)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 22)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 22)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 22)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 22)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 22)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 22)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 22)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 22)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 22)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 22)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 22)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 22)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 22)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 22)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 22)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 22)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 22)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 22)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 22)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 22)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 22)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 22)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 22)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 22)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 22)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 22)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 22)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 22)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 22)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 22)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 22)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 22)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 22)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 22)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 22)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 22)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 22)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 22)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 22)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 22)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 22)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 22)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 22)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 22)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 22)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 22)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 22)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 22)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 22)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 22)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 22)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 22)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 22)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 22)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 22)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 22)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 22)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 22)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 22)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(25), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(25), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 22)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 22)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 22)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(25), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 22)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 22)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 22)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 22)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 22)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 22)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 22)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 22)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(25), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(24),
         GlitchData	=> P_GlitchData(24),
         OutSignalName	=> "P(24)",
         OutTemp	=> P_zd(24),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 23)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 23)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 23)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 23)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 23)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 23)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 23)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 23)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 23)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 23)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 23)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 23)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 23)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 23)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 23)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 23)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 23)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 23)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 23)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 23)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 23)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 23)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 23)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 23)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 23)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 23)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 23)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 23)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 23)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 23)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 23)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 23)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 23)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 23)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 23)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 23)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 23)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 23)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 23)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 23)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 23)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 23)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 23)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 23)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 23)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 23)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 23)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 23)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 23)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 23)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 23)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 23)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 23)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 23)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 23)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 23)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 23)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 23)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 23)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 23)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 23)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 23)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 23)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 23)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 23)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 23)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 23)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 23)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 23)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 23)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 23)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 23)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 23)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 23)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 23)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 23)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 23)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 23)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 23)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 23)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 23)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 23)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 23)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 23)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 23)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 23)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 23)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 23)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 23)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 23)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 23)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 23)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 23)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 23)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 23)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 23)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 23)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 23)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 23)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 23)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 23)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(24), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(24), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 23)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 23)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 23)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(24), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 23)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 23)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 23)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 23)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 23)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 23)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 23)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 23)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(24), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(23),
         GlitchData	=> P_GlitchData(23),
         OutSignalName	=> "P(23)",
         OutTemp	=> P_zd(23),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 24)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 24)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 24)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 24)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 24)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 24)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 24)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 24)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 24)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 24)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 24)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 24)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 24)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 24)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 24)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 24)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 24)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 24)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 24)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 24)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 24)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 24)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 24)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 24)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 24)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 24)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 24)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 24)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 24)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 24)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 24)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 24)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 24)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 24)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 24)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 24)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 24)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 24)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 24)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 24)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 24)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 24)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 24)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 24)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 24)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 24)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 24)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 24)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 24)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 24)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 24)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 24)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 24)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 24)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 24)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 24)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 24)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 24)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 24)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 24)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 24)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 24)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 24)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 24)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 24)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 24)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 24)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 24)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 24)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 24)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 24)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 24)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 24)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 24)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 24)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 24)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 24)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 24)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 24)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 24)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 24)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 24)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 24)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 24)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 24)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 24)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 24)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 24)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 24)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 24)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 24)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 24)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 24)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 24)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 24)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 24)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 24)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 24)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 24)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 24)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 24)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(23), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(23), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 24)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 24)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 24)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(23), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 24)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 24)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 24)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 24)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 24)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 24)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 24)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 24)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(23), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(22),
         GlitchData	=> P_GlitchData(22),
         OutSignalName	=> "P(22)",
         OutTemp	=> P_zd(22),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 25)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 25)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 25)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 25)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 25)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 25)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 25)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 25)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 25)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 25)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 25)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 25)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 25)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 25)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 25)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 25)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 25)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 25)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 25)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 25)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 25)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 25)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 25)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 25)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 25)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 25)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 25)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 25)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 25)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 25)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 25)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 25)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 25)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 25)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 25)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 25)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 25)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 25)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 25)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 25)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 25)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 25)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 25)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 25)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 25)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 25)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 25)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 25)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 25)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 25)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 25)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 25)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 25)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 25)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 25)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 25)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 25)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 25)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 25)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 25)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 25)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 25)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 25)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 25)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 25)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 25)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 25)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 25)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 25)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 25)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 25)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 25)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 25)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 25)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 25)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 25)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 25)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 25)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 25)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 25)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 25)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 25)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 25)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 25)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 25)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 25)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 25)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 25)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 25)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 25)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 25)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 25)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 25)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 25)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 25)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 25)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 25)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 25)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 25)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 25)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 25)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(22), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(22), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 25)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 25)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 25)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(22), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 25)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 25)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 25)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 25)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 25)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 25)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 25)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 25)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(22), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(21),
         GlitchData	=> P_GlitchData(21),
         OutSignalName	=> "P(21)",
         OutTemp	=> P_zd(21),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 26)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 26)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 26)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 26)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 26)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 26)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 26)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 26)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 26)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 26)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 26)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 26)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 26)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 26)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 26)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 26)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 26)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 26)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 26)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 26)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 26)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 26)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 26)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 26)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 26)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 26)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 26)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 26)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 26)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 26)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 26)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 26)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 26)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 26)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 26)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 26)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 26)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 26)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 26)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 26)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 26)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 26)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 26)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 26)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 26)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 26)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 26)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 26)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 26)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 26)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 26)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 26)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 26)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 26)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 26)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 26)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 26)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 26)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 26)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 26)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 26)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 26)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 26)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 26)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 26)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 26)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 26)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 26)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 26)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 26)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 26)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 26)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 26)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 26)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 26)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 26)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 26)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 26)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 26)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 26)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 26)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 26)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 26)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 26)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 26)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 26)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 26)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 26)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 26)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 26)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 26)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 26)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 26)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 26)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 26)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 26)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 26)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 26)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 26)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 26)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 26)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(21), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(21), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 26)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 26)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 26)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(21), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 26)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 26)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 26)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 26)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 26)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 26)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 26)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 26)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(21), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(20),
         GlitchData	=> P_GlitchData(20),
         OutSignalName	=> "P(20)",
         OutTemp	=> P_zd(20),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 27)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 27)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 27)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 27)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 27)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 27)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 27)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 27)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 27)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 27)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 27)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 27)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 27)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 27)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 27)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 27)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 27)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 27)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 27)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 27)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 27)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 27)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 27)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 27)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 27)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 27)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 27)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 27)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 27)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 27)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 27)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 27)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 27)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 27)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 27)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 27)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 27)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 27)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 27)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 27)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 27)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 27)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 27)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 27)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 27)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 27)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 27)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 27)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 27)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 27)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 27)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 27)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 27)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 27)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 27)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 27)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 27)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 27)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 27)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 27)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 27)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 27)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 27)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 27)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 27)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 27)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 27)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 27)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 27)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 27)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 27)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 27)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 27)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 27)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 27)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 27)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 27)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 27)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 27)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 27)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 27)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 27)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 27)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 27)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 27)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 27)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 27)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 27)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 27)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 27)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 27)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 27)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 27)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 27)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 27)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 27)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 27)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 27)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 27)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 27)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 27)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(20), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(20), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 27)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 27)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 27)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(20), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 27)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 27)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 27)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 27)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 27)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 27)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 27)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 27)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(20), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(19),
         GlitchData	=> P_GlitchData(19),
         OutSignalName	=> "P(19)",
         OutTemp	=> P_zd(19),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 28)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 28)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 28)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 28)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 28)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 28)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 28)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 28)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 28)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 28)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 28)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 28)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 28)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 28)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 28)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 28)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 28)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 28)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 28)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 28)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 28)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 28)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 28)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 28)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 28)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 28)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 28)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 28)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 28)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 28)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 28)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 28)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 28)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 28)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 28)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 28)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 28)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 28)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 28)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 28)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 28)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 28)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 28)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 28)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 28)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 28)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 28)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 28)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 28)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 28)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 28)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 28)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 28)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 28)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 28)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 28)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 28)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 28)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 28)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 28)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 28)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 28)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 28)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 28)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 28)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 28)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 28)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 28)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 28)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 28)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 28)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 28)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 28)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 28)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 28)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 28)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 28)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 28)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 28)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 28)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 28)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 28)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 28)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 28)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 28)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 28)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 28)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 28)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 28)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 28)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 28)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 28)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 28)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 28)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 28)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 28)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 28)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 28)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 28)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 28)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 28)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(19), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(19), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 28)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 28)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 28)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(19), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 28)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 28)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 28)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 28)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 28)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 28)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 28)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 28)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(19), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(18),
         GlitchData	=> P_GlitchData(18),
         OutSignalName	=> "P(18)",
         OutTemp	=> P_zd(18),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 29)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 29)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 29)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 29)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 29)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 29)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 29)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 29)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 29)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 29)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 29)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 29)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 29)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 29)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 29)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 29)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 29)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 29)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 29)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 29)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 29)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 29)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 29)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 29)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 29)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 29)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 29)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 29)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 29)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 29)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 29)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 29)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 29)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 29)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 29)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 29)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 29)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 29)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 29)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 29)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 29)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 29)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 29)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 29)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 29)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 29)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 29)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 29)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 29)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 29)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 29)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 29)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 29)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 29)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 29)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 29)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 29)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 29)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 29)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 29)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 29)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 29)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 29)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 29)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 29)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 29)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 29)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 29)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 29)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 29)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 29)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 29)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 29)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 29)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 29)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 29)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 29)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 29)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 29)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 29)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 29)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 29)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 29)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 29)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 29)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 29)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 29)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 29)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 29)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 29)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 29)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 29)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 29)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 29)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 29)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 29)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 29)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 29)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 29)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 29)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 29)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(18), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(18), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 29)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 29)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 29)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(18), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 29)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 29)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 29)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 29)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 29)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 29)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 29)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 29)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(18), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(17),
         GlitchData	=> P_GlitchData(17),
         OutSignalName	=> "P(17)",
         OutTemp	=> P_zd(17),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 30)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 30)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 30)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 30)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 30)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 30)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 30)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 30)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 30)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 30)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 30)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 30)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 30)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 30)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 30)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 30)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 30)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 30)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 30)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 30)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 30)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 30)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 30)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 30)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 30)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 30)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 30)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 30)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 30)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 30)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 30)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 30)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 30)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 30)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 30)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 30)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 30)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 30)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 30)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 30)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 30)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 30)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 30)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 30)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 30)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 30)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 30)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 30)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 30)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 30)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 30)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 30)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 30)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 30)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 30)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 30)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 30)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 30)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 30)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 30)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 30)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 30)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 30)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 30)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 30)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 30)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 30)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 30)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 30)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 30)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 30)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 30)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 30)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 30)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 30)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 30)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 30)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 30)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 30)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 30)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 30)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 30)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 30)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 30)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 30)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 30)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 30)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 30)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 30)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 30)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 30)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 30)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 30)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 30)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 30)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 30)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 30)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 30)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 30)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 30)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 30)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(17), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(17), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 30)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 30)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 30)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(17), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 30)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 30)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 30)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 30)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 30)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 30)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 30)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 30)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(17), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(16),
         GlitchData	=> P_GlitchData(16),
         OutSignalName	=> "P(16)",
         OutTemp	=> P_zd(16),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 31)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 31)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 31)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 31)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 31)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 31)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 31)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 31)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 31)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 31)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 31)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 31)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 31)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 31)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 31)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 31)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 31)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 31)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 31)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 31)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 31)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 31)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 31)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 31)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 31)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 31)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 31)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 31)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 31)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 31)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 31)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 31)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 31)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 31)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 31)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 31)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 31)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 31)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 31)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 31)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 31)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 31)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 31)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 31)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 31)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 31)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 31)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 31)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 31)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 31)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 31)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 31)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 31)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 31)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 31)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 31)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 31)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 31)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 31)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 31)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 31)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 31)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 31)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 31)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 31)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 31)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 31)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 31)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 31)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 31)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 31)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 31)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 31)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 31)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 31)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 31)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 31)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 31)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 31)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 31)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 31)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 31)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 31)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 31)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 31)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 31)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 31)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 31)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 31)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 31)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 31)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 31)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 31)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 31)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 31)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 31)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 31)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 31)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 31)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 31)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 31)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(16), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(16), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 31)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 31)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 31)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(16), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 31)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 31)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 31)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 31)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 31)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 31)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 31)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 31)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(16), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(15),
         GlitchData	=> P_GlitchData(15),
         OutSignalName	=> "P(15)",
         OutTemp	=> P_zd(15),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 32)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 32)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 32)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 32)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 32)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 32)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 32)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 32)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 32)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 32)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 32)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 32)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 32)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 32)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 32)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 32)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 32)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 32)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 32)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 32)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 32)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 32)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 32)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 32)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 32)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 32)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 32)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 32)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 32)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 32)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 32)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 32)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 32)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 32)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 32)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 32)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 32)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 32)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 32)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 32)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 32)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 32)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 32)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 32)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 32)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 32)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 32)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 32)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 32)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 32)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 32)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 32)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 32)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 32)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 32)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 32)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 32)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 32)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 32)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 32)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 32)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 32)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 32)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 32)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 32)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 32)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 32)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 32)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 32)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 32)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 32)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 32)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 32)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 32)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 32)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 32)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 32)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 32)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 32)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 32)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 32)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 32)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 32)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 32)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 32)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 32)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 32)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 32)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 32)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 32)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 32)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 32)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 32)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 32)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 32)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 32)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 32)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 32)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 32)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 32)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 32)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(15), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(15), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 32)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 32)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 32)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(15), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 32)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 32)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 32)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 32)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 32)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 32)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 32)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 32)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(15), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(14),
         GlitchData	=> P_GlitchData(14),
         OutSignalName	=> "P(14)",
         OutTemp	=> P_zd(14),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 33)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 33)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 33)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 33)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 33)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 33)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 33)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 33)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 33)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 33)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 33)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 33)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 33)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 33)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 33)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 33)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 33)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 33)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 33)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 33)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 33)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 33)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 33)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 33)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 33)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 33)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 33)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 33)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 33)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 33)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 33)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 33)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 33)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 33)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 33)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 33)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 33)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 33)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 33)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 33)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 33)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 33)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 33)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 33)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 33)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 33)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 33)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 33)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 33)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 33)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 33)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 33)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 33)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 33)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 33)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 33)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 33)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 33)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 33)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 33)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 33)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 33)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 33)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 33)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 33)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 33)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 33)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 33)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 33)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 33)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 33)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 33)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 33)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 33)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 33)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 33)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 33)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 33)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 33)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 33)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 33)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 33)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 33)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 33)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 33)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 33)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 33)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 33)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 33)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 33)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 33)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 33)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 33)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 33)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 33)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 33)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 33)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 33)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 33)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 33)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 33)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(14), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(14), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 33)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 33)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 33)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(14), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 33)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 33)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 33)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 33)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 33)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 33)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 33)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 33)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(14), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(13),
         GlitchData	=> P_GlitchData(13),
         OutSignalName	=> "P(13)",
         OutTemp	=> P_zd(13),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 34)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 34)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 34)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 34)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 34)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 34)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 34)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 34)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 34)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 34)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 34)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 34)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 34)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 34)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 34)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 34)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 34)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 34)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 34)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 34)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 34)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 34)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 34)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 34)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 34)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 34)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 34)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 34)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 34)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 34)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 34)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 34)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 34)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 34)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 34)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 34)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 34)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 34)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 34)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 34)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 34)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 34)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 34)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 34)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 34)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 34)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 34)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 34)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 34)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 34)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 34)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 34)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 34)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 34)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 34)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 34)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 34)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 34)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 34)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 34)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 34)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 34)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 34)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 34)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 34)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 34)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 34)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 34)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 34)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 34)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 34)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 34)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 34)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 34)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 34)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 34)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 34)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 34)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 34)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 34)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 34)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 34)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 34)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 34)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 34)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 34)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 34)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 34)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 34)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 34)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 34)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 34)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 34)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 34)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 34)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 34)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 34)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 34)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 34)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 34)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 34)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(13), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(13), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 34)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 34)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 34)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(13), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 34)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 34)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 34)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 34)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 34)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 34)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 34)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 34)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(13), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(12),
         GlitchData	=> P_GlitchData(12),
         OutSignalName	=> "P(12)",
         OutTemp	=> P_zd(12),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 35)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 35)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 35)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 35)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 35)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 35)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 35)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 35)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 35)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 35)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 35)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 35)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 35)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 35)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 35)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 35)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 35)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 35)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 35)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 35)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 35)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 35)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 35)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 35)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 35)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 35)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 35)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 35)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 35)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 35)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 35)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 35)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 35)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 35)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 35)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 35)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 35)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 35)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 35)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 35)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 35)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 35)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 35)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 35)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 35)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 35)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 35)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 35)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 35)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 35)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 35)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 35)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 35)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 35)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 35)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 35)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 35)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 35)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 35)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 35)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 35)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 35)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 35)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 35)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 35)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 35)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 35)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 35)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 35)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 35)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 35)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 35)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 35)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 35)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 35)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 35)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 35)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 35)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 35)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 35)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 35)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 35)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 35)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 35)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 35)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 35)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 35)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 35)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 35)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 35)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 35)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 35)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 35)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 35)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 35)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 35)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 35)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 35)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 35)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 35)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 35)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(12), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(12), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 35)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 35)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 35)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(12), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 35)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 35)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 35)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 35)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 35)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 35)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 35)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 35)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(12), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(11),
         GlitchData	=> P_GlitchData(11),
         OutSignalName	=> "P(11)",
         OutTemp	=> P_zd(11),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 36)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 36)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 36)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 36)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 36)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 36)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 36)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 36)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 36)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 36)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 36)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 36)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 36)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 36)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 36)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 36)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 36)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 36)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 36)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 36)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 36)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 36)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 36)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 36)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 36)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 36)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 36)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 36)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 36)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 36)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 36)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 36)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 36)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 36)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 36)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 36)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 36)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 36)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 36)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 36)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 36)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 36)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 36)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 36)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 36)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 36)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 36)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 36)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 36)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 36)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 36)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 36)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 36)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 36)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 36)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 36)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 36)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 36)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 36)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 36)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 36)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 36)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 36)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 36)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 36)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 36)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 36)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 36)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 36)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 36)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 36)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 36)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 36)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 36)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 36)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 36)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 36)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 36)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 36)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 36)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 36)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 36)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 36)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 36)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 36)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 36)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 36)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 36)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 36)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 36)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 36)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 36)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 36)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 36)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 36)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 36)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 36)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 36)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 36)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 36)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 36)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(11), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(11), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 36)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 36)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 36)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(11), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 36)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 36)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 36)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 36)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 36)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 36)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 36)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 36)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(11), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(10),
         GlitchData	=> P_GlitchData(10),
         OutSignalName	=> "P(10)",
         OutTemp	=> P_zd(10),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 37)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 37)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 37)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 37)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 37)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 37)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 37)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 37)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 37)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 37)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 37)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 37)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 37)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 37)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 37)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 37)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 37)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 37)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 37)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 37)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 37)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 37)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 37)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 37)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 37)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 37)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 37)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 37)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 37)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 37)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 37)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 37)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 37)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 37)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 37)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 37)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 37)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 37)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 37)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 37)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 37)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 37)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 37)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 37)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 37)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 37)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 37)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 37)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 37)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 37)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 37)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 37)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 37)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 37)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 37)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 37)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 37)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 37)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 37)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 37)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 37)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 37)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 37)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 37)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 37)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 37)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 37)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 37)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 37)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 37)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 37)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 37)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 37)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 37)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 37)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 37)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 37)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 37)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 37)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 37)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 37)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 37)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 37)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 37)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 37)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 37)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 37)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 37)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 37)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 37)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 37)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 37)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 37)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 37)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 37)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 37)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 37)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 37)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 37)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 37)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 37)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(10), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(10), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 37)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 37)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 37)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(10), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 37)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 37)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 37)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 37)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 37)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 37)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 37)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 37)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(10), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(9),
         GlitchData	=> P_GlitchData(9),
         OutSignalName	=> "P(9)",
         OutTemp	=> P_zd(9),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 38)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 38)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 38)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 38)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 38)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 38)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 38)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 38)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 38)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 38)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 38)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 38)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 38)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 38)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 38)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 38)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 38)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 38)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 38)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 38)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 38)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 38)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 38)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 38)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 38)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 38)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 38)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 38)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 38)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 38)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 38)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 38)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 38)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 38)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 38)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 38)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 38)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 38)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 38)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 38)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 38)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 38)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 38)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 38)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 38)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 38)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 38)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 38)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 38)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 38)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 38)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 38)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 38)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 38)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 38)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 38)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 38)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 38)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 38)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 38)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 38)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 38)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 38)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 38)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 38)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 38)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 38)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 38)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 38)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 38)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 38)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 38)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 38)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 38)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 38)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 38)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 38)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 38)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 38)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 38)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 38)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 38)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 38)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 38)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 38)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 38)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 38)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 38)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 38)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 38)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 38)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 38)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 38)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 38)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 38)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 38)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 38)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 38)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 38)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 38)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 38)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(9), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(9), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 38)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 38)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 38)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(9), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 38)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 38)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 38)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 38)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 38)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 38)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 38)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 38)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(9), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(8),
         GlitchData	=> P_GlitchData(8),
         OutSignalName	=> "P(8)",
         OutTemp	=> P_zd(8),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 39)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 39)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 39)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 39)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 39)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 39)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 39)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 39)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 39)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 39)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 39)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 39)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 39)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 39)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 39)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 39)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 39)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 39)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 39)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 39)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 39)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 39)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 39)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 39)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 39)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 39)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 39)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 39)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 39)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 39)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 39)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 39)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 39)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 39)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 39)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 39)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 39)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 39)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 39)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 39)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 39)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 39)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 39)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 39)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 39)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 39)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 39)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 39)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 39)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 39)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 39)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 39)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 39)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 39)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 39)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 39)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 39)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 39)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 39)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 39)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 39)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 39)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 39)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 39)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 39)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 39)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 39)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 39)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 39)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 39)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 39)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 39)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 39)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 39)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 39)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 39)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 39)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 39)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 39)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 39)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 39)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 39)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 39)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 39)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 39)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 39)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 39)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 39)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 39)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 39)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 39)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 39)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 39)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 39)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 39)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 39)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 39)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 39)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 39)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 39)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 39)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(8), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(8), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 39)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 39)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 39)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(8), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 39)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 39)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 39)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 39)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 39)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 39)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 39)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 39)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(8), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(7),
         GlitchData	=> P_GlitchData(7),
         OutSignalName	=> "P(7)",
         OutTemp	=> P_zd(7),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 40)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 40)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 40)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 40)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 40)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 40)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 40)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 40)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 40)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 40)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 40)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 40)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 40)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 40)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 40)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 40)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 40)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 40)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 40)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 40)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 40)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 40)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 40)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 40)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 40)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 40)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 40)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 40)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 40)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 40)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 40)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 40)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 40)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 40)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 40)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 40)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 40)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 40)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 40)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 40)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 40)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 40)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 40)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 40)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 40)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 40)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 40)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 40)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 40)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 40)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 40)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 40)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 40)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 40)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 40)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 40)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 40)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 40)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 40)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 40)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 40)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 40)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 40)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 40)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 40)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 40)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 40)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 40)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 40)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 40)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 40)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 40)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 40)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 40)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 40)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 40)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 40)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 40)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 40)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 40)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 40)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 40)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 40)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 40)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 40)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 40)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 40)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 40)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 40)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 40)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 40)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 40)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 40)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 40)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 40)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 40)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 40)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 40)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 40)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 40)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 40)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(7), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(7), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 40)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 40)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 40)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(7), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 40)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 40)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 40)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 40)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 40)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 40)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 40)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 40)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(7), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(6),
         GlitchData	=> P_GlitchData(6),
         OutSignalName	=> "P(6)",
         OutTemp	=> P_zd(6),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 41)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 41)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 41)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 41)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 41)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 41)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 41)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 41)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 41)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 41)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 41)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 41)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 41)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 41)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 41)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 41)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 41)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 41)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 41)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 41)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 41)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 41)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 41)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 41)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 41)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 41)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 41)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 41)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 41)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 41)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 41)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 41)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 41)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 41)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 41)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 41)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 41)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 41)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 41)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 41)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 41)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 41)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 41)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 41)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 41)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 41)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 41)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 41)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 41)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 41)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 41)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 41)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 41)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 41)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 41)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 41)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 41)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 41)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 41)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 41)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 41)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 41)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 41)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 41)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 41)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 41)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 41)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 41)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 41)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 41)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 41)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 41)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 41)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 41)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 41)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 41)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 41)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 41)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 41)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 41)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 41)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 41)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 41)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 41)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 41)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 41)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 41)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 41)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 41)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 41)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 41)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 41)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 41)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 41)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 41)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 41)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 41)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 41)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 41)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 41)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 41)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(6), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(6), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 41)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 41)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 41)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(6), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 41)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 41)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 41)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 41)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 41)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 41)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 41)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 41)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(6), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(5),
         GlitchData	=> P_GlitchData(5),
         OutSignalName	=> "P(5)",
         OutTemp	=> P_zd(5),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 42)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 42)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 42)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 42)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 42)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 42)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 42)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 42)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 42)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 42)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 42)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 42)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 42)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 42)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 42)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 42)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 42)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 42)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 42)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 42)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 42)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 42)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 42)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 42)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 42)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 42)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 42)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 42)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 42)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 42)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 42)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 42)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 42)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 42)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 42)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 42)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 42)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 42)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 42)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 42)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 42)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 42)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 42)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 42)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 42)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 42)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 42)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 42)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 42)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 42)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 42)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 42)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 42)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 42)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 42)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 42)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 42)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 42)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 42)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 42)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 42)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 42)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 42)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 42)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 42)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 42)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 42)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 42)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 42)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 42)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 42)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 42)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 42)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 42)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 42)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 42)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 42)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 42)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 42)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 42)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 42)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 42)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 42)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 42)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 42)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 42)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 42)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 42)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 42)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 42)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 42)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 42)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 42)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 42)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 42)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 42)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 42)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 42)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 42)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 42)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 42)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(5), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(5), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 42)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 42)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 42)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(5), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 42)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 42)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 42)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 42)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 42)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 42)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 42)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 42)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(5), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(4),
         GlitchData	=> P_GlitchData(4),
         OutSignalName	=> "P(4)",
         OutTemp	=> P_zd(4),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 43)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 43)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 43)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 43)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 43)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 43)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 43)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 43)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 43)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 43)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 43)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 43)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 43)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 43)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 43)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 43)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 43)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 43)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 43)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 43)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 43)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 43)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 43)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 43)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 43)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 43)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 43)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 43)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 43)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 43)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 43)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 43)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 43)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 43)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 43)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 43)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 43)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 43)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 43)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 43)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 43)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 43)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 43)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 43)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 43)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 43)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 43)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 43)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 43)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 43)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 43)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 43)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 43)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 43)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 43)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 43)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 43)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 43)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 43)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 43)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 43)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 43)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 43)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 43)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 43)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 43)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 43)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 43)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 43)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 43)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 43)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 43)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 43)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 43)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 43)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 43)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 43)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 43)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 43)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 43)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 43)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 43)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 43)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 43)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 43)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 43)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 43)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 43)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 43)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 43)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 43)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 43)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 43)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 43)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 43)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 43)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 43)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 43)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 43)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 43)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 43)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(4), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(4), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 43)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 43)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 43)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(4), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 43)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 43)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 43)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 43)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 43)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 43)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 43)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 43)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(4), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(3),
         GlitchData	=> P_GlitchData(3),
         OutSignalName	=> "P(3)",
         OutTemp	=> P_zd(3),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 44)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 44)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 44)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 44)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 44)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 44)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 44)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 44)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 44)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 44)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 44)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 44)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 44)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 44)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 44)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 44)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 44)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 44)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 44)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 44)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 44)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 44)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 44)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 44)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 44)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 44)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 44)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 44)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 44)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 44)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 44)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 44)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 44)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 44)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 44)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 44)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 44)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 44)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 44)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 44)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 44)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 44)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 44)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 44)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 44)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 44)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 44)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 44)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 44)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 44)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 44)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 44)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 44)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 44)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 44)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 44)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 44)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 44)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 44)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 44)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 44)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 44)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 44)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 44)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 44)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 44)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 44)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 44)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 44)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 44)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 44)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 44)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 44)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 44)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 44)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 44)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 44)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 44)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 44)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 44)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 44)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 44)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 44)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 44)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 44)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 44)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 44)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 44)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 44)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 44)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 44)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 44)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 44)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 44)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 44)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 44)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 44)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 44)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 44)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 44)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 44)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(3), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(3), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 44)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 44)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 44)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(3), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 44)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 44)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 44)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 44)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 44)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 44)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 44)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 44)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(3), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(2),
         GlitchData	=> P_GlitchData(2),
         OutSignalName	=> "P(2)",
         OutTemp	=> P_zd(2),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 45)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 45)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 45)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 45)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 45)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 45)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 45)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 45)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 45)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 45)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 45)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 45)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 45)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 45)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 45)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 45)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 45)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 45)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 45)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 45)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 45)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 45)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 45)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 45)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 45)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 45)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 45)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 45)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 45)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 45)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 45)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 45)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 45)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 45)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 45)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 45)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 45)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 45)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 45)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 45)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 45)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 45)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 45)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 45)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 45)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 45)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 45)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 45)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 45)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 45)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 45)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 45)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 45)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 45)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 45)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 45)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 45)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 45)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 45)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 45)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 45)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 45)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 45)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 45)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 45)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 45)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 45)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 45)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 45)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 45)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 45)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 45)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 45)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 45)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 45)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 45)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 45)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 45)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 45)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 45)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 45)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 45)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 45)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 45)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 45)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 45)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 45)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 45)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 45)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 45)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 45)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 45)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 45)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 45)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 45)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 45)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 45)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 45)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 45)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 45)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 45)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(2), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(2), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 45)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 45)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 45)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(2), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 45)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 45)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 45)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 45)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 45)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 45)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 45)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 45)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(2), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(1),
         GlitchData	=> P_GlitchData(1),
         OutSignalName	=> "P(1)",
         OutTemp	=> P_zd(1),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 46)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 46)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 46)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 46)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 46)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 46)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 46)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 46)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 46)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 46)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 46)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 46)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 46)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 46)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 46)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 46)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 46)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 46)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 46)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 46)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 46)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 46)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 46)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 46)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 46)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 46)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 46)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 46)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 46)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 46)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 46)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 46)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 46)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 46)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 46)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 46)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 46)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 46)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 46)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 46)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 46)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 46)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 46)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 46)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 46)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 46)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 46)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 46)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 46)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 46)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 46)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 46)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 46)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 46)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 46)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 46)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 46)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 46)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 46)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 46)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 46)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 46)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 46)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 46)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 46)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 46)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 46)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 46)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 46)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 46)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 46)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 46)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 46)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 46)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 46)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 46)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 46)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 46)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 46)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 46)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 46)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 46)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 46)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 46)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 46)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 46)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 46)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 46)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 46)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 46)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 46)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 46)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 46)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 46)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 46)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 46)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 46)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 46)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 46)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 46)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 46)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(1), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(1), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 46)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 46)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 46)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(1), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 46)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 46)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 46)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 46)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 46)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 46)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 46)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 46)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(1), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(0),
         GlitchData	=> P_GlitchData(0),
         OutSignalName	=> "P(0)",
         OutTemp	=> P_zd(0),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_P((1439 - 47)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_P((1439 - 47)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_P((1439 - 47)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_P((1439 - 47)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_P((1439 - 47)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_P((1439 - 47)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_P((1439 - 47)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_P((1439 - 47)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_P((1439 - 47)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_P((1439 - 47)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_P((1439 - 47)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_P((1439 - 47)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_P((1439 - 47)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_P((1439 - 47)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_P((1439 - 47)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_P((1439 - 47)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_P((1439 - 47)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_P((1439 - 47)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_P((1439 - 47)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_P((1439 - 47)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_P((1439 - 47)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_P((1439 - 47)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_P((1439 - 47)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_P((1439 - 47)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_P((1439 - 47)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_P((1439 - 47)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_P((1439 - 47)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_P((1439 - 47)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_P((1439 - 47)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_P((1439 - 47)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_P((1439 - 47)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_P((1439 - 47)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_P((1439 - 47)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_P((1439 - 47)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_P((1439 - 47)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_P((1439 - 47)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_P((1439 - 47)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_P((1439 - 47)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_P((1439 - 47)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_P((1439 - 47)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_P((1439 - 47)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_P((1439 - 47)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_P((1439 - 47)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_P((1439 - 47)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_P((1439 - 47)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_P((1439 - 47)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_P((1439 - 47)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_P((1439 - 47)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_P((1439 - 47)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_P((1439 - 47)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_P((1439 - 47)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_P((1439 - 47)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_P((1439 - 47)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_P((1439 - 47)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_P((1439 - 47)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_P((1439 - 47)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_P((1439 - 47)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_P((1439 - 47)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_P((1439 - 47)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_P((1439 - 47)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_P((191 - 47)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_P((191 - 47)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_P((191 - 47)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_P((191 - 47)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_P((863 - 47)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_P((863 - 47)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_P((863 - 47)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_P((863 - 47)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_P((863 - 47)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_P((863 - 47)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_P((863 - 47)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_P((863 - 47)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_P((863 - 47)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_P((863 - 47)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_P((863 - 47)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_P((863 - 47)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_P((863 - 47)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_P((863 - 47)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_P((863 - 47)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_P((863 - 47)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_P((863 - 47)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_P((863 - 47)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_P((863 - 47)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_P((863 - 47)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_P((863 - 47)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_P((863 - 47)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_P((863 - 47)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_P((863 - 47)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_P((863 - 47)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_P((863 - 47)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_P((863 - 47)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_P((863 - 47)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_P((863 - 47)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_P((863 - 47)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_P((863 - 47)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_P((863 - 47)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_P((863 - 47)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_P((863 - 47)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_P((863 - 47)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_P((863 - 47)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_P((2303 - 47)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_P(0), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_P(0), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_P((143 - 47)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_P((143 - 47)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_P((143 - 47)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_P(0), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_P((335 - 47)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_P((335 - 47)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_P((335 - 47)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_P((335 - 47)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_P((335 - 47)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_P((335 - 47)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_P((335 - 47)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_P((2303 - 47)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_P(0), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PATTERNBDETECT,
         GlitchData	=> PATTERNBDETECT_GlitchData,
         OutSignalName	=> "PATTERNBDETECT",
         OutTemp	=> PATTERNBDETECT_zd,
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PATTERNBDETECT((29 - 0)- 1*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PATTERNBDETECT((29 - 0)- 1*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PATTERNBDETECT((29 - 0)- 1*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PATTERNBDETECT((29 - 0)- 1*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PATTERNBDETECT((29 - 0)- 1*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PATTERNBDETECT((29 - 0)- 1*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PATTERNBDETECT((29 - 0)- 1*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PATTERNBDETECT((29 - 0)- 1*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PATTERNBDETECT((29 - 0)- 1*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PATTERNBDETECT((29 - 0)- 1*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PATTERNBDETECT((29 - 0)- 1*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PATTERNBDETECT((29 - 0)- 1*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PATTERNBDETECT((29 - 0)- 1*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PATTERNBDETECT((29 - 0)- 1*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PATTERNBDETECT((29 - 0)- 1*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PATTERNBDETECT((29 - 0)- 1*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PATTERNBDETECT((29 - 0)- 1*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PATTERNBDETECT((29 - 0)- 1*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PATTERNBDETECT((29 - 0)- 1*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PATTERNBDETECT((29 - 0)- 1*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PATTERNBDETECT((29 - 0)- 1*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PATTERNBDETECT((29 - 0)- 1*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PATTERNBDETECT((29 - 0)- 1*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PATTERNBDETECT((29 - 0)- 1*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PATTERNBDETECT((29 - 0)- 1*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PATTERNBDETECT((29 - 0)- 1*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PATTERNBDETECT((29 - 0)- 1*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PATTERNBDETECT((29 - 0)- 1*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PATTERNBDETECT((29 - 0)- 1*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PATTERNBDETECT((29 - 0)- 1*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PATTERNBDETECT((29 - 0)- 1*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PATTERNBDETECT((29 - 0)- 1*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PATTERNBDETECT((29 - 0)- 1*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PATTERNBDETECT((29 - 0)- 1*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PATTERNBDETECT((29 - 0)- 1*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PATTERNBDETECT((29 - 0)- 1*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PATTERNBDETECT((29 - 0)- 1*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PATTERNBDETECT((29 - 0)- 1*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PATTERNBDETECT((29 - 0)- 1*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PATTERNBDETECT((29 - 0)- 1*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PATTERNBDETECT((29 - 0)- 1*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PATTERNBDETECT((29 - 0)- 1*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PATTERNBDETECT((29 - 0)- 1*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PATTERNBDETECT((29 - 0)- 1*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PATTERNBDETECT((29 - 0)- 1*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PATTERNBDETECT((29 - 0)- 1*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PATTERNBDETECT((29 - 0)- 1*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PATTERNBDETECT((29 - 0)- 1*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PATTERNBDETECT((29 - 0)- 1*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PATTERNBDETECT((29 - 0)- 1*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PATTERNBDETECT((29 - 0)- 1*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PATTERNBDETECT((29 - 0)- 1*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PATTERNBDETECT((29 - 0)- 1*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PATTERNBDETECT((29 - 0)- 1*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PATTERNBDETECT((29 - 0)- 1*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PATTERNBDETECT((29 - 0)- 1*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PATTERNBDETECT((29 - 0)- 1*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PATTERNBDETECT((29 - 0)- 1*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PATTERNBDETECT((29 - 0)- 1*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PATTERNBDETECT((29 - 0)- 1*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PATTERNBDETECT((3 - 0)- 1*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PATTERNBDETECT((3 - 0)- 1*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PATTERNBDETECT((3 - 0)- 1*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PATTERNBDETECT((3 - 0)- 1*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PATTERNBDETECT((17 - 0)- 1*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PATTERNBDETECT((17 - 0)- 1*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PATTERNBDETECT((17 - 0)- 1*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PATTERNBDETECT((17 - 0)- 1*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PATTERNBDETECT((17 - 0)- 1*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PATTERNBDETECT((17 - 0)- 1*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PATTERNBDETECT((17 - 0)- 1*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PATTERNBDETECT((17 - 0)- 1*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PATTERNBDETECT((17 - 0)- 1*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PATTERNBDETECT((17 - 0)- 1*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PATTERNBDETECT((17 - 0)- 1*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PATTERNBDETECT((17 - 0)- 1*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PATTERNBDETECT((17 - 0)- 1*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PATTERNBDETECT((17 - 0)- 1*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PATTERNBDETECT((17 - 0)- 1*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PATTERNBDETECT((17 - 0)- 1*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PATTERNBDETECT((17 - 0)- 1*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PATTERNBDETECT((17 - 0)- 1*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PATTERNBDETECT((17 - 0)- 1*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PATTERNBDETECT((17 - 0)- 1*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PATTERNBDETECT((17 - 0)- 1*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PATTERNBDETECT((17 - 0)- 1*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PATTERNBDETECT((17 - 0)- 1*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PATTERNBDETECT((17 - 0)- 1*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PATTERNBDETECT((17 - 0)- 1*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PATTERNBDETECT((17 - 0)- 1*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PATTERNBDETECT((17 - 0)- 1*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PATTERNBDETECT((17 - 0)- 1*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PATTERNBDETECT((17 - 0)- 1*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PATTERNBDETECT((17 - 0)- 1*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PATTERNBDETECT((17 - 0)- 1*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PATTERNBDETECT((17 - 0)- 1*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PATTERNBDETECT((17 - 0)- 1*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PATTERNBDETECT((17 - 0)- 1*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PATTERNBDETECT((17 - 0)- 1*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PATTERNBDETECT((17 - 0)- 1*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PATTERNBDETECT((47 - 0)- 1*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PATTERNBDETECT, true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PATTERNBDETECT, true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PATTERNBDETECT((2 - 0)- 1*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PATTERNBDETECT((2 - 0)- 1*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PATTERNBDETECT((2 - 0)- 1*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PATTERNBDETECT, true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PATTERNBDETECT((6 - 0)- 1*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PATTERNBDETECT((6 - 0)- 1*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PATTERNBDETECT((6 - 0)- 1*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PATTERNBDETECT((6 - 0)- 1*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PATTERNBDETECT((6 - 0)- 1*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PATTERNBDETECT((6 - 0)- 1*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PATTERNBDETECT((6 - 0)- 1*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PATTERNBDETECT((47 - 0)- 1*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PATTERNBDETECT, true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PATTERNDETECT,
         GlitchData	=> PATTERNDETECT_GlitchData,
         OutSignalName	=> "PATTERNDETECT",
         OutTemp	=> PATTERNDETECT_zd,
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PATTERNDETECT((29 - 0)- 1*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PATTERNDETECT((29 - 0)- 1*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PATTERNDETECT((29 - 0)- 1*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PATTERNDETECT((29 - 0)- 1*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PATTERNDETECT((29 - 0)- 1*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PATTERNDETECT((29 - 0)- 1*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PATTERNDETECT((29 - 0)- 1*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PATTERNDETECT((29 - 0)- 1*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PATTERNDETECT((29 - 0)- 1*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PATTERNDETECT((29 - 0)- 1*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PATTERNDETECT((29 - 0)- 1*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PATTERNDETECT((29 - 0)- 1*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PATTERNDETECT((29 - 0)- 1*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PATTERNDETECT((29 - 0)- 1*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PATTERNDETECT((29 - 0)- 1*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PATTERNDETECT((29 - 0)- 1*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PATTERNDETECT((29 - 0)- 1*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PATTERNDETECT((29 - 0)- 1*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PATTERNDETECT((29 - 0)- 1*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PATTERNDETECT((29 - 0)- 1*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PATTERNDETECT((29 - 0)- 1*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PATTERNDETECT((29 - 0)- 1*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PATTERNDETECT((29 - 0)- 1*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PATTERNDETECT((29 - 0)- 1*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PATTERNDETECT((29 - 0)- 1*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PATTERNDETECT((29 - 0)- 1*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PATTERNDETECT((29 - 0)- 1*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PATTERNDETECT((29 - 0)- 1*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PATTERNDETECT((29 - 0)- 1*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PATTERNDETECT((29 - 0)- 1*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PATTERNDETECT((29 - 0)- 1*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PATTERNDETECT((29 - 0)- 1*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PATTERNDETECT((29 - 0)- 1*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PATTERNDETECT((29 - 0)- 1*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PATTERNDETECT((29 - 0)- 1*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PATTERNDETECT((29 - 0)- 1*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PATTERNDETECT((29 - 0)- 1*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PATTERNDETECT((29 - 0)- 1*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PATTERNDETECT((29 - 0)- 1*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PATTERNDETECT((29 - 0)- 1*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PATTERNDETECT((29 - 0)- 1*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PATTERNDETECT((29 - 0)- 1*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PATTERNDETECT((29 - 0)- 1*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PATTERNDETECT((29 - 0)- 1*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PATTERNDETECT((29 - 0)- 1*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PATTERNDETECT((29 - 0)- 1*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PATTERNDETECT((29 - 0)- 1*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PATTERNDETECT((29 - 0)- 1*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PATTERNDETECT((29 - 0)- 1*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PATTERNDETECT((29 - 0)- 1*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PATTERNDETECT((29 - 0)- 1*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PATTERNDETECT((29 - 0)- 1*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PATTERNDETECT((29 - 0)- 1*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PATTERNDETECT((29 - 0)- 1*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PATTERNDETECT((29 - 0)- 1*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PATTERNDETECT((29 - 0)- 1*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PATTERNDETECT((29 - 0)- 1*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PATTERNDETECT((29 - 0)- 1*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PATTERNDETECT((29 - 0)- 1*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PATTERNDETECT((29 - 0)- 1*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PATTERNDETECT((3 - 0)- 1*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PATTERNDETECT((3 - 0)- 1*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PATTERNDETECT((3 - 0)- 1*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PATTERNDETECT((3 - 0)- 1*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PATTERNDETECT((17 - 0)- 1*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PATTERNDETECT((17 - 0)- 1*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PATTERNDETECT((17 - 0)- 1*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PATTERNDETECT((17 - 0)- 1*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PATTERNDETECT((17 - 0)- 1*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PATTERNDETECT((17 - 0)- 1*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PATTERNDETECT((17 - 0)- 1*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PATTERNDETECT((17 - 0)- 1*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PATTERNDETECT((17 - 0)- 1*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PATTERNDETECT((17 - 0)- 1*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PATTERNDETECT((17 - 0)- 1*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PATTERNDETECT((17 - 0)- 1*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PATTERNDETECT((17 - 0)- 1*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PATTERNDETECT((17 - 0)- 1*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PATTERNDETECT((17 - 0)- 1*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PATTERNDETECT((17 - 0)- 1*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PATTERNDETECT((17 - 0)- 1*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PATTERNDETECT((17 - 0)- 1*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PATTERNDETECT((17 - 0)- 1*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PATTERNDETECT((17 - 0)- 1*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PATTERNDETECT((17 - 0)- 1*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PATTERNDETECT((17 - 0)- 1*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PATTERNDETECT((17 - 0)- 1*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PATTERNDETECT((17 - 0)- 1*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PATTERNDETECT((17 - 0)- 1*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PATTERNDETECT((17 - 0)- 1*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PATTERNDETECT((17 - 0)- 1*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PATTERNDETECT((17 - 0)- 1*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PATTERNDETECT((17 - 0)- 1*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PATTERNDETECT((17 - 0)- 1*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PATTERNDETECT((17 - 0)- 1*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PATTERNDETECT((17 - 0)- 1*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PATTERNDETECT((17 - 0)- 1*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PATTERNDETECT((17 - 0)- 1*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PATTERNDETECT((17 - 0)- 1*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PATTERNDETECT((17 - 0)- 1*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PATTERNDETECT((47 - 0)- 1*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PATTERNDETECT, true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PATTERNDETECT, true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PATTERNDETECT((2 - 0)- 1*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PATTERNDETECT((2 - 0)- 1*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PATTERNDETECT((2 - 0)- 1*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PATTERNDETECT, true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PATTERNDETECT((6 - 0)- 1*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PATTERNDETECT((6 - 0)- 1*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PATTERNDETECT((6 - 0)- 1*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PATTERNDETECT((6 - 0)- 1*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PATTERNDETECT((6 - 0)- 1*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PATTERNDETECT((6 - 0)- 1*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PATTERNDETECT((6 - 0)- 1*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PATTERNDETECT((47 - 0)- 1*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PATTERNDETECT, true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(47),
         GlitchData	=> PCOUT_GlitchData(47),
         OutSignalName	=> "PCOUT(47)",
         OutTemp	=> PCOUT_zd(47),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 0)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 0)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 0)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 0)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 0)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 0)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 0)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 0)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 0)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 0)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 0)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 0)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 0)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 0)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 0)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 0)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 0)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 0)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 0)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 0)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 0)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 0)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 0)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 0)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 0)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 0)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 0)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 0)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 0)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 0)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 0)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 0)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 0)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 0)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 0)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 0)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 0)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 0)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 0)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 0)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 0)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 0)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 0)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 0)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 0)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 0)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 0)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 0)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 0)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 0)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 0)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 0)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 0)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 0)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 0)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 0)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 0)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 0)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 0)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 0)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 0)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 0)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 0)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 0)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 0)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 0)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 0)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 0)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 0)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 0)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 0)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 0)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 0)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 0)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 0)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 0)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 0)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 0)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 0)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 0)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 0)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 0)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 0)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 0)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 0)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 0)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 0)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 0)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 0)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 0)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 0)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 0)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 0)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 0)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 0)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 0)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 0)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 0)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 0)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 0)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(47), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(47), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 0)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 0)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 0)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(47), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 0)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 0)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 0)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 0)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 0)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 0)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 0)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(47), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(46),
         GlitchData	=> PCOUT_GlitchData(46),
         OutSignalName	=> "PCOUT(46)",
         OutTemp	=> PCOUT_zd(46),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 1)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 1)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 1)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 1)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 1)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 1)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 1)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 1)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 1)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 1)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 1)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 1)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 1)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 1)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 1)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 1)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 1)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 1)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 1)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 1)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 1)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 1)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 1)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 1)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 1)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 1)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 1)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 1)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 1)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 1)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 1)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 1)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 1)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 1)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 1)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 1)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 1)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 1)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 1)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 1)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 1)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 1)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 1)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 1)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 1)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 1)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 1)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 1)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 1)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 1)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 1)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 1)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 1)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 1)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 1)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 1)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 1)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 1)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 1)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 1)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 1)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 1)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 1)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 1)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 1)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 1)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 1)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 1)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 1)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 1)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 1)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 1)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 1)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 1)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 1)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 1)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 1)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 1)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 1)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 1)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 1)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 1)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 1)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 1)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 1)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 1)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 1)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 1)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 1)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 1)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 1)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 1)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 1)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 1)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 1)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 1)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 1)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 1)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 1)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 1)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 1)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(46), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(46), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 1)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 1)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 1)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(46), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 1)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 1)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 1)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 1)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 1)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 1)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 1)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(46), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(45),
         GlitchData	=> PCOUT_GlitchData(45),
         OutSignalName	=> "PCOUT(45)",
         OutTemp	=> PCOUT_zd(45),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 2)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 2)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 2)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 2)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 2)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 2)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 2)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 2)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 2)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 2)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 2)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 2)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 2)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 2)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 2)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 2)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 2)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 2)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 2)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 2)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 2)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 2)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 2)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 2)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 2)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 2)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 2)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 2)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 2)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 2)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 2)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 2)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 2)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 2)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 2)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 2)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 2)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 2)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 2)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 2)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 2)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 2)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 2)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 2)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 2)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 2)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 2)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 2)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 2)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 2)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 2)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 2)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 2)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 2)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 2)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 2)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 2)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 2)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 2)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 2)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 2)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 2)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 2)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 2)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 2)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 2)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 2)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 2)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 2)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 2)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 2)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 2)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 2)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 2)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 2)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 2)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 2)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 2)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 2)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 2)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 2)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 2)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 2)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 2)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 2)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 2)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 2)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 2)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 2)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 2)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 2)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 2)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 2)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 2)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 2)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 2)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 2)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 2)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 2)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 2)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 2)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(45), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(45), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 2)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 2)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 2)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(45), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 2)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 2)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 2)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 2)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 2)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 2)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 2)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(45), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(44),
         GlitchData	=> PCOUT_GlitchData(44),
         OutSignalName	=> "PCOUT(44)",
         OutTemp	=> PCOUT_zd(44),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 3)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 3)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 3)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 3)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 3)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 3)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 3)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 3)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 3)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 3)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 3)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 3)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 3)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 3)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 3)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 3)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 3)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 3)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 3)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 3)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 3)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 3)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 3)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 3)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 3)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 3)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 3)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 3)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 3)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 3)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 3)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 3)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 3)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 3)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 3)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 3)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 3)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 3)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 3)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 3)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 3)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 3)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 3)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 3)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 3)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 3)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 3)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 3)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 3)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 3)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 3)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 3)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 3)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 3)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 3)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 3)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 3)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 3)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 3)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 3)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 3)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 3)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 3)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 3)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 3)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 3)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 3)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 3)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 3)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 3)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 3)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 3)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 3)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 3)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 3)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 3)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 3)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 3)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 3)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 3)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 3)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 3)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 3)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 3)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 3)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 3)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 3)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 3)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 3)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 3)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 3)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 3)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 3)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 3)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 3)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 3)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 3)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 3)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 3)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 3)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 3)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(44), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(44), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 3)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 3)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 3)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(44), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 3)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 3)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 3)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 3)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 3)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 3)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 3)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(44), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(43),
         GlitchData	=> PCOUT_GlitchData(43),
         OutSignalName	=> "PCOUT(43)",
         OutTemp	=> PCOUT_zd(43),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 4)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 4)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 4)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 4)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 4)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 4)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 4)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 4)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 4)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 4)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 4)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 4)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 4)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 4)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 4)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 4)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 4)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 4)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 4)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 4)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 4)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 4)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 4)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 4)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 4)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 4)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 4)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 4)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 4)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 4)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 4)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 4)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 4)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 4)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 4)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 4)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 4)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 4)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 4)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 4)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 4)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 4)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 4)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 4)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 4)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 4)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 4)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 4)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 4)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 4)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 4)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 4)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 4)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 4)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 4)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 4)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 4)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 4)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 4)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 4)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 4)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 4)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 4)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 4)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 4)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 4)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 4)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 4)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 4)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 4)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 4)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 4)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 4)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 4)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 4)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 4)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 4)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 4)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 4)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 4)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 4)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 4)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 4)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 4)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 4)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 4)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 4)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 4)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 4)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 4)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 4)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 4)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 4)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 4)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 4)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 4)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 4)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 4)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 4)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 4)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 4)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(43), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(43), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 4)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 4)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 4)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(43), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 4)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 4)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 4)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 4)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 4)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 4)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 4)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(43), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(42),
         GlitchData	=> PCOUT_GlitchData(42),
         OutSignalName	=> "PCOUT(42)",
         OutTemp	=> PCOUT_zd(42),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 5)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 5)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 5)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 5)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 5)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 5)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 5)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 5)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 5)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 5)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 5)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 5)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 5)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 5)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 5)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 5)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 5)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 5)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 5)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 5)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 5)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 5)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 5)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 5)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 5)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 5)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 5)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 5)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 5)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 5)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 5)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 5)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 5)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 5)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 5)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 5)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 5)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 5)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 5)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 5)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 5)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 5)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 5)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 5)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 5)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 5)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 5)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 5)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 5)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 5)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 5)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 5)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 5)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 5)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 5)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 5)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 5)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 5)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 5)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 5)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 5)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 5)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 5)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 5)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 5)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 5)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 5)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 5)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 5)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 5)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 5)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 5)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 5)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 5)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 5)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 5)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 5)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 5)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 5)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 5)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 5)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 5)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 5)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 5)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 5)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 5)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 5)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 5)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 5)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 5)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 5)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 5)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 5)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 5)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 5)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 5)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 5)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 5)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 5)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 5)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 5)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(42), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(42), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 5)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 5)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 5)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(42), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 5)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 5)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 5)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 5)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 5)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 5)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 5)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(42), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(41),
         GlitchData	=> PCOUT_GlitchData(41),
         OutSignalName	=> "PCOUT(41)",
         OutTemp	=> PCOUT_zd(41),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 6)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 6)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 6)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 6)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 6)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 6)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 6)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 6)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 6)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 6)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 6)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 6)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 6)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 6)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 6)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 6)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 6)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 6)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 6)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 6)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 6)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 6)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 6)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 6)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 6)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 6)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 6)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 6)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 6)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 6)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 6)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 6)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 6)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 6)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 6)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 6)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 6)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 6)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 6)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 6)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 6)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 6)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 6)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 6)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 6)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 6)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 6)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 6)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 6)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 6)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 6)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 6)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 6)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 6)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 6)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 6)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 6)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 6)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 6)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 6)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 6)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 6)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 6)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 6)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 6)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 6)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 6)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 6)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 6)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 6)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 6)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 6)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 6)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 6)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 6)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 6)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 6)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 6)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 6)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 6)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 6)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 6)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 6)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 6)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 6)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 6)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 6)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 6)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 6)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 6)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 6)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 6)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 6)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 6)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 6)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 6)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 6)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 6)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 6)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 6)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 6)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(41), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(41), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 6)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 6)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 6)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(41), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 6)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 6)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 6)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 6)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 6)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 6)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 6)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(41), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(40),
         GlitchData	=> PCOUT_GlitchData(40),
         OutSignalName	=> "PCOUT(40)",
         OutTemp	=> PCOUT_zd(40),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 7)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 7)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 7)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 7)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 7)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 7)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 7)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 7)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 7)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 7)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 7)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 7)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 7)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 7)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 7)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 7)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 7)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 7)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 7)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 7)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 7)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 7)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 7)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 7)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 7)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 7)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 7)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 7)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 7)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 7)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 7)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 7)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 7)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 7)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 7)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 7)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 7)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 7)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 7)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 7)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 7)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 7)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 7)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 7)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 7)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 7)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 7)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 7)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 7)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 7)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 7)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 7)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 7)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 7)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 7)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 7)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 7)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 7)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 7)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 7)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 7)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 7)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 7)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 7)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 7)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 7)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 7)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 7)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 7)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 7)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 7)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 7)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 7)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 7)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 7)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 7)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 7)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 7)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 7)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 7)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 7)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 7)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 7)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 7)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 7)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 7)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 7)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 7)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 7)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 7)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 7)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 7)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 7)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 7)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 7)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 7)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 7)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 7)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 7)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 7)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 7)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(40), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(40), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 7)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 7)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 7)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(40), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 7)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 7)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 7)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 7)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 7)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 7)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 7)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(40), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(39),
         GlitchData	=> PCOUT_GlitchData(39),
         OutSignalName	=> "PCOUT(39)",
         OutTemp	=> PCOUT_zd(39),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 8)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 8)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 8)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 8)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 8)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 8)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 8)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 8)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 8)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 8)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 8)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 8)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 8)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 8)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 8)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 8)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 8)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 8)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 8)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 8)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 8)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 8)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 8)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 8)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 8)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 8)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 8)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 8)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 8)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 8)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 8)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 8)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 8)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 8)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 8)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 8)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 8)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 8)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 8)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 8)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 8)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 8)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 8)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 8)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 8)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 8)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 8)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 8)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 8)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 8)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 8)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 8)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 8)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 8)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 8)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 8)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 8)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 8)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 8)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 8)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 8)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 8)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 8)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 8)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 8)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 8)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 8)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 8)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 8)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 8)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 8)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 8)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 8)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 8)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 8)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 8)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 8)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 8)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 8)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 8)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 8)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 8)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 8)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 8)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 8)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 8)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 8)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 8)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 8)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 8)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 8)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 8)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 8)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 8)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 8)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 8)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 8)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 8)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 8)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 8)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 8)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(39), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(39), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 8)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 8)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 8)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(39), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 8)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 8)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 8)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 8)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 8)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 8)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 8)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(39), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(38),
         GlitchData	=> PCOUT_GlitchData(38),
         OutSignalName	=> "PCOUT(38)",
         OutTemp	=> PCOUT_zd(38),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 9)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 9)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 9)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 9)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 9)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 9)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 9)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 9)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 9)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 9)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 9)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 9)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 9)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 9)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 9)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 9)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 9)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 9)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 9)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 9)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 9)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 9)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 9)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 9)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 9)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 9)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 9)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 9)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 9)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 9)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 9)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 9)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 9)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 9)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 9)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 9)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 9)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 9)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 9)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 9)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 9)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 9)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 9)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 9)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 9)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 9)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 9)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 9)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 9)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 9)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 9)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 9)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 9)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 9)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 9)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 9)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 9)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 9)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 9)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 9)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 9)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 9)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 9)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 9)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 9)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 9)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 9)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 9)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 9)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 9)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 9)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 9)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 9)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 9)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 9)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 9)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 9)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 9)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 9)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 9)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 9)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 9)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 9)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 9)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 9)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 9)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 9)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 9)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 9)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 9)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 9)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 9)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 9)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 9)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 9)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 9)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 9)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 9)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 9)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 9)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 9)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(38), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(38), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 9)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 9)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 9)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(38), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 9)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 9)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 9)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 9)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 9)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 9)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 9)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(38), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(37),
         GlitchData	=> PCOUT_GlitchData(37),
         OutSignalName	=> "PCOUT(37)",
         OutTemp	=> PCOUT_zd(37),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 10)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 10)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 10)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 10)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 10)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 10)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 10)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 10)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 10)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 10)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 10)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 10)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 10)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 10)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 10)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 10)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 10)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 10)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 10)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 10)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 10)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 10)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 10)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 10)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 10)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 10)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 10)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 10)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 10)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 10)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 10)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 10)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 10)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 10)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 10)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 10)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 10)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 10)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 10)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 10)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 10)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 10)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 10)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 10)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 10)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 10)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 10)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 10)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 10)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 10)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 10)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 10)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 10)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 10)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 10)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 10)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 10)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 10)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 10)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 10)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 10)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 10)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 10)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 10)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 10)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 10)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 10)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 10)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 10)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 10)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 10)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 10)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 10)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 10)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 10)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 10)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 10)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 10)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 10)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 10)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 10)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 10)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 10)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 10)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 10)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 10)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 10)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 10)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 10)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 10)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 10)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 10)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 10)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 10)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 10)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 10)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 10)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 10)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 10)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 10)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 10)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(37), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(37), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 10)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 10)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 10)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(37), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 10)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 10)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 10)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 10)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 10)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 10)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 10)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(37), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(36),
         GlitchData	=> PCOUT_GlitchData(36),
         OutSignalName	=> "PCOUT(36)",
         OutTemp	=> PCOUT_zd(36),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 11)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 11)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 11)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 11)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 11)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 11)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 11)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 11)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 11)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 11)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 11)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 11)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 11)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 11)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 11)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 11)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 11)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 11)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 11)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 11)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 11)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 11)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 11)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 11)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 11)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 11)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 11)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 11)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 11)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 11)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 11)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 11)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 11)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 11)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 11)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 11)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 11)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 11)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 11)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 11)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 11)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 11)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 11)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 11)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 11)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 11)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 11)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 11)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 11)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 11)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 11)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 11)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 11)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 11)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 11)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 11)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 11)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 11)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 11)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 11)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 11)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 11)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 11)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 11)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 11)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 11)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 11)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 11)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 11)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 11)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 11)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 11)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 11)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 11)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 11)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 11)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 11)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 11)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 11)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 11)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 11)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 11)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 11)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 11)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 11)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 11)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 11)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 11)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 11)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 11)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 11)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 11)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 11)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 11)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 11)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 11)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 11)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 11)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 11)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 11)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 11)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(36), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(36), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 11)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 11)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 11)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(36), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 11)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 11)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 11)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 11)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 11)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 11)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 11)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(36), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(35),
         GlitchData	=> PCOUT_GlitchData(35),
         OutSignalName	=> "PCOUT(35)",
         OutTemp	=> PCOUT_zd(35),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 12)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 12)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 12)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 12)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 12)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 12)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 12)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 12)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 12)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 12)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 12)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 12)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 12)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 12)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 12)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 12)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 12)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 12)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 12)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 12)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 12)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 12)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 12)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 12)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 12)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 12)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 12)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 12)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 12)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 12)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 12)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 12)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 12)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 12)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 12)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 12)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 12)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 12)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 12)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 12)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 12)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 12)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 12)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 12)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 12)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 12)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 12)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 12)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 12)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 12)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 12)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 12)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 12)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 12)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 12)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 12)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 12)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 12)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 12)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 12)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 12)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 12)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 12)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 12)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 12)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 12)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 12)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 12)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 12)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 12)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 12)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 12)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 12)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 12)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 12)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 12)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 12)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 12)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 12)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 12)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 12)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 12)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 12)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 12)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 12)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 12)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 12)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 12)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 12)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 12)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 12)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 12)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 12)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 12)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 12)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 12)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 12)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 12)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 12)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 12)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 12)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(35), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(35), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 12)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 12)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 12)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(35), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 12)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 12)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 12)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 12)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 12)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 12)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 12)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(35), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(34),
         GlitchData	=> PCOUT_GlitchData(34),
         OutSignalName	=> "PCOUT(34)",
         OutTemp	=> PCOUT_zd(34),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 13)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 13)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 13)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 13)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 13)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 13)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 13)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 13)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 13)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 13)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 13)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 13)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 13)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 13)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 13)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 13)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 13)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 13)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 13)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 13)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 13)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 13)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 13)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 13)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 13)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 13)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 13)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 13)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 13)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 13)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 13)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 13)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 13)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 13)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 13)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 13)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 13)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 13)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 13)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 13)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 13)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 13)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 13)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 13)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 13)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 13)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 13)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 13)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 13)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 13)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 13)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 13)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 13)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 13)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 13)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 13)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 13)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 13)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 13)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 13)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 13)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 13)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 13)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 13)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 13)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 13)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 13)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 13)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 13)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 13)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 13)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 13)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 13)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 13)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 13)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 13)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 13)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 13)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 13)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 13)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 13)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 13)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 13)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 13)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 13)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 13)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 13)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 13)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 13)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 13)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 13)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 13)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 13)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 13)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 13)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 13)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 13)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 13)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 13)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 13)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 13)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(34), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(34), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 13)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 13)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 13)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(34), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 13)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 13)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 13)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 13)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 13)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 13)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 13)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(34), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(33),
         GlitchData	=> PCOUT_GlitchData(33),
         OutSignalName	=> "PCOUT(33)",
         OutTemp	=> PCOUT_zd(33),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 14)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 14)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 14)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 14)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 14)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 14)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 14)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 14)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 14)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 14)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 14)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 14)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 14)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 14)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 14)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 14)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 14)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 14)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 14)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 14)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 14)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 14)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 14)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 14)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 14)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 14)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 14)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 14)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 14)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 14)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 14)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 14)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 14)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 14)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 14)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 14)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 14)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 14)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 14)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 14)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 14)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 14)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 14)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 14)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 14)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 14)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 14)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 14)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 14)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 14)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 14)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 14)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 14)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 14)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 14)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 14)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 14)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 14)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 14)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 14)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 14)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 14)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 14)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 14)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 14)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 14)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 14)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 14)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 14)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 14)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 14)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 14)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 14)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 14)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 14)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 14)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 14)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 14)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 14)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 14)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 14)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 14)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 14)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 14)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 14)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 14)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 14)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 14)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 14)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 14)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 14)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 14)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 14)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 14)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 14)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 14)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 14)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 14)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 14)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 14)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 14)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(33), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(33), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 14)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 14)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 14)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(33), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 14)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 14)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 14)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 14)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 14)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 14)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 14)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(33), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(32),
         GlitchData	=> PCOUT_GlitchData(32),
         OutSignalName	=> "PCOUT(32)",
         OutTemp	=> PCOUT_zd(32),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 15)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 15)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 15)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 15)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 15)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 15)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 15)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 15)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 15)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 15)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 15)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 15)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 15)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 15)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 15)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 15)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 15)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 15)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 15)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 15)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 15)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 15)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 15)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 15)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 15)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 15)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 15)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 15)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 15)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 15)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 15)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 15)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 15)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 15)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 15)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 15)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 15)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 15)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 15)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 15)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 15)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 15)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 15)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 15)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 15)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 15)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 15)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 15)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 15)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 15)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 15)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 15)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 15)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 15)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 15)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 15)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 15)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 15)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 15)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 15)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 15)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 15)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 15)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 15)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 15)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 15)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 15)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 15)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 15)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 15)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 15)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 15)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 15)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 15)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 15)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 15)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 15)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 15)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 15)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 15)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 15)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 15)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 15)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 15)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 15)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 15)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 15)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 15)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 15)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 15)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 15)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 15)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 15)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 15)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 15)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 15)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 15)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 15)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 15)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 15)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 15)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(32), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(32), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 15)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 15)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 15)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(32), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 15)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 15)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 15)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 15)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 15)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 15)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 15)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(32), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(31),
         GlitchData	=> PCOUT_GlitchData(31),
         OutSignalName	=> "PCOUT(31)",
         OutTemp	=> PCOUT_zd(31),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 16)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 16)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 16)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 16)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 16)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 16)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 16)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 16)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 16)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 16)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 16)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 16)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 16)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 16)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 16)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 16)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 16)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 16)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 16)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 16)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 16)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 16)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 16)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 16)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 16)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 16)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 16)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 16)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 16)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 16)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 16)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 16)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 16)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 16)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 16)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 16)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 16)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 16)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 16)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 16)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 16)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 16)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 16)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 16)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 16)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 16)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 16)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 16)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 16)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 16)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 16)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 16)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 16)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 16)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 16)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 16)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 16)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 16)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 16)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 16)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 16)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 16)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 16)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 16)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 16)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 16)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 16)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 16)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 16)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 16)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 16)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 16)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 16)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 16)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 16)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 16)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 16)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 16)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 16)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 16)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 16)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 16)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 16)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 16)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 16)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 16)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 16)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 16)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 16)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 16)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 16)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 16)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 16)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 16)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 16)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 16)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 16)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 16)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 16)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 16)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 16)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(31), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(31), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 16)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 16)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 16)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(31), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 16)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 16)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 16)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 16)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 16)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 16)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 16)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(31), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(30),
         GlitchData	=> PCOUT_GlitchData(30),
         OutSignalName	=> "PCOUT(30)",
         OutTemp	=> PCOUT_zd(30),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 17)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 17)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 17)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 17)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 17)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 17)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 17)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 17)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 17)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 17)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 17)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 17)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 17)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 17)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 17)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 17)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 17)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 17)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 17)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 17)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 17)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 17)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 17)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 17)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 17)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 17)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 17)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 17)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 17)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 17)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 17)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 17)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 17)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 17)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 17)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 17)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 17)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 17)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 17)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 17)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 17)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 17)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 17)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 17)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 17)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 17)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 17)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 17)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 17)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 17)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 17)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 17)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 17)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 17)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 17)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 17)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 17)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 17)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 17)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 17)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 17)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 17)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 17)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 17)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 17)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 17)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 17)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 17)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 17)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 17)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 17)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 17)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 17)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 17)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 17)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 17)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 17)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 17)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 17)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 17)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 17)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 17)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 17)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 17)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 17)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 17)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 17)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 17)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 17)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 17)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 17)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 17)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 17)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 17)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 17)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 17)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 17)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 17)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 17)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 17)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 17)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(30), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(30), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 17)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 17)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 17)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(30), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 17)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 17)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 17)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 17)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 17)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 17)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 17)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(30), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(29),
         GlitchData	=> PCOUT_GlitchData(29),
         OutSignalName	=> "PCOUT(29)",
         OutTemp	=> PCOUT_zd(29),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 18)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 18)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 18)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 18)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 18)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 18)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 18)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 18)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 18)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 18)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 18)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 18)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 18)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 18)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 18)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 18)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 18)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 18)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 18)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 18)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 18)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 18)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 18)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 18)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 18)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 18)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 18)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 18)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 18)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 18)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 18)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 18)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 18)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 18)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 18)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 18)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 18)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 18)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 18)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 18)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 18)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 18)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 18)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 18)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 18)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 18)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 18)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 18)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 18)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 18)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 18)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 18)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 18)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 18)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 18)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 18)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 18)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 18)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 18)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 18)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 18)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 18)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 18)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 18)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 18)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 18)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 18)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 18)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 18)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 18)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 18)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 18)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 18)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 18)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 18)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 18)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 18)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 18)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 18)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 18)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 18)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 18)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 18)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 18)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 18)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 18)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 18)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 18)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 18)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 18)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 18)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 18)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 18)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 18)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 18)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 18)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 18)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 18)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 18)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 18)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 18)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(29), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(29), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 18)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 18)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 18)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(29), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 18)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 18)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 18)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 18)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 18)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 18)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 18)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(29), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(28),
         GlitchData	=> PCOUT_GlitchData(28),
         OutSignalName	=> "PCOUT(28)",
         OutTemp	=> PCOUT_zd(28),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 19)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 19)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 19)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 19)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 19)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 19)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 19)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 19)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 19)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 19)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 19)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 19)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 19)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 19)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 19)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 19)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 19)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 19)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 19)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 19)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 19)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 19)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 19)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 19)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 19)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 19)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 19)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 19)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 19)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 19)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 19)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 19)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 19)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 19)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 19)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 19)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 19)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 19)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 19)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 19)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 19)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 19)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 19)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 19)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 19)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 19)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 19)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 19)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 19)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 19)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 19)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 19)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 19)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 19)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 19)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 19)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 19)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 19)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 19)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 19)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 19)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 19)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 19)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 19)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 19)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 19)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 19)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 19)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 19)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 19)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 19)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 19)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 19)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 19)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 19)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 19)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 19)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 19)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 19)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 19)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 19)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 19)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 19)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 19)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 19)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 19)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 19)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 19)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 19)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 19)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 19)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 19)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 19)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 19)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 19)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 19)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 19)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 19)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 19)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 19)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 19)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(28), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(28), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 19)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 19)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 19)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(28), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 19)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 19)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 19)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 19)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 19)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 19)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 19)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(28), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(27),
         GlitchData	=> PCOUT_GlitchData(27),
         OutSignalName	=> "PCOUT(27)",
         OutTemp	=> PCOUT_zd(27),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 20)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 20)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 20)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 20)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 20)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 20)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 20)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 20)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 20)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 20)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 20)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 20)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 20)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 20)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 20)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 20)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 20)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 20)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 20)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 20)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 20)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 20)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 20)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 20)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 20)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 20)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 20)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 20)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 20)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 20)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 20)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 20)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 20)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 20)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 20)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 20)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 20)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 20)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 20)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 20)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 20)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 20)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 20)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 20)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 20)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 20)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 20)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 20)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 20)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 20)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 20)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 20)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 20)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 20)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 20)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 20)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 20)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 20)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 20)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 20)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 20)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 20)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 20)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 20)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 20)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 20)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 20)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 20)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 20)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 20)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 20)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 20)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 20)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 20)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 20)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 20)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 20)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 20)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 20)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 20)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 20)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 20)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 20)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 20)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 20)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 20)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 20)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 20)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 20)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 20)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 20)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 20)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 20)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 20)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 20)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 20)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 20)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 20)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 20)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 20)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 20)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(27), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(27), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 20)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 20)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 20)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(27), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 20)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 20)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 20)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 20)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 20)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 20)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 20)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(27), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(26),
         GlitchData	=> PCOUT_GlitchData(26),
         OutSignalName	=> "PCOUT(26)",
         OutTemp	=> PCOUT_zd(26),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 21)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 21)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 21)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 21)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 21)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 21)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 21)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 21)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 21)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 21)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 21)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 21)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 21)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 21)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 21)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 21)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 21)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 21)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 21)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 21)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 21)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 21)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 21)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 21)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 21)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 21)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 21)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 21)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 21)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 21)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 21)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 21)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 21)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 21)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 21)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 21)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 21)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 21)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 21)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 21)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 21)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 21)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 21)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 21)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 21)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 21)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 21)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 21)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 21)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 21)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 21)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 21)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 21)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 21)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 21)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 21)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 21)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 21)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 21)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 21)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 21)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 21)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 21)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 21)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 21)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 21)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 21)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 21)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 21)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 21)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 21)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 21)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 21)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 21)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 21)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 21)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 21)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 21)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 21)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 21)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 21)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 21)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 21)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 21)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 21)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 21)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 21)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 21)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 21)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 21)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 21)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 21)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 21)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 21)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 21)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 21)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 21)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 21)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 21)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 21)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 21)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(26), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(26), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 21)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 21)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 21)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(26), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 21)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 21)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 21)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 21)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 21)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 21)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 21)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(26), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(25),
         GlitchData	=> PCOUT_GlitchData(25),
         OutSignalName	=> "PCOUT(25)",
         OutTemp	=> PCOUT_zd(25),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 22)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 22)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 22)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 22)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 22)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 22)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 22)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 22)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 22)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 22)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 22)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 22)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 22)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 22)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 22)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 22)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 22)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 22)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 22)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 22)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 22)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 22)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 22)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 22)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 22)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 22)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 22)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 22)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 22)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 22)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 22)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 22)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 22)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 22)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 22)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 22)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 22)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 22)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 22)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 22)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 22)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 22)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 22)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 22)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 22)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 22)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 22)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 22)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 22)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 22)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 22)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 22)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 22)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 22)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 22)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 22)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 22)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 22)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 22)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 22)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 22)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 22)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 22)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 22)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 22)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 22)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 22)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 22)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 22)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 22)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 22)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 22)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 22)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 22)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 22)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 22)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 22)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 22)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 22)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 22)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 22)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 22)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 22)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 22)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 22)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 22)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 22)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 22)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 22)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 22)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 22)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 22)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 22)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 22)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 22)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 22)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 22)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 22)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 22)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 22)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 22)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(25), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(25), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 22)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 22)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 22)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(25), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 22)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 22)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 22)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 22)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 22)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 22)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 22)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(25), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(24),
         GlitchData	=> PCOUT_GlitchData(24),
         OutSignalName	=> "PCOUT(24)",
         OutTemp	=> PCOUT_zd(24),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 23)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 23)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 23)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 23)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 23)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 23)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 23)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 23)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 23)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 23)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 23)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 23)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 23)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 23)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 23)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 23)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 23)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 23)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 23)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 23)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 23)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 23)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 23)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 23)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 23)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 23)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 23)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 23)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 23)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 23)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 23)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 23)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 23)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 23)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 23)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 23)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 23)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 23)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 23)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 23)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 23)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 23)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 23)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 23)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 23)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 23)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 23)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 23)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 23)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 23)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 23)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 23)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 23)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 23)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 23)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 23)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 23)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 23)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 23)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 23)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 23)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 23)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 23)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 23)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 23)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 23)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 23)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 23)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 23)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 23)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 23)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 23)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 23)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 23)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 23)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 23)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 23)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 23)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 23)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 23)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 23)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 23)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 23)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 23)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 23)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 23)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 23)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 23)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 23)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 23)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 23)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 23)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 23)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 23)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 23)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 23)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 23)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 23)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 23)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 23)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 23)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(24), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(24), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 23)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 23)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 23)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(24), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 23)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 23)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 23)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 23)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 23)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 23)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 23)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(24), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(23),
         GlitchData	=> PCOUT_GlitchData(23),
         OutSignalName	=> "PCOUT(23)",
         OutTemp	=> PCOUT_zd(23),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 24)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 24)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 24)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 24)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 24)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 24)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 24)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 24)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 24)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 24)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 24)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 24)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 24)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 24)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 24)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 24)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 24)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 24)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 24)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 24)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 24)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 24)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 24)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 24)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 24)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 24)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 24)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 24)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 24)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 24)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 24)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 24)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 24)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 24)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 24)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 24)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 24)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 24)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 24)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 24)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 24)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 24)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 24)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 24)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 24)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 24)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 24)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 24)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 24)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 24)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 24)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 24)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 24)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 24)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 24)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 24)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 24)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 24)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 24)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 24)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 24)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 24)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 24)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 24)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 24)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 24)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 24)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 24)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 24)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 24)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 24)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 24)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 24)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 24)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 24)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 24)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 24)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 24)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 24)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 24)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 24)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 24)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 24)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 24)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 24)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 24)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 24)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 24)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 24)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 24)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 24)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 24)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 24)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 24)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 24)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 24)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 24)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 24)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 24)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 24)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 24)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(23), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(23), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 24)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 24)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 24)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(23), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 24)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 24)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 24)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 24)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 24)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 24)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 24)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(23), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(22),
         GlitchData	=> PCOUT_GlitchData(22),
         OutSignalName	=> "PCOUT(22)",
         OutTemp	=> PCOUT_zd(22),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 25)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 25)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 25)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 25)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 25)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 25)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 25)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 25)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 25)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 25)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 25)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 25)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 25)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 25)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 25)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 25)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 25)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 25)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 25)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 25)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 25)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 25)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 25)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 25)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 25)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 25)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 25)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 25)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 25)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 25)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 25)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 25)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 25)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 25)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 25)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 25)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 25)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 25)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 25)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 25)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 25)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 25)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 25)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 25)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 25)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 25)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 25)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 25)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 25)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 25)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 25)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 25)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 25)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 25)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 25)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 25)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 25)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 25)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 25)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 25)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 25)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 25)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 25)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 25)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 25)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 25)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 25)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 25)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 25)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 25)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 25)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 25)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 25)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 25)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 25)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 25)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 25)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 25)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 25)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 25)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 25)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 25)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 25)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 25)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 25)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 25)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 25)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 25)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 25)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 25)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 25)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 25)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 25)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 25)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 25)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 25)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 25)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 25)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 25)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 25)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 25)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(22), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(22), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 25)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 25)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 25)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(22), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 25)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 25)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 25)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 25)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 25)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 25)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 25)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(22), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(21),
         GlitchData	=> PCOUT_GlitchData(21),
         OutSignalName	=> "PCOUT(21)",
         OutTemp	=> PCOUT_zd(21),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 26)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 26)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 26)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 26)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 26)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 26)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 26)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 26)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 26)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 26)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 26)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 26)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 26)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 26)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 26)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 26)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 26)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 26)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 26)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 26)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 26)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 26)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 26)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 26)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 26)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 26)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 26)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 26)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 26)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 26)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 26)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 26)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 26)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 26)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 26)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 26)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 26)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 26)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 26)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 26)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 26)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 26)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 26)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 26)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 26)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 26)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 26)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 26)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 26)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 26)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 26)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 26)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 26)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 26)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 26)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 26)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 26)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 26)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 26)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 26)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 26)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 26)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 26)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 26)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 26)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 26)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 26)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 26)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 26)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 26)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 26)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 26)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 26)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 26)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 26)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 26)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 26)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 26)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 26)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 26)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 26)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 26)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 26)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 26)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 26)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 26)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 26)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 26)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 26)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 26)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 26)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 26)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 26)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 26)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 26)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 26)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 26)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 26)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 26)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 26)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 26)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(21), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(21), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 26)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 26)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 26)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(21), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 26)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 26)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 26)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 26)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 26)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 26)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 26)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(21), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(20),
         GlitchData	=> PCOUT_GlitchData(20),
         OutSignalName	=> "PCOUT(20)",
         OutTemp	=> PCOUT_zd(20),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 27)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 27)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 27)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 27)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 27)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 27)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 27)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 27)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 27)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 27)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 27)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 27)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 27)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 27)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 27)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 27)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 27)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 27)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 27)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 27)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 27)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 27)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 27)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 27)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 27)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 27)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 27)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 27)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 27)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 27)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 27)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 27)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 27)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 27)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 27)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 27)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 27)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 27)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 27)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 27)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 27)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 27)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 27)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 27)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 27)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 27)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 27)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 27)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 27)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 27)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 27)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 27)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 27)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 27)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 27)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 27)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 27)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 27)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 27)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 27)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 27)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 27)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 27)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 27)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 27)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 27)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 27)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 27)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 27)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 27)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 27)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 27)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 27)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 27)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 27)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 27)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 27)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 27)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 27)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 27)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 27)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 27)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 27)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 27)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 27)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 27)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 27)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 27)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 27)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 27)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 27)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 27)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 27)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 27)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 27)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 27)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 27)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 27)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 27)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 27)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 27)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(20), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(20), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 27)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 27)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 27)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(20), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 27)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 27)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 27)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 27)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 27)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 27)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 27)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(20), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(19),
         GlitchData	=> PCOUT_GlitchData(19),
         OutSignalName	=> "PCOUT(19)",
         OutTemp	=> PCOUT_zd(19),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 28)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 28)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 28)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 28)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 28)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 28)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 28)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 28)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 28)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 28)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 28)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 28)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 28)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 28)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 28)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 28)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 28)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 28)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 28)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 28)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 28)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 28)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 28)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 28)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 28)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 28)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 28)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 28)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 28)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 28)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 28)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 28)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 28)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 28)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 28)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 28)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 28)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 28)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 28)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 28)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 28)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 28)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 28)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 28)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 28)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 28)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 28)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 28)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 28)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 28)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 28)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 28)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 28)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 28)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 28)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 28)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 28)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 28)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 28)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 28)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 28)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 28)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 28)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 28)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 28)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 28)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 28)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 28)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 28)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 28)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 28)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 28)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 28)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 28)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 28)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 28)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 28)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 28)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 28)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 28)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 28)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 28)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 28)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 28)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 28)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 28)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 28)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 28)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 28)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 28)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 28)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 28)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 28)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 28)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 28)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 28)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 28)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 28)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 28)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 28)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 28)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(19), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(19), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 28)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 28)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 28)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(19), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 28)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 28)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 28)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 28)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 28)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 28)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 28)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(19), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(18),
         GlitchData	=> PCOUT_GlitchData(18),
         OutSignalName	=> "PCOUT(18)",
         OutTemp	=> PCOUT_zd(18),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 29)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 29)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 29)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 29)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 29)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 29)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 29)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 29)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 29)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 29)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 29)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 29)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 29)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 29)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 29)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 29)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 29)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 29)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 29)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 29)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 29)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 29)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 29)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 29)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 29)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 29)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 29)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 29)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 29)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 29)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 29)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 29)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 29)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 29)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 29)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 29)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 29)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 29)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 29)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 29)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 29)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 29)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 29)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 29)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 29)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 29)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 29)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 29)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 29)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 29)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 29)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 29)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 29)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 29)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 29)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 29)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 29)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 29)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 29)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 29)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 29)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 29)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 29)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 29)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 29)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 29)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 29)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 29)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 29)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 29)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 29)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 29)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 29)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 29)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 29)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 29)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 29)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 29)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 29)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 29)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 29)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 29)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 29)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 29)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 29)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 29)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 29)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 29)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 29)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 29)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 29)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 29)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 29)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 29)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 29)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 29)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 29)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 29)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 29)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 29)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 29)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(18), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(18), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 29)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 29)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 29)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(18), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 29)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 29)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 29)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 29)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 29)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 29)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 29)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(18), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(17),
         GlitchData	=> PCOUT_GlitchData(17),
         OutSignalName	=> "PCOUT(17)",
         OutTemp	=> PCOUT_zd(17),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 30)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 30)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 30)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 30)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 30)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 30)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 30)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 30)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 30)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 30)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 30)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 30)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 30)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 30)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 30)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 30)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 30)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 30)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 30)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 30)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 30)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 30)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 30)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 30)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 30)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 30)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 30)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 30)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 30)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 30)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 30)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 30)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 30)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 30)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 30)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 30)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 30)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 30)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 30)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 30)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 30)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 30)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 30)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 30)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 30)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 30)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 30)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 30)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 30)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 30)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 30)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 30)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 30)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 30)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 30)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 30)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 30)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 30)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 30)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 30)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 30)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 30)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 30)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 30)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 30)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 30)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 30)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 30)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 30)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 30)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 30)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 30)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 30)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 30)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 30)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 30)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 30)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 30)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 30)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 30)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 30)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 30)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 30)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 30)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 30)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 30)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 30)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 30)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 30)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 30)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 30)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 30)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 30)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 30)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 30)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 30)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 30)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 30)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 30)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 30)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 30)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(17), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(17), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 30)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 30)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 30)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(17), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 30)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 30)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 30)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 30)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 30)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 30)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 30)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(17), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(16),
         GlitchData	=> PCOUT_GlitchData(16),
         OutSignalName	=> "PCOUT(16)",
         OutTemp	=> PCOUT_zd(16),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 31)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 31)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 31)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 31)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 31)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 31)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 31)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 31)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 31)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 31)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 31)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 31)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 31)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 31)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 31)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 31)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 31)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 31)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 31)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 31)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 31)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 31)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 31)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 31)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 31)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 31)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 31)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 31)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 31)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 31)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 31)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 31)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 31)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 31)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 31)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 31)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 31)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 31)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 31)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 31)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 31)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 31)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 31)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 31)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 31)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 31)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 31)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 31)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 31)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 31)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 31)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 31)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 31)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 31)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 31)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 31)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 31)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 31)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 31)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 31)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 31)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 31)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 31)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 31)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 31)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 31)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 31)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 31)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 31)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 31)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 31)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 31)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 31)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 31)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 31)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 31)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 31)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 31)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 31)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 31)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 31)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 31)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 31)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 31)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 31)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 31)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 31)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 31)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 31)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 31)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 31)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 31)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 31)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 31)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 31)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 31)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 31)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 31)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 31)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 31)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 31)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(16), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(16), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 31)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 31)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 31)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(16), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 31)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 31)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 31)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 31)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 31)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 31)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 31)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(16), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(15),
         GlitchData	=> PCOUT_GlitchData(15),
         OutSignalName	=> "PCOUT(15)",
         OutTemp	=> PCOUT_zd(15),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 32)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 32)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 32)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 32)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 32)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 32)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 32)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 32)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 32)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 32)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 32)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 32)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 32)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 32)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 32)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 32)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 32)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 32)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 32)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 32)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 32)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 32)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 32)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 32)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 32)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 32)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 32)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 32)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 32)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 32)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 32)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 32)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 32)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 32)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 32)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 32)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 32)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 32)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 32)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 32)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 32)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 32)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 32)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 32)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 32)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 32)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 32)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 32)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 32)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 32)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 32)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 32)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 32)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 32)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 32)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 32)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 32)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 32)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 32)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 32)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 32)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 32)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 32)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 32)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 32)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 32)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 32)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 32)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 32)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 32)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 32)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 32)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 32)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 32)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 32)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 32)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 32)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 32)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 32)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 32)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 32)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 32)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 32)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 32)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 32)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 32)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 32)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 32)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 32)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 32)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 32)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 32)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 32)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 32)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 32)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 32)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 32)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 32)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 32)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 32)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 32)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(15), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(15), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 32)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 32)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 32)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(15), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 32)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 32)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 32)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 32)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 32)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 32)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 32)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(15), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(14),
         GlitchData	=> PCOUT_GlitchData(14),
         OutSignalName	=> "PCOUT(14)",
         OutTemp	=> PCOUT_zd(14),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 33)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 33)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 33)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 33)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 33)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 33)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 33)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 33)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 33)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 33)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 33)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 33)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 33)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 33)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 33)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 33)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 33)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 33)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 33)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 33)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 33)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 33)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 33)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 33)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 33)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 33)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 33)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 33)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 33)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 33)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 33)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 33)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 33)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 33)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 33)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 33)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 33)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 33)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 33)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 33)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 33)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 33)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 33)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 33)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 33)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 33)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 33)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 33)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 33)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 33)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 33)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 33)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 33)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 33)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 33)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 33)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 33)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 33)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 33)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 33)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 33)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 33)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 33)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 33)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 33)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 33)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 33)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 33)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 33)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 33)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 33)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 33)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 33)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 33)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 33)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 33)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 33)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 33)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 33)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 33)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 33)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 33)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 33)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 33)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 33)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 33)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 33)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 33)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 33)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 33)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 33)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 33)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 33)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 33)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 33)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 33)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 33)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 33)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 33)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 33)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 33)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(14), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(14), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 33)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 33)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 33)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(14), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 33)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 33)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 33)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 33)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 33)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 33)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 33)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(14), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(13),
         GlitchData	=> PCOUT_GlitchData(13),
         OutSignalName	=> "PCOUT(13)",
         OutTemp	=> PCOUT_zd(13),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 34)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 34)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 34)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 34)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 34)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 34)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 34)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 34)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 34)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 34)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 34)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 34)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 34)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 34)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 34)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 34)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 34)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 34)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 34)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 34)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 34)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 34)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 34)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 34)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 34)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 34)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 34)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 34)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 34)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 34)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 34)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 34)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 34)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 34)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 34)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 34)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 34)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 34)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 34)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 34)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 34)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 34)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 34)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 34)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 34)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 34)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 34)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 34)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 34)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 34)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 34)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 34)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 34)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 34)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 34)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 34)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 34)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 34)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 34)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 34)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 34)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 34)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 34)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 34)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 34)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 34)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 34)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 34)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 34)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 34)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 34)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 34)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 34)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 34)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 34)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 34)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 34)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 34)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 34)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 34)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 34)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 34)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 34)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 34)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 34)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 34)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 34)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 34)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 34)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 34)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 34)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 34)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 34)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 34)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 34)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 34)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 34)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 34)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 34)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 34)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 34)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(13), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(13), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 34)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 34)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 34)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(13), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 34)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 34)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 34)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 34)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 34)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 34)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 34)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(13), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(12),
         GlitchData	=> PCOUT_GlitchData(12),
         OutSignalName	=> "PCOUT(12)",
         OutTemp	=> PCOUT_zd(12),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 35)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 35)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 35)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 35)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 35)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 35)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 35)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 35)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 35)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 35)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 35)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 35)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 35)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 35)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 35)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 35)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 35)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 35)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 35)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 35)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 35)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 35)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 35)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 35)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 35)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 35)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 35)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 35)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 35)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 35)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 35)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 35)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 35)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 35)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 35)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 35)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 35)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 35)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 35)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 35)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 35)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 35)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 35)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 35)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 35)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 35)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 35)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 35)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 35)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 35)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 35)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 35)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 35)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 35)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 35)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 35)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 35)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 35)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 35)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 35)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 35)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 35)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 35)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 35)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 35)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 35)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 35)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 35)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 35)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 35)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 35)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 35)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 35)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 35)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 35)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 35)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 35)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 35)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 35)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 35)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 35)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 35)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 35)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 35)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 35)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 35)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 35)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 35)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 35)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 35)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 35)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 35)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 35)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 35)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 35)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 35)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 35)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 35)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 35)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 35)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 35)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(12), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(12), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 35)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 35)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 35)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(12), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 35)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 35)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 35)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 35)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 35)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 35)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 35)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(12), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(11),
         GlitchData	=> PCOUT_GlitchData(11),
         OutSignalName	=> "PCOUT(11)",
         OutTemp	=> PCOUT_zd(11),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 36)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 36)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 36)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 36)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 36)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 36)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 36)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 36)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 36)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 36)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 36)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 36)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 36)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 36)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 36)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 36)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 36)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 36)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 36)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 36)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 36)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 36)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 36)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 36)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 36)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 36)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 36)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 36)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 36)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 36)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 36)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 36)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 36)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 36)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 36)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 36)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 36)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 36)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 36)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 36)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 36)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 36)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 36)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 36)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 36)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 36)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 36)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 36)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 36)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 36)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 36)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 36)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 36)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 36)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 36)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 36)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 36)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 36)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 36)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 36)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 36)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 36)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 36)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 36)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 36)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 36)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 36)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 36)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 36)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 36)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 36)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 36)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 36)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 36)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 36)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 36)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 36)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 36)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 36)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 36)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 36)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 36)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 36)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 36)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 36)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 36)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 36)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 36)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 36)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 36)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 36)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 36)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 36)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 36)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 36)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 36)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 36)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 36)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 36)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 36)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 36)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(11), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(11), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 36)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 36)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 36)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(11), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 36)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 36)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 36)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 36)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 36)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 36)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 36)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(11), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(10),
         GlitchData	=> PCOUT_GlitchData(10),
         OutSignalName	=> "PCOUT(10)",
         OutTemp	=> PCOUT_zd(10),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 37)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 37)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 37)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 37)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 37)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 37)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 37)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 37)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 37)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 37)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 37)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 37)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 37)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 37)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 37)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 37)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 37)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 37)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 37)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 37)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 37)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 37)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 37)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 37)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 37)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 37)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 37)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 37)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 37)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 37)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 37)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 37)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 37)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 37)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 37)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 37)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 37)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 37)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 37)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 37)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 37)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 37)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 37)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 37)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 37)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 37)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 37)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 37)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 37)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 37)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 37)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 37)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 37)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 37)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 37)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 37)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 37)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 37)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 37)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 37)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 37)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 37)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 37)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 37)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 37)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 37)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 37)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 37)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 37)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 37)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 37)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 37)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 37)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 37)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 37)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 37)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 37)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 37)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 37)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 37)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 37)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 37)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 37)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 37)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 37)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 37)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 37)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 37)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 37)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 37)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 37)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 37)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 37)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 37)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 37)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 37)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 37)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 37)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 37)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 37)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 37)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(10), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(10), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 37)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 37)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 37)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(10), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 37)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 37)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 37)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 37)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 37)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 37)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 37)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(10), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(9),
         GlitchData	=> PCOUT_GlitchData(9),
         OutSignalName	=> "PCOUT(9)",
         OutTemp	=> PCOUT_zd(9),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 38)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 38)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 38)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 38)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 38)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 38)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 38)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 38)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 38)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 38)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 38)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 38)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 38)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 38)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 38)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 38)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 38)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 38)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 38)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 38)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 38)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 38)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 38)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 38)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 38)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 38)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 38)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 38)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 38)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 38)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 38)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 38)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 38)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 38)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 38)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 38)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 38)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 38)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 38)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 38)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 38)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 38)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 38)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 38)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 38)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 38)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 38)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 38)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 38)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 38)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 38)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 38)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 38)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 38)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 38)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 38)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 38)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 38)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 38)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 38)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 38)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 38)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 38)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 38)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 38)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 38)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 38)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 38)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 38)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 38)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 38)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 38)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 38)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 38)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 38)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 38)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 38)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 38)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 38)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 38)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 38)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 38)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 38)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 38)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 38)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 38)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 38)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 38)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 38)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 38)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 38)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 38)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 38)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 38)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 38)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 38)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 38)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 38)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 38)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 38)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 38)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(9), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(9), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 38)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 38)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 38)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(9), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 38)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 38)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 38)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 38)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 38)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 38)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 38)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(9), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(8),
         GlitchData	=> PCOUT_GlitchData(8),
         OutSignalName	=> "PCOUT(8)",
         OutTemp	=> PCOUT_zd(8),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 39)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 39)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 39)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 39)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 39)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 39)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 39)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 39)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 39)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 39)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 39)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 39)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 39)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 39)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 39)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 39)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 39)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 39)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 39)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 39)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 39)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 39)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 39)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 39)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 39)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 39)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 39)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 39)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 39)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 39)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 39)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 39)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 39)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 39)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 39)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 39)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 39)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 39)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 39)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 39)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 39)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 39)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 39)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 39)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 39)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 39)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 39)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 39)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 39)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 39)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 39)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 39)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 39)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 39)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 39)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 39)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 39)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 39)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 39)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 39)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 39)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 39)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 39)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 39)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 39)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 39)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 39)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 39)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 39)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 39)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 39)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 39)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 39)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 39)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 39)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 39)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 39)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 39)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 39)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 39)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 39)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 39)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 39)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 39)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 39)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 39)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 39)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 39)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 39)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 39)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 39)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 39)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 39)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 39)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 39)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 39)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 39)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 39)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 39)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 39)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 39)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(8), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(8), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 39)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 39)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 39)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(8), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 39)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 39)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 39)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 39)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 39)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 39)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 39)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(8), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(7),
         GlitchData	=> PCOUT_GlitchData(7),
         OutSignalName	=> "PCOUT(7)",
         OutTemp	=> PCOUT_zd(7),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 40)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 40)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 40)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 40)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 40)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 40)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 40)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 40)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 40)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 40)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 40)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 40)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 40)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 40)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 40)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 40)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 40)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 40)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 40)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 40)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 40)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 40)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 40)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 40)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 40)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 40)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 40)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 40)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 40)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 40)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 40)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 40)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 40)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 40)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 40)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 40)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 40)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 40)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 40)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 40)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 40)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 40)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 40)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 40)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 40)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 40)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 40)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 40)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 40)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 40)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 40)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 40)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 40)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 40)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 40)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 40)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 40)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 40)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 40)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 40)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 40)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 40)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 40)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 40)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 40)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 40)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 40)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 40)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 40)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 40)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 40)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 40)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 40)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 40)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 40)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 40)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 40)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 40)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 40)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 40)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 40)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 40)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 40)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 40)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 40)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 40)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 40)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 40)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 40)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 40)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 40)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 40)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 40)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 40)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 40)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 40)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 40)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 40)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 40)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 40)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 40)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(7), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(7), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 40)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 40)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 40)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(7), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 40)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 40)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 40)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 40)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 40)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 40)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 40)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(7), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(6),
         GlitchData	=> PCOUT_GlitchData(6),
         OutSignalName	=> "PCOUT(6)",
         OutTemp	=> PCOUT_zd(6),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 41)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 41)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 41)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 41)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 41)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 41)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 41)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 41)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 41)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 41)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 41)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 41)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 41)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 41)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 41)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 41)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 41)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 41)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 41)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 41)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 41)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 41)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 41)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 41)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 41)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 41)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 41)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 41)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 41)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 41)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 41)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 41)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 41)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 41)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 41)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 41)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 41)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 41)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 41)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 41)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 41)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 41)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 41)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 41)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 41)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 41)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 41)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 41)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 41)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 41)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 41)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 41)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 41)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 41)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 41)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 41)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 41)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 41)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 41)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 41)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 41)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 41)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 41)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 41)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 41)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 41)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 41)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 41)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 41)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 41)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 41)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 41)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 41)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 41)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 41)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 41)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 41)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 41)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 41)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 41)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 41)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 41)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 41)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 41)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 41)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 41)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 41)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 41)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 41)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 41)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 41)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 41)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 41)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 41)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 41)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 41)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 41)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 41)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 41)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 41)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 41)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(6), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(6), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 41)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 41)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 41)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(6), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 41)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 41)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 41)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 41)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 41)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 41)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 41)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(6), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(5),
         GlitchData	=> PCOUT_GlitchData(5),
         OutSignalName	=> "PCOUT(5)",
         OutTemp	=> PCOUT_zd(5),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 42)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 42)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 42)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 42)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 42)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 42)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 42)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 42)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 42)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 42)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 42)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 42)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 42)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 42)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 42)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 42)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 42)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 42)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 42)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 42)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 42)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 42)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 42)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 42)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 42)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 42)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 42)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 42)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 42)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 42)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 42)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 42)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 42)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 42)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 42)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 42)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 42)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 42)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 42)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 42)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 42)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 42)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 42)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 42)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 42)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 42)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 42)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 42)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 42)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 42)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 42)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 42)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 42)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 42)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 42)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 42)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 42)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 42)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 42)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 42)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 42)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 42)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 42)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 42)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 42)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 42)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 42)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 42)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 42)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 42)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 42)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 42)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 42)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 42)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 42)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 42)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 42)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 42)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 42)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 42)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 42)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 42)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 42)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 42)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 42)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 42)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 42)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 42)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 42)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 42)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 42)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 42)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 42)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 42)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 42)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 42)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 42)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 42)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 42)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 42)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 42)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(5), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(5), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 42)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 42)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 42)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(5), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 42)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 42)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 42)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 42)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 42)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 42)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 42)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(5), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(4),
         GlitchData	=> PCOUT_GlitchData(4),
         OutSignalName	=> "PCOUT(4)",
         OutTemp	=> PCOUT_zd(4),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 43)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 43)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 43)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 43)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 43)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 43)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 43)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 43)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 43)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 43)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 43)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 43)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 43)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 43)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 43)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 43)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 43)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 43)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 43)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 43)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 43)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 43)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 43)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 43)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 43)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 43)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 43)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 43)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 43)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 43)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 43)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 43)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 43)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 43)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 43)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 43)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 43)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 43)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 43)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 43)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 43)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 43)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 43)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 43)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 43)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 43)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 43)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 43)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 43)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 43)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 43)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 43)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 43)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 43)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 43)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 43)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 43)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 43)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 43)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 43)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 43)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 43)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 43)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 43)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 43)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 43)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 43)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 43)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 43)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 43)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 43)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 43)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 43)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 43)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 43)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 43)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 43)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 43)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 43)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 43)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 43)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 43)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 43)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 43)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 43)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 43)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 43)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 43)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 43)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 43)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 43)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 43)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 43)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 43)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 43)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 43)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 43)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 43)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 43)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 43)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 43)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(4), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(4), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 43)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 43)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 43)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(4), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 43)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 43)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 43)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 43)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 43)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 43)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 43)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(4), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(3),
         GlitchData	=> PCOUT_GlitchData(3),
         OutSignalName	=> "PCOUT(3)",
         OutTemp	=> PCOUT_zd(3),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 44)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 44)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 44)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 44)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 44)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 44)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 44)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 44)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 44)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 44)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 44)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 44)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 44)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 44)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 44)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 44)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 44)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 44)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 44)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 44)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 44)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 44)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 44)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 44)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 44)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 44)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 44)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 44)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 44)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 44)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 44)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 44)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 44)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 44)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 44)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 44)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 44)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 44)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 44)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 44)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 44)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 44)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 44)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 44)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 44)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 44)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 44)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 44)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 44)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 44)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 44)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 44)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 44)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 44)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 44)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 44)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 44)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 44)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 44)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 44)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 44)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 44)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 44)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 44)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 44)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 44)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 44)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 44)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 44)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 44)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 44)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 44)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 44)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 44)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 44)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 44)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 44)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 44)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 44)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 44)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 44)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 44)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 44)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 44)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 44)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 44)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 44)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 44)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 44)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 44)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 44)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 44)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 44)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 44)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 44)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 44)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 44)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 44)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 44)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 44)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 44)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(3), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(3), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 44)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 44)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 44)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(3), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 44)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 44)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 44)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 44)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 44)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 44)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 44)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(3), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(2),
         GlitchData	=> PCOUT_GlitchData(2),
         OutSignalName	=> "PCOUT(2)",
         OutTemp	=> PCOUT_zd(2),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 45)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 45)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 45)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 45)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 45)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 45)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 45)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 45)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 45)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 45)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 45)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 45)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 45)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 45)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 45)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 45)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 45)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 45)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 45)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 45)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 45)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 45)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 45)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 45)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 45)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 45)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 45)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 45)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 45)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 45)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 45)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 45)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 45)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 45)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 45)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 45)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 45)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 45)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 45)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 45)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 45)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 45)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 45)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 45)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 45)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 45)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 45)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 45)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 45)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 45)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 45)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 45)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 45)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 45)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 45)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 45)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 45)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 45)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 45)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 45)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 45)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 45)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 45)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 45)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 45)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 45)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 45)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 45)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 45)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 45)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 45)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 45)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 45)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 45)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 45)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 45)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 45)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 45)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 45)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 45)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 45)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 45)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 45)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 45)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 45)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 45)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 45)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 45)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 45)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 45)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 45)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 45)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 45)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 45)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 45)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 45)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 45)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 45)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 45)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 45)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 45)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(2), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(2), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 45)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 45)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 45)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(2), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 45)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 45)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 45)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 45)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 45)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 45)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 45)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(2), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(1),
         GlitchData	=> PCOUT_GlitchData(1),
         OutSignalName	=> "PCOUT(1)",
         OutTemp	=> PCOUT_zd(1),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 46)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 46)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 46)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 46)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 46)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 46)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 46)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 46)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 46)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 46)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 46)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 46)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 46)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 46)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 46)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 46)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 46)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 46)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 46)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 46)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 46)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 46)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 46)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 46)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 46)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 46)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 46)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 46)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 46)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 46)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 46)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 46)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 46)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 46)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 46)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 46)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 46)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 46)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 46)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 46)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 46)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 46)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 46)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 46)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 46)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 46)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 46)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 46)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 46)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 46)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 46)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 46)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 46)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 46)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 46)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 46)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 46)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 46)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 46)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 46)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 46)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 46)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 46)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 46)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 46)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 46)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 46)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 46)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 46)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 46)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 46)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 46)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 46)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 46)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 46)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 46)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 46)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 46)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 46)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 46)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 46)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 46)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 46)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 46)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 46)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 46)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 46)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 46)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 46)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 46)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 46)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 46)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 46)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 46)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 46)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 46)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 46)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 46)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 46)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 46)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 46)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(1), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(1), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 46)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 46)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 46)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(1), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 46)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 46)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 46)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 46)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 46)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 46)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 46)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(1), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(0),
         GlitchData	=> PCOUT_GlitchData(0),
         OutSignalName	=> "PCOUT(0)",
         OutTemp	=> PCOUT_zd(0),
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_PCOUT((1439 - 47)- 48*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_PCOUT((1439 - 47)- 48*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_PCOUT((1439 - 47)- 48*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_PCOUT((1439 - 47)- 48*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_PCOUT((1439 - 47)- 48*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_PCOUT((1439 - 47)- 48*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_PCOUT((1439 - 47)- 48*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_PCOUT((1439 - 47)- 48*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_PCOUT((1439 - 47)- 48*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_PCOUT((1439 - 47)- 48*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_PCOUT((1439 - 47)- 48*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_PCOUT((1439 - 47)- 48*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_PCOUT((1439 - 47)- 48*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_PCOUT((1439 - 47)- 48*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_PCOUT((1439 - 47)- 48*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_PCOUT((1439 - 47)- 48*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_PCOUT((1439 - 47)- 48*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_PCOUT((1439 - 47)- 48*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_PCOUT((1439 - 47)- 48*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_PCOUT((1439 - 47)- 48*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_PCOUT((1439 - 47)- 48*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_PCOUT((1439 - 47)- 48*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_PCOUT((1439 - 47)- 48*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_PCOUT((1439 - 47)- 48*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_PCOUT((1439 - 47)- 48*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_PCOUT((1439 - 47)- 48*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_PCOUT((1439 - 47)- 48*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_PCOUT((1439 - 47)- 48*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_PCOUT((1439 - 47)- 48*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_PCOUT((1439 - 47)- 48*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_PCOUT((1439 - 47)- 48*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_PCOUT((1439 - 47)- 48*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_PCOUT((1439 - 47)- 48*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_PCOUT((1439 - 47)- 48*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_PCOUT((1439 - 47)- 48*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_PCOUT((1439 - 47)- 48*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_PCOUT((1439 - 47)- 48*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_PCOUT((1439 - 47)- 48*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_PCOUT((1439 - 47)- 48*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_PCOUT((1439 - 47)- 48*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_PCOUT((1439 - 47)- 48*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_PCOUT((1439 - 47)- 48*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_PCOUT((1439 - 47)- 48*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_PCOUT((1439 - 47)- 48*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_PCOUT((1439 - 47)- 48*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_PCOUT((1439 - 47)- 48*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_PCOUT((1439 - 47)- 48*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_PCOUT((1439 - 47)- 48*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_PCOUT((1439 - 47)- 48*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_PCOUT((1439 - 47)- 48*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_PCOUT((1439 - 47)- 48*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_PCOUT((1439 - 47)- 48*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_PCOUT((1439 - 47)- 48*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_PCOUT((1439 - 47)- 48*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_PCOUT((1439 - 47)- 48*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_PCOUT((1439 - 47)- 48*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_PCOUT((1439 - 47)- 48*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_PCOUT((1439 - 47)- 48*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_PCOUT((1439 - 47)- 48*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_PCOUT((1439 - 47)- 48*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_PCOUT((191 - 47)- 48*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_PCOUT((191 - 47)- 48*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_PCOUT((191 - 47)- 48*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_PCOUT((191 - 47)- 48*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_PCOUT((863 - 47)- 48*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_PCOUT((863 - 47)- 48*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_PCOUT((863 - 47)- 48*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_PCOUT((863 - 47)- 48*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_PCOUT((863 - 47)- 48*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_PCOUT((863 - 47)- 48*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_PCOUT((863 - 47)- 48*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_PCOUT((863 - 47)- 48*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_PCOUT((863 - 47)- 48*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_PCOUT((863 - 47)- 48*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_PCOUT((863 - 47)- 48*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_PCOUT((863 - 47)- 48*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_PCOUT((863 - 47)- 48*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_PCOUT((863 - 47)- 48*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_PCOUT((863 - 47)- 48*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_PCOUT((863 - 47)- 48*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_PCOUT((863 - 47)- 48*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_PCOUT((863 - 47)- 48*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_PCOUT((863 - 47)- 48*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_PCOUT((863 - 47)- 48*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_PCOUT((863 - 47)- 48*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_PCOUT((863 - 47)- 48*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_PCOUT((863 - 47)- 48*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_PCOUT((863 - 47)- 48*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_PCOUT((863 - 47)- 48*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_PCOUT((863 - 47)- 48*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_PCOUT((863 - 47)- 48*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_PCOUT((863 - 47)- 48*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_PCOUT((863 - 47)- 48*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_PCOUT((863 - 47)- 48*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_PCOUT((863 - 47)- 48*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_PCOUT((863 - 47)- 48*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_PCOUT((863 - 47)- 48*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_PCOUT((863 - 47)- 48*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_PCOUT((863 - 47)- 48*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_PCOUT((863 - 47)- 48*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_PCOUT((2303 - 47)- 48*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_PCOUT(0), true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_PCOUT(0), true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_PCOUT((143 - 47)- 48*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_PCOUT((143 - 47)- 48*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_PCOUT((143 - 47)- 48*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_PCOUT(0), true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_PCOUT((335 - 47)- 48*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_PCOUT((335 - 47)- 48*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_PCOUT((335 - 47)- 48*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_PCOUT((335 - 47)- 48*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_PCOUT((335 - 47)- 48*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_PCOUT((335 - 47)- 48*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_PCOUT((335 - 47)- 48*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_PCOUT(0), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> UNDERFLOW,
         GlitchData	=> UNDERFLOW_GlitchData,
         OutSignalName	=> "UNDERFLOW",
         OutTemp	=> UNDERFLOW_zd,
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_UNDERFLOW((29 - 0)- 1*0), true),
			1 => (A_ipd(1)'last_event, tpd_A_UNDERFLOW((29 - 0)- 1*0), true),
			2 => (A_ipd(2)'last_event, tpd_A_UNDERFLOW((29 - 0)- 1*0), true),
			3 => (A_ipd(3)'last_event, tpd_A_UNDERFLOW((29 - 0)- 1*0), true),
			4 => (A_ipd(4)'last_event, tpd_A_UNDERFLOW((29 - 0)- 1*0), true),
			5 => (A_ipd(5)'last_event, tpd_A_UNDERFLOW((29 - 0)- 1*0), true),
			6 => (A_ipd(6)'last_event, tpd_A_UNDERFLOW((29 - 0)- 1*0), true),
			7 => (A_ipd(7)'last_event, tpd_A_UNDERFLOW((29 - 0)- 1*0), true),
			8 => (A_ipd(8)'last_event, tpd_A_UNDERFLOW((29 - 0)- 1*0), true),
			9 => (A_ipd(9)'last_event, tpd_A_UNDERFLOW((29 - 0)- 1*0), true),
			10 => (A_ipd(10)'last_event, tpd_A_UNDERFLOW((29 - 0)- 1*0), true),
			11 => (A_ipd(11)'last_event, tpd_A_UNDERFLOW((29 - 0)- 1*0), true),
			12 => (A_ipd(12)'last_event, tpd_A_UNDERFLOW((29 - 0)- 1*0), true),
			13 => (A_ipd(13)'last_event, tpd_A_UNDERFLOW((29 - 0)- 1*0), true),
			14 => (A_ipd(14)'last_event, tpd_A_UNDERFLOW((29 - 0)- 1*0), true),
			15 => (A_ipd(15)'last_event, tpd_A_UNDERFLOW((29 - 0)- 1*0), true),
			16 => (A_ipd(16)'last_event, tpd_A_UNDERFLOW((29 - 0)- 1*0), true),
			17 => (A_ipd(17)'last_event, tpd_A_UNDERFLOW((29 - 0)- 1*0), true),
			18 => (A_ipd(18)'last_event, tpd_A_UNDERFLOW((29 - 0)- 1*0), true),
			19 => (A_ipd(19)'last_event, tpd_A_UNDERFLOW((29 - 0)- 1*0), true),
			20 => (A_ipd(20)'last_event, tpd_A_UNDERFLOW((29 - 0)- 1*0), true),
			21 => (A_ipd(21)'last_event, tpd_A_UNDERFLOW((29 - 0)- 1*0), true),
			22 => (A_ipd(22)'last_event, tpd_A_UNDERFLOW((29 - 0)- 1*0), true),
			23 => (A_ipd(23)'last_event, tpd_A_UNDERFLOW((29 - 0)- 1*0), true),
			24 => (A_ipd(24)'last_event, tpd_A_UNDERFLOW((29 - 0)- 1*0), true),
			25 => (A_ipd(25)'last_event, tpd_A_UNDERFLOW((29 - 0)- 1*0), true),
			26 => (A_ipd(26)'last_event, tpd_A_UNDERFLOW((29 - 0)- 1*0), true),
			27 => (A_ipd(27)'last_event, tpd_A_UNDERFLOW((29 - 0)- 1*0), true),
			28 => (A_ipd(28)'last_event, tpd_A_UNDERFLOW((29 - 0)- 1*0), true),
			29 => (A_ipd(29)'last_event, tpd_A_UNDERFLOW((29 - 0)- 1*0), true),
			30 => (ACIN_ipd(0)'last_event, tpd_ACIN_UNDERFLOW((29 - 0)- 1*0), true),
			31 => (ACIN_ipd(1)'last_event, tpd_ACIN_UNDERFLOW((29 - 0)- 1*0), true),
			32 => (ACIN_ipd(2)'last_event, tpd_ACIN_UNDERFLOW((29 - 0)- 1*0), true),
			33 => (ACIN_ipd(3)'last_event, tpd_ACIN_UNDERFLOW((29 - 0)- 1*0), true),
			34 => (ACIN_ipd(4)'last_event, tpd_ACIN_UNDERFLOW((29 - 0)- 1*0), true),
			35 => (ACIN_ipd(5)'last_event, tpd_ACIN_UNDERFLOW((29 - 0)- 1*0), true),
			36 => (ACIN_ipd(6)'last_event, tpd_ACIN_UNDERFLOW((29 - 0)- 1*0), true),
			37 => (ACIN_ipd(7)'last_event, tpd_ACIN_UNDERFLOW((29 - 0)- 1*0), true),
			38 => (ACIN_ipd(8)'last_event, tpd_ACIN_UNDERFLOW((29 - 0)- 1*0), true),
			39 => (ACIN_ipd(9)'last_event, tpd_ACIN_UNDERFLOW((29 - 0)- 1*0), true),
			40 => (ACIN_ipd(10)'last_event, tpd_ACIN_UNDERFLOW((29 - 0)- 1*0), true),
			41 => (ACIN_ipd(11)'last_event, tpd_ACIN_UNDERFLOW((29 - 0)- 1*0), true),
			42 => (ACIN_ipd(12)'last_event, tpd_ACIN_UNDERFLOW((29 - 0)- 1*0), true),
			43 => (ACIN_ipd(13)'last_event, tpd_ACIN_UNDERFLOW((29 - 0)- 1*0), true),
			44 => (ACIN_ipd(14)'last_event, tpd_ACIN_UNDERFLOW((29 - 0)- 1*0), true),
			45 => (ACIN_ipd(15)'last_event, tpd_ACIN_UNDERFLOW((29 - 0)- 1*0), true),
			46 => (ACIN_ipd(16)'last_event, tpd_ACIN_UNDERFLOW((29 - 0)- 1*0), true),
			47 => (ACIN_ipd(17)'last_event, tpd_ACIN_UNDERFLOW((29 - 0)- 1*0), true),
			48 => (ACIN_ipd(18)'last_event, tpd_ACIN_UNDERFLOW((29 - 0)- 1*0), true),
			49 => (ACIN_ipd(19)'last_event, tpd_ACIN_UNDERFLOW((29 - 0)- 1*0), true),
			50 => (ACIN_ipd(20)'last_event, tpd_ACIN_UNDERFLOW((29 - 0)- 1*0), true),
			51 => (ACIN_ipd(21)'last_event, tpd_ACIN_UNDERFLOW((29 - 0)- 1*0), true),
			52 => (ACIN_ipd(22)'last_event, tpd_ACIN_UNDERFLOW((29 - 0)- 1*0), true),
			53 => (ACIN_ipd(23)'last_event, tpd_ACIN_UNDERFLOW((29 - 0)- 1*0), true),
			54 => (ACIN_ipd(24)'last_event, tpd_ACIN_UNDERFLOW((29 - 0)- 1*0), true),
			55 => (ACIN_ipd(25)'last_event, tpd_ACIN_UNDERFLOW((29 - 0)- 1*0), true),
			56 => (ACIN_ipd(26)'last_event, tpd_ACIN_UNDERFLOW((29 - 0)- 1*0), true),
			57 => (ACIN_ipd(27)'last_event, tpd_ACIN_UNDERFLOW((29 - 0)- 1*0), true),
			58 => (ACIN_ipd(28)'last_event, tpd_ACIN_UNDERFLOW((29 - 0)- 1*0), true),
			59 => (ACIN_ipd(29)'last_event, tpd_ACIN_UNDERFLOW((29 - 0)- 1*0), true),
			60 => (ALUMODE_ipd(0)'last_event, tpd_ALUMODE_UNDERFLOW((3 - 0)- 1*0), true),
			61 => (ALUMODE_ipd(1)'last_event, tpd_ALUMODE_UNDERFLOW((3 - 0)- 1*0), true),
			62 => (ALUMODE_ipd(2)'last_event, tpd_ALUMODE_UNDERFLOW((3 - 0)- 1*0), true),
			63 => (ALUMODE_ipd(3)'last_event, tpd_ALUMODE_UNDERFLOW((3 - 0)- 1*0), true),
			64 => (B_ipd(0)'last_event, tpd_B_UNDERFLOW((17 - 0)- 1*0), true),
			65 => (B_ipd(1)'last_event, tpd_B_UNDERFLOW((17 - 0)- 1*0), true),
			66 => (B_ipd(2)'last_event, tpd_B_UNDERFLOW((17 - 0)- 1*0), true),
			67 => (B_ipd(3)'last_event, tpd_B_UNDERFLOW((17 - 0)- 1*0), true),
			68 => (B_ipd(4)'last_event, tpd_B_UNDERFLOW((17 - 0)- 1*0), true),
			69 => (B_ipd(5)'last_event, tpd_B_UNDERFLOW((17 - 0)- 1*0), true),
			70 => (B_ipd(6)'last_event, tpd_B_UNDERFLOW((17 - 0)- 1*0), true),
			71 => (B_ipd(7)'last_event, tpd_B_UNDERFLOW((17 - 0)- 1*0), true),
			72 => (B_ipd(8)'last_event, tpd_B_UNDERFLOW((17 - 0)- 1*0), true),
			73 => (B_ipd(9)'last_event, tpd_B_UNDERFLOW((17 - 0)- 1*0), true),
			74 => (B_ipd(10)'last_event, tpd_B_UNDERFLOW((17 - 0)- 1*0), true),
			75 => (B_ipd(11)'last_event, tpd_B_UNDERFLOW((17 - 0)- 1*0), true),
			76 => (B_ipd(12)'last_event, tpd_B_UNDERFLOW((17 - 0)- 1*0), true),
			77 => (B_ipd(13)'last_event, tpd_B_UNDERFLOW((17 - 0)- 1*0), true),
			78 => (B_ipd(14)'last_event, tpd_B_UNDERFLOW((17 - 0)- 1*0), true),
			79 => (B_ipd(15)'last_event, tpd_B_UNDERFLOW((17 - 0)- 1*0), true),
			80 => (B_ipd(16)'last_event, tpd_B_UNDERFLOW((17 - 0)- 1*0), true),
			81 => (B_ipd(17)'last_event, tpd_B_UNDERFLOW((17 - 0)- 1*0), true),
			82 => (BCIN_ipd(0)'last_event, tpd_BCIN_UNDERFLOW((17 - 0)- 1*0), true),
			83 => (BCIN_ipd(1)'last_event, tpd_BCIN_UNDERFLOW((17 - 0)- 1*0), true),
			84 => (BCIN_ipd(2)'last_event, tpd_BCIN_UNDERFLOW((17 - 0)- 1*0), true),
			85 => (BCIN_ipd(3)'last_event, tpd_BCIN_UNDERFLOW((17 - 0)- 1*0), true),
			86 => (BCIN_ipd(4)'last_event, tpd_BCIN_UNDERFLOW((17 - 0)- 1*0), true),
			87 => (BCIN_ipd(5)'last_event, tpd_BCIN_UNDERFLOW((17 - 0)- 1*0), true),
			88 => (BCIN_ipd(6)'last_event, tpd_BCIN_UNDERFLOW((17 - 0)- 1*0), true),
			89 => (BCIN_ipd(7)'last_event, tpd_BCIN_UNDERFLOW((17 - 0)- 1*0), true),
			90 => (BCIN_ipd(8)'last_event, tpd_BCIN_UNDERFLOW((17 - 0)- 1*0), true),
			91 => (BCIN_ipd(9)'last_event, tpd_BCIN_UNDERFLOW((17 - 0)- 1*0), true),
			92 => (BCIN_ipd(10)'last_event, tpd_BCIN_UNDERFLOW((17 - 0)- 1*0), true),
			93 => (BCIN_ipd(11)'last_event, tpd_BCIN_UNDERFLOW((17 - 0)- 1*0), true),
			94 => (BCIN_ipd(12)'last_event, tpd_BCIN_UNDERFLOW((17 - 0)- 1*0), true),
			95 => (BCIN_ipd(13)'last_event, tpd_BCIN_UNDERFLOW((17 - 0)- 1*0), true),
			96 => (BCIN_ipd(14)'last_event, tpd_BCIN_UNDERFLOW((17 - 0)- 1*0), true),
			97 => (BCIN_ipd(15)'last_event, tpd_BCIN_UNDERFLOW((17 - 0)- 1*0), true),
			98 => (BCIN_ipd(16)'last_event, tpd_BCIN_UNDERFLOW((17 - 0)- 1*0), true),
			99 => (BCIN_ipd(17)'last_event, tpd_BCIN_UNDERFLOW((17 - 0)- 1*0), true),
			100 => (C_ipd(0)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			101 => (C_ipd(1)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			102 => (C_ipd(2)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			103 => (C_ipd(3)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			104 => (C_ipd(4)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			105 => (C_ipd(5)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			106 => (C_ipd(6)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			107 => (C_ipd(7)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			108 => (C_ipd(8)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			109 => (C_ipd(9)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			110 => (C_ipd(10)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			111 => (C_ipd(11)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			112 => (C_ipd(12)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			113 => (C_ipd(13)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			114 => (C_ipd(14)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			115 => (C_ipd(15)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			116 => (C_ipd(16)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			117 => (C_ipd(17)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			118 => (C_ipd(18)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			119 => (C_ipd(19)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			120 => (C_ipd(20)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			121 => (C_ipd(21)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			122 => (C_ipd(22)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			123 => (C_ipd(23)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			124 => (C_ipd(24)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			125 => (C_ipd(25)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			126 => (C_ipd(26)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			127 => (C_ipd(27)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			128 => (C_ipd(28)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			129 => (C_ipd(29)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			130 => (C_ipd(30)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			131 => (C_ipd(31)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			132 => (C_ipd(32)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			133 => (C_ipd(33)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			134 => (C_ipd(34)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			135 => (C_ipd(35)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			136 => (C_ipd(36)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			137 => (C_ipd(37)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			138 => (C_ipd(38)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			139 => (C_ipd(39)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			140 => (C_ipd(40)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			141 => (C_ipd(41)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			142 => (C_ipd(42)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			143 => (C_ipd(43)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			144 => (C_ipd(44)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			145 => (C_ipd(45)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			146 => (C_ipd(46)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			147 => (C_ipd(47)'last_event, tpd_C_UNDERFLOW((47 - 0)- 1*0), true),
			148 => (CARRYCASCIN_ipd'last_event, tpd_CARRYCASCIN_UNDERFLOW, true),
			149 => (CARRYIN_ipd'last_event, tpd_CARRYIN_UNDERFLOW, true),
			150 => (CARRYINSEL_ipd(0)'last_event, tpd_CARRYINSEL_UNDERFLOW((2 - 0)- 1*0), true),
			151 => (CARRYINSEL_ipd(1)'last_event, tpd_CARRYINSEL_UNDERFLOW((2 - 0)- 1*0), true),
			152 => (CARRYINSEL_ipd(2)'last_event, tpd_CARRYINSEL_UNDERFLOW((2 - 0)- 1*0), true),
			153 => (MULTSIGNIN_ipd'last_event, tpd_MULTSIGNIN_UNDERFLOW, true),
			154 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_UNDERFLOW((6 - 0)- 1*0), true),
			155 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_UNDERFLOW((6 - 0)- 1*0), true),
			156 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_UNDERFLOW((6 - 0)- 1*0), true),
			157 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_UNDERFLOW((6 - 0)- 1*0), true),
			158 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_UNDERFLOW((6 - 0)- 1*0), true),
			159 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_UNDERFLOW((6 - 0)- 1*0), true),
			160 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_UNDERFLOW((6 - 0)- 1*0), true),
			161 => (PCIN_ipd(0)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			162 => (PCIN_ipd(1)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			163 => (PCIN_ipd(2)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			164 => (PCIN_ipd(3)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			165 => (PCIN_ipd(4)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			166 => (PCIN_ipd(5)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			167 => (PCIN_ipd(6)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			168 => (PCIN_ipd(7)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			169 => (PCIN_ipd(8)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			170 => (PCIN_ipd(9)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			171 => (PCIN_ipd(10)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			172 => (PCIN_ipd(11)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			173 => (PCIN_ipd(12)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			174 => (PCIN_ipd(13)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			175 => (PCIN_ipd(14)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			176 => (PCIN_ipd(15)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			177 => (PCIN_ipd(16)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			178 => (PCIN_ipd(17)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			179 => (PCIN_ipd(18)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			180 => (PCIN_ipd(19)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			181 => (PCIN_ipd(20)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			182 => (PCIN_ipd(21)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			183 => (PCIN_ipd(22)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			184 => (PCIN_ipd(23)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			185 => (PCIN_ipd(24)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			186 => (PCIN_ipd(25)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			187 => (PCIN_ipd(26)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			188 => (PCIN_ipd(27)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			189 => (PCIN_ipd(28)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			190 => (PCIN_ipd(29)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			191 => (PCIN_ipd(30)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			192 => (PCIN_ipd(31)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			193 => (PCIN_ipd(32)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			194 => (PCIN_ipd(33)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			195 => (PCIN_ipd(34)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			196 => (PCIN_ipd(35)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			197 => (PCIN_ipd(36)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			198 => (PCIN_ipd(37)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			199 => (PCIN_ipd(38)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			200 => (PCIN_ipd(39)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			201 => (PCIN_ipd(40)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			202 => (PCIN_ipd(41)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			203 => (PCIN_ipd(42)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			204 => (PCIN_ipd(43)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			205 => (PCIN_ipd(44)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			206 => (PCIN_ipd(45)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			207 => (PCIN_ipd(46)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			208 => (PCIN_ipd(47)'last_event, tpd_PCIN_UNDERFLOW((47 - 0)- 1*0), true),
			209 => (CLK_dly'last_event, tpd_CLK_UNDERFLOW, true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

-- END
--  Wait signal (input/output pins)
   wait on
     A_dly,
     ACIN_dly,
     ALUMODE_dly,
     B_dly,
     BCIN_dly,
     C_dly,
     CARRYCASCIN_dly,
     CARRYIN_dly,
     CARRYINSEL_dly,
     CEA1_dly,
     CEA2_dly,
     CEALUMODE_dly,
     CEB1_dly,
     CEB2_dly,
     CEC_dly,
     CECARRYIN_dly,
     CECTRL_dly,
     CEM_dly,
     CEMULTCARRYIN_dly,
     CEP_dly,
     CLK_dly,
     MULTSIGNIN_dly,
     OPMODE_dly,
     PCIN_dly,
     RSTA_dly,
     RSTALLCARRYIN_dly,
     RSTALUMODE_dly,
     RSTB_dly,
     RSTC_dly,
     RSTCTRL_dly,
     RSTM_dly,
     RSTP_dly,

     ACOUT_zd,
     BCOUT_zd,
     CARRYCASCOUT_zd,
     CARRYOUT_zd,
     OVERFLOW_zd,
     P_zd,
     PATTERNBDETECT_zd,
     PATTERNDETECT_zd,
     PCOUT_zd,
     UNDERFLOW_zd;

   end process prcs_tmngchk;



end X_DSP48E_V;

