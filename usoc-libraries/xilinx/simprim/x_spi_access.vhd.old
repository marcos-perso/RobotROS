-- $Header: /devl/xcs/repo/env/Databases/CAEInterfaces/vhdsclibs/data/simprims/trilogy/VITAL/Attic/x_spi_access.vhd,v 1.18.2.2 2008/07/09 22:31:35 robh Exp $
-------------------------------------------------------------------------------
-- Copyright (c) 1995/2008 Xilinx, Inc.
-- All Right Reserved.
-------------------------------------------------------------------------------
--   ____  ____
--  /   /\/   /
-- /___/  \  /    Vendor : Xilinx
-- \   \   \/     Version : 10.1i
--  \   \         Description : Xilinx Timing Simulation Library Component
--  /   /                  Internal logic access to the Serial Peripheral Interface (SPI) PROM data
-- /___/   /\     X_SPI_ACCESS.vhd 
-- \   \  /  \    Timestamp : Fri Oct 12 10:43:26 PDT 2007
--  \___\/\___\
--
--
-- Revision:
--    10/12/07 - Initial version
--    06/03/08 - Fixed vcs compiler warning message about synopsys_off
--    07/09/08 - CR476247 - shorten simulation delays.
--               Change MISO out off state from H to 1.
-- End Revision

----- CELL X_SPI_ACCESS -----

library std;
    use std.textio.all;
library IEEE;
    use IEEE.std_logic_1164.all;
    use IEEE.std_logic_textio.all;
    use IEEE.Std_logic_unsigned.all;
    use IEEE.numeric_std.all;


library IEEE;
use IEEE.VITAL_Timing.all;

---entity declarations--------------
entity X_SPI_ACCESS is
  generic(
       
    SIM_DELAY_TYPE  : string := "SCALED";
    SIM_DEVICE      : string := "3S1400AN";  
    SIM_FACTORY_ID  : bit_vector :=X"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    SIM_USER_ID     : bit_vector := X"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF";
    SIM_MEM_FILE    : string := "NONE";
    TimingChecksOn : boolean := true;
    Xon            : boolean := true;
    MsgOn          : boolean := true;
    LOC            : string  := "UNPLACED";

----- VITAL pin-to-pin propagation delays
        tpd_CLK_MISO : VitalDelayType01 := (100 ps, 100 ps);        
        tpd_CSB_MISO : VitalDelayType01 := (  0 ps,   0 ps);        

----- VITAL input wire delays
        tipd_CLK        : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_CSB        : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_MOSI       : VitalDelayType01 := ( 0 ps,  0 ps);

----- VITAL clock ticd delays
        ticd_CLK        : VitalDelayType   := 0 ps;

----- VITAL clock-to-pin tisd delays
        tisd_CSB_CLK    : VitalDelayType   := 0 ps; 
        tisd_MOSI_CLK   : VitalDelayType   := 0 ps; 

-----  VITAL Setup/Hold delay variables

        tsetup_CSB_CLK_posedge_posedge : VitalDelayType := 0.0 ps;
        tsetup_CSB_CLK_negedge_posedge : VitalDelayType := 0.0 ps;
        tsetup_CSB_CLK_posedge_negedge : VitalDelayType := 0.0 ps;
        tsetup_CSB_CLK_negedge_negedge : VitalDelayType := 0.0 ps;
        thold_CSB_CLK_posedge_posedge  : VitalDelayType := 0.0 ps;
        thold_CSB_CLK_negedge_posedge  : VitalDelayType := 0.0 ps;
        thold_CSB_CLK_posedge_negedge  : VitalDelayType := 0.0 ps;
        thold_CSB_CLK_negedge_negedge  : VitalDelayType := 0.0 ps;
        
        tsetup_MOSI_CLK_posedge_posedge : VitalDelayType := 0.0 ps;
        tsetup_MOSI_CLK_negedge_posedge : VitalDelayType := 0.0 ps;
        thold_MOSI_CLK_posedge_posedge  : VitalDelayType := 0.0 ps;
        thold_MOSI_CLK_negedge_posedge  : VitalDelayType := 0.0 ps;

----- VITAL period variables
        tperiod_CLK_posedge : VitalDelayType   := 0 ps;

----- VITAL pulse width variables
        tpw_CLK_posedge : VitalDelayType   := 0 ps;
        tpw_CLK_negedge : VitalDelayType   := 0 ps
);

port(
    MISO            : out std_ulogic;
    CLK             : in std_ulogic;
    CSB             : in std_ulogic;
    MOSI            : in std_ulogic
    );


  attribute VITAL_LEVEL0 of
    X_SPI_ACCESS : entity is true;
end X_SPI_ACCESS;

----architecture declarations------
architecture X_SPI_ACCESS_V of X_SPI_ACCESS is


constant SYNC_PATH_DELAY : time := 0 ps;

constant    InstancePath    : string := "X_SPI_ACCESS";
    
constant    binary_opt      : std_logic := '0';
--  unchanged time delays
constant     Tdis            : TIME := 0 ps ;
constant     Tv              : TIME := 0 ps ;
constant      Tspickh        : TIME := 6800 ps ;
constant      Tspickl        : TIME := 6800 ps ;

-- divided delays
constant    Tspiclkl        : STRING := "Tspiclkl";                     
constant    Tspiclkh        : STRING := "Tspiclkh";                     
constant    TCOMP           : STRING := "   tCOMP";     
constant    TXFR            : STRING := "    tXFR";
constant    TPEP            : STRING := "    tPEP";
constant    TP              : STRING := "      tP";
constant    TPE             : STRING := "     tPE";
constant    TSE             : STRING := "     tSE";
constant    TVCSL           : STRING := "   tVCSL";
constant    TPUW            : STRING := "    tPUW";

constant    Tsck            : Time := 15152 ps;   -- period of 66 MHz 
constant    Tsck33          : Time := 30304 ps;   --clk_period for 33 MHz 
constant    Tcs             : TIME := 50  ns;     -- 50 ns  Minimum CSB High Time
signal      scaled_flag     : boolean;

procedure validate_input(   
              SIM_DEVICE : in string;
               accuracy  : in string;
    signal     scal_flag : inout boolean
    ) is
    variable ln : Line;
begin
   if (accuracy = "SCALED" ) then
       scal_flag <= TRUE;
       wait for 1 ps;
   elsif  (accuracy ="ACCURATE") then 
       scal_flag <= FALSE;
       wait for 1 ps;
   else
        write(ln, string'(" Attribute Syntax Error : "));
        write(ln, string'(" SIM_DELAY_TYPE "));
        write(ln, string'( " in "));
        write(ln, InstancePath);
        write(ln, string'( " The Legal values for this attribute are ACCURATE or SCALED "));
        assert false report ln.all severity failure;
        DEALLOCATE (ln);        
    end if;
    if (SIM_DEVICE /=  "3S50AN")and(SIM_DEVICE /=  "3S200AN")and(SIM_DEVICE /=  "3S400AN")and(SIM_DEVICE /=  "3S700AN")and(SIM_DEVICE /= "3S1400AN") then
        write(ln, string'(" Attribute Syntax Error :  The allowed values for SIM_DEVICE in "));
        write(ln, InstancePath);
        write(ln, string'(" are 3S50AN, 3S200AN, 3S400AN, 3S700AN or 3S1400AN"));
        assert false report ln.all severity failure;
        DEALLOCATE (ln);        
    end if;
end validate_input ;   



----------------------Convert integer subroutine -------------------------------------------
subtype SMALL_INT is INTEGER range 0 to 1;
-- synopsys synthesis_off
type tbl_type is array (STD_ULOGIC) of STD_ULOGIC;
constant tbl_BINARY : tbl_type :=
('X', 'X', '0', '1', 'X', 'X', '0', '1', 'X');
-- synopsys synthesis_on
function CONV_INTEGER(ARG: STD_ULOGIC) return SMALL_INT;
-- attribute foreign of CONV_INTEGER[UNSIGNED return INTEGER]:function is "Conv_Integer_Unsigned";
function CONV_INTEGER(ARG: STD_ULOGIC) return SMALL_INT is
variable tmp: STD_ULOGIC;
-- synopsys built_in SYN_FEED_THRU
-- synopsys subpgm_id 370
begin
-- synopsys synthesis_off
tmp := tbl_BINARY(ARG);
if tmp = '1' then
    return 1;
else
    return 0;
end if;
-- synopsys synthesis_on
end;
-----------------------------------------------------------------------------------------------------


function delay_cal (DELAY_NAME : in string(1 to 8);
                    scaled_flag : in boolean
                    ) return TIME is
variable delay_time  : TIME := 50 ns;
begin
   case scaled_flag is
       when  FALSE =>
         case DELAY_NAME is
            when "Tspiclkl" => delay_time :=     6800 ps;      
            when "Tspiclkh" => delay_time :=     6800 ps;        
            when "   tCOMP" => delay_time :=    400000 ns;  -- 400 us Buffer Compare Time     
            when "    tXFR" => delay_time :=    400000 ns;  -- 400 us Page to Bufer Xfer UG pg 33,34
            when "    tPEP" => delay_time :=  40000000 ns;  -- 40 ms
            when "      tP" => delay_time :=   6000000 ns;  -- 6 ms
            when "     tPE" => delay_time :=  35000000 ns;  -- 32 ms
            when "     tSE" => delay_time := 500000000 ns;  -- 5 s divided by 10 since num too large, loop 10x
            when "   tVCSL" => delay_time :=        50 ns;  -- 50 us
            when "    tPUW" => delay_time :=        50 ns;  --          20000000 ns;  -- 20 ms
            when OTHERS    => delay_time := 500000000 ns;  -- maximum
         end case;
      when  TRUE => -- arbitrary
         case DELAY_NAME is
             when "Tspiclkl" => delay_time :=    6800 ps;      
            when "Tspiclkh" => delay_time :=    6800 ps;        
            when "   tCOMP" => delay_time :=      500 ns;  -- = tXFR
            when "    tXFR" => delay_time :=      500 ns;  -- = tCOMP
            when "    tPEP" => delay_time :=     2500 ns;  -- > tPE + tP
            when "      tP" => delay_time :=     1000 ns;  -- 2 x tCOMP
            when "     tPE" => delay_time :=     1000 ns;  -- 2 x tCOMP
            when "     tSE" => delay_time :=     4000 ns;  -- 4 x tPE
            when "   tVCSL" => delay_time :=       50 ns;  -- 
            when "    tPUW" => delay_time :=       50 ns;  -- 
            when OTHERS     => delay_time :=    40000 ns;  -- 10 x tSE
         end case;
    end case;         
    return  delay_time;
end delay_cal;

function device_Sel1  (SIM_DEVICE : in string
                         ) return std_logic is
    variable status3  : std_logic;
begin
    if    (SIM_DEVICE =   "3S50AN") then  status3 := '1';
    elsif (SIM_DEVICE =  "3S200AN") then  status3 := '1';
    elsif (SIM_DEVICE =  "3S400AN") then  status3 := '1';
    elsif (SIM_DEVICE =  "3S700AN") then  status3 := '0';
    elsif (SIM_DEVICE = "3S1400AN") then  status3 := '1' ;
    else                                  status3 := '1';
    end if;                               
return status3;
end device_sel1;

function device_Sel2  (SIM_DEVICE : in string
                         ) return std_logic is
    variable status4  : std_logic;
begin
    if    (SIM_DEVICE =   "3S50AN") then  status4 := '0';     
    elsif (SIM_DEVICE =  "3S200AN") then  status4 := '1';     
    elsif (SIM_DEVICE =  "3S400AN") then  status4 := '1';      
    elsif (SIM_DEVICE =  "3S700AN") then  status4 := '0';     
    elsif (SIM_DEVICE = "3S1400AN") then  status4 := '0' ;        
    else                                  status4 := '0';     
    end if;                               
    return status4;
end device_sel2;

function device_Sel3         (SIM_DEVICE : in string
                         ) return std_logic is
    variable status5  : std_logic;
begin
    if    (SIM_DEVICE =   "3S50AN") then  status5 := '0';
    elsif (SIM_DEVICE =  "3S200AN") then  status5 := '0';
    elsif (SIM_DEVICE =  "3S400AN") then  status5 := '0';
    elsif (SIM_DEVICE =  "3S700AN") then  status5 := '1';
    elsif (SIM_DEVICE = "3S1400AN") then  status5 := '1' ;
    else                                  status5 := '0';
    end if;                               
    return status5;
end device_sel3;

function page_cal        (SIM_DEVICE : in string
                         ) return integer is
    variable pages  : integer range 1 to 8192 := 2048;
begin
    if    (SIM_DEVICE =   "3S50AN") then  pages := 512;
    elsif (SIM_DEVICE =  "3S200AN") then  pages := 2048;   
    elsif (SIM_DEVICE =  "3S400AN") then  pages := 2048;
    elsif (SIM_DEVICE =  "3S700AN") then  pages := 4096;
    elsif (SIM_DEVICE = "3S1400AN") then  pages := 4096;
    else                                  pages := 512;
    end if;                               
    return  pages;
end page_cal;

function pageper_sector (SIM_DEVICE : in string
                  ) return integer is
    variable page_per_sector :  integer range 1 to 256 :=256;
begin
    if    (SIM_DEVICE =   "3S50AN") then  page_per_sector := 128;  
    elsif (SIM_DEVICE =  "3S200AN") then  page_per_sector := 256;   
    elsif (SIM_DEVICE =  "3S400AN") then  page_per_sector := 256;  
    elsif (SIM_DEVICE =  "3S700AN") then  page_per_sector := 256;  
    elsif (SIM_DEVICE = "3S1400AN") then  page_per_sector := 256;  
    else                                  page_per_sector := 128;  
    end if;                               
    return  page_per_sector;
end pageper_sector;

function sec_tors (SIM_DEVICE : in string
                  ) return integer is
    variable sectors :  integer range 1 to 64 :=8;
begin
    if    (SIM_DEVICE =   "3S50AN") then  sectors := 4;
    elsif (SIM_DEVICE =  "3S200AN") then  sectors := 8;   
    elsif (SIM_DEVICE =  "3S400AN") then  sectors := 8;
    elsif (SIM_DEVICE =  "3S700AN") then  sectors := 16;
    elsif (SIM_DEVICE = "3S1400AN") then  sectors := 16;
    else                                  sectors := 4;
    end if;                               
    return  sectors;
end sec_tors;          

function pagesize_forbuffer (SIM_DEVICE : in string
                  ) return integer is
    variable page_size :  integer range 1 to 1056 :=264;
begin
    if    (SIM_DEVICE =   "3S50AN") then  page_size := 264;
    elsif (SIM_DEVICE =  "3S200AN") then  page_size := 264;
    elsif (SIM_DEVICE =  "3S400AN") then  page_size := 264;
    elsif (SIM_DEVICE =  "3S700AN") then  page_size := 264;
    elsif (SIM_DEVICE = "3S1400AN") then  page_size := 528;
    else                                  page_size := 264;
    end if;
    return  page_size;
end pagesize_forbuffer;


function pagesize (SIM_DEVICE : in string;
    binary_page : in std_logic
) return integer is
variable page_size :  integer range 1 to 1056 :=264;
begin
    if    (SIM_DEVICE =   "3S50AN") then  page_size := (264 - (conv_integer(binary_page) * 8));
    elsif (SIM_DEVICE =  "3S200AN") then  page_size := (264 - (conv_integer(binary_page) * 8));
    elsif (SIM_DEVICE =  "3S400AN") then  page_size := (264 - (conv_integer(binary_page) * 8));
    elsif (SIM_DEVICE =  "3S700AN") then  page_size := (264 - (conv_integer(binary_page) * 8));
    elsif (SIM_DEVICE = "3S1400AN") then  page_size := (528 - (conv_integer(binary_page) * 16));
    else                                  page_size:=  (264 - (conv_integer(binary_page) * 8));
    end if;                               
    return  page_size;
end pagesize;


function buffers  (
            SIM_DEVICE : in string
          ) return integer is
variable buf  : integer := 2;
begin
    if    (SIM_DEVICE =   "3S50AN") then  buf := 1;
    elsif (SIM_DEVICE =  "3S200AN") then  buf := 2;
    elsif (SIM_DEVICE =  "3S400AN") then  buf := 2;
    elsif (SIM_DEVICE =  "3S700AN") then  buf := 2;
    elsif (SIM_DEVICE = "3S1400AN") then  buf := 2;
    else                                  buf := 1;
    end if;                               
    return  buf;
end buffers;

function b_address (SIM_DEVICE : in string;
            binary_opt : in std_logic
                     ) return integer is
variable baddress : integer range 1 to 11 := 9; 
begin
    if    (SIM_DEVICE =   "3S50AN") then  baddress := (9 - (conv_integer(binary_opt) * 1));
    elsif (SIM_DEVICE =  "3S200AN") then  baddress := (9 - (conv_integer(binary_opt) * 1));   
    elsif (SIM_DEVICE =  "3S400AN") then  baddress := (9 - (conv_integer(binary_opt) * 1));
    elsif (SIM_DEVICE =  "3S700AN") then  baddress := (9 - (conv_integer(binary_opt) * 1));
    elsif (SIM_DEVICE = "3S1400AN") then  baddress := (10 -(conv_integer(binary_opt) * 1));
    else                                  baddress := (9 - (conv_integer(binary_opt) * 1));
    end if;                               
    return  baddress;
end b_address;
    
function p_address (SIM_DEVICE : in string
                             ) return integer is
variable paddress : integer range 1 to 14 := 11; 
begin
    if    (SIM_DEVICE =   "3S50AN") then  paddress := 9;
    elsif (SIM_DEVICE =  "3S200AN") then  paddress := 11;   
    elsif (SIM_DEVICE =  "3S400AN") then  paddress := 11;
    elsif (SIM_DEVICE =  "3S700AN") then  paddress := 12;
    elsif (SIM_DEVICE = "3S1400AN") then  paddress := 12;
    else                                  paddress := 9;
    end if;                               
    return  paddress;
end p_address;

function s_address (SIM_DEVICE : in string
                             ) return integer is
variable saddress : integer range 1 to 6 := 3; 
begin
    if    (SIM_DEVICE =   "3S50AN") then  saddress := 2;
    elsif (SIM_DEVICE =  "3S200AN") then  saddress := 3;   
    elsif (SIM_DEVICE =  "3S400AN") then  saddress := 3;
    elsif (SIM_DEVICE =  "3S700AN") then  saddress := 4;
    elsif (SIM_DEVICE = "3S1400AN") then  saddress := 4;
    else                                  saddress := 2;
    end if;                               
    return  saddress;
end s_address;

function manid (SIM_DEVICE : in string
                             ) return std_logic_vector is
variable man_id : std_logic_vector(31 downto 0); 
begin
    if    (SIM_DEVICE =   "3S50AN") then  man_id := X"1F_22_00_00";
    elsif (SIM_DEVICE =  "3S200AN") then  man_id := X"1F_24_00_00";   
    elsif (SIM_DEVICE =  "3S400AN") then  man_id := X"1F_24_00_00";
    elsif (SIM_DEVICE =  "3S700AN") then  man_id := X"1F_25_00_00";
    elsif (SIM_DEVICE = "3S1400AN") then  man_id := X"1F_26_00_00";
    else                                  man_id := X"1F_22_01_00";
    end if;                               
    return  man_id;
end manid;


function memsize (page_size : in integer range 1 to 1056;
                  pages    : in integer range 1 to 8192
             ) return integer is
variable mem_size : integer range 1 to 69206016;
begin
    mem_size := page_size * pages;
    return mem_size;
end memsize;

constant binary_page : std_logic :='0';    
signal status2 : std_logic :='1';
signal status3 : std_logic ;
signal status4 : std_logic ;
signal status5 : std_logic ;

------------------------------------------------ 
signal  TsckRp,TsckRpa , TsckRp33, TsckRpx ,TsckFp, TsckRw , TsckF , TcsR , TcsF , Tsckm , Tsim , TsckRh  : time := 0 ns ;
signal  TsckRpcsb  , TsckFcsb  : time := 0 ns ;

signal  clk_err: std_logic;
signal  clk_err33: std_logic;
signal  csb_err: std_logic;
signal  clk_erra: std_logic;
signal  backgnd_while_busy_err: std_logic;


------------- global signal declarations---------

signal  MMCAR : std_logic;        
signal  MMPTBT : std_logic;      
signal  MMPTBC : std_logic;      
signal  B1W : std_logic;          
signal  B2W : std_logic;          
signal  BTMMPP : std_logic;
signal  PE : std_logic;           
signal  SE : std_logic;           
signal  MMPPB : std_logic;       
signal  security_flag : std_logic:='0'; 
signal tmp_reg1 : std_logic_vector(7 downto 0);
signal tmp_reg2 : std_logic_vector(7 downto 0);
signal buff_num : std_logic_vector(1 downto 0);  -- buffer number
signal buff_nump : std_logic_vector(1 downto 0);  -- buffer number
signal erase_flag: std_logic;   -- Flag for whether command performs erase
signal cmd_name  : string(1 to 40) :="        Initialize                      ";  
signal cycle_mode  : string(1 to 5) :="idle ";  
signal test_33mhz  : Boolean := FALSE ;  -- flag to on 33 MHz 
signal random     : Boolean :=   FALSE;  -- flag for random read

------------------------------------------------------------------------------
-- Signal       ____/------\_______/----
--              <-------------->
procedure checkclk(
    signal      TestSignal          : in std_logic;
                TestSignalName      : in string; 
                expectedDelay       : in time;
                expectedDelayName   : in string;
    signal      LastSignalRise      : inout time;
    signal      LastSignalFall      : inout time;    
    signal      clk_err             :inout std_logic;
                fullPathName        : in string;
    signal      valid               :in Boolean;
    signal      pos_check           :in Boolean;
    signal      neg_check           :in Boolean    
              )  is
    variable ln : Line;
    variable  per_flag: boolean;
    
begin

if (TestSignal'event ) then
    if ((((now - LastSignalRise) < expectedDelay and pos_check )or (now - LastSignalFall < expectedDelay and neg_check))
          and (clk_err /= '1' and (valid = TRUE) and (now > expectedDelay))) then
        write(ln, string'("DRC Error : In "));
        write(ln, fullPathName);
        write(ln, string'(": '"));
        write(ln, string'(TestSignalName));
        write(ln, string'("' high/low time violation at: "));
        write(ln, now);
        write(ln, string'(", "));
        write(ln, string'(" signal width: "));
        if (now - LastSignalFall <  delay_cal(Tspiclkl,scaled_flag)) then 
            write(ln, now - LastSignalFall);
        else
            write(ln, now - LastSignalRise);
        end if;  
        write(ln, string'(" Minimum Width: "));          
            write(ln, expectedDelay);
        writeline(output, ln);
        clk_err <= '1';
        assert false report ln.all severity warning;
        DEALLOCATE (ln);        
    else
        clk_err <= '0';
    end if;     
    if (TestSignal = '1'    ) then
        LastSignalRise <= now;
    else
      LastSignalFall <= now;
    end if;
end if;
end checkclk;


procedure checkPeriod(
    signal      TestSignal      : in std_logic;
                TestSignalName      : in string;
                expectedDelay       : in time;
                expectedDelayName   : in string;
    signal      LastSignalRise      : inout time;
    signal      clk_err             :inout std_logic;
                fullPathName        : in string;
    signal      valid          :in Boolean
              )  is
    variable ln : Line;
    variable  per_flag: boolean;
    
begin

if (TestSignal'event and TestSignal = '1') then
   if   (now - lastSignalRise < expectedDelay) and ( lastSignalRise /= 0 ns ) and
       (now > 0 ns) and (expectedDelay /= 0 ns) and (clk_err /= '1') and (valid = TRUE) then 
      write(ln, string'("DRC Error : In "));
      write(ln, fullPathName);
      write(ln, string'(": '"));
      write(ln, string'(TestSignalName));
      write(ln, string'("' Period violation at: "));
      write(ln, now);
      write(ln, string'(", "));
      write(ln, string'(expectedDelayName));
      write(ln, string'(" expected: "));
      write(ln, expectedDelay);
      write(ln, string'(", "));
      write(ln, string'(expectedDelayName));
      write(ln, string'(" actual: "));
      write(ln, now - lastSignalRise);
      writeline(output, ln);
      clk_err <= '1';
      assert false report ln.all severity warning;
      DEALLOCATE (ln);        
    end if;
    if (now - lastSignalRise > expectedDelay) and ( lastSignalRise /= 0 ns ) and
       (now > 0 ns) and (expectedDelay /= 0 ns)then 
        clk_err <= '0';
    end if;     
    if (valid = FALSE) then 
        clk_err <= '0';
    end if;     
    LastSignalRise <= now;
end if;
end checkPeriod;

procedure write_busy_message is 
variable Message :line;
begin
    Write ( Message, string'("DRC Error : In "));
    Write ( Message, InstancePath); 
    Write ( Message, string'(" access not allowed -- busy"));
    assert false report Message.all severity failure;
    DEALLOCATE (Message);       
end write_busy_message; 


procedure write_opcode_message is
variable Message :line;
begin
    Write ( Message, string'("DRC Error : In "));
    Write ( Message, InstancePath); 
    Write ( Message, string'(" opcode is not supported in the simulation model"));
    assert false report Message.all severity warning;
    DEALLOCATE (Message);       
end write_opcode_message;
    
    
procedure write_tpuw_message is
variable Message:line;
begin
    Write ( Message, string'("DRC Error : In "));
    Write ( Message, InstancePath); 
    Write ( Message, string'(" write operations are not allowed before a delay of :")); 
    Write ( Message, delay_cal(TPUW,scaled_flag) );
    Write ( Message,string'(" ms"));
    assert false report Message.all severity failure;
    DEALLOCATE (Message);       
end write_tpuw_message;
-------------------------------------------------------------------
-------------------------------------------------------------------
    FUNCTION integer_to_bit_vector   (VAL, width    : INTEGER)      RETURN BIT_VECTOR IS
    VARIABLE result : BIT_VECTOR (width-1 downto 0) := (OTHERS=>'0');
        VARIABLE bits   : INTEGER := width;
    BEGIN
        IF (bits > 31) THEN              --  Avoid overflow errors.
          bits := 31;
        ELSE
      ASSERT 2**bits > VAL REPORT
        "Value too big FOR BIT_VECTOR width"
        SEVERITY WARNING;
        END IF;
    FOR i IN 0 TO bits - 1 LOOP
        IF ((val/(2**i)) MOD 2 = 1) THEN
        result(i) := '1';
        END IF;
    END LOOP;
    RETURN (result);
    END integer_to_bit_vector ;  

 PROCEDURE removespace(VARIABLE l : IN line; pos : OUT integer) IS
    BEGIN
         pos := l'low;
         FOR i IN l'low TO l'high LOOP
              CASE l(i) IS
                  WHEN ' ' | ht  =>
                      pos := i + 1;
                  WHEN OTHERS =>
                      EXIT;
              END CASE;
         END LOOP;
    END;
    PROCEDURE removeline(l : INOUT line; pos : integer) IS
        VARIABLE tmpl : line;
    BEGIN
        tmpl := l;
        l := NEW string'(tmpl(pos TO tmpl'high));
        deallocate(tmpl);
    END;
    PROCEDURE hexa_to_bit_vector(l: INOUT line; u: in integer; value: OUT bit_vector) IS
        CONSTANT not_digit : integer := -999;
        FUNCTION digit_value(c : character) RETURN integer IS
        BEGIN
            IF (c >= '0') AND (c <= '9') THEN
                RETURN (character'pos(c) - character'pos('0'));
            ELSIF (c >= 'a') AND (c <= 'f') THEN
                RETURN (character'pos(c) - character'pos('a') + 10);
            ELSIF (c >= 'A') AND (c <= 'F') THEN
                RETURN (character'pos(c) - character'pos('A') + 10);
            ELSE
                RETURN not_digit;
            END IF;
        END;
        VARIABLE digit  : bit_vector(4 downto 1);
        VARIABLE digit1 : bit_vector(u downto 1);
        VARIABLE digitx : integer;
        VARIABLE pos    : integer;
        VARIABLE t      : integer := u/4;
    BEGIN
        removespace(l, pos);
        FOR i IN pos TO l'right LOOP
            digitx := digit_value(l(i));
            EXIT WHEN (digitx = not_digit) OR (digitx >= 16);
            digit := integer_to_bit_vector(digitx,4);
            if t >= 1 then
                digit1 := digit1(u-4 downto 1) & digit;
                t := t - 1;
            else
            end if;
            pos := i + 1;
        END LOOP;
        value := digit1;
        removeline(l, pos);
    END;    

--******************************************---
--******************************************--
signal page : std_logic_vector(p_address(SIM_DEVICE)-1 downto 0) := (others=> '0');
--signal temp_reg2 : std_logic_vector(7 downto 0);
--signal temp_page : std_logic_vector(p_address(SIM_DEVICE)-1 downto 0);
signal byte : integer;
---protected/locked status reg-----
signal sector : std_logic_vector(s_address(SIM_DEVICE)-1 downto 0);
type buffer1 is array(pagesize_forbuffer(SIM_DEVICE)-1 downto 0) of std_logic_vector(7 downto 0);
type buffer2 is array(pagesize_forbuffer(SIM_DEVICE)-1 downto 0) of std_logic_vector(7 downto 0);
--memory initalization--
constant N : integer range 1 to 69206016 := memsize(pagesize_forbuffer(SIM_DEVICE),page_cal(SIM_DEVICE));
constant M : integer := 8;
type memtype is array(N-1 downto 0) of std_logic_vector(7 downto 0);
constant p : integer := sec_tors(SIM_DEVICE);
type factory_type is array(63 downto 0 ) of std_logic_vector(7 downto 0);
signal factory_reg : factory_type;

--security reg--
type security_type is array(63 downto 0) of std_logic_vector(7 downto 0);
signal security_reg : security_type;

--------------comp page address function implementation---------------
function comp_page_addr     (    paddress : in integer range 1 to 14;
                    binary_page : in std_logic;
                    page_addr0 : in std_logic_vector( 7 downto 0);
                    page_addr1 : in std_logic_vector( 7 downto 0);
                    man_id : in std_logic_vector(31 downto 0)      
                ) return std_logic_vector is
variable page1 : std_logic_vector((P_ADDRESS(SIM_DEVICE))-1 DOWNTO 0);
begin
    case(PADDRESS) is
        when 12=>
                                         ---16mb----
            if (MAN_ID = X"1F260000") then
                if (binary_page = '1') then
                    page1 := page_addr0(4 downto 0) & page_addr1(7 downto 1);
                else        
                    page1 := page_addr0(5 downto 0) & page_addr1(7 downto 2);
                end if;
            end if;
                                            --8mb--
            if (MAN_ID = X"1F250000") then
                if (binary_page = '1') then
                    page1 := page_addr0(3 downto 0) & page_addr1(7 downto 0);
                else        
                    page1 := page_addr0(4 downto 0) &  page_addr1(7 downto 1);
                end if;
            end if;
                                          ---4 mb---
        when 11=>
            if (binary_page = '1') then
                page1 := page_addr0(2 downto 0) &  page_addr1(7 downto 0);
            else        
                page1 := page_addr0(3 downto 0) &  page_addr1(7 downto 1);
            end if;
                                          --1mb---
        when 9=>
            if (binary_page ='1') then
                 page1 := page_addr0(0) & page_addr1(7 downto 0);
            else  
                page1 := page_addr0(1 downto 0) & page_addr1(7 downto 1);   
            end if;
        when others =>
    end case;
    return page1;
end comp_page_addr;


----------------------------
function comp_byte_addr
    (baddress : integer range 1 to 11 ;
    signal page_addr1 : in std_logic_vector( 7 downto 0);
    signal byte_addr : in std_logic_vector( 7 downto 0);
     binary_opt : in std_logic
    ) return integer is
variable byte_ad : integer;-- range 1 to 11 := 8;              
begin
    case(baddress)is
        when 11 =>  byte_ad :=  conv_integer(page_addr1(2 downto 0)  &  byte_addr) ;
        when 10 =>  byte_ad := conv_integer(page_addr1(1 downto 0) &  byte_addr) ; 
        when 9 =>   byte_ad := conv_integer(page_addr1(0) &  byte_addr) ; 
        when others=>  byte_ad := conv_integer(byte_addr) ;
    end case;
    return byte_ad;
end comp_byte_addr;     


procedure compute_address  ( 
    page : in std_logic_vector((P_ADDRESS(SIM_DEVICE))-1 DOWNTO 0);
    page_size : in integer range 1 to 1056;
    byte : in integer;
    page_boundary_low : out integer;
    page_boundary_high : out integer;
    current_address : out integer;
    mem_no : out integer;
    binary_page : in std_logic
) is
variable temp_low : integer ;
begin
    temp_low := (conv_integer(page) * pagesize(SIM_DEVICE,binary_page));
    page_boundary_low := temp_low;
    page_boundary_high := temp_low + (pagesize(SIM_DEVICE,binary_page) - 1);
    current_address := temp_low + byte;
    --memno 10 is for memory access---
    mem_no := 10;
end compute_address;


procedure read_out_array 
                (signal CLK,CSB : in std_logic;
                page_size : in integer range 1 to 1056;
                mem_size  : in integer range 1 to 69206016;
                page_boundary_low : in integer;
                page_boundary_high :in integer;
                current_address : in integer;
                memory : in memtype;
                signal so_reg : out std_logic;
                binary_page : in std_logic;
                signal so_on1  : out std_logic
                )
                 is
variable temp_reg1 : std_logic_vector(7 downto 0);
variable temp_high : integer;
variable temp_low  : integer;
variable temp_add  : integer;
begin               
    temp_high := page_boundary_high;
    temp_low := page_boundary_low;
    temp_add := current_address;
    temp_reg1 :=  memory(temp_add);
    read_array_loop : loop
        for i in 7 downto 0 loop
            wait until (CLK'EVENT and CLK ='0') or (CSB'EVENT and CSB='1');
            exit read_array_loop when (CSB='1' ) ;
            SO_reg <= temp_reg1(i); 
            so_on1 <= '1';
        end loop;
        temp_add := temp_add + 1;
        if (temp_add >= N)then  -- N = size of memory
            temp_add := 0; --Note that rollover occurs at end of memory,
            temp_high := pagesize(SIM_DEVICE,binary_page) - 1; -- and not at the end of the page
            temp_low := 0;
        end if;
        if (temp_add > temp_high) then-- going to next page
            temp_high := temp_high + pagesize(SIM_DEVICE,binary_page);
            temp_low  := temp_low + pagesize(SIM_DEVICE,binary_page);
        end if;
        temp_reg1 :=  memory(temp_add);
    end loop;
    SO_reg <= '0';
    so_on1 <= '0';  
end read_out_array;


procedure transfer_to_buffer  
            (
             buf_type : in std_logic_vector(1 downto 0);
             page_boundary_low : in integer;
            memory : in memtype;
            buf1 : inout buffer1;
            binary_page : in std_logic;
            buf2 : inout buffer2
            ) is    
begin   
if (buf_type = "01") then
    for i in 0 to pagesize(SIM_DEVICE,binary_page)-1 LOOP
       buf1(i) := memory(page_boundary_low + i);
    end loop;   
  elsif (buf_type = "10") then
    for  i in 0 to pagesize(SIM_DEVICE,binary_page)-1 loop
       buf2(i) := memory(page_boundary_low + i);
       end loop;
end if;
end transfer_to_buffer;


procedure compare_with_buffer
(
    buf_type : in std_logic_vector(1 downto 0);
    page_boundary_low : in integer;
    memory : in memtype;
    buf1 : in buffer1;
    buf2 : in buffer2;
    binary_page : in std_logic;
    signal status : out std_logic
) is
variable tmp1,tmp2 : std_logic_vector(7 downto 0);
begin
    status <='0';
    if(buf_type = "01")then
        for i in 0 to pagesize(SIM_DEVICE,binary_page)-1 loop
        tmp1 := memory(page_boundary_low  + i);
        tmp2 := buf1(i);
        for k in 0 to 7 loop
        if(tmp1(k) /= tmp2(k) ) then
            status <= '1';
            exit;
            end if;
            end loop;
        end loop;
        elsif  (buf_type = "10") then
        for i in 0 to pagesize(SIM_DEVICE,binary_page)-1 loop
            tmp1 := memory(page_boundary_low  + i);
            tmp2 := buf2(i);
            for k in 0 to 7 loop
                if(tmp1(k) /= tmp2(k) ) then
                    status <= '1';
                    exit;
                end if;
            end loop;
        end loop;
    end if;
end compare_with_buffer;


-----------write_data------------
procedure write_data 
            ( current_address : inout integer;
             page_boundary_low : in integer;
             page_boundary_high : in integer;
             buf1 : inout buffer1;
             buf2 : inout buffer2; 
             buf_type : in std_logic_vector(1 downto 0);
             signal CSB,CLK,MOSI   : in std_logic
             ) is
variable buf_temp_reg : std_logic_vector(7 downto 0);
variable temp :std_logic := '0';
begin
    write_loop : loop
        for i in 7 downto 0 loop
            wait until (CLK'EVENT and CLK ='1') or (CSB'EVENT and CSB='1');
            if (CSB='1') then
                exit write_loop;
            end if;
            buf_temp_reg(i):=MOSI;
        end loop;   
        if (buf_type="01") then
            buf1(current_address):= buf_temp_reg;  
        elsif(buf_type="10") then
            buf2(current_address):= buf_temp_reg;  
        end if;
        current_address := current_address + 1;
        wait for 1 ps;
        if (current_address > page_boundary_high) then  
            current_address := page_boundary_low;
            wait for 1 ps;
        end if;
    end loop;
end write_data;


procedure write_to_memory 
                (
                buf_type : in std_logic_vector(1 downto 0);
                 page : in std_logic_vector((P_ADDRESS(SIM_DEVICE))-1 DOWNTO 0);
                 page_size : in integer range 1 to 1056;
                buf1 : in buffer1;
                buf2 : in  buffer2;
                
                 page_boundary_low : in integer;
                memory : inout memtype
                    ) is
begin
if (buf_type = "01") then
    for i in 0 to page_size-1 loop
       memory(page_boundary_low+i) := buf1(i);
    end loop;   
  elsif (buf_type = "10") then
    for i in 0 to page_size-1 loop
       memory(page_boundary_low+i) := buf2(i);
    end loop;
end if;
end write_to_memory;


procedure erase_page  
            (
            page : in std_logic_vector((P_ADDRESS(SIM_DEVICE))-1 DOWNTO 0);
            page_size : in integer range 1 to 1056;
            page_boundary_low : in integer;
            memory : inout memtype;
            binary_page : in std_logic;
            page_status : out std_logic 
            ) is
variable buf1 : buffer1;
variable buf2 : buffer2;
begin
for i in 0 to pagesize(SIM_DEVICE,binary_page)-1 loop
    memory(page_boundary_low + i ) := X"FF";
    page_status :='0';
end loop;
end erase_page;


----------read_out_reg--------
procedure read_out_reg 
            ( reg_type : in integer;
              add      : in integer;
              high     : in integer;
            security_reg : in security_type ;    
            signal CSB,CLK       : in std_logic;
            signal so_reg    : out std_logic;
            signal  so_on1     : out std_logic
            ) is
variable temp_add : integer;
variable t_reg1 : std_logic_vector(7 downto 0);
begin
    temp_add := add;
    t_reg1 := security_reg(temp_add);
    read_out_reg_loop : loop
        for i in 7 downto 0 loop
            wait until (CLK'EVENT and CLK ='0') or (CSB'EVENT and CSB='1');
            exit read_out_reg_loop when (CSB='1' ) ;
            so_reg <= t_reg1(i);
            so_on1   <= '1';
        end loop;   
        temp_add := temp_add + 1;
        if ( temp_add > high)then
            t_reg1 := (others => 'X' );
        else
            if (reg_type=23) then 
                if (temp_add < 64) then
                    t_reg1 := security_reg(temp_add);   
                else
                    t_reg1 := factory_reg(temp_add-64); 
                end if;
            end if;
        end if;     
     end loop;
     so_reg <= '1';
     so_on1 <= '0';
end read_out_reg;       


function getbyte    (
            IP : in bit_vector(511 downto 0);
            byte_num  : in integer
            ) return bit_vector is

variable temp : bit_vector( 7 downto 0);                
begin

    for i in 0 to 7 loop
    temp(i) := IP((byte_num-1)*8+i);
    end loop;           
return temp;

end getbyte;

procedure read_mem_file (
            --signal memory : inout memtype;
            memory : inout memtype;
            inbuf : inout line
            )is                
     file LOAD_FILE1 : text open read_mode is SIM_MEM_FILE;
     variable numword : integer := 0;
     variable value : bit_vector(7 downto 0);
begin                          
    if(SIM_MEM_FILE /= "NONE")then 
        while not ENDFILE(LOAD_FILE1) loop 
            READLINE(LOAD_FILE1,inbuf);
            hexa_to_bit_vector(inbuf, 8, value);
            memory(numword) := to_stdlogicvector(value);
            numword := numword + 1;
            if(numword = (N-1)) then
                 exit;         
            end if;            
        end loop;              
    end if;                    
end read_mem_file;             
                               
--******************************************---
--******************************************--
signal temp_reg1 : std_logic_vector(7 downto 0);
signal reset_sig : std_logic:= '0';
signal skip : std_logic := '1';
signal skip_be : std_logic := '0';
signal skip_end : std_logic := '0';
signal opcode_temp : std_logic_vector(7 downto 0) := "00000000";
signal page_addr0 : std_logic_vector(7 downto 0) := "00000000";
signal page_addr1 : std_logic_vector(7 downto 0) := "00000000";
signal byte_addr  : std_logic_vector(7 downto 0) := "00000000";
signal t : std_logic_vector(31 downto 0) := "00000000000000000000000000000000";
signal rd_data1 : std_logic_vector(7 downto 0);
signal arr_rd_dummybyte : integer := 0;
signal buff_rd_dummybyte : integer:= 0;

signal valid : Boolean := TRUE;
signal no_test : Boolean := FALSE;
signal  MIR : std_logic :='0';  
signal  SRR : std_logic:='0';  
signal  SRP : std_logic:='0';  
signal  err_flg : std_logic:='0';
signal mem_initialized : std_logic;
signal deep_power_down : std_logic := '0';
signal  SR : std_logic:= '0';  
signal RDYBSY_reg : std_logic :='1'; 
signal foreground_op_enable : std_logic :='0';
signal background_op_enable : std_logic:='0';
signal status_read : std_logic :='0';
signal so_reg : std_logic := '1';
signal so_on : std_logic :='0';
signal so_reg1 : std_logic := '1';
signal so_on1 : std_logic :='0';
signal so_reg2 : std_logic := '1';
signal so_on2 : std_logic :='0';
signal so_reg3 : std_logic := '1';
signal so_on3 : std_logic :='0';
signal status : std_logic_vector(7 downto 0):= ('1' & '0' &  Device_sel3(SIM_DEVICE) & Device_sel2(SIM_DEVICE) & Device_sel1(SIM_DEVICE)& '1' & '0' & '0');

-----------status signal-------------

signal status_B1C_s6 : std_logic;
signal status_B2C_s6 : std_logic;


  signal        MISO_zd          : std_ulogic := '1';

  signal        CLK_ipd          : std_ulogic := '0';
  signal        CSB_ipd          : std_ulogic := '0';
  signal        MOSI_ipd         : std_ulogic := '0';

  signal        CLK_dly          : std_ulogic := 'X';
  signal        CSB_dly          : std_ulogic := 'X';
  signal        csbx             : std_ulogic := 'X';
  
  signal        MOSI_dly         : std_ulogic := '0';
  signal        Violation        : std_ulogic := '0';

--**************** begin of Architecture **************---


begin

  ---------------------
  --  INPUT PATH DELAYs
  --------------------

  WireDelay : block
  begin
    VitalWireDelay (CLK_ipd,        CLK,        tipd_CLK);
    VitalWireDelay (CSB_ipd,        CSB,        tipd_CSB);
    VitalWireDelay (MOSI_ipd,       MOSI,       tipd_MOSI);
  end block;
  SignalDelay : block
  begin
    VitalSignalDelay (CLK_dly,        CLK_ipd,        ticd_CLK);
    VitalSignalDelay (CSB_dly,        CSB_ipd,        tisd_CSB_CLK);
    VitalSignalDelay (MOSI_dly,       MOSI_ipd,       tisd_MOSI_CLK);
  end block;

  --------------------
  --  BEHAVIOR SECTION
  --------------------

--comparing the opcodes--
process(CLK_dly,MOSI_dly,CSB_dly)
begin
    if ( CSB_dly ='1') then
        t <="00000000000000000000000000000000";
        rd_data1 <= "00000000";
    elsif(CLK_dly = '1' and CLK_dly'event) then
        t(0) <= '1';
        t(1) <= t(0);
        t(2) <= t(1);
        t(3) <= t(2);
        t(4) <= t(3);
        t(5) <= t(4);
        t(6) <= t(5); 
        t(7) <= t(6);         -- t(6) == 1 and t(7) ==0 opcode
        t(8) <= t(7);
        t(9) <= t(8);
        t(10) <= t(9);
        t(11) <= t(10);
        t(12) <= t(11);
        t(13) <= t(12);
        t(14) <= t(13);
        t(15) <= t(14);       -- t(14) == 1 and t(15) ==0 page address 
        t(16) <= t(15);      
        t(17) <= t(16);
        t(18) <= t(17);
        t(19) <= t(18);
        t(20) <= t(19);
        t(21) <= t(20);
        t(22) <= t(21);
        t(23) <= t(22);     -- t(22) == 1 and t(23) ==0 page address 
        t(24) <= t(23);
        t(25) <= t(24);
        t(26) <= t(25);
        t(27) <= t(26);
        t(28) <= t(27);
        t(29) <= t(28);
        t(30) <= t(29);
        t(31) <= t(30);     -- t(30) == 1 and t(31) == 0  byte address 
            rd_data1(0) <= MOSI_dly;
            rd_data1(1) <= rd_data1(0);
            rd_data1(2) <= rd_data1(1);
            rd_data1(3) <= rd_data1(2);
            rd_data1(4) <= rd_data1(3);
            rd_data1(5) <= rd_data1(4);
            rd_data1(6) <= rd_data1(5);
            rd_data1(7) <= rd_data1(6);
        
        end if;
end process ;

opcode_temp  <=   rd_data1(6) & rd_data1(5) & rd_data1(4) & rd_data1(3) & rd_data1(2) & rd_data1(1) & rd_data1(0) & MOSI_dly ; 
process(CLK_dly,opcode_temp, t)
begin
    if (CSB_dly = '1' ) then
    page_addr0 <= "00000000";
    page_addr1 <= "00000000";
    byte_addr <= "00000000";

    elsif ((CLK_dly = '1' and CLK_dly'event)) then
        if (t(14) = '1' and t(15) = '0') then    
        page_addr0 <= opcode_temp;
        end if;
        if (t(22) = '1' and t(23) = '0') then    
        page_addr1 <= opcode_temp;
        end if;
        if (t(30) = '1' and t(31) = '0') then    
        byte_addr <= opcode_temp;
        end if;
    end if;
end process;


process(CLK_dly,opcode_temp, t)
variable opcode_message : string(1 to 52);
variable Message : line;
begin
    if (CSB_dly = '1' )  then
            skip <='1';
            arr_rd_dummybyte <= 0;  --not used in their code
            buff_rd_dummybyte <= 0;
            MMCAR <='0';
            MMPTBT <='0'; --Main Memory Page To Buffer 1 Transfer
            MMPTBC <='0';--Main Memory Page To Buffer 1 Compare
            B1W <='0'; -- Buffer 1 Write
            B2W <='0'; 
            BTMMPP <= '0' ;--Buffer 1 To Main Memory Page Prog With Built-In Erase
            PE<='0';  -- Page Erase
            SE <='0';  -- Sector Erase
            MMPPB<='0';   -- Main Memory Page Prog. Through Buffer 1
            SR<='0' ; -- Status Register Read
            MIR<='0'; -- Manufecturing ID Read
            SRR<='0';  -- Security Register Read
            SRP<='0';  -- Secturity Register Program
            backgnd_while_busy_err<='0';
    elsif (CLK_dly = '1' and CLK_dly'event) then
        if (t(6) = '1' and t(7) = '0' ) then    
            if(foreground_op_enable='0')then
                Write ( Message, string'("DRC Error : In "));
                Write ( Message, InstancePath); 
                Write ( Message, string'(" No opcode is allowed. "));
                Write ( Message, delay_cal(TVCSL,scaled_flag) );
                Write ( Message, string'( "delay is required before device can be selected"));
                assert false report Message.all severity warning;
                DEALLOCATE (Message);        
            elsif(cycle_mode="MODE0")then
                Write ( Message, string'("DRC Error : In "));
                Write ( Message, InstancePath); 
                Write ( Message, string'( " must drive CSB LOW while CLK is HIGH."));
                assert false report Message.all severity failure;
                DEALLOCATE (Message);        
            else    
                case opcode_temp is
                    when X"03" =>
                        cmd_name <="Random Read                             ";
                        random <= TRUE;
                        if(RDYBSY_reg='0')then
                           backgnd_while_busy_err<='1';
                           write_busy_message;
                        else
                            skip <='0';
                            arr_rd_dummybyte <= 0;
                            MMCAR <='1';
                        end if;
                     when X"0B" =>
                        cmd_name<="Main Memory Continuous Array Read       ";
                        random <= FALSE;
                        if(RDYBSY_reg='0')then 
                           backgnd_while_busy_err<='1';
                           write_busy_message;
                        else
                            skip <='0';
                            arr_rd_dummybyte <= 1;
                            MMCAR <='1';
                        end if;
                    when X"53" =>
                        cmd_name<="Main Memory Page To Buffer 1 Transfer   ";
                        if(background_op_enable='0') then
                            write_tpuw_message;
                        elsif(RDYBSY_reg='0')then 
                           backgnd_while_busy_err<='1';
                           write_busy_message;
                        else
                           buff_num <= "01";  -- buffer 1
                           MMPTBT <='1'; --Main Memory Page To Buffer 1 Transfer
                        end if;
                    when X"55" =>
                        cmd_name<="Main Memory Page To Buffer Transfer     ";
                        if(buffers(SIM_DEVICE) = 1 )then
                            write_opcode_message;
                        elsif(background_op_enable='0') then
                            write_tpuw_message;
                        elsif(RDYBSY_reg='0')then 
                            backgnd_while_busy_err<='1';
                            write_busy_message;
                        else
                            buff_num <= "10";  --buffer 2
                            MMPTBT<='1'; --Main Memory Page To Buffer 2 Transfer
                        end if;
                    when X"60" =>
                        cmd_name<="Main Memory Page To Buffer 1 Compare    ";
                        if(background_op_enable='0') then
                            write_tpuw_message;
                        elsif(RDYBSY_reg='0')then 
                            backgnd_while_busy_err<='1';
                            write_busy_message;
                        else
                           buff_num <= "01";  -- buffer 1
                           MMPTBC <='1';--Main Memory Page To Buffer Compare
                        end if;
                    when X"61" =>
                          cmd_name<="Main Memory Page To Buffer 2 Compare    ";
                        if(buffers(SIM_DEVICE) = 1 )then
                            write_opcode_message;
                        elsif(background_op_enable='0') then
                            write_tpuw_message;
                        elsif(RDYBSY_reg='0')then 
                           backgnd_while_busy_err<='1';
                           write_busy_message;
                        else
                            buff_num <= "10";  --buffer 2
                            MMPTBC <='1';--Main Memory Page To Buffer Compare
                        end if;
                    when X"84" =>
                           cmd_name <= "Buffer 1 Write                          ";
                           buff_num<= "01"; -- use buffer 1
                           B1W <='1'; -- Buffer 1 Write
                    when X"87" =>
                        cmd_name<="Buffer 2 Write                          ";
                        if(buffers(SIM_DEVICE) = 1 )then
                            write_opcode_message;
                        else   
                           buff_num<= "10"; -- use buffer 2
                           B2W <='1'; -- Buffer 2 Write
                        end if;     
                    when X"83" =>
                        cmd_name <="Buffer 1 To Main Memory Page Prog Erase ";
                        if(background_op_enable='0') then
                            write_tpuw_message;
                        elsif(RDYBSY_reg='0')then 
                           backgnd_while_busy_err<='1';
                           write_busy_message;
                        else
                             erase_flag <= '1';
                             buff_nump<= "01"; -- use buffer 1
                           BTMMPP <= '1' ;--Buffer 1 To Main Memory Page Prog With Built-In Erase
                        end if;
                    when X"86" =>
                        cmd_name <="Buffer 2 To Main Memory Page Prog Erase ";
                        if(buffers(SIM_DEVICE) = 1 )then
                            write_opcode_message;
                        elsif(background_op_enable='0') then
                            write_tpuw_message;
                        elsif(RDYBSY_reg='0')then 
                            backgnd_while_busy_err<='1';
                            write_busy_message;
                        else
                            erase_flag <= '1';
                            buff_nump<= "10"; -- use buffer 2
                            BTMMPP <= '1';-- t(14) == 1 and t(15) ==0 page address --Buffer 2 To
                                  -- Main Memory Page Prog With Built-In Erase
                        end if;
                    when X"88" =>
                        cmd_name <="Buffer 1 To Main Memory Page Prog       ";
                        if(background_op_enable='0') then
                            write_tpuw_message;
                        elsif(RDYBSY_reg='0')then 
                           backgnd_while_busy_err<='1';
                           write_busy_message;
                        else
                             erase_flag <= '0';
                             buff_nump<= "01"; -- use buffer 1
                             BTMMPP<='1';--- t(14) == 1 and t(15) ==0 page address -Buffer 1 To 
                                  --Main Memory Page Prog Without Built-In Erase
                        end if;
                    when X"89" =>
                        cmd_name <="Buffer 2 To Main Memory Page Prog       ";
                        if(buffers(SIM_DEVICE) = 1 )then
                            write_opcode_message;
                        elsif(background_op_enable='0') then
                            write_tpuw_message;
                        elsif(RDYBSY_reg='0')then 
                            backgnd_while_busy_err<='1';
                            write_busy_message;
                        else
                            erase_flag <= '0';
                            buff_nump<= "10"; -- use buffer 2
                            BTMMPP<='1' ;--Buffer 2 To Main Memory Page Prog Without Built-In Erase
                        end if;
                    when X"81" =>
                        cmd_name <="Page Erase                              ";
                        if(background_op_enable='0') then
                            write_tpuw_message;
                        elsif(RDYBSY_reg='0')then 
                           backgnd_while_busy_err<='1';
                           write_busy_message;
                        else
                           PE<='1';  -- Page Erase
                        end if;
                    when X"82" =>
                        cmd_name <="Main Memory Page Prog. Through Buffer 1 ";
                        if(background_op_enable='0') then
                            write_tpuw_message;
                        elsif(RDYBSY_reg='0')then 
                           backgnd_while_busy_err<='1';
                           write_busy_message;
                        else
                             buff_num <= "01";
                           MMPPB<='1';   -- Main Memory Page Prog. Through Buffer 1
                        end if;
                    when X"7C" =>
                        cmd_name <="Sector Erase                            ";
                        if(background_op_enable='0') then
                            write_tpuw_message;
                        elsif(RDYBSY_reg='0')then 
                           backgnd_while_busy_err<='1';
                           write_busy_message;
                        else
                           SE <='1';  -- Sector Erase
                        end if;
                    when X"85" =>
                        cmd_name <="Main Memory Page Prog. Through Buffer 2 ";
                        if(buffers(SIM_DEVICE) = 1 )then
                             write_opcode_message;
                        elsif(background_op_enable='0') then
                            write_tpuw_message;
                        elsif(RDYBSY_reg='0')then 
                           backgnd_while_busy_err<='1';
                           write_busy_message;
                        else
                            buff_num <= "10";
                            MMPPB<='1' ;  -- Main Memory Page Prog. Through Buffer 2
                        end if;
                    when X"D7" =>
                        cmd_name <="Status Register Read                    ";
                        skip <='0';
                        SR<='1'; -- Status Register Read
                    when X"9F" =>
                        cmd_name <="Manufacturer ID Read                    ";
                        skip <='0';
                        MIR<='1'; -- Manufacturing ID Read
                    when X"9B" =>
                        cmd_name <="Security Register Program               ";
                        if(background_op_enable='0') then
                            write_tpuw_message;
                        elsif(RDYBSY_reg='0')then 
                           backgnd_while_busy_err<='1';
                           write_busy_message;
                        else
                            SRP<='1';  -- 4-Byte Opcode Starting From 9B this is for Security register program
                        end if;
                    when X"77" =>
                        cmd_name <="Security Register Read                  ";
                        if(RDYBSY_reg='0')then 
                           backgnd_while_busy_err<='1';
                           write_busy_message;
                        else
                            SRR<='1';  -- Security Register Read
                        end if;
                    when others =>
                        if (opcode_temp=X"D2" or opcode_temp=X"E8" or opcode_temp=X"D4" or opcode_temp=X"D6" or 
                          opcode_temp=X"D1" or opcode_temp=X"D3" or opcode_temp=X"54" or opcode_temp=X"56" or 
                          opcode_temp=X"52" or opcode_temp=X"59" or opcode_temp=X"68" or opcode_temp=X"50" or 
                          opcode_temp=X"B9" or opcode_temp=X"AB" or opcode_temp=X"3D" or opcode_temp=X"80" or 
                          opcode_temp=X"A6" or opcode_temp=X"58" or opcode_temp=X"30" or opcode_temp=X"35" or
                          opcode_temp=X"9A" or opcode_temp=X"32" ) then
                            write_opcode_message;
                        else
                            Write ( Message, string'("DRC Error : In "));
                            Write ( Message, InstancePath); 
                            Write ( Message, string'(" opcode is not recognized "));
                            assert false report Message.all severity failure;
                            DEALLOCATE (Message);       
                        end if;
                end case;
            end if;
        end if;
    end if;
end process;

-------------------------------------------------------------------------------------
----------------------------------------Main Process --------------------------------
process(CLK_dly,CSB_dly)
begin
   if(CSB_dly='0' and CSB_dly'event)then
      if (CLK_dly = '0') then
      skip_be <= '1';
      cycle_mode <= "MODE0";
      else 
      skip_be <= '0';
      cycle_mode <= "MODE3";
      end if;
  elsif(CSB_dly='1') then
      cycle_mode <= "idle ";
  end if;   
end process ;
skip_end <= skip_be and skip;
background_op_enable <= '1'  after delay_cal(TPUW,scaled_flag) ;
reset_sig <=  '0', '1' after  1 ns;
process
variable tbuffer1 : buffer1;
variable tbuffer2 : buffer2;
variable inbuf : line;
variable word : string(1 to 8);
variable i : integer;
----------
variable inbuf1 : line;
variable numword1 : integer := 0;
variable value1 : bit_vector(7 downto 0);

variable jerase : integer;
 ---------------
variable inbuf2 : line;
variable outbuf12 : line;
variable numword2 : integer := 0;
variable value2 : bit_vector(7 downto 0);
---------------------
variable inbuf3 : line;
variable numword3 : integer := 0;
variable value3 : bit_vector(7 downto 0);
------------------
variable MMPPB_mem_page : std_logic_vector(p_address(SIM_DEVICE)-1 downto 0);
variable MMPPB_buf_page : std_logic_vector(p_address(SIM_DEVICE)-1 downto 0);
variable buf_temp_reg1 : std_logic_vector(7 downto 0);
variable message1 : string(1 to 45);
variable message2 : string(1 to 30); 
variable current_address : integer; 
variable page_boundary_low : integer := 0;
variable page_boundary_high : integer;
variable mem_no : integer;
variable memory : memtype;
-- variable security_reg : security_type;

-- variable binary_page : std_logic;
variable never_set : std_logic := '0';
variable temp_page_status : std_logic;
variable buffer_number : integer;
variable page_status : std_logic_vector(page_cal(SIM_DEVICE)-1 downto 0);
variable Message : line;
variable value_fact : bit_vector(511 downto 0);
variable value_user : bit_vector(511 downto 0);

begin

if (foreground_op_enable = '0') then  ---- Enable foreground op_codes
wait on reset_sig ;
wait for 1 ps;
for i in 0 to (memsize(pagesize(SIM_DEVICE,binary_page),page_cal(SIM_DEVICE))-1) loop  
memory(i) := (others=>'1');
end loop;

mem_initialized <= '0';
wait for 1 ps;
If(SIM_MEM_FILE /= "NONE") then
    read_mem_file(memory,inbuf);
mem_initialized <= '1';
end if;
wait for 1 ps;
if (mem_initialized = '1') then
  for j in 0 to page_cal(SIM_DEVICE)-1 loop
    page_status(j) := '1'; -- memory was initialized, so, Pages are Not Erased.
  end loop;
  else
  for j in 0 to page_cal(SIM_DEVICE)-1 loop
    page_status(j) := '0';
  end loop;
  
end if;
wait for 1 ps;

---------------initialization of factory reg------------

wait for 1 ps;
--hexa_to_bit_vector(SIM_FACTORY_ID, 512, value_fact);
--hexa_to_bit_vector(SIM_USER_ID, 512, value_user);
for j in 0 to 63 loop
--    factory_reg(j)  <= To_stdlogicvector(getbyte(to_bitvector(SIM_FACTORY_ID),j+1));
--    security_reg(j) <= To_stdlogicvector(getbyte(to_bitvector(SIM_USER_ID),j+1));
    factory_reg(j)  <= To_stdlogicvector(getbyte(SIM_FACTORY_ID,j+1));
    security_reg(j) <= To_stdlogicvector(getbyte(SIM_USER_ID,j+1));
    wait for 1 ps;
         security_flag <='0';
     if(security_reg(j) /= X"FF")then
        security_flag <= '1';
      end if;
end loop;     

wait for 1 ps;


--**************************
--wait for delay_cal(TVCSL,scaled_flag);
foreground_op_enable <= '1' ; ---- Enable foreground op_codes
end if;
--**************************
    
    wait on t(31);
if(MMCAR='1' and t(31) = '1')then
    if (random=TRUE) then
      test_33mhz <= TRUE;
      wait for 1 ps;
    end if;
    compute_address(comp_page_addr(p_address(SIM_DEVICE),binary_page,page_addr0,page_addr1,manid(SIM_DEVICE)),pagesize(SIM_DEVICE,binary_page),
        comp_byte_addr(b_address(SIM_DEVICE,binary_opt),page_addr1,byte_addr,binary_page),
        page_boundary_low,page_boundary_high,current_address,mem_no,binary_page);
    if (arr_rd_dummybyte = 1) then
        for j in 1 to 8 loop
            wait until CLK_dly'event and CLK_dly ='1';
        end loop; 
    end if;
    read_out_array(CLK_dly,CSB_dly,pagesize(SIM_DEVICE,binary_page),memsize(pagesize(SIM_DEVICE,binary_page),page_cal(SIM_DEVICE)),page_boundary_low,
               page_boundary_high,current_address,memory,so_reg,binary_page,so_on);
    test_33mhz <= FALSE ;  -- leave the test on long enough to capture an error
    wait for 1 ps;
elsif(MMPTBT='1'and t(31) = '1')then
    test_33mhz <= TRUE;  -- test for 33 Mhz
    compute_address(comp_page_addr(p_address(SIM_DEVICE),binary_page,page_addr0,page_addr1,manid(SIM_DEVICE)),pagesize(SIM_DEVICE,binary_page),
                           comp_byte_addr(b_address(SIM_DEVICE,binary_opt),page_addr1,byte_addr,binary_page),page_boundary_low,
                           page_boundary_high, current_address,mem_no,binary_page);
    if (CSB_dly ='0')then
       wait until CSB_dly'event and CSB_dly ='1';
    end if; 
    RDYBSY_reg <= '0';  --SIM_DEVICE is busy
    status(7)  <= '0';
    transfer_to_buffer(buff_num, page_boundary_low,memory,tbuffer1,binary_page,tbuffer2);
    wait for 1 ps;
    RDYBSY_reg <= '1' after delay_cal(TXFR,scaled_flag);  
    status(7)  <= '1' after delay_cal(TXFR,scaled_flag);
    test_33mhz <= FALSE  after delay_cal(TXFR,scaled_flag) ;
    wait for 1 ps;
elsif(MMPTBC='1' and t(31) = '1')then
    compute_address(comp_page_addr(p_address(SIM_DEVICE),binary_page,page_addr0,page_addr1,manid(SIM_DEVICE)),pagesize(SIM_DEVICE,binary_page),
    comp_byte_addr(b_address(SIM_DEVICE,binary_opt),page_addr1,byte_addr,binary_page),
        page_boundary_low,page_boundary_high, current_address,mem_no,binary_page);
    if (CSB_dly ='0')then
       wait until CSB_dly'event and CSB_dly = '1';
    end if; 
    RDYBSY_reg <= '0';  --device is busy
    status(7)  <= '0';
    wait for 1 ps; --assignments won't take hold without a delay
    compare_with_buffer(buff_num,page_boundary_low,memory,tbuffer1,tbuffer2,binary_page,status_B1C_s6);
    wait for 1 ps;
    RDYBSY_reg <= '1'after delay_cal(TCOMP,scaled_flag);   -- device is now ready
    status(7) <= '1' after delay_cal(TCOMP,scaled_flag);
    status(6)  <= status_B1C_s6 after delay_cal(TCOMP,scaled_flag);
    wait for 1 ps;
elsif(B1W='1' and t(31) = '1')then
    byte <= comp_byte_addr(b_address(SIM_DEVICE,binary_opt),page_addr1,byte_addr,binary_page);
    compute_address(comp_page_addr(p_address(SIM_DEVICE),binary_page,page_addr0,page_addr1,manid(SIM_DEVICE)),pagesize(SIM_DEVICE,binary_page),
              comp_byte_addr(b_address(SIM_DEVICE,binary_opt),page_addr1,byte_addr,binary_page),
              page_boundary_low,page_boundary_high, current_address,mem_no,binary_page);
    write_data(current_address,page_boundary_low,page_boundary_high,tbuffer1,tbuffer2,"01",CSB_dly,CLK_dly,MOSI_dly);
elsif(B2W='1' and t(31) = '1')then
    byte <= comp_byte_addr(b_address(SIM_DEVICE,binary_opt),page_addr1,byte_addr,binary_page);
    compute_address(comp_page_addr(p_address(SIM_DEVICE),binary_page,page_addr0,page_addr1,manid(SIM_DEVICE)),pagesize(SIM_DEVICE,binary_page),
              comp_byte_addr(b_address(SIM_DEVICE,binary_opt),page_addr1,byte_addr,binary_page),
              page_boundary_low,page_boundary_high, current_address,mem_no,binary_page);
    write_data(current_address,page_boundary_low,page_boundary_high,tbuffer1,tbuffer2,"10",CSB_dly,CLK_dly,MOSI_dly);
elsif(BTMMPP='1'and t(31) = '1')then
    compute_address(comp_page_addr(p_address(SIM_DEVICE),binary_page,page_addr0,page_addr1,manid(SIM_DEVICE)),pagesize(SIM_DEVICE,binary_page),
            comp_byte_addr(b_address(SIM_DEVICE,binary_opt),page_addr1,byte_addr,binary_page),
            page_boundary_low,page_boundary_high, current_address,mem_no,binary_page);
    if (CSB_dly ='0')then
       wait until CSB_dly'event and CSB_dly ='1';
    end if; 
    RDYBSY_reg <= '0'; -- device is busy
    status(7) <= '0';
    write_to_memory(buff_nump,comp_page_addr(p_address(SIM_DEVICE),binary_page,page_addr0,page_addr1,manid(SIM_DEVICE)),
         pagesize(SIM_DEVICE,binary_page),tbuffer1,tbuffer2,page_boundary_low,memory);
    if (erase_flag = '0') then
        if (page_status(conv_integer(comp_page_addr(p_address(SIM_DEVICE),binary_page,page_addr0,
                                           page_addr1,manid(SIM_DEVICE)))) = '1') then  --page is not erased
            Write ( Message, string'("DRC Error : In "));
            Write ( Message, InstancePath); 
            Write ( Message, string'(" trying to write into a Page which is not erased"));
            assert false report Message.all severity failure;
            DEALLOCATE (Message);       
        end if;
        wait for 1 ps;
        RDYBSY_reg <= '1' after delay_cal(TP,scaled_flag);   -- device is now ready
        status(7) <= '1'  after delay_cal(TP,scaled_flag);
        wait for 1 ps;
    else
        page_status(conv_integer(comp_page_addr(p_address(SIM_DEVICE),binary_page,page_addr0,page_addr1,manid(SIM_DEVICE)))) := '1';
        wait for 1 ps;
        RDYBSY_reg <= '1' after delay_cal(TPEP,scaled_flag) ;   -- device is now ready
        status(7) <= '1'  after delay_cal(TPEP,scaled_flag) ;
        wait for 1 ps;   
    end if;
elsif(MMPPB='1' and t(31)='1' and RDYBSY_reg='1')then
    MMPPB_mem_page := comp_page_addr(p_address(SIM_DEVICE),binary_page,page_addr0,page_addr1,manid(SIM_DEVICE));
    -- page value has been stored for main memory page program
    MMPPB_buf_page := (others=>'0');--buffer has zero pages
    compute_address(MMPPB_buf_page,pagesize(SIM_DEVICE,binary_page),comp_byte_addr(b_address(SIM_DEVICE,binary_opt),
                   page_addr1,byte_addr,binary_page),page_boundary_low,page_boundary_high,current_address,mem_no,binary_page);
    write_data(current_address,page_boundary_low,page_boundary_high,tbuffer1,tbuffer2,buff_num,CSB_dly,CLK_dly,MOSI_dly);
          -- this will write to buffer  -- it will proceed to next step, when, posedge of CSB.
          -- This is complicated, and, hence, explained here: At posedge of CSB, the write_data will get disabled.
          -- At this time, writing to buffer needs to stop, and, writing into memory should start.

    compute_address(MMPPB_mem_page,pagesize(SIM_DEVICE,binary_page),comp_byte_addr(b_address(SIM_DEVICE,binary_opt),page_addr1,byte_addr,
                    binary_page),page_boundary_low,page_boundary_high,current_address,mem_no,binary_page);
    RDYBSY_reg <= '0'; -- device is busy
    status(7) <='0';
    write_to_memory(buff_num,comp_page_addr(p_address(SIM_DEVICE),binary_page,page_addr0,page_addr1,manid(SIM_DEVICE)),
                    pagesize(SIM_DEVICE,binary_page),tbuffer1,tbuffer2,page_boundary_low,memory);
    page_status(conv_integer(comp_page_addr(p_address(SIM_DEVICE),binary_page,page_addr0,page_addr1,manid(SIM_DEVICE)))) := '1';
    wait for 1 ps;
    RDYBSY_reg <= '1' after delay_cal(TPEP,scaled_flag) ;    -- device is now ready
    status(7) <= '1'  after delay_cal(TPEP,scaled_flag);
    wait for 1 ps;
----------------page erase------------------

elsif (PE = '1')then
        compute_address(comp_page_addr(p_address(SIM_DEVICE),binary_page,page_addr0,page_addr1,manid(SIM_DEVICE)),pagesize(SIM_DEVICE,binary_page),
        comp_byte_addr(b_address(SIM_DEVICE,binary_opt),page_addr1,byte_addr,binary_page),page_boundary_low,page_boundary_high,
        current_address,mem_no,binary_page);
        if (CSB_dly ='0')then
           wait until CSB_dly'event and CSB_dly='1';
        end if; 
        RDYBSY_reg <= '0';  --device is busy
        status(7) <= '0';
        erase_page(comp_page_addr(p_address(SIM_DEVICE),binary_page,page_addr0,page_addr1,manid(SIM_DEVICE)),
            pagesize(SIM_DEVICE,binary_page),page_boundary_low,memory,binary_page,temp_page_status);
        page_status(conv_integer(comp_page_addr(p_address(SIM_DEVICE),binary_page,page_addr0,page_addr1,manid(SIM_DEVICE)))) := temp_page_status;
        wait for 1 ps;
        RDYBSY_reg <= '1'  after delay_cal(TPE,scaled_flag)  ; --device is now ready
        status(7) <= '1'   after delay_cal(TPE,scaled_flag)   ;
        wait for 1 ps;
----------------sector erase------------------
    
elsif (SE = '1')then
    compute_address(comp_page_addr(p_address(SIM_DEVICE),binary_page,page_addr0,page_addr1,manid(SIM_DEVICE)),pagesize(SIM_DEVICE,binary_page),
                          comp_byte_addr(b_address(SIM_DEVICE,binary_page),page_addr1,byte_addr,binary_page),page_boundary_low,
                          page_boundary_high,current_address,mem_no,binary_page);
    if (CSB_dly ='0')then
       wait until CSB_dly'event and CSB_dly = '1';  
    end if; 
    RDYBSY_reg <= '0';  --device is busy
    status(7) <= '0';
               --******************************--
    if (conv_integer(comp_page_addr(p_address(SIM_DEVICE),binary_page,page_addr0,page_addr1,manid(SIM_DEVICE))) < 8 ) then
        page_boundary_low := 0;
        jerase := page_boundary_low;
        loop_sectorerase: loop 
            if (jerase < page_boundary_low+8*pagesize(SIM_DEVICE,binary_page) ) then
                erase_page(comp_page_addr(p_address(SIM_DEVICE),binary_page,page_addr0,page_addr1,manid(SIM_DEVICE)),
                               pagesize(SIM_DEVICE,binary_page),jerase,memory,binary_page,temp_page_status);   -- erase 8 pages, i.e. a block
                page_status(conv_integer(comp_page_addr(p_address(SIM_DEVICE),binary_page,page_addr0,page_addr1,manid(SIM_DEVICE)))) := temp_page_status;
                jerase := jerase+pagesize(SIM_DEVICE,binary_page);
            else
                exit loop_sectorerase;  -------------sector Eraseexit ----------------------
            end if; 
        end loop;
        for j in 0 to 7 loop  -- erase_page will only change the status of one-page 
            page_status(j) := '0'; 
        end loop;
         --************************************----
    elsif (comp_page_addr(p_address(SIM_DEVICE),binary_page,page_addr0,page_addr1,manid(SIM_DEVICE)) < pageper_sector(SIM_DEVICE)) then
        page_boundary_low := 8*pagesize(SIM_DEVICE,binary_page);
        jerase := page_boundary_low;
        loop_sector1erase : loop
            if (jerase < page_boundary_low+((pageper_sector(SIM_DEVICE)-8)*pagesize(SIM_DEVICE,binary_page)) ) then
                erase_page(comp_page_addr(p_address(SIM_DEVICE),binary_page,page_addr0,page_addr1,manid(SIM_DEVICE)),
                pagesize(SIM_DEVICE,binary_page),jerase,memory,binary_page,temp_page_status);   --erase 248/120 pages, i.e. a block
            page_status(conv_integer(comp_page_addr(p_address(SIM_DEVICE),binary_page,
            page_addr0,page_addr1,manid(SIM_DEVICE)))) := temp_page_status;
            jerase := jerase+pagesize(SIM_DEVICE,binary_page);
            else
                exit loop_sector1erase;  -----------sector1 Eraseexit ------------------------
            end if; 
        end loop;   
        for j in 8 to pageper_sector(SIM_DEVICE)-1 loop    --erase_page will only change the status of one-page 
            page_status(j) := '0'; 
        end loop;
        --**************************** 
    else
        page((p_address(SIM_DEVICE)- s_address(SIM_DEVICE))-1) <= '0';
        jerase := page_boundary_low;
        loop_sector2erase : loop
            if (jerase < page_boundary_low+(pageper_sector(SIM_DEVICE)*pagesize(SIM_DEVICE,binary_page))) then
                erase_page(comp_page_addr(p_address(SIM_DEVICE),binary_page,page_addr0,page_addr1,manid(SIM_DEVICE)),
                                  pagesize(SIM_DEVICE,binary_page),jerase,memory,binary_page,temp_page_status);   --erase 256/128 pages, i.e. a block
                page_status(conv_integer(comp_page_addr(p_address(SIM_DEVICE),binary_page,page_addr0,page_addr1,manid(SIM_DEVICE)))) := temp_page_status;
                jerase := jerase +pagesize(SIM_DEVICE,binary_page);
            else
                exit loop_sector2erase;   ----------sector2 Eraseexit ------------------------
            end if;
        end loop;
        for j in 0 to pageper_sector(SIM_DEVICE)-1 loop 
                page_status(conv_integer(comp_page_addr(p_address(SIM_DEVICE),binary_page,page_addr0,page_addr1,manid(SIM_DEVICE)))+j) := '0'; 
        end loop;
    end if;
    wait for 1 ps;
    RDYBSY_reg <= '1' after delay_cal(TSE,scaled_flag)  ; --device is now ready
    status(7) <= '1' after delay_cal(TSE,scaled_flag)  ;
elsif(SRR='1' and t(31)='1')then
      read_out_reg(23,0,127,security_reg,CSB_dly,CLK_dly,so_reg,so_on);
elsif(SRP ='1' and t(31)='1' and page_addr0=X"00" and page_addr1= X"00" and byte_addr = X"00" )then
        current_address :=0;
        page_boundary_low :=0;
        page_boundary_high := 63;
        write_data(current_address,page_boundary_low,page_boundary_high,tbuffer1,tbuffer2,"01",CSB_dly,CLK_dly,MOSI_dly);    
                    -- this will write to buffer
                      -- it will proceed to next step, when, posedge of CSB.
                       -- This is complicated, and, hence, explained here:
                       -- At posedge of CSB, the write_data will get disabled.
                       -- At this time, writing to buffer needs to stop, and,
                       -- writing into memory should start.
        --writing in to security_reg
        if (security_flag = '0') then  --Security Register has not been programmed before
            for j in 0 to 63 loop
                security_reg(j) <= tbuffer1(j);
            end loop;  
            security_flag <= '1';
            RDYBSY_reg <= '0'; --device is busy
            status(7) <= '0';
            wait for 1 ps;
            RDYBSY_reg <= '1' after delay_cal(TP,scaled_flag) ; --device is now ready
            status(7) <= '1'  after delay_cal(TP,scaled_flag) ;
            wait for 1 ps;
        else
            Write ( Message, string'("DRC Error : In "));
            Write ( Message, InstancePath); 
            Write ( Message, string'(" Security register can only be programmed once")); 
            assert false report Message.all severity failure;
            DEALLOCATE (Message);
        end if;
end if;
end process;

--------------------status register read--------
process    
    variable j_tmp : integer := 8;
begin
    wait on SR ;
    if( SR = '1' ) then
        status_read <='1';--reading status reg
    --    for i in 0 to 7 loop
    --    wait until CLK_dly'event and CLK_dly='0';
    --    so_reg1 <= '1'; -- the reg is set to one when data is invalid
    --    so_on1  <= '1';
    --    end loop;
        status_loop : loop
            wait until ((CLK_dly'event and CLK_dly ='0') or  (CSB_dly'event and CSB_dly='1'));
            if(CSB_dly='1') then 
                j_tmp:=0;
                exit status_loop;
            end if;
            if(j_tmp > 0)then
                j_tmp := j_tmp - 1; 
            else
                j_tmp := 7;
            end if;
                so_reg1 <= status(j_tmp);
                so_on1  <= '1';
           end loop;
           so_on1  <= '0';
           status_read <='0';
    end if;
end process;

------------manufacturing ID-----------
process   --(MIR)--,MANID(SIM_DEVICE))
    variable j : integer:= 32 ;
    variable m_id : std_logic_vector(31 downto 0):= manid(SIM_DEVICE); 
begin
wait on MIR;
    if(MIR='1')then
        MIR_loop : loop
            wait until ((CLK_dly'event and CLK_dly ='0') or  (CSB_dly'event and CSB_dly='1'));
            exit MIR_loop when CSB_dly = '1';
            if(J > 0)then
                SO_reg2 <= m_id(j-1);
                so_on2 <= '1';
                J := J - 1;
            elsif( j = 0) then
                So_on2 <= '1';
                So_reg2 <= 'X'; -- only if the cs extends more than available man ID
            end if;
        end loop;
    so_on2 <= '0';
    So_reg2 <= '0';   
    end if;
end process;

        ------------------------ CLK check
checkPeriod ( CLK_dly  , "CLK" , Tsck    , "Tsck" , TsckRp  , clk_err   , InstancePath, valid ) ;
checkPeriod ( CLK_dly  , "CLK" , Tsck33  , "Tsck" , TsckRp33, clk_err33 , InstancePath, test_33mhz ) ;
checkclk    ( CLK_dly  , "CLK" , Tspickh , "Tsck" ,TsckRpx  , TsckFp , clk_erra , InstancePath, valid, valid, valid ) ;
checkclk    ( CSB_dly  , "CSB" , Tcs     , "Tsck" ,TsckRpcsb , TsckFcsb , csb_err , InstancePath, valid, valid, no_test) ;
validate_input(SIM_DEVICE, SIM_DELAY_TYPE , scaled_flag);  -- validates inputs and set scaled_flag

process(so_on1,so_reg1,so_on2,so_reg2,so_reg, so_on)
begin
    if(so_on1='1')then
        MISO_zd <= so_reg1 after Tv;
    elsif(so_on2='1')then
        MISO_zd <= so_reg2 after Tv;
    elsif (so_on='1') then
        MISO_zd <= so_reg after Tv;
    else  
        MISO_zd <= '1' after Tdis;
    end if;
end process;   

--####################################################################
--#####                   TIMING CHECKS & OUTPUT                 #####
--####################################################################
  prcs_tmngchk:process
  
  variable Tmkr_CSB_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
  variable Tviol_CSB_CLK_posedge : std_ulogic := '0';

  variable Tmkr_MOSI_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
  variable Tviol_MOSI_CLK_posedge : std_ulogic := '0';

  variable Pviol_CLK : std_ulogic          := '0';
  variable PInfo_CLK : VitalPeriodDataType := VitalPeriodDataInit;

  begin

--  Setup/Hold Check Violations (all input pins)

     if (TimingChecksOn) then
--===========================================
--=====  Vital SetupHold Checks for CSB =====
--===========================================
       VitalSetupHoldCheck (
         Violation            => Tviol_CSB_CLK_posedge,
         TimingData           => Tmkr_CSB_CLK_posedge,
         TestSignal           => CSB_dly,
         TestSignalName       => "CSB",
         TestDelay            => tisd_CSB_CLK,
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_CSB_CLK_posedge_posedge,
         SetupLow             => tsetup_CSB_CLK_negedge_posedge,
         HoldHigh             => thold_CSB_CLK_posedge_posedge,
         HoldLow              => thold_CSB_CLK_negedge_posedge,
         CheckEnabled         => true,
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_SPI_ACCESS",
         Xon                  => Xon,
         MsgOn                => MsgOn,
         MsgSeverity          => Warning);
--===========================================
--=====  Vital SetupHold Checks for MOSI =====
--===========================================
       VitalSetupHoldCheck (
         Violation            => Tviol_MOSI_CLK_posedge,
         TimingData           => Tmkr_MOSI_CLK_posedge,
         TestSignal           => MOSI_dly,
         TestSignalName       => "MOSI",
         TestDelay            => tisd_MOSI_CLK,
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_MOSI_CLK_posedge_posedge,
         SetupLow             => tsetup_MOSI_CLK_negedge_posedge,
         HoldHigh             => thold_MOSI_CLK_posedge_posedge,
         HoldLow              => thold_MOSI_CLK_negedge_posedge,
         CheckEnabled         => true,
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_SPI_ACCESS",
         Xon                  => Xon,
         MsgOn                => MsgOn,
         MsgSeverity          => Warning);
--===========================================
--=====  Vital Period Check for CLK     =====
--===========================================
       VitalPeriodPulseCheck (
         Violation            => Pviol_CLK,
         PeriodData           => PInfo_CLK,
         TestSignal           => CLK_dly,
         TestSignalName       => "CLK",
         TestDelay            => 0 ps,
         Period               => tperiod_CLK_posedge,
         PulseWidthHigh       => tpw_CLK_posedge,
         PulseWidthLow        => tpw_CLK_negedge,
         CheckEnabled         => true,
         HeaderMsg            => InstancePath & "/X_SPI_ACCESS",
         Xon                  => Xon,
         MsgOn                => MsgOn,
         MsgSeverity          => Warning);

     end if;
   
     Violation <=  Tviol_CSB_CLK_posedge or Tviol_MOSI_CLK_posedge or Pviol_CLK;

     wait on CLK_dly;

   end process prcs_tmngchk;

--####################################################################
--#####                           OUTPUT                         #####
--####################################################################
  prcs_output:process

  variable MISO_GlitchData :  VitalGlitchDataType;
  variable MISO_zd_viol_var    : std_ulogic := '0';

  begin

--   MISO_zd_viol_var := Violation xor MISO_zd;
   MISO_zd_viol_var := MISO_zd;

-- Start Path Delays
       VitalPathDelay01 (
         OutSignal      => MISO,
         GlitchData     => MISO_GlitchData,
         OutSignalName  => "MISO",
         OutTemp        => MISO_zd_viol_var,
         Paths          => (0 => (CLK_dly'last_event, tpd_CLK_MISO, CSB_dly = '0'),
                            1 => (CSB_dly'last_event, tpd_CSB_MISO, CSB_dly = '1')),
         Mode                   => VitalTransport,
         Xon                    => XON,
         MsgOn                  => MsgOn,
         MsgSeverity            => warning);
      wait on CLK_dly, CSB_dly, MISO_zd;
   end process prcs_output;     

end X_SPI_ACCESS_V;
-------------------------------------------------------------------------------
-- Copyright (c) 1995/2004 Xilinx, Inc.
-- All Right Reserved.
-------------------------------------------------------------------------------
--   ____  ____
--  /   /\/   /
-- /___/  \  /    Vendor : Xilinx
-- \   \   \/     Version : 10.1i
--  \   \         Description : Xilinx Timing Simulation Library Component
--  /   /                  Multifunctional, Cascadable, 48-bit Output Arithmetic Block
-- /___/   /\     Filename : X_DSP48A.vhd
-- \   \  /  \    Timestamp : Mon Mar 20 17:25:10 PST 2006
--  \___\/\___\
--
-- Revision:
--    03/25/06 - Initial version.
--    09/22/06 - fixed CR 421339
--    01/17/07 - fixed CR 431766
-- End Revision
----- CELL X_DSP48A -----

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.STD_LOGIC_SIGNED.all;
use IEEE.STD_LOGIC_ARITH.all;

library STD;
use STD.TEXTIO.all;


library IEEE;
use IEEE.VITAL_Timing.all;

library simprim;
use simprim.Vcomponents.all;
use simprim.VPACKAGE.all;

entity X_DSP48A is

  generic(

        TimingChecksOn  : boolean       := true;
        InstancePath    : string        := "*";
        Xon             : boolean       := true;
        MsgOn           : boolean       := true;
        B_INPUT         : string        := "DIRECT";
        LOC     	: string        := "UNPLACED";

----- VITAL input wire delays
        tipd_A          : VitalDelayArrayType01 (17 downto 0) := (others => (0 ps, 0 ps));
        tipd_B          : VitalDelayArrayType01 (17 downto 0) := (others => (0 ps, 0 ps));
        tipd_BCIN       : VitalDelayArrayType01 (17 downto 0) := (others => (0 ps, 0 ps));
        tipd_C          : VitalDelayArrayType01 (47 downto 0) := (others => (0 ps, 0 ps));
        tipd_CARRYIN    : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_CEA        : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_CEB        : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_CEC        : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_CECARRYIN  : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_CED        : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_CEM        : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_CEOPMODE   : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_CEP        : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_CLK        : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_D          : VitalDelayArrayType01 (17 downto 0) := (others => (0 ps, 0 ps));
        tipd_GSR        : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_OPMODE     : VitalDelayArrayType01 (7 downto 0) := (others => (0 ps, 0 ps));
        tipd_PCIN       : VitalDelayArrayType01 (47 downto 0) := (others => (0 ps, 0 ps));
        tipd_RSTA       : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_RSTB       : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_RSTC       : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_RSTCARRYIN : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_RSTD       : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_RSTM       : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_RSTOPMODE  : VitalDelayType01 := ( 0 ps,  0 ps);
        tipd_RSTP       : VitalDelayType01 := ( 0 ps,  0 ps);

----- VITAL pin-to-pin propagation delays

        tpd_A_CARRYOUT  : VitalDelayArrayType01 (17 downto 0)  := (others => (0 ps, 0 ps));
        tpd_A_P         : VitalDelayArrayType01 (863 downto 0)  := (others => (0 ps, 0 ps));
        tpd_A_PCOUT     : VitalDelayArrayType01 (863 downto 0)  := (others => (0 ps, 0 ps));

        tpd_B_BCOUT     : VitalDelayArrayType01 (323 downto 0)  := (others => (0 ps, 0 ps));
        tpd_B_CARRYOUT  : VitalDelayArrayType01 (17 downto 0)  := (others => (0 ps, 0 ps));
        tpd_B_P         : VitalDelayArrayType01 (863 downto 0)  := (others => (0 ps, 0 ps));
        tpd_B_PCOUT     : VitalDelayArrayType01 (863 downto 0)  := (others => (0 ps, 0 ps));

        tpd_BCIN_BCOUT  : VitalDelayArrayType01 (323 downto 0)  := (others => (0 ps, 0 ps));
        tpd_BCIN_CARRYOUT  : VitalDelayArrayType01 (17 downto 0)  := (others => (0 ps, 0 ps));
        tpd_BCIN_P      : VitalDelayArrayType01 (863 downto 0)  := (others => (0 ps, 0 ps));
        tpd_BCIN_PCOUT  : VitalDelayArrayType01 (863 downto 0)  := (others => (0 ps, 0 ps));

        tpd_C_CARRYOUT  : VitalDelayArrayType01 (47 downto 0)  := (others => (0 ps, 0 ps));
        tpd_C_P         : VitalDelayArrayType01 (2303 downto 0)  := (others => (0 ps, 0 ps));
        tpd_C_PCOUT     : VitalDelayArrayType01 (2303 downto 0)  := (others => (0 ps, 0 ps));

        tpd_CARRYIN_CARRYOUT : VitalDelayType01                  := (0 ps, 0 ps);
        tpd_CARRYIN_P     : VitalDelayArrayType01 (47 downto 0)  := (others => (0 ps, 0 ps));
        tpd_CARRYIN_PCOUT : VitalDelayArrayType01 (47 downto 0)  := (others => (0 ps, 0 ps));

        tpd_CLK_BCOUT   : VitalDelayArrayType01 (17 downto 0)  := (others => (100 ps, 100 ps));
        tpd_CLK_CARRYOUT : VitalDelayType01                    := (100 ps, 100 ps);
        tpd_CLK_P       : VitalDelayArrayType01 (47 downto 0)  := (others => (100 ps, 100 ps));
        tpd_CLK_PCOUT   : VitalDelayArrayType01 (47 downto 0)  := (others => (100 ps, 100 ps));

        tpd_D_BCOUT     : VitalDelayArrayType01 (323 downto 0)  := (others => (0 ps, 0 ps));
        tpd_D_CARRYOUT  : VitalDelayArrayType01 (17 downto 0)  := (others => (0 ps, 0 ps));
        tpd_D_P         : VitalDelayArrayType01 (863 downto 0)  := (others => (0 ps, 0 ps));
        tpd_D_PCOUT     : VitalDelayArrayType01 (863 downto 0)  := (others => (0 ps, 0 ps));

        tpd_OPMODE_BCOUT    : VitalDelayArrayType01 (143 downto 0)  := (others => (0 ps, 0 ps));
        tpd_OPMODE_CARRYOUT : VitalDelayArrayType01 (7 downto 0)  := (others => (0 ps, 0 ps));
        tpd_OPMODE_P     : VitalDelayArrayType01 (383 downto 0)  := (others => (0 ps, 0 ps));
        tpd_OPMODE_PCOUT : VitalDelayArrayType01 (383 downto 0)  := (others => (0 ps, 0 ps));

        tpd_PCIN_CARRYOUT : VitalDelayArrayType01 (47 downto 0)  := (others => (0 ps, 0 ps));
        tpd_PCIN_P      : VitalDelayArrayType01 (2303 downto 0)  := (others => (0 ps, 0 ps));
        tpd_PCIN_PCOUT  : VitalDelayArrayType01 (2303 downto 0)  := (others => (0 ps, 0 ps));
       
        tpd_RSTA_CARRYOUT : VitalDelayType01                  := (0 ps, 0 ps);
        tpd_RSTA_P        : VitalDelayArrayType01 (47 downto 0)  := (others => (0 ps, 0 ps));
        tpd_RSTA_PCOUT    : VitalDelayArrayType01 (47 downto 0)  := (others => (0 ps, 0 ps));

        tpd_RSTB_BCOUT    : VitalDelayArrayType01 (17 downto 0)  := (others => (0 ps, 0 ps));
        tpd_RSTB_CARRYOUT : VitalDelayType01                  := (0 ps, 0 ps);
        tpd_RSTB_P        : VitalDelayArrayType01 (47 downto 0)  := (others => (0 ps, 0 ps));
        tpd_RSTB_PCOUT    : VitalDelayArrayType01 (47 downto 0)  := (others => (0 ps, 0 ps));

        tpd_RSTC_CARRYOUT : VitalDelayType01                  := (0 ps, 0 ps);
        tpd_RSTC_P        : VitalDelayArrayType01 (47 downto 0)  := (others => (0 ps, 0 ps));
        tpd_RSTC_PCOUT    : VitalDelayArrayType01 (47 downto 0)  := (others => (0 ps, 0 ps));

        tpd_RSTCARRYIN_CARRYOUT : VitalDelayType01                  := (0 ps, 0 ps);
        tpd_RSTCARRYIN_P        : VitalDelayArrayType01 (47 downto 0)  := (others => (0 ps, 0 ps));
        tpd_RSTCARRYIN_PCOUT    : VitalDelayArrayType01 (47 downto 0)  := (others => (0 ps, 0 ps));

        tpd_RSTD_BCOUT    : VitalDelayArrayType01 (17 downto 0)  := (others => (0 ps, 0 ps));
        tpd_RSTD_CARRYOUT : VitalDelayType01                  := (0 ps, 0 ps);
        tpd_RSTD_P        : VitalDelayArrayType01 (47 downto 0)  := (others => (0 ps, 0 ps));
        tpd_RSTD_PCOUT    : VitalDelayArrayType01 (47 downto 0)  := (others => (0 ps, 0 ps));

        tpd_RSTM_CARRYOUT : VitalDelayType01                  := (0 ps, 0 ps);
        tpd_RSTM_P        : VitalDelayArrayType01 (47 downto 0)  := (others => (0 ps, 0 ps));
        tpd_RSTM_PCOUT    : VitalDelayArrayType01 (47 downto 0)  := (others => (0 ps, 0 ps));

        tpd_RSTOPMODE_BCOUT    : VitalDelayArrayType01 (17 downto 0)  := (others => (0 ps, 0 ps));
        tpd_RSTOPMODE_CARRYOUT : VitalDelayType01                  := (0 ps, 0 ps);
        tpd_RSTOPMODE_P        : VitalDelayArrayType01 (47 downto 0)  := (others => (0 ps, 0 ps));
        tpd_RSTOPMODE_PCOUT    : VitalDelayArrayType01 (47 downto 0)  := (others => (0 ps, 0 ps));

        tpd_RSTP_P        : VitalDelayArrayType01 (47 downto 0)  := (others => (0 ps, 0 ps));
        tpd_RSTP_PCOUT    : VitalDelayArrayType01 (47 downto 0)  := (others => (0 ps, 0 ps));

----- VITAL setup and hold times
       
        tsetup_A_CLK_posedge_posedge : VitalDelayArrayType(17 downto 0) := (others => 0 ps);
        tsetup_A_CLK_negedge_posedge : VitalDelayArrayType(17 downto 0) := (others => 0 ps);
        thold_A_CLK_posedge_posedge : VitalDelayArrayType(17 downto 0) := (others => 0 ps);
        thold_A_CLK_negedge_posedge : VitalDelayArrayType(17 downto 0) := (others => 0 ps);

        tsetup_B_CLK_posedge_posedge : VitalDelayArrayType(17 downto 0) := (others => 0 ps);
        tsetup_B_CLK_negedge_posedge : VitalDelayArrayType(17 downto 0) := (others => 0 ps);
        thold_B_CLK_posedge_posedge : VitalDelayArrayType(17 downto 0) := (others => 0 ps);
        thold_B_CLK_negedge_posedge : VitalDelayArrayType(17 downto 0) := (others => 0 ps);

        tsetup_BCIN_CLK_posedge_posedge : VitalDelayArrayType(17 downto 0) := (others => 0 ps);
        tsetup_BCIN_CLK_negedge_posedge : VitalDelayArrayType(17 downto 0) := (others => 0 ps);
        thold_BCIN_CLK_posedge_posedge : VitalDelayArrayType(17 downto 0) := (others => 0 ps);
        thold_BCIN_CLK_negedge_posedge : VitalDelayArrayType(17 downto 0) := (others => 0 ps);

        tsetup_C_CLK_posedge_posedge : VitalDelayArrayType(47 downto 0) := (others => 0 ps);
        tsetup_C_CLK_negedge_posedge : VitalDelayArrayType(47 downto 0) := (others => 0 ps);
        thold_C_CLK_posedge_posedge : VitalDelayArrayType(47 downto 0) := (others => 0 ps);
        thold_C_CLK_negedge_posedge : VitalDelayArrayType(47 downto 0) := (others => 0 ps);

        tsetup_CARRYIN_CLK_posedge_posedge : VitalDelayType := 0 ps;
        tsetup_CARRYIN_CLK_negedge_posedge : VitalDelayType := 0 ps;
        thold_CARRYIN_CLK_posedge_posedge : VitalDelayType := 0 ps;
        thold_CARRYIN_CLK_negedge_posedge : VitalDelayType := 0 ps;

        tsetup_CEA_CLK_posedge_posedge : VitalDelayType := 0 ps;
        tsetup_CEA_CLK_negedge_posedge : VitalDelayType := 0 ps;
        thold_CEA_CLK_posedge_posedge : VitalDelayType := 0 ps;
        thold_CEA_CLK_negedge_posedge : VitalDelayType := 0 ps;

        tsetup_CEB_CLK_posedge_posedge : VitalDelayType := 0 ps;
        tsetup_CEB_CLK_negedge_posedge : VitalDelayType := 0 ps;
        thold_CEB_CLK_posedge_posedge : VitalDelayType := 0 ps;
        thold_CEB_CLK_negedge_posedge : VitalDelayType := 0 ps;

        tsetup_CEC_CLK_posedge_posedge : VitalDelayType := 0 ps;
        tsetup_CEC_CLK_negedge_posedge : VitalDelayType := 0 ps;
        thold_CEC_CLK_posedge_posedge : VitalDelayType := 0 ps;
        thold_CEC_CLK_negedge_posedge : VitalDelayType := 0 ps;

        tsetup_CECARRYIN_CLK_posedge_posedge : VitalDelayType := 0 ps;
        tsetup_CECARRYIN_CLK_negedge_posedge : VitalDelayType := 0 ps;
        thold_CECARRYIN_CLK_posedge_posedge : VitalDelayType := 0 ps;
        thold_CECARRYIN_CLK_negedge_posedge : VitalDelayType := 0 ps;

        tsetup_CED_CLK_posedge_posedge : VitalDelayType := 0 ps;
        tsetup_CED_CLK_negedge_posedge : VitalDelayType := 0 ps;
        thold_CED_CLK_posedge_posedge : VitalDelayType := 0 ps;
        thold_CED_CLK_negedge_posedge : VitalDelayType := 0 ps;

        tsetup_CEM_CLK_posedge_posedge : VitalDelayType := 0 ps;
        tsetup_CEM_CLK_negedge_posedge : VitalDelayType := 0 ps;
        thold_CEM_CLK_posedge_posedge : VitalDelayType := 0 ps;
        thold_CEM_CLK_negedge_posedge : VitalDelayType := 0 ps;

        tsetup_CEOPMODE_CLK_posedge_posedge : VitalDelayType := 0 ps;
        tsetup_CEOPMODE_CLK_negedge_posedge : VitalDelayType := 0 ps;
        thold_CEOPMODE_CLK_posedge_posedge : VitalDelayType := 0 ps;
        thold_CEOPMODE_CLK_negedge_posedge : VitalDelayType := 0 ps;

        tsetup_CEP_CLK_posedge_posedge : VitalDelayType := 0 ps;
        tsetup_CEP_CLK_negedge_posedge : VitalDelayType := 0 ps;
        thold_CEP_CLK_posedge_posedge : VitalDelayType := 0 ps;
        thold_CEP_CLK_negedge_posedge : VitalDelayType := 0 ps;

        tsetup_D_CLK_posedge_posedge : VitalDelayArrayType(17 downto 0) := (others => 0 ps);
        tsetup_D_CLK_negedge_posedge : VitalDelayArrayType(17 downto 0) := (others => 0 ps);
        thold_D_CLK_posedge_posedge : VitalDelayArrayType(17 downto 0) := (others => 0 ps);
        thold_D_CLK_negedge_posedge : VitalDelayArrayType(17 downto 0) := (others => 0 ps);

        tsetup_OPMODE_CLK_posedge_posedge : VitalDelayArrayType(7 downto 0) := (others => 0 ps);
        tsetup_OPMODE_CLK_negedge_posedge : VitalDelayArrayType(7 downto 0) := (others => 0 ps);
        thold_OPMODE_CLK_posedge_posedge : VitalDelayArrayType(7 downto 0) := (others => 0 ps);
        thold_OPMODE_CLK_negedge_posedge : VitalDelayArrayType(7 downto 0) := (others => 0 ps);

        tsetup_PCIN_CLK_posedge_posedge : VitalDelayArrayType(47 downto 0) := (others => 0 ps);
        tsetup_PCIN_CLK_negedge_posedge : VitalDelayArrayType(47 downto 0) := (others => 0 ps);
        thold_PCIN_CLK_posedge_posedge : VitalDelayArrayType(47 downto 0) := (others => 0 ps);
        thold_PCIN_CLK_negedge_posedge : VitalDelayArrayType(47 downto 0) := (others => 0 ps);

        tsetup_RSTA_CLK_posedge_posedge : VitalDelayType := 0 ps;
        tsetup_RSTA_CLK_negedge_posedge : VitalDelayType := 0 ps;
        thold_RSTA_CLK_posedge_posedge : VitalDelayType := 0 ps;
        thold_RSTA_CLK_negedge_posedge : VitalDelayType := 0 ps;

        tsetup_RSTB_CLK_posedge_posedge : VitalDelayType := 0 ps;
        tsetup_RSTB_CLK_negedge_posedge : VitalDelayType := 0 ps;
        thold_RSTB_CLK_posedge_posedge : VitalDelayType := 0 ps;
        thold_RSTB_CLK_negedge_posedge : VitalDelayType := 0 ps;

        tsetup_RSTC_CLK_posedge_posedge : VitalDelayType := 0 ps;
        tsetup_RSTC_CLK_negedge_posedge : VitalDelayType := 0 ps;
        thold_RSTC_CLK_posedge_posedge : VitalDelayType := 0 ps;
        thold_RSTC_CLK_negedge_posedge : VitalDelayType := 0 ps;

        tsetup_RSTCARRYIN_CLK_posedge_posedge : VitalDelayType := 0 ps;
        tsetup_RSTCARRYIN_CLK_negedge_posedge : VitalDelayType := 0 ps;
        thold_RSTCARRYIN_CLK_posedge_posedge : VitalDelayType := 0 ps;
        thold_RSTCARRYIN_CLK_negedge_posedge : VitalDelayType := 0 ps;

        tsetup_RSTD_CLK_posedge_posedge : VitalDelayType := 0 ps;
        tsetup_RSTD_CLK_negedge_posedge : VitalDelayType := 0 ps;
        thold_RSTD_CLK_posedge_posedge : VitalDelayType := 0 ps;
        thold_RSTD_CLK_negedge_posedge : VitalDelayType := 0 ps;

        tsetup_RSTM_CLK_posedge_posedge : VitalDelayType := 0 ps;
        tsetup_RSTM_CLK_negedge_posedge : VitalDelayType := 0 ps;
        thold_RSTM_CLK_posedge_posedge : VitalDelayType := 0 ps;
        thold_RSTM_CLK_negedge_posedge : VitalDelayType := 0 ps;

        tsetup_RSTOPMODE_CLK_posedge_posedge : VitalDelayType := 0 ps;
        tsetup_RSTOPMODE_CLK_negedge_posedge : VitalDelayType := 0 ps;
        thold_RSTOPMODE_CLK_posedge_posedge : VitalDelayType := 0 ps;
        thold_RSTOPMODE_CLK_negedge_posedge : VitalDelayType := 0 ps;

        tsetup_RSTP_CLK_posedge_posedge : VitalDelayType := 0 ps;
        tsetup_RSTP_CLK_negedge_posedge : VitalDelayType := 0 ps;
        thold_RSTP_CLK_posedge_posedge : VitalDelayType := 0 ps;
        thold_RSTP_CLK_negedge_posedge : VitalDelayType := 0 ps;


----- VITAL clock ticd delays
        ticd_CLK        : VitalDelayType  := 0 ps;
     
----- VITAL clock-to-pin tisd delays
        tisd_A_CLK              : VitalDelayArrayType(17 downto 0) := (others => 0 ps);
        tisd_B_CLK              : VitalDelayArrayType(17 downto 0) := (others => 0 ps);
        tisd_BCIN_CLK           : VitalDelayArrayType(17 downto 0) := (others => 0 ps);
        tisd_C_CLK              : VitalDelayArrayType(47 downto 0) := (others => 0 ps);
        tisd_CARRYIN_CLK        : VitalDelayType  := 0 ps;
        tisd_CEA_CLK            : VitalDelayType  := 0 ps;
        tisd_CEB_CLK            : VitalDelayType  := 0 ps;
        tisd_CEC_CLK            : VitalDelayType  := 0 ps;
        tisd_CECARRYIN_CLK      : VitalDelayType  := 0 ps;
        tisd_CED_CLK            : VitalDelayType  := 0 ps;
        tisd_CEM_CLK            : VitalDelayType  := 0 ps;
        tisd_CEOPMODE_CLK       : VitalDelayType  := 0 ps;
        tisd_CEP_CLK            : VitalDelayType  := 0 ps;
        tisd_D_CLK              : VitalDelayArrayType(17 downto 0) := (others => 0 ps);
        tisd_GSR_CLK            : VitalDelayType  := 0 ps;
        tisd_OPMODE_CLK         : VitalDelayArrayType(7 downto 0) := (others => 0 ps);
        tisd_PCIN_CLK           : VitalDelayArrayType(47 downto 0) := (others => 0 ps);
        tisd_RSTA_CLK           : VitalDelayType := 0 ps;
        tisd_RSTB_CLK           : VitalDelayType := 0 ps;
        tisd_RSTC_CLK           : VitalDelayType := 0 ps;
        tisd_RSTCARRYIN_CLK     : VitalDelayType := 0 ps;
        tisd_RSTD_CLK           : VitalDelayType := 0 ps;
        tisd_RSTM_CLK           : VitalDelayType := 0 ps;
        tisd_RSTOPMODE_CLK      : VitalDelayType := 0 ps;
        tisd_RSTP_CLK           : VitalDelayType := 0 ps;

----- VITAL period check 
        tperiod_CLK_posedge     : VitalDelayType := 0 ps;

----- VITAL pulse width
        tpw_CLK_negedge         : VitalDelayType := 0 ps;
        tpw_CLK_posedge         : VitalDelayType := 0 ps;

----- VITAL Recovery
        trecovery_GSR_CLK_negedge_posedge : VitalDelayType := 0 ps;

        A0REG           : integer       := 0;
        A1REG           : integer       := 1;
        B0REG           : integer       := 0;
        B1REG           : integer       := 1;
        CARRYINREG      : integer       := 1;
        CARRYINSEL      : string        := "CARRYIN";
        CREG            : integer       := 1;
        DREG            : integer       := 1;
        MREG            : integer       := 1;
        OPMODEREG       : integer       := 1;
        PREG            : integer       := 1;
        RSTTYPE         : string        := "SYNC"
        );


  port(
        BCOUT                   : out std_logic_vector(17 downto 0);
        CARRYOUT                : out std_ulogic;
        P                       : out std_logic_vector(47 downto 0);
        PCOUT                   : out std_logic_vector(47 downto 0);

        A                       : in  std_logic_vector(17 downto 0);
        B                       : in  std_logic_vector(17 downto 0);
        BCIN                    : in  std_logic_vector(17 downto 0);
        C                       : in  std_logic_vector(47 downto 0);
        CARRYIN                 : in  std_ulogic;
        CEA                     : in  std_ulogic;
        CEB                     : in  std_ulogic;
        CEC                     : in  std_ulogic;
        CECARRYIN               : in  std_ulogic;
        CED                     : in  std_ulogic;
        CEM                     : in  std_ulogic;
        CEOPMODE                : in  std_ulogic;
        CEP                     : in  std_ulogic;
        CLK                     : in  std_ulogic;
        D                       : in  std_logic_vector(17 downto 0);
        OPMODE                  : in  std_logic_vector(7 downto 0);
        PCIN                    : in  std_logic_vector(47 downto 0);
        RSTA                    : in  std_ulogic;
        RSTB                    : in  std_ulogic;
        RSTC                    : in  std_ulogic;
        RSTCARRYIN              : in  std_ulogic;
        RSTD                    : in  std_ulogic;
        RSTM                    : in  std_ulogic;
        RSTOPMODE               : in  std_ulogic;
        RSTP                    : in  std_ulogic
      );

  attribute VITAL_LEVEL0 of X_DSP48A :     entity is true;

end X_DSP48A;

-- architecture body                    --

architecture X_DSP48A_V of X_DSP48A is

    procedure invalid_opmode_preg_msg( OPMODE : IN string ; 
                                   CARRYINSEL : IN string ) is
    variable Message : line;
    begin
       Write ( Message, string'("OPMODE Input Warning : The OPMODE "));
       Write ( Message,  OPMODE);
       Write ( Message, string'(" with CARRYINSEL "));
       Write ( Message,  CARRYINSEL);
       Write ( Message, string'(" to X_DSP48A instance "));
       Write ( Message, string'("requires attribute PREG set to 1."));
       assert false report Message.all severity Warning;
       DEALLOCATE (Message);
    end invalid_opmode_preg_msg;

    procedure invalid_opmode_mreg_msg( OPMODE : IN string ; 
                                   CARRYINSEL : IN string ) is
    variable Message : line;
    begin
       Write ( Message, string'("OPMODE Input Warning : The OPMODE "));
       Write ( Message,  OPMODE);
       Write ( Message, string'(" with CARRYINSEL "));
       Write ( Message,  CARRYINSEL);
       Write ( Message, string'(" to X_DSP48A instance "));
       Write ( Message, string'("requires attribute MREG set to 1."));
       assert false report Message.all severity Warning;
       DEALLOCATE (Message);
    end invalid_opmode_mreg_msg;

    procedure invalid_opmode_no_mreg_msg( OPMODE : IN string ; 
                                      CARRYINSEL : IN string ) is
    variable Message : line;
    begin
       Write ( Message, string'("OPMODE Input Warning : The OPMODE "));
       Write ( Message,  OPMODE);
       Write ( Message, string'(" with CARRYINSEL "));
       Write ( Message,  CARRYINSEL);
       Write ( Message, string'(" to X_DSP48A instance "));
       Write ( Message, string'("requires attribute MREG set to 0."));
       assert false report Message.all severity Warning;
       DEALLOCATE (Message);
    end invalid_opmode_no_mreg_msg;


  attribute VITAL_LEVEL0 of X_DSP48A_V : architecture is true;

  TYPE VitalTimingDataArrayType IS ARRAY (NATURAL RANGE <>)
         OF VitalTimingDataType;



  constant SYNC_PATH_DELAY : time := 100 ps;

  constant MAX_ACCUM      : integer    := 48;
  constant MAX_BCOUT      : integer    := 18;
  constant MAX_P          : integer    := 48;
  constant MAX_PCOUT      : integer    := 48;
  constant MSB_ACCUM      : integer    := MAX_ACCUM - 1;
  constant MSB_BCOUT      : integer    := MAX_BCOUT - 1;
  constant MSB_P          : integer    := MAX_P     - 1;
  constant MSB_PCOUT      : integer    := MAX_PCOUT - 1;

  constant MAX_A          : integer    := 18;
  constant MAX_B          : integer    := 18;
  constant MAX_BCIN       : integer    := 18;
  constant MAX_C          : integer    := 48;
  constant MAX_D          : integer    := 18;
  constant MAX_PREADD     : integer    := 18;
  constant MAX_OPMODE     : integer    := 8;
  constant MAX_PCIN       : integer    := 48;
  constant MSB_A          : integer    := MAX_A      - 1;
  constant MSB_B          : integer    := MAX_B      - 1;
  constant MSB_BCIN       : integer    := MAX_BCIN   - 1;
  constant MSB_C          : integer    := MAX_C      - 1;
  constant MSB_D          : integer    := MAX_D      - 1;
  constant MSB_PREADD     : integer    := MAX_PREADD - 1;
  constant MSB_OPMODE     : integer    := MAX_OPMODE - 1;
  constant MSB_PCIN       : integer    := MAX_PCIN   - 1;


  constant SHIFT_MUXZ     : integer    := 17;

  signal 	A_ipd		: std_logic_vector(MSB_A downto 0) := (others => '0');
  signal 	B_ipd		: std_logic_vector(MSB_B downto 0) := (others => '0');
  signal 	BCIN_ipd	: std_logic_vector(MSB_BCIN downto 0) := (others => '0');
  signal 	C_ipd		: std_logic_vector(MSB_C downto 0)    := (others => '0');
  signal 	CARRYIN_ipd	: std_ulogic := '0';
  signal 	CEA_ipd		: std_ulogic := '0';
  signal 	CEB_ipd		: std_ulogic := '0';
  signal 	CEC_ipd		: std_ulogic := '0';
  signal 	CECARRYIN_ipd	: std_ulogic := '0';
  signal 	CED_ipd		: std_ulogic := '0';
  signal 	CEM_ipd		: std_ulogic := '0';
  signal 	CEOPMODE_ipd	: std_ulogic := '0';
  signal 	CEP_ipd		: std_ulogic := '0';
  signal 	CLK_ipd		: std_ulogic := '0';
  signal 	D_ipd		: std_logic_vector(MSB_D downto 0) := (others => '0');
  signal 	GSR_ipd		: std_ulogic := '0';
  signal 	OPMODE_ipd	: std_logic_vector(MSB_OPMODE downto 0)  := (others => '0');
  signal 	PCIN_ipd	: std_logic_vector(MSB_PCIN downto 0) := (others => '0');
  signal 	RSTA_ipd	: std_ulogic := '0';
  signal 	RSTB_ipd	: std_ulogic := '0';
  signal 	RSTC_ipd	: std_ulogic := '0';
  signal 	RSTCARRYIN_ipd	: std_ulogic := '0';
  signal 	RSTD_ipd	: std_ulogic := '0';
  signal 	RSTM_ipd	: std_ulogic := '0';
  signal 	RSTOPMODE_ipd	: std_ulogic := '0';
  signal 	RSTP_ipd	: std_ulogic := '0';

  signal 	A_dly		: std_logic_vector(MSB_A downto 0) := (others => '0');
  signal 	B_dly		: std_logic_vector(MSB_B downto 0) := (others => '0');
  signal 	BCIN_dly	: std_logic_vector(MSB_BCIN downto 0) := (others => '0');
  signal 	C_dly		: std_logic_vector(MSB_C downto 0)    := (others => '0');
  signal 	CARRYIN_dly	: std_ulogic := '0';
  signal 	CEA_dly		: std_ulogic := '0';
  signal 	CEB_dly		: std_ulogic := '0';
  signal 	CEC_dly		: std_ulogic := '0';
  signal 	CECARRYIN_dly	: std_ulogic := '0';
  signal 	CED_dly		: std_ulogic := '0';
  signal 	CEM_dly		: std_ulogic := '0';
  signal 	CEOPMODE_dly	: std_ulogic := '0';
  signal 	CEP_dly		: std_ulogic := '0';
  signal 	CLK_dly		: std_ulogic := '0';
  signal 	D_dly		: std_logic_vector(MSB_D downto 0) := (others => '0');
  signal 	GSR_dly		: std_ulogic := '0';
  signal 	OPMODE_dly	: std_logic_vector(MSB_OPMODE downto 0)  := (others => '0');
  signal 	PCIN_dly	: std_logic_vector(MSB_PCIN downto 0) := (others => '0');
  signal 	RSTA_dly	: std_ulogic := '0';
  signal 	RSTB_dly	: std_ulogic := '0';
  signal 	RSTC_dly	: std_ulogic := '0';
  signal 	RSTCARRYIN_dly	: std_ulogic := '0';
  signal 	RSTD_dly	: std_ulogic := '0';
  signal 	RSTM_dly	: std_ulogic := '0';
  signal 	RSTOPMODE_dly	: std_ulogic := '0';
  signal 	RSTP_dly	: std_ulogic := '0';


  signal	BCOUT_zd	: std_logic_vector(MSB_BCOUT downto 0) := (others => '0');
  signal 	CARRYOUT_zd	: std_ulogic := '0';
  signal	P_zd		: std_logic_vector(MSB_P downto 0) := (others => '0');
  signal	PCOUT_zd	: std_logic_vector(MSB_PCOUT downto 0) := (others => '0');
  
  --- Internal Signal Declarations
  signal	qa_o_reg1	: std_logic_vector(MSB_A downto 0) := (others => '0');
  signal	qa_o_reg2	: std_logic_vector(MSB_A downto 0) := (others => '0');
  signal	qa_o_mux	: std_logic_vector(MSB_A downto 0) := (others => '0');

  signal	b_o_mux		: std_logic_vector(MSB_B downto 0) := (others => '0');
  signal	qb_o_reg1	: std_logic_vector(MSB_B downto 0) := (others => '0');
  signal	qb_o_reg2	: std_logic_vector(MSB_B downto 0) := (others => '0');
  signal	qb_o_mux0	: std_logic_vector(MSB_B downto 0) := (others => '0');
  signal	qb_o_mux	: std_logic_vector(MSB_B downto 0) := (others => '0');

  signal	qc_o_reg        : std_logic_vector(MSB_C downto 0) := (others => '0');
  signal	qc_o_mux	: std_logic_vector(MSB_C downto 0) := (others => '0');

  signal	qd_o_reg        : std_logic_vector(MSB_D downto 0) := (others => '0');
  signal	qd_o_mux	: std_logic_vector(MSB_D downto 0) := (others => '0');

  signal	preadd		: std_logic_vector(MSB_PREADD downto 0) := (others => '0');
  signal	mux_preadd	: std_logic_vector(MSB_PREADD downto 0) := (others => '0');

  signal	mult_o_int	: std_logic_vector((MSB_A + MSB_B + 1) downto 0) := (others => '0');
  signal	mult_o_reg	: std_logic_vector((MSB_A + MSB_B + 1) downto 0) := (others => '0');
  signal	mult_o_mux	: std_logic_vector((MSB_A + MSB_B + 1) downto 0) := (others => '0');

  signal	opmode_o_reg	: std_logic_vector(MSB_OPMODE downto 0) := (others => '0');
  signal	opmode_o_mux	: std_logic_vector(MSB_OPMODE downto 0) := (others => '0');

  signal	muxx_o_mux	: std_logic_vector(MSB_P downto 0) := (others => '0');
  signal	muxy_o_mux	: std_logic_vector(MSB_P downto 0) := (others => '0');
  signal	muxz_o_mux	: std_logic_vector(MSB_P downto 0) := (others => '0');

  signal	subtract_o_reg	: std_ulogic := '0';
  signal	subtract_o_mux	: std_ulogic := '0';

  signal	carryinsel_o_reg	: std_ulogic := '0';
  signal	carryinsel_o_mux	: std_ulogic := '0';

  signal	qcarryin_o_reg1	: std_ulogic := '0';
  signal	carryin0_o_mux	: std_ulogic := '0';
  signal	carryin1_o_mux	: std_ulogic := '0';
  signal	carryin2_o_mux	: std_ulogic := '0';

  signal	qcarryin_o_reg2	: std_ulogic := '0';

  signal	carryin_o_mux	: std_ulogic := '0';

  signal	accum_o		: std_logic_vector(MSB_P downto 0) := (others => '0');
  signal	qp_o_reg	: std_logic_vector(MSB_P downto 0) := (others => '0');
  signal	qp_o_mux	: std_logic_vector(MSB_P downto 0) := (others => '0');

  signal	add_i_int      : std_logic_vector(47 downto 0) := (others => '0');
  signal	add_o_int      : std_logic_vector(47 downto 0) := (others => '0');

  signal	reg_p_int         : std_logic_vector(47 downto 0) := (others => '0');
  signal	p_o_int         : std_logic_vector(47 downto 0) := (others => '0');

  signal	subtract1_o_int : std_ulogic := '0';
  signal	carryinsel1_o_int : std_logic_vector(1 downto 0) := (others => '0');
  signal	carry1_o_int     : std_ulogic := '0';
  signal	carry2_o_int     : std_ulogic := '0';


  signal	output_x_sig	  : std_ulogic := '0';

  signal	RST_META          : std_ulogic := '0';

  signal	DefDelay          : time := 10 ps;

  signal	rst_async_flag    : std_ulogic := '0';
  signal	carryinsel_attr   : std_ulogic := '0';

  signal	opmode_valid_flg  : boolean := true;

begin

  ---------------------
  --  INPUT PATH DELAYs
  ---------------------

  WireDelay     : block
  begin
    A_Delay : for i in MSB_A downto 0 generate
        VitalWireDelay (A_ipd(i),    A(i),        tipd_A(i));
    end generate A_Delay;    

    B_Delay : for i in MSB_B downto 0 generate
        VitalWireDelay (B_ipd(i),    B(i),        tipd_B(i));
    end generate B_Delay;    

    BCIN_Delay : for i in MSB_BCIN downto 0 generate
        VitalWireDelay (BCIN_ipd(i),    BCIN(i),        tipd_BCIN(i));
    end generate BCIN_Delay;    

    C_Delay : for i in MSB_C downto 0 generate
        VitalWireDelay (C_ipd(i),    C(i),        tipd_C(i));
    end generate C_Delay;    

    VitalWireDelay (CARRYIN_ipd,    CARRYIN,    tipd_CARRYIN);

    VitalWireDelay (CEA_ipd,        CEA,        tipd_CEA);
    VitalWireDelay (CEB_ipd,        CEB,        tipd_CEB);
    VitalWireDelay (CEC_ipd,        CEC,        tipd_CEC);
    VitalWireDelay (CECARRYIN_ipd,  CECARRYIN,  tipd_CECARRYIN);
    VitalWireDelay (CED_ipd,        CED,        tipd_CED);
    VitalWireDelay (CEM_ipd,        CEM,        tipd_CEM);
    VitalWireDelay (CEOPMODE_ipd,   CEOPMODE,   tipd_CEOPMODE);
    VitalWireDelay (CEP_ipd,        CEP,        tipd_CEP);

    VitalWireDelay (CLK_ipd,        CLK,        tipd_CLK);
    VitalWireDelay (GSR_ipd,        GSR,        tipd_GSR);

    D_Delay : for i in MSB_D downto 0 generate
        VitalWireDelay (D_ipd(i),    D(i),        tipd_D(i));
    end generate D_Delay;    

    OPMODE_delay : for i in MSB_OPMODE downto 0 generate
        VitalWireDelay (OPMODE_ipd(i),     OPMODE(i),    tipd_OPMODE(i));    
    end generate OPMODE_delay;

    Pin_Delay : for i in MSB_PCIN downto 0 generate
        VitalWireDelay (PCIN_ipd(i),     PCIN(i),    tipd_PCIN(i));
    end generate Pin_Delay;    

    VitalWireDelay (RSTA_ipd,        RSTA,        tipd_RSTA);
    VitalWireDelay (RSTB_ipd,        RSTB,        tipd_RSTB);
    VitalWireDelay (RSTC_ipd,        RSTC,        tipd_RSTC);
    VitalWireDelay (RSTCARRYIN_ipd,  RSTCARRYIN,  tipd_RSTCARRYIN);
    VitalWireDelay (RSTD_ipd,        RSTD,        tipd_RSTD);
    VitalWireDelay (RSTM_ipd,        RSTM,        tipd_RSTM);
    VitalWireDelay (RSTOPMODE_ipd,   RSTOPMODE,   tipd_RSTOPMODE);
    VitalWireDelay (RSTP_ipd,        RSTP,        tipd_RSTP);

  end block;


  SignalDelay : block
  begin
    A_Delay : for i in MSB_A downto 0 generate
        VitalSignalDelay (A_dly(i),     A_ipd(i),    tisd_A_CLK(i));
    end generate A_Delay;

    B_Delay : for i in MSB_B downto 0 generate
        VitalSignalDelay (B_dly(i),     B_ipd(i),    tisd_B_CLK(i));
    end generate B_Delay;

    BCIN_Delay : for i in MSB_BCIN downto 0 generate
        VitalSignalDelay (BCIN_dly(i),     BCIN_ipd(i),    tisd_BCIN_CLK(i));
    end generate BCIN_Delay;

    C_Delay : for i in MSB_C downto 0 generate
        VitalSignalDelay (C_dly(i),     C_ipd(i),    tisd_C_CLK(i));
    end generate C_Delay;

    VitalSignalDelay (CARRYIN_dly,    CARRYIN_ipd,    tisd_CARRYIN_CLK);

    VitalSignalDelay (CEA_dly,        CEA_ipd,        tisd_CEA_CLK);
    VitalSignalDelay (CEB_dly,        CEB_ipd,        tisd_CEB_CLK);
    VitalSignalDelay (CEC_dly,        CEC_ipd,        tisd_CEC_CLK);
    VitalSignalDelay (CECARRYIN_dly,  CECARRYIN_ipd,  tisd_CECARRYIN_CLK);
    VitalSignalDelay (CED_dly,        CED_ipd,        tisd_CED_CLK);
    VitalSignalDelay (CEM_dly,        CEM_ipd,        tisd_CEM_CLK);
    VitalSignalDelay (CEOPMODE_dly,   CEOPMODE_ipd,   tisd_CEOPMODE_CLK);
    VitalSignalDelay (CEP_dly,        CEP_ipd,        tisd_CEP_CLK);

    VitalSignalDelay (CLK_dly,        CLK_ipd,        ticd_CLK);

    D_Delay : for i in MSB_D downto 0 generate
        VitalSignalDelay (D_dly(i),     D_ipd(i),    tisd_D_CLK(i));
    end generate D_Delay;

    VitalSignalDelay (GSR_dly,        GSR_ipd,        tisd_GSR_CLK);

    OPMODE_Delay : for i in MSB_OPMODE downto 0 generate
        VitalSignalDelay (OPMODE_dly(i),     OPMODE_ipd(i),    tisd_OPMODE_CLK(i));
    end generate OPMODE_Delay;

    PCIN_Delay : for i in MSB_PCIN downto 0 generate
        VitalSignalDelay (PCIN_dly(i),     PCIN_ipd(i),    tisd_PCIN_CLK(i));
    end generate PCIN_Delay;

    VitalSignalDelay (RSTA_dly,       RSTA_ipd,       tisd_RSTA_CLK);
    VitalSignalDelay (RSTB_dly,       RSTB_ipd,       tisd_RSTB_CLK);
    VitalSignalDelay (RSTC_dly,       RSTC_ipd,       tisd_RSTC_CLK);
    VitalSignalDelay (RSTCARRYIN_dly,   RSTCARRYIN_ipd,   tisd_RSTCARRYIN_CLK);
    VitalSignalDelay (RSTD_dly,       RSTD_ipd,       tisd_RSTD_CLK);
    VitalSignalDelay (RSTM_dly,       RSTM_ipd,       tisd_RSTM_CLK);
    VitalSignalDelay (RSTOPMODE_dly,  RSTOPMODE,      tisd_RSTOPMODE_CLK);
    VitalSignalDelay (RSTP_dly,       RSTP_ipd,       tisd_RSTP_CLK);


  end block;

  --------------------
  --  BEHAVIOR SECTION
  --------------------


--####################################################################
--#####                        Initialization                      ###
--####################################################################
  prcs_init:process
  begin

-------- A0REG/A1REG  & B0REG/B1REG ------

     if((A0REG /= 0) and (A0REG /= 1 )) then
        assert false
        report "Attribute Syntax Error: Legal values for attribute A0REG on instance X_DSP48A are 0 or 1."
        severity Failure;
     end if;

     if((A1REG /= 0) and (A1REG /= 1 )) then
        assert false
        report "Attribute Syntax Error: Legal values for attribute A1REG on instance X_DSP48A are 0 or 1."
        severity Failure;
     end if;

     if((B0REG /= 0) and (B0REG /= 1 )) then
        assert false
        report "Attribute Syntax Error: Legal values for attribute B0REG on instance X_DSP48A are 0 or 1."
        severity Failure;
     end if;

     if((B1REG /= 0) and (B1REG /= 1 )) then
        assert false
        report "Attribute Syntax Error: Legal values for attribute B1REG on instance X_DSP48A are 0 or 1."
        severity Failure;
     end if;

-------- RSTTYPE ----------

     if((RSTTYPE = "SYNC") or (RSTTYPE = "sync")) then
        rst_async_flag  <= '0';
     elsif((RSTTYPE = "ASYNC") or (RSTTYPE = "async")) then
        rst_async_flag  <= '1';
     else
        assert false
        report "Attribute Syntax Error: The attribute RSTTYPE on X_DSP48A is incorrect. Legal values for this attribute are SYNC or ASYNC."
        severity Failure;
     end if;

-------- CARRYINSEL ---------

     if((CARRYINSEL = "CARRYIN") or (CARRYINSEL = "carryin")) then
        carryinsel_attr  <= '0';
     elsif((CARRYINSEL = "OPMODE5") or (CARRYINSEL = "opmode5")) then
        carryinsel_attr  <= '1';
     else
        assert false
        report "Attribute Syntax Error: The attribute RSTTYPE on X_DSP48A is incorrect. Legal values for this attribute are SYNC or ASYNC."
        severity Failure;
     end if;

     wait;

  end process prcs_init;
--####################################################################
--#####      Input Register A with two levels of registers         ###
--####################################################################

  prcs_qa_2lvl:process(CLK_dly, GSR_dly, RSTA_dly)
  begin
      if(GSR_dly = '1') then
          qa_o_reg1 <= ( others => '0');
          qa_o_reg2 <= ( others => '0');
      elsif (GSR_dly = '0') then
         case rst_async_flag is
            when '1' => 
            -----------// async reset
               if(RSTA_dly = '1') then
                  qa_o_reg1 <= ( others => '0');
                  qa_o_reg2 <= ( others => '0');
               elsif ((RSTA_dly = '0') and (CEA_dly = '1')) then
                  if(rising_edge(CLK_dly)) then
                     qa_o_reg2 <= qa_o_reg1;
                     qa_o_reg1 <= A_dly;
                  end if;
               end if;
            when '0' => 
            -----------// sync reset
               if(rising_edge(CLK_dly)) then
                  if(RSTA_dly = '1') then
                     qa_o_reg1 <= ( others => '0');
                     qa_o_reg2 <= ( others => '0');
                  elsif ((RSTA_dly = '0') and (CEA_dly = '1')) then
                      qa_o_reg2 <= qa_o_reg1;
                      qa_o_reg1 <= A_dly;
                  end if;
               end if;
            when others => null;
         end case;
      end if;
  end process prcs_qa_2lvl;
------------------------------------------------------------------
  prcs_qa_o_mux:process(A_dly, qa_o_reg1, qa_o_reg2)
  begin
     if((A0REG=0) and (A1REG=0)) then
        qa_o_mux <= A_dly;
     elsif(((A0REG=1) and (A1REG=0)) or ((A0REG=0) and (A1REG=1))) then
        qa_o_mux <= qa_o_reg1;
     elsif((A0REG=1) and (A1REG=1)) then
        qa_o_mux <= qa_o_reg2;
     end if; 
  end process prcs_qa_o_mux;

--####################################################################
--#####    Input Register B with two levels of registers and a mux ###
--####################################################################

---- BCIN /B_INPUT is for simprim only

 prcs_b_bcin:process(B_dly, BCIN_dly)
  begin
     if(B_INPUT ="DIRECT") then
        b_o_mux <= B_dly;
     elsif(B_INPUT ="CASCADE") then
        b_o_mux <= BCIN_dly;
     else
        assert false
        report "Attribute Syntax Error: The allowed values for B_INPUT on X_DSP48A instance are DIRECT or CASCADE."
        severity Failure;
     end if;

  end process prcs_b_bcin;

------------------------------------------------------------------

 prcs_qb_2lvl:process(CLK_dly, GSR_dly, RSTB_dly)
  begin
      if(GSR_dly = '1') then
          qb_o_reg1 <= ( others => '0');
          qb_o_reg2 <= ( others => '0');
      elsif (GSR_dly = '0') then
         case rst_async_flag is
            when '1' => 
            -----------// async reset
               if(RSTB_dly = '1') then
                  qb_o_reg1 <= ( others => '0');
                  qb_o_reg2 <= ( others => '0');
               elsif ((RSTB_dly = '0') and (CEB_dly = '1')) then
                   if(rising_edge(CLK_dly)) then
                      qb_o_reg2 <= mux_preadd;
                      qb_o_reg1 <= b_o_mux;
                   end if;
                end if;
            when '0' => 
            -----------// sync reset
               if(rising_edge(CLK_dly)) then
                  if(RSTB_dly = '1') then
                     qb_o_reg1 <= ( others => '0');
                     qb_o_reg2 <= ( others => '0');
                  elsif ((RSTB_dly = '0') and (CEB_dly = '1')) then
                      qb_o_reg2 <= mux_preadd;
                      qb_o_reg1 <= b_o_mux;
                  end if;
               end if;
            when others => null;
         end case;
      end if;
  end process prcs_qb_2lvl;

------- PRE ADD --------------------------------------------------

  prcs_qb_preadd:process(opmode_o_mux, b_o_mux, qd_o_mux, qb_o_reg1)
  begin
     if(((B0REG=0) and (B1REG=0)) or ((B0REG=0) and (B1REG=1))) then
        qb_o_mux0 <= b_o_mux;
        if(opmode_o_mux(6)='0') then
            preadd <= (qd_o_mux + b_o_mux);
         elsif(opmode_o_mux(6)='1') then
            preadd <= (qd_o_mux - b_o_mux);
         end if;
     elsif(((B0REG=1) and (B1REG=1)) or ((B0REG=1) and (B1REG=0))) then
        qb_o_mux0 <= qb_o_reg1;
        if(opmode_o_mux(6)='0') then
            preadd <= (qd_o_mux + qb_o_reg1);
         elsif(opmode_o_mux(6)='1') then
            preadd <= (qd_o_mux - qb_o_reg1);
         end if;
     end if; 
  end process prcs_qb_preadd;

------------------------------------------------------------------

  prcs_preadd_sel:process(opmode_o_mux(4), preadd, qb_o_mux0)
  begin
     if(opmode_o_mux(4)='1') then
        mux_preadd <= preadd;
     elsif(opmode_o_mux(4)='0') then
        mux_preadd <= qb_o_mux0;
     end if;
  end process prcs_preadd_sel;
------------------------------------------------------------------
-- CR 421339
  prcs_qb_o_mux:process(mux_preadd, qb_o_reg2)
  begin
     if(((B0REG=0) and (B1REG=0)) or ((B0REG=1) and (B1REG=0))) then
        qb_o_mux <= mux_preadd;
     elsif(((B0REG=1) and (B1REG=1)) or ((B0REG=0) and (B1REG=1))) then
        qb_o_mux <= qb_o_reg2;
     end if; 
  end process prcs_qb_o_mux;

--####################################################################
--#####    Input Register C with 0, 1, level of registers        #####
--####################################################################

  prcs_qc_1lvl:process(CLK_dly, GSR_dly, RSTC_dly)

  begin
      if(GSR_dly = '1') then
         qc_o_reg <= ( others => '0');
      elsif (GSR_dly = '0') then
         case rst_async_flag is
            when '1' => 
            -----------// async reset
               if(RSTC_dly = '1') then
                  qc_o_reg <= ( others => '0');
               elsif((RSTC_dly = '0') and (CEC_dly = '1'))then
                  if(rising_edge(CLK_dly)) then
                     qc_o_reg <= C_dly;
                  end if;
                end if;
            when '0' => 
            -----------// sync reset
               if(rising_edge(CLK_dly)) then
                  if(RSTC_dly = '1') then
                     qc_o_reg <= ( others => '0');
                  elsif ((RSTC_dly = '0') and (CEC_dly = '1')) then
                      qc_o_reg <= C_dly;
                  end if;
               end if;
            when others => null;
         end case;
      end if;
  end process prcs_qc_1lvl;
------------------------------------------------------------------
  prcs_qc_o_mux:process(C_dly, qc_o_reg)
  begin
     case CREG is
      when 0 => qc_o_mux <= C_dly;
      when 1 => qc_o_mux <= qc_o_reg;
      when others =>
           assert false
           report "Attribute Syntax Error: The allowed values for CREG on instace X_DSP48A are 0 or 1"
           severity Failure;
      end case;
  end process prcs_qc_o_mux;

--####################################################################
--#####    Input Register D with 0, 1, level of registers        #####
--####################################################################

  prcs_qd_1lvl:process(CLK_dly, GSR_dly, RSTD_dly)

  begin
      if(GSR_dly = '1') then
         qd_o_reg <= ( others => '0');
      elsif (GSR_dly = '0') then
         case rst_async_flag is
            when '1' => 
            -----------// async reset
               if(RSTD_dly = '1') then
                  qd_o_reg <= ( others => '0');
               elsif((RSTD_dly = '0') and (CED_dly = '1'))then
                  if(rising_edge(CLK_dly)) then
                     qd_o_reg <= D_dly;
                  end if;
                end if;
            when '0' => 
            -----------// sync reset
               if(rising_edge(CLK_dly)) then
                  if(RSTD_dly = '1') then
                     qd_o_reg <= ( others => '0');
                  elsif ((RSTD_dly = '0') and (CED_dly = '1')) then
                      qd_o_reg <= D_dly;
                  end if;
               end if;
            when others => null;
         end case;
      end if;
  end process prcs_qd_1lvl;
------------------------------------------------------------------
  prcs_qd_o_mux:process(D_dly, qd_o_reg)
  begin
     case DREG is
      when 0 => qd_o_mux <= D_dly;
      when 1 => qd_o_mux <= qd_o_reg;
      when others =>
           assert false
           report "Attribute Syntax Error: The allowed values for DREG on instace X_DSP48A are 0 or 1"
           severity Failure;
      end case;
  end process prcs_qd_o_mux;

--####################################################################
--#####                     Multiplier                           #####
--####################################################################
  prcs_mult:process(qa_o_mux, qb_o_mux)
  begin
     mult_o_int <=  qa_o_mux * qb_o_mux;
  end process prcs_mult;
------------------------------------------------------------------
  prcs_mult_reg:process(CLK_dly, GSR_dly, RSTM_dly)
  begin
      if(GSR_dly = '1') then
         mult_o_reg <= ( others => '0');
      elsif (GSR_dly = '0') then
         case rst_async_flag is
            when '1' => 
            -----------// async reset
               if(RSTM_dly = '1') then
                  mult_o_reg <= ( others => '0');
               elsif((RSTM_dly = '0') and (CEM_dly = '1'))then
                  if(rising_edge(CLK_dly)) then
                     mult_o_reg <= mult_o_int;
                  end if;
                end if;
            when '0' => 
            -----------// sync reset
               if(rising_edge(CLK_dly)) then
                  if(RSTM_dly = '1') then
                     mult_o_reg <= ( others => '0');
                  elsif ((RSTM_dly = '0') and (CEM_dly = '1')) then
                      mult_o_reg <= mult_o_int;
                  end if;
               end if;
            when others => null;
         end case;
      end if;
  end process prcs_mult_reg;
------------------------------------------------------------------
  prcs_mult_mux:process(mult_o_reg, mult_o_int)
  begin
     case MREG is
      when 0 => mult_o_mux <= mult_o_int;
      when 1 => mult_o_mux <= mult_o_reg;
      when others =>
           assert false
           report "Attribute Syntax Error: The allowed values for MREG on instance X_DSP48A are 0 or 1"
           severity Failure;
      end case;
  end process prcs_mult_mux;

--####################################################################
--#####     OpMode Register with 0, 1, level of registers        #####
--####################################################################

  prcs_opmode_reg:process(CLK_dly, GSR_dly, RSTOPMODE_dly)
  begin
      if(GSR_dly = '1') then
         opmode_o_reg <= ( others => '0');
      elsif (GSR_dly = '0') then
         case rst_async_flag is
            when '1' => 
            -----------// async reset
               if(RSTOPMODE_dly = '1') then
                  opmode_o_reg <= ( others => '0');
               elsif((RSTOPMODE_dly = '0') and (CEOPMODE_dly = '1'))then
                  if(rising_edge(CLK_dly)) then
                     opmode_o_reg <= OPMODE_dly;
                  end if;
                end if;
            when '0' => 
            -----------// sync reset
               if(rising_edge(CLK_dly)) then
                  if(RSTOPMODE_dly = '1') then
                     opmode_o_reg <= ( others => '0');
                  elsif ((RSTOPMODE_dly = '0') and (CEOPMODE_dly = '1')) then
                      opmode_o_reg <= OPMODE_dly;
                  end if;
               end if;
            when others => null;
         end case;
      end if;
  end process prcs_opmode_reg;
------------------------------------------------------------------
  prcs_opmode_mux:process(opmode_o_reg, OPMODE_dly)
  begin
     case OPMODEREG is
      when 0 => opmode_o_mux <= OPMODE_dly;
      when 1 => opmode_o_mux <= opmode_o_reg;
      when others =>
           assert false
           report "Attribute Syntax Error: The allowed values for OPMODEREG are 0 or 1"
           severity Failure;
      end case;
  end process prcs_opmode_mux;
--####################################################################
--#####                        MUX_XYZ                           #####
--####################################################################
  prcs_mux_xz:process(opmode_o_mux, qp_o_mux, qa_o_mux, qb_o_mux, mult_o_mux, 
                       qc_o_mux, qd_o_mux, PCIN_dly, output_x_sig)
  begin
    if(output_x_sig = '1') then
      muxx_o_mux(MSB_P downto 0) <= ( others => 'X');
      muxy_o_mux(MSB_P downto 0) <= ( others => 'X');
      muxz_o_mux(MSB_P downto 0) <= ( others => 'X');
    elsif(output_x_sig = '0') then
    --MUX_X -----
       case opmode_o_mux(1 downto 0) is
         when "00" => muxx_o_mux <= ( others => '0');
         when "01" => muxx_o_mux((MAX_A + MAX_B - 1) downto 0) <= mult_o_mux;
                   if(mult_o_mux(MAX_A + MAX_B - 1) = '1') then
                     muxx_o_mux(MSB_P downto (MAX_A + MAX_B)) <=  ( others => '1');
                   elsif (mult_o_mux(MSB_A + MSB_B + 1) = '0') then 
                     muxx_o_mux(MSB_P downto (MAX_A + MAX_B)) <=  ( others => '0');
                   end if;

         when "10" => muxx_o_mux <= qp_o_mux;
         when "11" => muxx_o_mux(MSB_P downto 0) <=  (qd_o_mux((MSB_P - (MAX_A + MAX_B)) downto 0) & qa_o_mux & qb_o_mux);
      when others => null;
       end case;

    --MUX_Z -----
       case opmode_o_mux(3 downto 2) is
         when "00" => muxz_o_mux <= ( others => '0');
         when "01" => muxz_o_mux <= PCIN_dly;
         when "10" => muxz_o_mux <= qp_o_mux;
         when "11" => muxz_o_mux <= qc_o_mux;
         when others => null;
       end case;
    end if;
  end process prcs_mux_xz;

--####################################################################
--#####        CarryIn   1 level of register                     #####
--####################################################################

  prcs_carryinsel_mux:process(opmode_o_mux(5), CARRYIN_dly)
  begin
     if((CARRYINSEL = "CARRYIN") or (CARRYINSEL = "carryin")) then
        carryinsel_o_mux <= CARRYIN_dly;
     elsif((CARRYINSEL = "OPMODE5") or (CARRYINSEL = "opmode5")) then
        carryinsel_o_mux <= opmode_o_mux(5);
     else
        assert false
            report "Attribute Syntax Error: The allowed values for CARRYINSEL on instance X_DSP48A are CARRYIN or OPMODES."
            severity Failure;
     end if;
  end process prcs_carryinsel_mux;
------------------------------------------
  prcs_carryin_reg:process(CLK_dly, GSR_dly, RSTCARRYIN_dly)
  begin
      if(GSR_dly = '1') then
         qcarryin_o_reg1 <= '0';
      elsif (GSR_dly = '0') then
         case rst_async_flag is
            when '1' => 
            -----------// async reset
               if(RSTCARRYIN_dly = '1') then
                  qcarryin_o_reg1 <= '0';
               elsif((RSTCARRYIN_dly = '0') and (CECARRYIN_dly = '1'))then
                  if(rising_edge(CLK_dly)) then
                     qcarryin_o_reg1 <= carryinsel_o_mux;
                  end if;
                end if;
            when '0' => 
            -----------// sync reset
               if(rising_edge(CLK_dly)) then
                  if(RSTCARRYIN_dly = '1') then
                     qcarryin_o_reg1 <= '0';
                  elsif ((RSTCARRYIN_dly = '0') and (CECARRYIN_dly = '1')) then
                      qcarryin_o_reg1 <= carryinsel_o_mux;
                  end if;
               end if;
            when others => null;
         end case;
      end if;
  end process prcs_carryin_reg;
------------------------------------------------------------------
  prcs_carryin_mux:process(qcarryin_o_reg1, carryinsel_o_mux)
  begin
     case CARRYINREG is
       when 0 => carryin_o_mux <= carryinsel_o_mux;
       when 1 => carryin_o_mux <= qcarryin_o_reg1;
       when others =>
            assert false
            report "Attribute Syntax Error: The allowed values for CARRYINREG on instance X_DSP48A are 0 or 1"
            severity Failure;
     end case;
  end process prcs_carryin_mux;
------------------------------------------------------------------
--####################################################################
--#####         Output register P with 1 level of register       #####
--####################################################################

  prcs_qp_reg:process(CLK_dly, GSR_dly, RSTP_dly)
  begin
      if(GSR_dly = '1') then
         qp_o_reg <= ( others => '0');
      elsif (GSR_dly = '0') then
         case rst_async_flag is
            when '1' => 
            -----------// async reset
               if(RSTP_dly = '1') then
                  qp_o_reg <= ( others => '0');
               elsif((RSTP_dly = '0') and (CEP_dly = '1'))then
                  if(rising_edge(CLK_dly)) then
                     qp_o_reg <= accum_o;
                  end if;
                end if;
            when '0' => 
            -----------// sync reset
               if(rising_edge(CLK_dly)) then
                  if(RSTP_dly = '1') then
                     qp_o_reg <= ( others => '0');
                  elsif ((RSTP_dly = '0') and (CEP_dly = '1')) then
                      qp_o_reg <= accum_o;
                  end if;
               end if;
            when others => null;
         end case;
      end if;
  end process prcs_qp_reg;
------------------------------------------------------------------
  prcs_qp_mux:process(accum_o, qp_o_reg)
  begin
     case PREG is
       when 0 => qp_o_mux <= accum_o;
       when 1 => qp_o_mux <= qp_o_reg;
       when others =>
           assert false
           report "Attribute Syntax Error: The allowed values for PREG on instace X_MDPS1 are 0 or 1"
           severity Failure;
     end case;
   
  end process prcs_qp_mux;
--####################################################################
--#####                   ZERO_DELAY_OUTPUTS                     #####
--####################################################################
  prcs_zero_delay_outputs:process(qb_o_mux, qp_o_mux)
  begin
    BCOUT_zd <= qb_o_mux;
    P_zd     <= qp_o_mux;
    PCOUT_zd <= qp_o_mux;
  end process prcs_zero_delay_outputs;

--####################################################################
--#####                OPMODE DRC                                #####
--####################################################################

  prcs_opmode_drc:process(opmode_o_mux, carryinsel_attr,
                       muxx_o_mux, muxz_o_mux, carryin_o_mux)
  variable Message : line;
  variable invalid_opmode_flg : boolean := true;
  variable opmode_valid_var : boolean := true;
  variable opmode_carryinsel_var : std_logic_vector(8 downto 0) := (others => '0');
  variable accum_o_tmp : std_logic_vector(MAX_ACCUM downto 0) := (others => '0');
  begin
      opmode_carryinsel_var := opmode_o_mux & carryinsel_attr;
      case opmode_carryinsel_var is
               when "000000000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "000100000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "001000000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "001100000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "010000000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "010100000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "011000000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "011100000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "100000000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "100100000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "101000000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "101100000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "110000000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "110100000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "111000000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "111100000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "000000001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "000100001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "001000001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "001100001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "010000001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "010100001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "011000001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "011100001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "100000001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "100100001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "101000001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "101100001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "110000001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "110100001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "111000001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "111100001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "000000100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "000000101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "000100100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "000100101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "001000100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "001000101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "001100100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "001100101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "010000100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "010000101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "010100100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "010100101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "011000100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "011000101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "011100100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "011100101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "100000100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "100000101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "100100100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "100100101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "101000100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "101000101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "101100100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "101100101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "110000100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "110000101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "110100100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "110100101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "111000100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "111000101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "111100100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "111100101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "000000110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "000000111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "001000110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "001000111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "010000110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "010000111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "011000110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "011000111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "100000110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "100000111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "101000110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "101000111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "110000110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "110000111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "111000110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "111000111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "000100110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "000100111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "001100110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "001100111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "010100110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "010100111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "011100110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "011100111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "100100110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "100100111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "101100110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "101100111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "110100110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "110100111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "111100110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "111100111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "000000010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "000000011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "001000010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "001000011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "010000010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "010000011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "011000010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "011000011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "100000010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "100000011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "101000010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "101000011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "110000010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "110000011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "111000010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "111000011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "000100010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "000100011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "001100010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "001100011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "100100010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "100100011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "101100010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "101100011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "010100010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "010100011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "011100010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "011100011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "110100010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "110100011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "111100010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "111100011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "000001000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "000001001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "000101000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "000101001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "001001000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "001001001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "001101000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "001101001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "010001000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "010001001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "010101000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "010101001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "011001000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "011001001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "011101000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "011101001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "100001000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "100001001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "100101000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "100101001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "101001000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "101001001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "101101000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "101101001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "110001000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "110001001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "110101000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "110101001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "111001000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "111001001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "111101000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "111101001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "000001100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "000001101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "000101100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "000101101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "001001100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "001001101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "001101100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "001101101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "010001100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "010001101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "010101100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "010101101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "011001100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "011001101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "011101100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "011101101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "100001100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "100001101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "100101100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "100101101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "101001100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "101001101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "101101100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "101101101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "110001100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "110001101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "110101100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "110101101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "111001100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "111001101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "111101100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "111101101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "000001110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "000001111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "001001110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "001001111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "010001110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "010001111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "011001110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "011001111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "100001110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "100001111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "101001110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "101001111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "110001110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "110001111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "111001110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "111001111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "000101110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "000101111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "001101110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "001101111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "010101110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "010101111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "011101110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "011101111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "100101110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "100101111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "101101110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "101101111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "110101110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "110101111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "111101110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "111101111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "000001010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "000001011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "001001010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "001001011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "010001010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "010001011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "011001010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "011001011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "100001010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "100001011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "101001010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "101001011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "110001010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "110001011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "111001010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "111001011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "000101010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "000101011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "001101010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "001101011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "100101010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "100101011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "101101010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "101101011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "010101010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "010101011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "011101010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "011101011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "110101010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "110101011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "111101010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "111101011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "000010000" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "000010001" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "000110000" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "000110001" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "001010000" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "001010001" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "001110000" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "001110001" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "010010000" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "010010001" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "010110000" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "010110001" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "011010000" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "011010001" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "011110000" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "011110001" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "100010000" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "100010001" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "100110000" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "100110001" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "101010000" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "101010001" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "101110000" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "101110001" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "110010000" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "110010001" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "110110000" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "110110001" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "111010000" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "111010001" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "111110000" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "111110001" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "000010100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "000010101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "000110100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "000110101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "001010100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "001010101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "001110100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "001110101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "010010100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "010010101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "010110100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "010110101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "011010100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "011010101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "011110100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "011110101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "100010100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "100010101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "100110100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "100110101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "101010100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "101010101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "101110100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "101110101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "110010100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "110010101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "110110100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "110110101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "111010100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "111010101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "111110100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "111110101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "000010110" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "000010111" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "001010110" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "001010111" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "010010110" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "010010111" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "011010110" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "011010111" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "100010110" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "100010111" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "101010110" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "101010111" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "110010110" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "110010111" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "111010110" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "111010111" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "000110110" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "000110111" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "001110110" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "001110111" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "010110110" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "010110111" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "011110110" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "011110111" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "100110110" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "100110111" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "101110110" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "101110111" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "110110110" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "110110111" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "111110110" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "111110111" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "000010010" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "000010011" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "001010010" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "001010011" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "010010010" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "010010011" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "011010010" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "011010011" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "100010010" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "100010011" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "101010010" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "101010011" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "110010010" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "110010011" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "111010010" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "111010011" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "000110010" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "000110011" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "001110010" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "001110011" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "100110010" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "100110011" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "101110010" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "101110011" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "010110010" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "010110011" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "011110010" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "011110011" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "110110010" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "110110011" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "111110010" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "111110011" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "000011000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "000011001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "000111000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "000111001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "001011000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "001011001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "001111000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "001111001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "010011000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "010011001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "010111000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "010111001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "011011000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "011011001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "011111000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "011111001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "100011000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "100011001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "100111000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "100111001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "101011000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "101011001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "101111000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "101111001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "110011000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "110011001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "110111000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "110111001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "111011000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "111011001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "111111000" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "111111001" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "000011100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "000011101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "000111100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "000111101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "001011100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "001011101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "001111100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "001111101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "010011100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "010011101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "010111100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "010111101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "011011100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "011011101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "011111100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "011111101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "100011100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "100011101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "100111100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "100111101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "101011100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "101011101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "101111100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "101111101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "110011100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "110011101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "110111100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "110111101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "111011100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "111011101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "111111100" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "111111101" => 
                          if (PREG /= 1) then
                             accum_o <= (others => 'X');
                             opmode_valid_var := false;
                             if(invalid_opmode_flg) then
                                invalid_opmode_preg_msg(slv_to_str(opmode_o_mux), CARRYINSEL);
                             end if;
                             invalid_opmode_flg := false;
                          else
                             invalid_opmode_flg := true;
                             opmode_valid_var := true;
                             output_x_sig <= '0';
                          end if;
               when "000011110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "000011111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "001011110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "001011111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "010011110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "010011111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "011011110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "011011111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "100011110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "100011111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "101011110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "101011111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "110011110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "110011111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "111011110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "111011111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "000011010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "000011011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "001011010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "001011011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "010011010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "010011011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "011011010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "011011011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "100011010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "100011011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "101011010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "101011011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "110011010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "110011011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "111011010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "111011011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "000111010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "000111011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "001111010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "001111011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "100111010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "100111011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "101111010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "101111011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "010111010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "010111011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "011111010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "011111011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "110111010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "110111011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "111111010" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "111111011" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "000111110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "000111111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "001111110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "001111111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "010111110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "010111111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "011111110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "011111111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "100111110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "100111111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "101111110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "101111111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "110111110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "110111111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "111111110" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
               when "111111111" => 
                          invalid_opmode_flg := true ;
                          opmode_valid_var := true ;
                          output_x_sig <= '0';
                when others    =>
                          if(invalid_opmode_flg = true) then
                             invalid_opmode_flg := false;
                             opmode_valid_var := false;
                             output_x_sig <= '1';
                             accum_o <= (others => 'X');
                             Write ( Message, string'("OPMODE Input Warning : The OPMODE "));
                             Write ( Message,  slv_to_str(opmode_o_mux));
                             Write ( Message, string'(" with CARRYINSEL  "));
                             Write ( Message,  CARRYINSEL);
                             Write ( Message, string'(" to DSP48A instance"));
                             Write ( Message, string'(" is invalid for that specific OPMODE."));
                             assert false report Message.all severity Warning;
                             DEALLOCATE (Message);
                           end if;
      end case;

      opmode_valid_flg <= opmode_valid_var;

      if(opmode_valid_var) then 
         if(opmode_o_mux(7) = '0') then
            accum_o_tmp :=  ('0'& muxz_o_mux) + ('0'& muxx_o_mux) + carryin_o_mux;
         elsif(opmode_o_mux(7) = '1') then
            accum_o_tmp :=  ('0'& muxz_o_mux) - ('0'& muxx_o_mux) - carryin_o_mux;
         end if;

         accum_o <= accum_o_tmp(MSB_ACCUM downto 0);
         CARRYOUT_zd <= accum_o_tmp(MAX_ACCUM);
      end if;
  end process prcs_opmode_drc;

--####################################################################
--#####                   TIMING CHECKS                          #####
--####################################################################
  prcs_tmngchk:process

  variable Tmkr_A_CLK_posedge  : VitalTimingDataArrayType(17 downto 0);
  variable Tviol_A_CLK_posedge : std_logic_vector(17 downto 0 ) := (others => '0');
  variable Tmkr_B_CLK_posedge  : VitalTimingDataArrayType(17 downto 0);
  variable Tviol_B_CLK_posedge : std_logic_vector(17 downto 0 ) := (others => '0');
  variable Tmkr_BCIN_CLK_posedge  : VitalTimingDataArrayType(17 downto 0);
  variable Tviol_BCIN_CLK_posedge : std_logic_vector(17 downto 0 ) := (others => '0');
  variable Tmkr_CARRYIN_CLK_posedge : VitalTimingDataType := VitalTimingDataInit;
  variable Tviol_CARRYIN_CLK_posedge : std_ulogic := '0';
  variable Tmkr_CEA_CLK_posedge : VitalTimingDataType := VitalTimingDataInit;
  variable Tviol_CEA_CLK_posedge : std_ulogic := '0';
  variable Tmkr_CEB_CLK_posedge : VitalTimingDataType := VitalTimingDataInit;
  variable Tviol_CEB_CLK_posedge : std_ulogic := '0';
  variable Tmkr_CEC_CLK_posedge : VitalTimingDataType := VitalTimingDataInit;
  variable Tviol_CEC_CLK_posedge : std_ulogic := '0';
  variable Tmkr_CECARRYIN_CLK_posedge : VitalTimingDataType := VitalTimingDataInit;
  variable Tviol_CECARRYIN_CLK_posedge : std_ulogic := '0';
  variable Tmkr_CED_CLK_posedge : VitalTimingDataType := VitalTimingDataInit;
  variable Tviol_CED_CLK_posedge : std_ulogic := '0';
  variable Tmkr_CEM_CLK_posedge : VitalTimingDataType := VitalTimingDataInit;
  variable Tviol_CEM_CLK_posedge : std_ulogic := '0';
  variable Tmkr_CEP_CLK_posedge : VitalTimingDataType := VitalTimingDataInit;
  variable Tviol_CEP_CLK_posedge : std_ulogic := '0';
  variable Tmkr_OPMODE_CLK_posedge  : VitalTimingDataArrayType(7 downto 0);
  variable Tviol_OPMODE_CLK_posedge : std_logic_vector(7 downto 0 ) := (others => '0');
  variable Tmkr_PCIN_CLK_posedge  : VitalTimingDataArrayType(47 downto 0);
  variable Tviol_PCIN_CLK_posedge : std_logic_vector(47 downto 0 ) := (others => '0');
  variable Tmkr_RSTA_CLK_posedge : VitalTimingDataType := VitalTimingDataInit;
  variable Tviol_RSTA_CLK_posedge : std_ulogic := '0';
  variable Tmkr_RSTB_CLK_posedge : VitalTimingDataType := VitalTimingDataInit;
  variable Tviol_RSTB_CLK_posedge : std_ulogic := '0';
  variable Tmkr_RSTC_CLK_posedge : VitalTimingDataType := VitalTimingDataInit;
  variable Tviol_RSTC_CLK_posedge : std_ulogic := '0';
  variable Tmkr_RSTCARRYIN_CLK_posedge : VitalTimingDataType := VitalTimingDataInit;
  variable Tviol_RSTCARRYIN_CLK_posedge : std_ulogic := '0';
  variable Tmkr_RSTD_CLK_posedge : VitalTimingDataType := VitalTimingDataInit;
  variable Tviol_RSTD_CLK_posedge : std_ulogic := '0';
  variable Tmkr_RSTM_CLK_posedge : VitalTimingDataType := VitalTimingDataInit;
  variable Tviol_RSTM_CLK_posedge : std_ulogic := '0';
  variable Tmkr_RSTOPMODE_CLK_posedge : VitalTimingDataType := VitalTimingDataInit;
  variable Tviol_RSTOPMODE_CLK_posedge : std_ulogic := '0';
  variable Tmkr_RSTP_CLK_posedge : VitalTimingDataType := VitalTimingDataInit;
  variable Tviol_RSTP_CLK_posedge : std_ulogic := '0';

  variable BCOUT_GlitchData :  VitalGlitchDataArrayType (17 downto 0 );
  variable CARRYOUT_GlitchData :  VitalGlitchDataType;
  variable P_GlitchData :  VitalGlitchDataArrayType (47 downto 0 );
  variable PCOUT_GlitchData :  VitalGlitchDataArrayType (47 downto 0 );

  begin
--  Setup/Hold Check Violations (all input pins)

     if (TimingChecksOn) then
--=====  Vital SetupHold Checks for Bus signal A =====
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(0),
         TimingData           => Tmkr_A_CLK_posedge(0),
         TestSignal           => A_dly(0),
         TestSignalName       => "A(0)",
         TestDelay            => tisd_A_CLK(0),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(0),
         SetupLow             => tsetup_A_CLK_negedge_posedge(0),
         HoldHigh             => thold_A_CLK_posedge_posedge(0),
         HoldLow              => thold_A_CLK_negedge_posedge(0),
         CheckEnabled         => (TO_X01((not RSTA_dly) and (CEA_dly)) /= '0') and ((A0REG = 1) or (A1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(1),
         TimingData           => Tmkr_A_CLK_posedge(1),
         TestSignal           => A_dly(1),
         TestSignalName       => "A(1)",
         TestDelay            => tisd_A_CLK(1),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(1),
         SetupLow             => tsetup_A_CLK_negedge_posedge(1),
         HoldHigh             => thold_A_CLK_posedge_posedge(1),
         HoldLow              => thold_A_CLK_negedge_posedge(1),
         CheckEnabled         => (TO_X01((not RSTA_dly) and (CEA_dly)) /= '0') and ((A0REG = 1) or (A1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(2),
         TimingData           => Tmkr_A_CLK_posedge(2),
         TestSignal           => A_dly(2),
         TestSignalName       => "A(2)",
         TestDelay            => tisd_A_CLK(2),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(2),
         SetupLow             => tsetup_A_CLK_negedge_posedge(2),
         HoldHigh             => thold_A_CLK_posedge_posedge(2),
         HoldLow              => thold_A_CLK_negedge_posedge(2),
         CheckEnabled         => (TO_X01((not RSTA_dly) and (CEA_dly)) /= '0') and ((A0REG = 1) or (A1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(3),
         TimingData           => Tmkr_A_CLK_posedge(3),
         TestSignal           => A_dly(3),
         TestSignalName       => "A(3)",
         TestDelay            => tisd_A_CLK(3),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(3),
         SetupLow             => tsetup_A_CLK_negedge_posedge(3),
         HoldHigh             => thold_A_CLK_posedge_posedge(3),
         HoldLow              => thold_A_CLK_negedge_posedge(3),
         CheckEnabled         => (TO_X01((not RSTA_dly) and (CEA_dly)) /= '0') and ((A0REG = 1) or (A1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(4),
         TimingData           => Tmkr_A_CLK_posedge(4),
         TestSignal           => A_dly(4),
         TestSignalName       => "A(4)",
         TestDelay            => tisd_A_CLK(4),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(4),
         SetupLow             => tsetup_A_CLK_negedge_posedge(4),
         HoldHigh             => thold_A_CLK_posedge_posedge(4),
         HoldLow              => thold_A_CLK_negedge_posedge(4),
         CheckEnabled         => (TO_X01((not RSTA_dly) and (CEA_dly)) /= '0') and ((A0REG = 1) or (A1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(5),
         TimingData           => Tmkr_A_CLK_posedge(5),
         TestSignal           => A_dly(5),
         TestSignalName       => "A(5)",
         TestDelay            => tisd_A_CLK(5),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(5),
         SetupLow             => tsetup_A_CLK_negedge_posedge(5),
         HoldHigh             => thold_A_CLK_posedge_posedge(5),
         HoldLow              => thold_A_CLK_negedge_posedge(5),
         CheckEnabled         => (TO_X01((not RSTA_dly) and (CEA_dly)) /= '0') and ((A0REG = 1) or (A1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(6),
         TimingData           => Tmkr_A_CLK_posedge(6),
         TestSignal           => A_dly(6),
         TestSignalName       => "A(6)",
         TestDelay            => tisd_A_CLK(6),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(6),
         SetupLow             => tsetup_A_CLK_negedge_posedge(6),
         HoldHigh             => thold_A_CLK_posedge_posedge(6),
         HoldLow              => thold_A_CLK_negedge_posedge(6),
         CheckEnabled         => (TO_X01((not RSTA_dly) and (CEA_dly)) /= '0') and ((A0REG = 1) or (A1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(7),
         TimingData           => Tmkr_A_CLK_posedge(7),
         TestSignal           => A_dly(7),
         TestSignalName       => "A(7)",
         TestDelay            => tisd_A_CLK(7),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(7),
         SetupLow             => tsetup_A_CLK_negedge_posedge(7),
         HoldHigh             => thold_A_CLK_posedge_posedge(7),
         HoldLow              => thold_A_CLK_negedge_posedge(7),
         CheckEnabled         => (TO_X01((not RSTA_dly) and (CEA_dly)) /= '0') and ((A0REG = 1) or (A1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(8),
         TimingData           => Tmkr_A_CLK_posedge(8),
         TestSignal           => A_dly(8),
         TestSignalName       => "A(8)",
         TestDelay            => tisd_A_CLK(8),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(8),
         SetupLow             => tsetup_A_CLK_negedge_posedge(8),
         HoldHigh             => thold_A_CLK_posedge_posedge(8),
         HoldLow              => thold_A_CLK_negedge_posedge(8),
         CheckEnabled         => (TO_X01((not RSTA_dly) and (CEA_dly)) /= '0') and ((A0REG = 1) or (A1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(9),
         TimingData           => Tmkr_A_CLK_posedge(9),
         TestSignal           => A_dly(9),
         TestSignalName       => "A(9)",
         TestDelay            => tisd_A_CLK(9),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(9),
         SetupLow             => tsetup_A_CLK_negedge_posedge(9),
         HoldHigh             => thold_A_CLK_posedge_posedge(9),
         HoldLow              => thold_A_CLK_negedge_posedge(9),
         CheckEnabled         => (TO_X01((not RSTA_dly) and (CEA_dly)) /= '0') and ((A0REG = 1) or (A1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(10),
         TimingData           => Tmkr_A_CLK_posedge(10),
         TestSignal           => A_dly(10),
         TestSignalName       => "A(10)",
         TestDelay            => tisd_A_CLK(10),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(10),
         SetupLow             => tsetup_A_CLK_negedge_posedge(10),
         HoldHigh             => thold_A_CLK_posedge_posedge(10),
         HoldLow              => thold_A_CLK_negedge_posedge(10),
         CheckEnabled         => (TO_X01((not RSTA_dly) and (CEA_dly)) /= '0') and ((A0REG = 1) or (A1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(11),
         TimingData           => Tmkr_A_CLK_posedge(11),
         TestSignal           => A_dly(11),
         TestSignalName       => "A(11)",
         TestDelay            => tisd_A_CLK(11),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(11),
         SetupLow             => tsetup_A_CLK_negedge_posedge(11),
         HoldHigh             => thold_A_CLK_posedge_posedge(11),
         HoldLow              => thold_A_CLK_negedge_posedge(11),
         CheckEnabled         => (TO_X01((not RSTA_dly) and (CEA_dly)) /= '0') and ((A0REG = 1) or (A1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(12),
         TimingData           => Tmkr_A_CLK_posedge(12),
         TestSignal           => A_dly(12),
         TestSignalName       => "A(12)",
         TestDelay            => tisd_A_CLK(12),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(12),
         SetupLow             => tsetup_A_CLK_negedge_posedge(12),
         HoldHigh             => thold_A_CLK_posedge_posedge(12),
         HoldLow              => thold_A_CLK_negedge_posedge(12),
         CheckEnabled         => (TO_X01((not RSTA_dly) and (CEA_dly)) /= '0') and ((A0REG = 1) or (A1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(13),
         TimingData           => Tmkr_A_CLK_posedge(13),
         TestSignal           => A_dly(13),
         TestSignalName       => "A(13)",
         TestDelay            => tisd_A_CLK(13),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(13),
         SetupLow             => tsetup_A_CLK_negedge_posedge(13),
         HoldHigh             => thold_A_CLK_posedge_posedge(13),
         HoldLow              => thold_A_CLK_negedge_posedge(13),
         CheckEnabled         => (TO_X01((not RSTA_dly) and (CEA_dly)) /= '0') and ((A0REG = 1) or (A1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(14),
         TimingData           => Tmkr_A_CLK_posedge(14),
         TestSignal           => A_dly(14),
         TestSignalName       => "A(14)",
         TestDelay            => tisd_A_CLK(14),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(14),
         SetupLow             => tsetup_A_CLK_negedge_posedge(14),
         HoldHigh             => thold_A_CLK_posedge_posedge(14),
         HoldLow              => thold_A_CLK_negedge_posedge(14),
         CheckEnabled         => (TO_X01((not RSTA_dly) and (CEA_dly)) /= '0') and ((A0REG = 1) or (A1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(15),
         TimingData           => Tmkr_A_CLK_posedge(15),
         TestSignal           => A_dly(15),
         TestSignalName       => "A(15)",
         TestDelay            => tisd_A_CLK(15),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(15),
         SetupLow             => tsetup_A_CLK_negedge_posedge(15),
         HoldHigh             => thold_A_CLK_posedge_posedge(15),
         HoldLow              => thold_A_CLK_negedge_posedge(15),
         CheckEnabled         => (TO_X01((not RSTA_dly) and (CEA_dly)) /= '0') and ((A0REG = 1) or (A1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(16),
         TimingData           => Tmkr_A_CLK_posedge(16),
         TestSignal           => A_dly(16),
         TestSignalName       => "A(16)",
         TestDelay            => tisd_A_CLK(16),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(16),
         SetupLow             => tsetup_A_CLK_negedge_posedge(16),
         HoldHigh             => thold_A_CLK_posedge_posedge(16),
         HoldLow              => thold_A_CLK_negedge_posedge(16),
         CheckEnabled         => (TO_X01((not RSTA_dly) and (CEA_dly)) /= '0') and ((A0REG = 1) or (A1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_A_CLK_posedge(17),
         TimingData           => Tmkr_A_CLK_posedge(17),
         TestSignal           => A_dly(17),
         TestSignalName       => "A(17)",
         TestDelay            => tisd_A_CLK(17),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_A_CLK_posedge_posedge(17),
         SetupLow             => tsetup_A_CLK_negedge_posedge(17),
         HoldHigh             => thold_A_CLK_posedge_posedge(17),
         HoldLow              => thold_A_CLK_negedge_posedge(17),
         CheckEnabled         => (TO_X01((not RSTA_dly) and (CEA_dly)) /= '0') and ((A0REG = 1) or (A1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks for Bus signal B =====
       VitalSetupHoldCheck (
         Violation            => Tviol_B_CLK_posedge(0),
         TimingData           => Tmkr_B_CLK_posedge(0),
         TestSignal           => B_dly(0),
         TestSignalName       => "B(0)",
         TestDelay            => tisd_B_CLK(0),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_B_CLK_posedge_posedge(0),
         SetupLow             => tsetup_B_CLK_negedge_posedge(0),
         HoldHigh             => thold_B_CLK_posedge_posedge(0),
         HoldLow              => thold_B_CLK_negedge_posedge(0),
         CheckEnabled         => (TO_X01((not RSTB_dly) and (CEB_dly)) /= '0') and ((B0REG = 1) or (B1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_B_CLK_posedge(1),
         TimingData           => Tmkr_B_CLK_posedge(1),
         TestSignal           => B_dly(1),
         TestSignalName       => "B(1)",
         TestDelay            => tisd_B_CLK(1),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_B_CLK_posedge_posedge(1),
         SetupLow             => tsetup_B_CLK_negedge_posedge(1),
         HoldHigh             => thold_B_CLK_posedge_posedge(1),
         HoldLow              => thold_B_CLK_negedge_posedge(1),
         CheckEnabled         => (TO_X01((not RSTB_dly) and (CEB_dly)) /= '0') and ((B0REG = 1) or (B1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_B_CLK_posedge(2),
         TimingData           => Tmkr_B_CLK_posedge(2),
         TestSignal           => B_dly(2),
         TestSignalName       => "B(2)",
         TestDelay            => tisd_B_CLK(2),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_B_CLK_posedge_posedge(2),
         SetupLow             => tsetup_B_CLK_negedge_posedge(2),
         HoldHigh             => thold_B_CLK_posedge_posedge(2),
         HoldLow              => thold_B_CLK_negedge_posedge(2),
         CheckEnabled         => (TO_X01((not RSTB_dly) and (CEB_dly)) /= '0') and ((B0REG = 1) or (B1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_B_CLK_posedge(3),
         TimingData           => Tmkr_B_CLK_posedge(3),
         TestSignal           => B_dly(3),
         TestSignalName       => "B(3)",
         TestDelay            => tisd_B_CLK(3),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_B_CLK_posedge_posedge(3),
         SetupLow             => tsetup_B_CLK_negedge_posedge(3),
         HoldHigh             => thold_B_CLK_posedge_posedge(3),
         HoldLow              => thold_B_CLK_negedge_posedge(3),
         CheckEnabled         => (TO_X01((not RSTB_dly) and (CEB_dly)) /= '0') and ((B0REG = 1) or (B1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_B_CLK_posedge(4),
         TimingData           => Tmkr_B_CLK_posedge(4),
         TestSignal           => B_dly(4),
         TestSignalName       => "B(4)",
         TestDelay            => tisd_B_CLK(4),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_B_CLK_posedge_posedge(4),
         SetupLow             => tsetup_B_CLK_negedge_posedge(4),
         HoldHigh             => thold_B_CLK_posedge_posedge(4),
         HoldLow              => thold_B_CLK_negedge_posedge(4),
         CheckEnabled         => (TO_X01((not RSTB_dly) and (CEB_dly)) /= '0') and ((B0REG = 1) or (B1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_B_CLK_posedge(5),
         TimingData           => Tmkr_B_CLK_posedge(5),
         TestSignal           => B_dly(5),
         TestSignalName       => "B(5)",
         TestDelay            => tisd_B_CLK(5),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_B_CLK_posedge_posedge(5),
         SetupLow             => tsetup_B_CLK_negedge_posedge(5),
         HoldHigh             => thold_B_CLK_posedge_posedge(5),
         HoldLow              => thold_B_CLK_negedge_posedge(5),
         CheckEnabled         => (TO_X01((not RSTB_dly) and (CEB_dly)) /= '0') and ((B0REG = 1) or (B1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_B_CLK_posedge(6),
         TimingData           => Tmkr_B_CLK_posedge(6),
         TestSignal           => B_dly(6),
         TestSignalName       => "B(6)",
         TestDelay            => tisd_B_CLK(6),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_B_CLK_posedge_posedge(6),
         SetupLow             => tsetup_B_CLK_negedge_posedge(6),
         HoldHigh             => thold_B_CLK_posedge_posedge(6),
         HoldLow              => thold_B_CLK_negedge_posedge(6),
         CheckEnabled         => (TO_X01((not RSTB_dly) and (CEB_dly)) /= '0') and ((B0REG = 1) or (B1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_B_CLK_posedge(7),
         TimingData           => Tmkr_B_CLK_posedge(7),
         TestSignal           => B_dly(7),
         TestSignalName       => "B(7)",
         TestDelay            => tisd_B_CLK(7),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_B_CLK_posedge_posedge(7),
         SetupLow             => tsetup_B_CLK_negedge_posedge(7),
         HoldHigh             => thold_B_CLK_posedge_posedge(7),
         HoldLow              => thold_B_CLK_negedge_posedge(7),
         CheckEnabled         => (TO_X01((not RSTB_dly) and (CEB_dly)) /= '0') and ((B0REG = 1) or (B1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_B_CLK_posedge(8),
         TimingData           => Tmkr_B_CLK_posedge(8),
         TestSignal           => B_dly(8),
         TestSignalName       => "B(8)",
         TestDelay            => tisd_B_CLK(8),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_B_CLK_posedge_posedge(8),
         SetupLow             => tsetup_B_CLK_negedge_posedge(8),
         HoldHigh             => thold_B_CLK_posedge_posedge(8),
         HoldLow              => thold_B_CLK_negedge_posedge(8),
         CheckEnabled         => (TO_X01((not RSTB_dly) and (CEB_dly)) /= '0') and ((B0REG = 1) or (B1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_B_CLK_posedge(9),
         TimingData           => Tmkr_B_CLK_posedge(9),
         TestSignal           => B_dly(9),
         TestSignalName       => "B(9)",
         TestDelay            => tisd_B_CLK(9),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_B_CLK_posedge_posedge(9),
         SetupLow             => tsetup_B_CLK_negedge_posedge(9),
         HoldHigh             => thold_B_CLK_posedge_posedge(9),
         HoldLow              => thold_B_CLK_negedge_posedge(9),
         CheckEnabled         => (TO_X01((not RSTB_dly) and (CEB_dly)) /= '0') and ((B0REG = 1) or (B1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_B_CLK_posedge(10),
         TimingData           => Tmkr_B_CLK_posedge(10),
         TestSignal           => B_dly(10),
         TestSignalName       => "B(10)",
         TestDelay            => tisd_B_CLK(10),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_B_CLK_posedge_posedge(10),
         SetupLow             => tsetup_B_CLK_negedge_posedge(10),
         HoldHigh             => thold_B_CLK_posedge_posedge(10),
         HoldLow              => thold_B_CLK_negedge_posedge(10),
         CheckEnabled         => (TO_X01((not RSTB_dly) and (CEB_dly)) /= '0') and ((B0REG = 1) or (B1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_B_CLK_posedge(11),
         TimingData           => Tmkr_B_CLK_posedge(11),
         TestSignal           => B_dly(11),
         TestSignalName       => "B(11)",
         TestDelay            => tisd_B_CLK(11),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_B_CLK_posedge_posedge(11),
         SetupLow             => tsetup_B_CLK_negedge_posedge(11),
         HoldHigh             => thold_B_CLK_posedge_posedge(11),
         HoldLow              => thold_B_CLK_negedge_posedge(11),
         CheckEnabled         => (TO_X01((not RSTB_dly) and (CEB_dly)) /= '0') and ((B0REG = 1) or (B1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_B_CLK_posedge(12),
         TimingData           => Tmkr_B_CLK_posedge(12),
         TestSignal           => B_dly(12),
         TestSignalName       => "B(12)",
         TestDelay            => tisd_B_CLK(12),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_B_CLK_posedge_posedge(12),
         SetupLow             => tsetup_B_CLK_negedge_posedge(12),
         HoldHigh             => thold_B_CLK_posedge_posedge(12),
         HoldLow              => thold_B_CLK_negedge_posedge(12),
         CheckEnabled         => (TO_X01((not RSTB_dly) and (CEB_dly)) /= '0') and ((B0REG = 1) or (B1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_B_CLK_posedge(13),
         TimingData           => Tmkr_B_CLK_posedge(13),
         TestSignal           => B_dly(13),
         TestSignalName       => "B(13)",
         TestDelay            => tisd_B_CLK(13),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_B_CLK_posedge_posedge(13),
         SetupLow             => tsetup_B_CLK_negedge_posedge(13),
         HoldHigh             => thold_B_CLK_posedge_posedge(13),
         HoldLow              => thold_B_CLK_negedge_posedge(13),
         CheckEnabled         => (TO_X01((not RSTB_dly) and (CEB_dly)) /= '0') and ((B0REG = 1) or (B1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_B_CLK_posedge(14),
         TimingData           => Tmkr_B_CLK_posedge(14),
         TestSignal           => B_dly(14),
         TestSignalName       => "B(14)",
         TestDelay            => tisd_B_CLK(14),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_B_CLK_posedge_posedge(14),
         SetupLow             => tsetup_B_CLK_negedge_posedge(14),
         HoldHigh             => thold_B_CLK_posedge_posedge(14),
         HoldLow              => thold_B_CLK_negedge_posedge(14),
         CheckEnabled         => (TO_X01((not RSTB_dly) and (CEB_dly)) /= '0') and ((B0REG = 1) or (B1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_B_CLK_posedge(15),
         TimingData           => Tmkr_B_CLK_posedge(15),
         TestSignal           => B_dly(15),
         TestSignalName       => "B(15)",
         TestDelay            => tisd_B_CLK(15),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_B_CLK_posedge_posedge(15),
         SetupLow             => tsetup_B_CLK_negedge_posedge(15),
         HoldHigh             => thold_B_CLK_posedge_posedge(15),
         HoldLow              => thold_B_CLK_negedge_posedge(15),
         CheckEnabled         => (TO_X01((not RSTB_dly) and (CEB_dly)) /= '0') and ((B0REG = 1) or (B1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_B_CLK_posedge(16),
         TimingData           => Tmkr_B_CLK_posedge(16),
         TestSignal           => B_dly(16),
         TestSignalName       => "B(16)",
         TestDelay            => tisd_B_CLK(16),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_B_CLK_posedge_posedge(16),
         SetupLow             => tsetup_B_CLK_negedge_posedge(16),
         HoldHigh             => thold_B_CLK_posedge_posedge(16),
         HoldLow              => thold_B_CLK_negedge_posedge(16),
         CheckEnabled         => (TO_X01((not RSTB_dly) and (CEB_dly)) /= '0') and ((B0REG = 1) or (B1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_B_CLK_posedge(17),
         TimingData           => Tmkr_B_CLK_posedge(17),
         TestSignal           => B_dly(17),
         TestSignalName       => "B(17)",
         TestDelay            => tisd_B_CLK(17),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_B_CLK_posedge_posedge(17),
         SetupLow             => tsetup_B_CLK_negedge_posedge(17),
         HoldHigh             => thold_B_CLK_posedge_posedge(17),
         HoldLow              => thold_B_CLK_negedge_posedge(17),
         CheckEnabled         => (TO_X01((not RSTB_dly) and (CEB_dly)) /= '0') and ((B0REG = 1) or (B1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks for Bus signal BCIN =====
       VitalSetupHoldCheck (
         Violation            => Tviol_BCIN_CLK_posedge(0),
         TimingData           => Tmkr_BCIN_CLK_posedge(0),
         TestSignal           => BCIN_dly(0),
         TestSignalName       => "BCIN(0)",
         TestDelay            => tisd_BCIN_CLK(0),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_BCIN_CLK_posedge_posedge(0),
         SetupLow             => tsetup_BCIN_CLK_negedge_posedge(0),
         HoldHigh             => thold_BCIN_CLK_posedge_posedge(0),
         HoldLow              => thold_BCIN_CLK_negedge_posedge(0),
         CheckEnabled         => (TO_X01((not RSTB_dly) and (CEB_dly)) /= '0') and ((B0REG = 1) or (B1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_BCIN_CLK_posedge(1),
         TimingData           => Tmkr_BCIN_CLK_posedge(1),
         TestSignal           => BCIN_dly(1),
         TestSignalName       => "BCIN(1)",
         TestDelay            => tisd_BCIN_CLK(1),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_BCIN_CLK_posedge_posedge(1),
         SetupLow             => tsetup_BCIN_CLK_negedge_posedge(1),
         HoldHigh             => thold_BCIN_CLK_posedge_posedge(1),
         HoldLow              => thold_BCIN_CLK_negedge_posedge(1),
         CheckEnabled         => (TO_X01((not RSTB_dly) and (CEB_dly)) /= '0') and ((B0REG = 1) or (B1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_BCIN_CLK_posedge(2),
         TimingData           => Tmkr_BCIN_CLK_posedge(2),
         TestSignal           => BCIN_dly(2),
         TestSignalName       => "BCIN(2)",
         TestDelay            => tisd_BCIN_CLK(2),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_BCIN_CLK_posedge_posedge(2),
         SetupLow             => tsetup_BCIN_CLK_negedge_posedge(2),
         HoldHigh             => thold_BCIN_CLK_posedge_posedge(2),
         HoldLow              => thold_BCIN_CLK_negedge_posedge(2),
         CheckEnabled         => (TO_X01((not RSTB_dly) and (CEB_dly)) /= '0') and ((B0REG = 1) or (B1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_BCIN_CLK_posedge(3),
         TimingData           => Tmkr_BCIN_CLK_posedge(3),
         TestSignal           => BCIN_dly(3),
         TestSignalName       => "BCIN(3)",
         TestDelay            => tisd_BCIN_CLK(3),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_BCIN_CLK_posedge_posedge(3),
         SetupLow             => tsetup_BCIN_CLK_negedge_posedge(3),
         HoldHigh             => thold_BCIN_CLK_posedge_posedge(3),
         HoldLow              => thold_BCIN_CLK_negedge_posedge(3),
         CheckEnabled         => (TO_X01((not RSTB_dly) and (CEB_dly)) /= '0') and ((B0REG = 1) or (B1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_BCIN_CLK_posedge(4),
         TimingData           => Tmkr_BCIN_CLK_posedge(4),
         TestSignal           => BCIN_dly(4),
         TestSignalName       => "BCIN(4)",
         TestDelay            => tisd_BCIN_CLK(4),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_BCIN_CLK_posedge_posedge(4),
         SetupLow             => tsetup_BCIN_CLK_negedge_posedge(4),
         HoldHigh             => thold_BCIN_CLK_posedge_posedge(4),
         HoldLow              => thold_BCIN_CLK_negedge_posedge(4),
         CheckEnabled         => (TO_X01((not RSTB_dly) and (CEB_dly)) /= '0') and ((B0REG = 1) or (B1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_BCIN_CLK_posedge(5),
         TimingData           => Tmkr_BCIN_CLK_posedge(5),
         TestSignal           => BCIN_dly(5),
         TestSignalName       => "BCIN(5)",
         TestDelay            => tisd_BCIN_CLK(5),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_BCIN_CLK_posedge_posedge(5),
         SetupLow             => tsetup_BCIN_CLK_negedge_posedge(5),
         HoldHigh             => thold_BCIN_CLK_posedge_posedge(5),
         HoldLow              => thold_BCIN_CLK_negedge_posedge(5),
         CheckEnabled         => (TO_X01((not RSTB_dly) and (CEB_dly)) /= '0') and ((B0REG = 1) or (B1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_BCIN_CLK_posedge(6),
         TimingData           => Tmkr_BCIN_CLK_posedge(6),
         TestSignal           => BCIN_dly(6),
         TestSignalName       => "BCIN(6)",
         TestDelay            => tisd_BCIN_CLK(6),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_BCIN_CLK_posedge_posedge(6),
         SetupLow             => tsetup_BCIN_CLK_negedge_posedge(6),
         HoldHigh             => thold_BCIN_CLK_posedge_posedge(6),
         HoldLow              => thold_BCIN_CLK_negedge_posedge(6),
         CheckEnabled         => (TO_X01((not RSTB_dly) and (CEB_dly)) /= '0') and ((B0REG = 1) or (B1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_BCIN_CLK_posedge(7),
         TimingData           => Tmkr_BCIN_CLK_posedge(7),
         TestSignal           => BCIN_dly(7),
         TestSignalName       => "BCIN(7)",
         TestDelay            => tisd_BCIN_CLK(7),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_BCIN_CLK_posedge_posedge(7),
         SetupLow             => tsetup_BCIN_CLK_negedge_posedge(7),
         HoldHigh             => thold_BCIN_CLK_posedge_posedge(7),
         HoldLow              => thold_BCIN_CLK_negedge_posedge(7),
         CheckEnabled         => (TO_X01((not RSTB_dly) and (CEB_dly)) /= '0') and ((B0REG = 1) or (B1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_BCIN_CLK_posedge(8),
         TimingData           => Tmkr_BCIN_CLK_posedge(8),
         TestSignal           => BCIN_dly(8),
         TestSignalName       => "BCIN(8)",
         TestDelay            => tisd_BCIN_CLK(8),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_BCIN_CLK_posedge_posedge(8),
         SetupLow             => tsetup_BCIN_CLK_negedge_posedge(8),
         HoldHigh             => thold_BCIN_CLK_posedge_posedge(8),
         HoldLow              => thold_BCIN_CLK_negedge_posedge(8),
         CheckEnabled         => (TO_X01((not RSTB_dly) and (CEB_dly)) /= '0') and ((B0REG = 1) or (B1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_BCIN_CLK_posedge(9),
         TimingData           => Tmkr_BCIN_CLK_posedge(9),
         TestSignal           => BCIN_dly(9),
         TestSignalName       => "BCIN(9)",
         TestDelay            => tisd_BCIN_CLK(9),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_BCIN_CLK_posedge_posedge(9),
         SetupLow             => tsetup_BCIN_CLK_negedge_posedge(9),
         HoldHigh             => thold_BCIN_CLK_posedge_posedge(9),
         HoldLow              => thold_BCIN_CLK_negedge_posedge(9),
         CheckEnabled         => (TO_X01((not RSTB_dly) and (CEB_dly)) /= '0') and ((B0REG = 1) or (B1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_BCIN_CLK_posedge(10),
         TimingData           => Tmkr_BCIN_CLK_posedge(10),
         TestSignal           => BCIN_dly(10),
         TestSignalName       => "BCIN(10)",
         TestDelay            => tisd_BCIN_CLK(10),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_BCIN_CLK_posedge_posedge(10),
         SetupLow             => tsetup_BCIN_CLK_negedge_posedge(10),
         HoldHigh             => thold_BCIN_CLK_posedge_posedge(10),
         HoldLow              => thold_BCIN_CLK_negedge_posedge(10),
         CheckEnabled         => (TO_X01((not RSTB_dly) and (CEB_dly)) /= '0') and ((B0REG = 1) or (B1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_BCIN_CLK_posedge(11),
         TimingData           => Tmkr_BCIN_CLK_posedge(11),
         TestSignal           => BCIN_dly(11),
         TestSignalName       => "BCIN(11)",
         TestDelay            => tisd_BCIN_CLK(11),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_BCIN_CLK_posedge_posedge(11),
         SetupLow             => tsetup_BCIN_CLK_negedge_posedge(11),
         HoldHigh             => thold_BCIN_CLK_posedge_posedge(11),
         HoldLow              => thold_BCIN_CLK_negedge_posedge(11),
         CheckEnabled         => (TO_X01((not RSTB_dly) and (CEB_dly)) /= '0') and ((B0REG = 1) or (B1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_BCIN_CLK_posedge(12),
         TimingData           => Tmkr_BCIN_CLK_posedge(12),
         TestSignal           => BCIN_dly(12),
         TestSignalName       => "BCIN(12)",
         TestDelay            => tisd_BCIN_CLK(12),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_BCIN_CLK_posedge_posedge(12),
         SetupLow             => tsetup_BCIN_CLK_negedge_posedge(12),
         HoldHigh             => thold_BCIN_CLK_posedge_posedge(12),
         HoldLow              => thold_BCIN_CLK_negedge_posedge(12),
         CheckEnabled         => (TO_X01((not RSTB_dly) and (CEB_dly)) /= '0') and ((B0REG = 1) or (B1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_BCIN_CLK_posedge(13),
         TimingData           => Tmkr_BCIN_CLK_posedge(13),
         TestSignal           => BCIN_dly(13),
         TestSignalName       => "BCIN(13)",
         TestDelay            => tisd_BCIN_CLK(13),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_BCIN_CLK_posedge_posedge(13),
         SetupLow             => tsetup_BCIN_CLK_negedge_posedge(13),
         HoldHigh             => thold_BCIN_CLK_posedge_posedge(13),
         HoldLow              => thold_BCIN_CLK_negedge_posedge(13),
         CheckEnabled         => (TO_X01((not RSTB_dly) and (CEB_dly)) /= '0') and ((B0REG = 1) or (B1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_BCIN_CLK_posedge(14),
         TimingData           => Tmkr_BCIN_CLK_posedge(14),
         TestSignal           => BCIN_dly(14),
         TestSignalName       => "BCIN(14)",
         TestDelay            => tisd_BCIN_CLK(14),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_BCIN_CLK_posedge_posedge(14),
         SetupLow             => tsetup_BCIN_CLK_negedge_posedge(14),
         HoldHigh             => thold_BCIN_CLK_posedge_posedge(14),
         HoldLow              => thold_BCIN_CLK_negedge_posedge(14),
         CheckEnabled         => (TO_X01((not RSTB_dly) and (CEB_dly)) /= '0') and ((B0REG = 1) or (B1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_BCIN_CLK_posedge(15),
         TimingData           => Tmkr_BCIN_CLK_posedge(15),
         TestSignal           => BCIN_dly(15),
         TestSignalName       => "BCIN(15)",
         TestDelay            => tisd_BCIN_CLK(15),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_BCIN_CLK_posedge_posedge(15),
         SetupLow             => tsetup_BCIN_CLK_negedge_posedge(15),
         HoldHigh             => thold_BCIN_CLK_posedge_posedge(15),
         HoldLow              => thold_BCIN_CLK_negedge_posedge(15),
         CheckEnabled         => (TO_X01((not RSTB_dly) and (CEB_dly)) /= '0') and ((B0REG = 1) or (B1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_BCIN_CLK_posedge(16),
         TimingData           => Tmkr_BCIN_CLK_posedge(16),
         TestSignal           => BCIN_dly(16),
         TestSignalName       => "BCIN(16)",
         TestDelay            => tisd_BCIN_CLK(16),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_BCIN_CLK_posedge_posedge(16),
         SetupLow             => tsetup_BCIN_CLK_negedge_posedge(16),
         HoldHigh             => thold_BCIN_CLK_posedge_posedge(16),
         HoldLow              => thold_BCIN_CLK_negedge_posedge(16),
         CheckEnabled         => (TO_X01((not RSTB_dly) and (CEB_dly)) /= '0') and ((B0REG = 1) or (B1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_BCIN_CLK_posedge(17),
         TimingData           => Tmkr_BCIN_CLK_posedge(17),
         TestSignal           => BCIN_dly(17),
         TestSignalName       => "BCIN(17)",
         TestDelay            => tisd_BCIN_CLK(17),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_BCIN_CLK_posedge_posedge(17),
         SetupLow             => tsetup_BCIN_CLK_negedge_posedge(17),
         HoldHigh             => thold_BCIN_CLK_posedge_posedge(17),
         HoldLow              => thold_BCIN_CLK_negedge_posedge(17),
         CheckEnabled         => (TO_X01((not RSTB_dly) and (CEB_dly)) /= '0') and ((B0REG = 1) or (B1REG = 1))and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks signal CARRYIN =====
       VitalSetupHoldCheck (
         Violation            => Tviol_CARRYIN_CLK_posedge,
         TimingData           => Tmkr_CARRYIN_CLK_posedge,
         TestSignal           => CARRYIN_dly,
         TestSignalName       => "CARRYIN",
         TestDelay            => tisd_CARRYIN_CLK,
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_CARRYIN_CLK_posedge_posedge,
         SetupLow             => tsetup_CARRYIN_CLK_negedge_posedge,
         HoldHigh             => thold_CARRYIN_CLK_posedge_posedge,
         HoldLow              => thold_CARRYIN_CLK_negedge_posedge,
         CheckEnabled         => (TO_X01((not RSTCARRYIN_dly) and (CECARRYIN_dly)) /= '0') and (CARRYINSEL = "CARRYIN") and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => true,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks signal CEA =====
       VitalSetupHoldCheck (
         Violation            => Tviol_CEA_CLK_posedge,
         TimingData           => Tmkr_CEA_CLK_posedge,
         TestSignal           => CEA_dly,
         TestSignalName       => "CEA",
         TestDelay            => tisd_CEA_CLK,
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_CEA_CLK_posedge_posedge,
         SetupLow             => tsetup_CEA_CLK_negedge_posedge,
         HoldHigh             => thold_CEA_CLK_posedge_posedge,
         HoldLow              => thold_CEA_CLK_negedge_posedge,
         CheckEnabled         => (TO_X01(not RSTA_dly) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => true,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks signal CEB =====
       VitalSetupHoldCheck (
         Violation            => Tviol_CEB_CLK_posedge,
         TimingData           => Tmkr_CEB_CLK_posedge,
         TestSignal           => CEB_dly,
         TestSignalName       => "CEB",
         TestDelay            => tisd_CEB_CLK,
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_CEB_CLK_posedge_posedge,
         SetupLow             => tsetup_CEB_CLK_negedge_posedge,
         HoldHigh             => thold_CEB_CLK_posedge_posedge,
         HoldLow              => thold_CEB_CLK_negedge_posedge,
         CheckEnabled         => (TO_X01(not RSTB_dly) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => true,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks signal CEC =====
       VitalSetupHoldCheck (
         Violation            => Tviol_CEC_CLK_posedge,
         TimingData           => Tmkr_CEC_CLK_posedge,
         TestSignal           => CEC_dly,
         TestSignalName       => "CEC",
         TestDelay            => tisd_CEC_CLK,
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_CEC_CLK_posedge_posedge,
         SetupLow             => tsetup_CEC_CLK_negedge_posedge,
         HoldHigh             => thold_CEC_CLK_posedge_posedge,
         HoldLow              => thold_CEC_CLK_negedge_posedge,
         CheckEnabled         => (TO_X01(not RSTC_dly) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => true,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks signal CECARRYIN =====
       VitalSetupHoldCheck (
         Violation            => Tviol_CECARRYIN_CLK_posedge,
         TimingData           => Tmkr_CECARRYIN_CLK_posedge,
         TestSignal           => CECARRYIN_dly,
         TestSignalName       => "CECARRYIN",
         TestDelay            => tisd_CECARRYIN_CLK,
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_CECARRYIN_CLK_posedge_posedge,
         SetupLow             => tsetup_CECARRYIN_CLK_negedge_posedge,
         HoldHigh             => thold_CECARRYIN_CLK_posedge_posedge,
         HoldLow              => thold_CECARRYIN_CLK_negedge_posedge,
         CheckEnabled         => (TO_X01(RSTCARRYIN_dly) /= '1') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => true,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks signal CED =====
       VitalSetupHoldCheck (
         Violation            => Tviol_CED_CLK_posedge,
         TimingData           => Tmkr_CED_CLK_posedge,
         TestSignal           => CED_dly,
         TestSignalName       => "CED",
         TestDelay            => tisd_CED_CLK,
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_CED_CLK_posedge_posedge,
         SetupLow             => tsetup_CED_CLK_negedge_posedge,
         HoldHigh             => thold_CED_CLK_posedge_posedge,
         HoldLow              => thold_CED_CLK_negedge_posedge,
         CheckEnabled         => (TO_X01(not RSTD_dly) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => true,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks signal CEM =====
       VitalSetupHoldCheck (
         Violation            => Tviol_CEM_CLK_posedge,
         TimingData           => Tmkr_CEM_CLK_posedge,
         TestSignal           => CEM_dly,
         TestSignalName       => "CEM",
         TestDelay            => tisd_CEM_CLK,
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_CEM_CLK_posedge_posedge,
         SetupLow             => tsetup_CEM_CLK_negedge_posedge,
         HoldHigh             => thold_CEM_CLK_posedge_posedge,
         HoldLow              => thold_CEM_CLK_negedge_posedge,
         CheckEnabled         => (TO_X01(not RSTM_dly) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => true,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks signal CEP =====
       VitalSetupHoldCheck (
         Violation            => Tviol_CEP_CLK_posedge,
         TimingData           => Tmkr_CEP_CLK_posedge,
         TestSignal           => CEP_dly,
         TestSignalName       => "CEP",
         TestDelay            => tisd_CEP_CLK,
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_CEP_CLK_posedge_posedge,
         SetupLow             => tsetup_CEP_CLK_negedge_posedge,
         HoldHigh             => thold_CEP_CLK_posedge_posedge,
         HoldLow              => thold_CEP_CLK_negedge_posedge,
         CheckEnabled         => (TO_X01(not RSTP_dly) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => true,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks for Bus signal OPMODE =====
       VitalSetupHoldCheck (
         Violation            => Tviol_OPMODE_CLK_posedge(0),
         TimingData           => Tmkr_OPMODE_CLK_posedge(0),
         TestSignal           => OPMODE_dly(0),
         TestSignalName       => "OPMODE(0)",
         TestDelay            => tisd_OPMODE_CLK(0),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_OPMODE_CLK_posedge_posedge(0),
         SetupLow             => tsetup_OPMODE_CLK_negedge_posedge(0),
         HoldHigh             => thold_OPMODE_CLK_posedge_posedge(0),
         HoldLow              => thold_OPMODE_CLK_negedge_posedge(0),
         CheckEnabled         => (TO_X01((not RSTOPMODE_dly) and (CEOPMODE_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_OPMODE_CLK_posedge(1),
         TimingData           => Tmkr_OPMODE_CLK_posedge(1),
         TestSignal           => OPMODE_dly(1),
         TestSignalName       => "OPMODE(1)",
         TestDelay            => tisd_OPMODE_CLK(1),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_OPMODE_CLK_posedge_posedge(1),
         SetupLow             => tsetup_OPMODE_CLK_negedge_posedge(1),
         HoldHigh             => thold_OPMODE_CLK_posedge_posedge(1),
         HoldLow              => thold_OPMODE_CLK_negedge_posedge(1),
         CheckEnabled         => (TO_X01((not RSTOPMODE_dly) and (CEOPMODE_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_OPMODE_CLK_posedge(2),
         TimingData           => Tmkr_OPMODE_CLK_posedge(2),
         TestSignal           => OPMODE_dly(2),
         TestSignalName       => "OPMODE(2)",
         TestDelay            => tisd_OPMODE_CLK(2),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_OPMODE_CLK_posedge_posedge(2),
         SetupLow             => tsetup_OPMODE_CLK_negedge_posedge(2),
         HoldHigh             => thold_OPMODE_CLK_posedge_posedge(2),
         HoldLow              => thold_OPMODE_CLK_negedge_posedge(2),
         CheckEnabled         => (TO_X01((not RSTOPMODE_dly) and (CEOPMODE_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_OPMODE_CLK_posedge(3),
         TimingData           => Tmkr_OPMODE_CLK_posedge(3),
         TestSignal           => OPMODE_dly(3),
         TestSignalName       => "OPMODE(3)",
         TestDelay            => tisd_OPMODE_CLK(3),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_OPMODE_CLK_posedge_posedge(3),
         SetupLow             => tsetup_OPMODE_CLK_negedge_posedge(3),
         HoldHigh             => thold_OPMODE_CLK_posedge_posedge(3),
         HoldLow              => thold_OPMODE_CLK_negedge_posedge(3),
         CheckEnabled         => (TO_X01((not RSTOPMODE_dly) and (CEOPMODE_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_OPMODE_CLK_posedge(4),
         TimingData           => Tmkr_OPMODE_CLK_posedge(4),
         TestSignal           => OPMODE_dly(4),
         TestSignalName       => "OPMODE(4)",
         TestDelay            => tisd_OPMODE_CLK(4),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_OPMODE_CLK_posedge_posedge(4),
         SetupLow             => tsetup_OPMODE_CLK_negedge_posedge(4),
         HoldHigh             => thold_OPMODE_CLK_posedge_posedge(4),
         HoldLow              => thold_OPMODE_CLK_negedge_posedge(4),
         CheckEnabled         => (TO_X01((not RSTOPMODE_dly) and (CEOPMODE_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_OPMODE_CLK_posedge(5),
         TimingData           => Tmkr_OPMODE_CLK_posedge(5),
         TestSignal           => OPMODE_dly(5),
         TestSignalName       => "OPMODE(5)",
         TestDelay            => tisd_OPMODE_CLK(5),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_OPMODE_CLK_posedge_posedge(5),
         SetupLow             => tsetup_OPMODE_CLK_negedge_posedge(5),
         HoldHigh             => thold_OPMODE_CLK_posedge_posedge(5),
         HoldLow              => thold_OPMODE_CLK_negedge_posedge(5),
         CheckEnabled         => (TO_X01((not RSTOPMODE_dly) and (CEOPMODE_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_OPMODE_CLK_posedge(6),
         TimingData           => Tmkr_OPMODE_CLK_posedge(6),
         TestSignal           => OPMODE_dly(6),
         TestSignalName       => "OPMODE(6)",
         TestDelay            => tisd_OPMODE_CLK(6),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_OPMODE_CLK_posedge_posedge(6),
         SetupLow             => tsetup_OPMODE_CLK_negedge_posedge(6),
         HoldHigh             => thold_OPMODE_CLK_posedge_posedge(6),
         HoldLow              => thold_OPMODE_CLK_negedge_posedge(6),
         CheckEnabled         => (TO_X01((not RSTOPMODE_dly) and (CEOPMODE_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_OPMODE_CLK_posedge(7),
         TimingData           => Tmkr_OPMODE_CLK_posedge(7),
         TestSignal           => OPMODE_dly(7),
         TestSignalName       => "OPMODE(7)",
         TestDelay            => tisd_OPMODE_CLK(7),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_OPMODE_CLK_posedge_posedge(7),
         SetupLow             => tsetup_OPMODE_CLK_negedge_posedge(7),
         HoldHigh             => thold_OPMODE_CLK_posedge_posedge(7),
         HoldLow              => thold_OPMODE_CLK_negedge_posedge(7),
         CheckEnabled         => (TO_X01((not RSTOPMODE_dly) and (CEOPMODE_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks for Bus signal PCIN =====
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(0),
         TimingData           => Tmkr_PCIN_CLK_posedge(0),
         TestSignal           => PCIN_dly(0),
         TestSignalName       => "PCIN(0)",
         TestDelay            => tisd_PCIN_CLK(0),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(0),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(0),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(0),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(0),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(1),
         TimingData           => Tmkr_PCIN_CLK_posedge(1),
         TestSignal           => PCIN_dly(1),
         TestSignalName       => "PCIN(1)",
         TestDelay            => tisd_PCIN_CLK(1),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(1),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(1),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(1),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(1),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(2),
         TimingData           => Tmkr_PCIN_CLK_posedge(2),
         TestSignal           => PCIN_dly(2),
         TestSignalName       => "PCIN(2)",
         TestDelay            => tisd_PCIN_CLK(2),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(2),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(2),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(2),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(2),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(3),
         TimingData           => Tmkr_PCIN_CLK_posedge(3),
         TestSignal           => PCIN_dly(3),
         TestSignalName       => "PCIN(3)",
         TestDelay            => tisd_PCIN_CLK(3),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(3),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(3),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(3),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(3),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(4),
         TimingData           => Tmkr_PCIN_CLK_posedge(4),
         TestSignal           => PCIN_dly(4),
         TestSignalName       => "PCIN(4)",
         TestDelay            => tisd_PCIN_CLK(4),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(4),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(4),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(4),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(4),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(5),
         TimingData           => Tmkr_PCIN_CLK_posedge(5),
         TestSignal           => PCIN_dly(5),
         TestSignalName       => "PCIN(5)",
         TestDelay            => tisd_PCIN_CLK(5),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(5),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(5),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(5),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(5),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(6),
         TimingData           => Tmkr_PCIN_CLK_posedge(6),
         TestSignal           => PCIN_dly(6),
         TestSignalName       => "PCIN(6)",
         TestDelay            => tisd_PCIN_CLK(6),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(6),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(6),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(6),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(6),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(7),
         TimingData           => Tmkr_PCIN_CLK_posedge(7),
         TestSignal           => PCIN_dly(7),
         TestSignalName       => "PCIN(7)",
         TestDelay            => tisd_PCIN_CLK(7),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(7),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(7),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(7),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(7),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(8),
         TimingData           => Tmkr_PCIN_CLK_posedge(8),
         TestSignal           => PCIN_dly(8),
         TestSignalName       => "PCIN(8)",
         TestDelay            => tisd_PCIN_CLK(8),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(8),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(8),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(8),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(8),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(9),
         TimingData           => Tmkr_PCIN_CLK_posedge(9),
         TestSignal           => PCIN_dly(9),
         TestSignalName       => "PCIN(9)",
         TestDelay            => tisd_PCIN_CLK(9),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(9),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(9),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(9),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(9),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(10),
         TimingData           => Tmkr_PCIN_CLK_posedge(10),
         TestSignal           => PCIN_dly(10),
         TestSignalName       => "PCIN(10)",
         TestDelay            => tisd_PCIN_CLK(10),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(10),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(10),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(10),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(10),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(11),
         TimingData           => Tmkr_PCIN_CLK_posedge(11),
         TestSignal           => PCIN_dly(11),
         TestSignalName       => "PCIN(11)",
         TestDelay            => tisd_PCIN_CLK(11),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(11),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(11),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(11),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(11),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(12),
         TimingData           => Tmkr_PCIN_CLK_posedge(12),
         TestSignal           => PCIN_dly(12),
         TestSignalName       => "PCIN(12)",
         TestDelay            => tisd_PCIN_CLK(12),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(12),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(12),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(12),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(12),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(13),
         TimingData           => Tmkr_PCIN_CLK_posedge(13),
         TestSignal           => PCIN_dly(13),
         TestSignalName       => "PCIN(13)",
         TestDelay            => tisd_PCIN_CLK(13),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(13),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(13),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(13),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(13),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(14),
         TimingData           => Tmkr_PCIN_CLK_posedge(14),
         TestSignal           => PCIN_dly(14),
         TestSignalName       => "PCIN(14)",
         TestDelay            => tisd_PCIN_CLK(14),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(14),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(14),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(14),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(14),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(15),
         TimingData           => Tmkr_PCIN_CLK_posedge(15),
         TestSignal           => PCIN_dly(15),
         TestSignalName       => "PCIN(15)",
         TestDelay            => tisd_PCIN_CLK(15),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(15),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(15),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(15),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(15),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(16),
         TimingData           => Tmkr_PCIN_CLK_posedge(16),
         TestSignal           => PCIN_dly(16),
         TestSignalName       => "PCIN(16)",
         TestDelay            => tisd_PCIN_CLK(16),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(16),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(16),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(16),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(16),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(17),
         TimingData           => Tmkr_PCIN_CLK_posedge(17),
         TestSignal           => PCIN_dly(17),
         TestSignalName       => "PCIN(17)",
         TestDelay            => tisd_PCIN_CLK(17),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(17),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(17),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(17),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(17),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(18),
         TimingData           => Tmkr_PCIN_CLK_posedge(18),
         TestSignal           => PCIN_dly(18),
         TestSignalName       => "PCIN(18)",
         TestDelay            => tisd_PCIN_CLK(18),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(18),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(18),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(18),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(18),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(19),
         TimingData           => Tmkr_PCIN_CLK_posedge(19),
         TestSignal           => PCIN_dly(19),
         TestSignalName       => "PCIN(19)",
         TestDelay            => tisd_PCIN_CLK(19),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(19),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(19),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(19),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(19),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(20),
         TimingData           => Tmkr_PCIN_CLK_posedge(20),
         TestSignal           => PCIN_dly(20),
         TestSignalName       => "PCIN(20)",
         TestDelay            => tisd_PCIN_CLK(20),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(20),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(20),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(20),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(20),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(21),
         TimingData           => Tmkr_PCIN_CLK_posedge(21),
         TestSignal           => PCIN_dly(21),
         TestSignalName       => "PCIN(21)",
         TestDelay            => tisd_PCIN_CLK(21),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(21),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(21),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(21),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(21),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(22),
         TimingData           => Tmkr_PCIN_CLK_posedge(22),
         TestSignal           => PCIN_dly(22),
         TestSignalName       => "PCIN(22)",
         TestDelay            => tisd_PCIN_CLK(22),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(22),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(22),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(22),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(22),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(23),
         TimingData           => Tmkr_PCIN_CLK_posedge(23),
         TestSignal           => PCIN_dly(23),
         TestSignalName       => "PCIN(23)",
         TestDelay            => tisd_PCIN_CLK(23),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(23),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(23),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(23),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(23),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(24),
         TimingData           => Tmkr_PCIN_CLK_posedge(24),
         TestSignal           => PCIN_dly(24),
         TestSignalName       => "PCIN(24)",
         TestDelay            => tisd_PCIN_CLK(24),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(24),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(24),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(24),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(24),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(25),
         TimingData           => Tmkr_PCIN_CLK_posedge(25),
         TestSignal           => PCIN_dly(25),
         TestSignalName       => "PCIN(25)",
         TestDelay            => tisd_PCIN_CLK(25),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(25),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(25),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(25),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(25),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(26),
         TimingData           => Tmkr_PCIN_CLK_posedge(26),
         TestSignal           => PCIN_dly(26),
         TestSignalName       => "PCIN(26)",
         TestDelay            => tisd_PCIN_CLK(26),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(26),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(26),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(26),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(26),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(27),
         TimingData           => Tmkr_PCIN_CLK_posedge(27),
         TestSignal           => PCIN_dly(27),
         TestSignalName       => "PCIN(27)",
         TestDelay            => tisd_PCIN_CLK(27),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(27),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(27),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(27),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(27),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(28),
         TimingData           => Tmkr_PCIN_CLK_posedge(28),
         TestSignal           => PCIN_dly(28),
         TestSignalName       => "PCIN(28)",
         TestDelay            => tisd_PCIN_CLK(28),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(28),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(28),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(28),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(28),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(29),
         TimingData           => Tmkr_PCIN_CLK_posedge(29),
         TestSignal           => PCIN_dly(29),
         TestSignalName       => "PCIN(29)",
         TestDelay            => tisd_PCIN_CLK(29),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(29),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(29),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(29),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(29),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(30),
         TimingData           => Tmkr_PCIN_CLK_posedge(30),
         TestSignal           => PCIN_dly(30),
         TestSignalName       => "PCIN(30)",
         TestDelay            => tisd_PCIN_CLK(30),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(30),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(30),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(30),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(30),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(31),
         TimingData           => Tmkr_PCIN_CLK_posedge(31),
         TestSignal           => PCIN_dly(31),
         TestSignalName       => "PCIN(31)",
         TestDelay            => tisd_PCIN_CLK(31),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(31),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(31),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(31),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(31),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(32),
         TimingData           => Tmkr_PCIN_CLK_posedge(32),
         TestSignal           => PCIN_dly(32),
         TestSignalName       => "PCIN(32)",
         TestDelay            => tisd_PCIN_CLK(32),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(32),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(32),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(32),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(32),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(33),
         TimingData           => Tmkr_PCIN_CLK_posedge(33),
         TestSignal           => PCIN_dly(33),
         TestSignalName       => "PCIN(33)",
         TestDelay            => tisd_PCIN_CLK(33),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(33),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(33),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(33),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(33),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(34),
         TimingData           => Tmkr_PCIN_CLK_posedge(34),
         TestSignal           => PCIN_dly(34),
         TestSignalName       => "PCIN(34)",
         TestDelay            => tisd_PCIN_CLK(34),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(34),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(34),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(34),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(34),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(35),
         TimingData           => Tmkr_PCIN_CLK_posedge(35),
         TestSignal           => PCIN_dly(35),
         TestSignalName       => "PCIN(35)",
         TestDelay            => tisd_PCIN_CLK(35),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(35),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(35),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(35),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(35),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(36),
         TimingData           => Tmkr_PCIN_CLK_posedge(36),
         TestSignal           => PCIN_dly(36),
         TestSignalName       => "PCIN(36)",
         TestDelay            => tisd_PCIN_CLK(36),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(36),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(36),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(36),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(36),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(37),
         TimingData           => Tmkr_PCIN_CLK_posedge(37),
         TestSignal           => PCIN_dly(37),
         TestSignalName       => "PCIN(37)",
         TestDelay            => tisd_PCIN_CLK(37),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(37),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(37),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(37),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(37),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(38),
         TimingData           => Tmkr_PCIN_CLK_posedge(38),
         TestSignal           => PCIN_dly(38),
         TestSignalName       => "PCIN(38)",
         TestDelay            => tisd_PCIN_CLK(38),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(38),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(38),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(38),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(38),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(39),
         TimingData           => Tmkr_PCIN_CLK_posedge(39),
         TestSignal           => PCIN_dly(39),
         TestSignalName       => "PCIN(39)",
         TestDelay            => tisd_PCIN_CLK(39),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(39),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(39),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(39),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(39),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(40),
         TimingData           => Tmkr_PCIN_CLK_posedge(40),
         TestSignal           => PCIN_dly(40),
         TestSignalName       => "PCIN(40)",
         TestDelay            => tisd_PCIN_CLK(40),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(40),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(40),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(40),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(40),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(41),
         TimingData           => Tmkr_PCIN_CLK_posedge(41),
         TestSignal           => PCIN_dly(41),
         TestSignalName       => "PCIN(41)",
         TestDelay            => tisd_PCIN_CLK(41),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(41),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(41),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(41),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(41),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(42),
         TimingData           => Tmkr_PCIN_CLK_posedge(42),
         TestSignal           => PCIN_dly(42),
         TestSignalName       => "PCIN(42)",
         TestDelay            => tisd_PCIN_CLK(42),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(42),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(42),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(42),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(42),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(43),
         TimingData           => Tmkr_PCIN_CLK_posedge(43),
         TestSignal           => PCIN_dly(43),
         TestSignalName       => "PCIN(43)",
         TestDelay            => tisd_PCIN_CLK(43),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(43),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(43),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(43),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(43),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(44),
         TimingData           => Tmkr_PCIN_CLK_posedge(44),
         TestSignal           => PCIN_dly(44),
         TestSignalName       => "PCIN(44)",
         TestDelay            => tisd_PCIN_CLK(44),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(44),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(44),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(44),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(44),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(45),
         TimingData           => Tmkr_PCIN_CLK_posedge(45),
         TestSignal           => PCIN_dly(45),
         TestSignalName       => "PCIN(45)",
         TestDelay            => tisd_PCIN_CLK(45),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(45),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(45),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(45),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(45),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(46),
         TimingData           => Tmkr_PCIN_CLK_posedge(46),
         TestSignal           => PCIN_dly(46),
         TestSignalName       => "PCIN(46)",
         TestDelay            => tisd_PCIN_CLK(46),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(46),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(46),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(46),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(46),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
       VitalSetupHoldCheck (
         Violation            => Tviol_PCIN_CLK_posedge(47),
         TimingData           => Tmkr_PCIN_CLK_posedge(47),
         TestSignal           => PCIN_dly(47),
         TestSignalName       => "PCIN(47)",
         TestDelay            => tisd_PCIN_CLK(47),
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_PCIN_CLK_posedge_posedge(47),
         SetupLow             => tsetup_PCIN_CLK_negedge_posedge(47),
         HoldHigh             => thold_PCIN_CLK_posedge_posedge(47),
         HoldLow              => thold_PCIN_CLK_negedge_posedge(47),
         CheckEnabled         => (TO_X01((not RSTP_dly) and (CEP_dly)) /= '0') and (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => True,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks signal RSTA =====
       VitalSetupHoldCheck (
         Violation            => Tviol_RSTA_CLK_posedge,
         TimingData           => Tmkr_RSTA_CLK_posedge,
         TestSignal           => RSTA_dly,
         TestSignalName       => "RSTA",
         TestDelay            => tisd_RSTA_CLK,
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_RSTA_CLK_posedge_posedge,
         SetupLow             => tsetup_RSTA_CLK_negedge_posedge,
         HoldHigh             => thold_RSTA_CLK_posedge_posedge,
         HoldLow              => thold_RSTA_CLK_negedge_posedge,
         CheckEnabled         => (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => true,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks signal RSTB =====
       VitalSetupHoldCheck (
         Violation            => Tviol_RSTB_CLK_posedge,
         TimingData           => Tmkr_RSTB_CLK_posedge,
         TestSignal           => RSTB_dly,
         TestSignalName       => "RSTB",
         TestDelay            => tisd_RSTB_CLK,
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_RSTB_CLK_posedge_posedge,
         SetupLow             => tsetup_RSTB_CLK_negedge_posedge,
         HoldHigh             => thold_RSTB_CLK_posedge_posedge,
         HoldLow              => thold_RSTB_CLK_negedge_posedge,
         CheckEnabled         => (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => true,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks signal RSTC =====
       VitalSetupHoldCheck (
         Violation            => Tviol_RSTC_CLK_posedge,
         TimingData           => Tmkr_RSTC_CLK_posedge,
         TestSignal           => RSTC_dly,
         TestSignalName       => "RSTC",
         TestDelay            => tisd_RSTC_CLK,
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_RSTC_CLK_posedge_posedge,
         SetupLow             => tsetup_RSTC_CLK_negedge_posedge,
         HoldHigh             => thold_RSTC_CLK_posedge_posedge,
         HoldLow              => thold_RSTC_CLK_negedge_posedge,
         CheckEnabled         => (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => true,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks signal RSTCARRYIN =====
       VitalSetupHoldCheck (
         Violation            => Tviol_RSTCARRYIN_CLK_posedge,
         TimingData           => Tmkr_RSTCARRYIN_CLK_posedge,
         TestSignal           => RSTCARRYIN_dly,
         TestSignalName       => "RSTCARRYIN",
         TestDelay            => tisd_RSTCARRYIN_CLK,
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_RSTCARRYIN_CLK_posedge_posedge,
         SetupLow             => tsetup_RSTCARRYIN_CLK_negedge_posedge,
         HoldHigh             => thold_RSTCARRYIN_CLK_posedge_posedge,
         HoldLow              => thold_RSTCARRYIN_CLK_negedge_posedge,
         CheckEnabled         => (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => true,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks signal RSTD =====
       VitalSetupHoldCheck (
         Violation            => Tviol_RSTD_CLK_posedge,
         TimingData           => Tmkr_RSTD_CLK_posedge,
         TestSignal           => RSTD_dly,
         TestSignalName       => "RSTD",
         TestDelay            => tisd_RSTD_CLK,
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_RSTD_CLK_posedge_posedge,
         SetupLow             => tsetup_RSTD_CLK_negedge_posedge,
         HoldHigh             => thold_RSTD_CLK_posedge_posedge,
         HoldLow              => thold_RSTD_CLK_negedge_posedge,
         CheckEnabled         => (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => true,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks signal RSTM =====
       VitalSetupHoldCheck (
         Violation            => Tviol_RSTM_CLK_posedge,
         TimingData           => Tmkr_RSTM_CLK_posedge,
         TestSignal           => RSTM_dly,
         TestSignalName       => "RSTM",
         TestDelay            => tisd_RSTM_CLK,
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_RSTM_CLK_posedge_posedge,
         SetupLow             => tsetup_RSTM_CLK_negedge_posedge,
         HoldHigh             => thold_RSTM_CLK_posedge_posedge,
         HoldLow              => thold_RSTM_CLK_negedge_posedge,
         CheckEnabled         => (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => true,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks signal RSTOPMODE =====
       VitalSetupHoldCheck (
         Violation            => Tviol_RSTOPMODE_CLK_posedge,
         TimingData           => Tmkr_RSTOPMODE_CLK_posedge,
         TestSignal           => RSTOPMODE_dly,
         TestSignalName       => "RSTOPMODE",
         TestDelay            => tisd_RSTOPMODE_CLK,
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_RSTOPMODE_CLK_posedge_posedge,
         SetupLow             => tsetup_RSTOPMODE_CLK_negedge_posedge,
         HoldHigh             => thold_RSTOPMODE_CLK_posedge_posedge,
         HoldLow              => thold_RSTOPMODE_CLK_negedge_posedge,
         CheckEnabled         => (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => true,
         MsgSeverity          => Warning);
--=====  Vital SetupHold Checks signal RSTP =====
       VitalSetupHoldCheck (
         Violation            => Tviol_RSTP_CLK_posedge,
         TimingData           => Tmkr_RSTP_CLK_posedge,
         TestSignal           => RSTP_dly,
         TestSignalName       => "RSTP",
         TestDelay            => tisd_RSTP_CLK,
         RefSignal            => CLK_dly,
         RefSignalName        => "CLK",
         RefDelay             => ticd_CLK,
         SetupHigh            => tsetup_RSTP_CLK_posedge_posedge,
         SetupLow             => tsetup_RSTP_CLK_negedge_posedge,
         HoldHigh             => thold_RSTP_CLK_posedge_posedge,
         HoldLow              => thold_RSTP_CLK_negedge_posedge,
         CheckEnabled         => (TO_X01(GSR_dly) /= '1'),
         RefTransition        => 'R',
         HeaderMsg            => InstancePath & "/X_DSP48A",
         Xon                  => Xon,
         MsgOn                => true,
         MsgSeverity          => Warning);
   end if;

-- End of (TimingChecksOn)

-- Start Path Delays

       VitalPathDelay01 (
         OutSignal	=> BCOUT(17),
         GlitchData	=> BCOUT_GlitchData(17),
         OutSignalName	=> "BCOUT(17)",
         OutTemp	=> BCOUT_zd(17),
         Paths		=> (
			0 => (B_dly(17)'last_event, tpd_B_BCOUT((323 - 0)- 18*0), true),
			1 => (B_dly(16)'last_event, tpd_B_BCOUT((323 - 0)- 18*1), true),
			2 => (B_dly(15)'last_event, tpd_B_BCOUT((323 - 0)- 18*2), true),
			3 => (B_dly(14)'last_event, tpd_B_BCOUT((323 - 0)- 18*3), true),
			4 => (B_dly(13)'last_event, tpd_B_BCOUT((323 - 0)- 18*4), true),
			5 => (B_dly(12)'last_event, tpd_B_BCOUT((323 - 0)- 18*5), true),
			6 => (B_dly(11)'last_event, tpd_B_BCOUT((323 - 0)- 18*6), true),
			7 => (B_dly(10)'last_event, tpd_B_BCOUT((323 - 0)- 18*7), true),
			8 => (B_dly(9)'last_event, tpd_B_BCOUT((323 - 0)- 18*8), true),
			9 => (B_dly(8)'last_event, tpd_B_BCOUT((323 - 0)- 18*9), true),
			10 => (B_dly(7)'last_event, tpd_B_BCOUT((323 - 0)- 18*10), true),
			11 => (B_dly(6)'last_event, tpd_B_BCOUT((323 - 0)- 18*11), true),
			12 => (B_dly(5)'last_event, tpd_B_BCOUT((323 - 0)- 18*12), true),
			13 => (B_dly(4)'last_event, tpd_B_BCOUT((323 - 0)- 18*13), true),
			14 => (B_dly(3)'last_event, tpd_B_BCOUT((323 - 0)- 18*14), true),
			15 => (B_dly(2)'last_event, tpd_B_BCOUT((323 - 0)- 18*15), true),
			16 => (B_dly(1)'last_event, tpd_B_BCOUT((323 - 0)- 18*16), true),
			17 => (B_dly(0)'last_event, tpd_B_BCOUT((323 - 0)- 18*17), true),
			18 => (BCIN_dly(17)'last_event, tpd_BCIN_BCOUT((323 - 0)- 18*0), true),
			19 => (BCIN_dly(16)'last_event, tpd_BCIN_BCOUT((323 - 0)- 18*1), true),
			20 => (BCIN_dly(15)'last_event, tpd_BCIN_BCOUT((323 - 0)- 18*2), true),
			21 => (BCIN_dly(14)'last_event, tpd_BCIN_BCOUT((323 - 0)- 18*3), true),
			22 => (BCIN_dly(13)'last_event, tpd_BCIN_BCOUT((323 - 0)- 18*4), true),
			23 => (BCIN_dly(12)'last_event, tpd_BCIN_BCOUT((323 - 0)- 18*5), true),
			24 => (BCIN_dly(11)'last_event, tpd_BCIN_BCOUT((323 - 0)- 18*6), true),
			25 => (BCIN_dly(10)'last_event, tpd_BCIN_BCOUT((323 - 0)- 18*7), true),
			26 => (BCIN_dly(9)'last_event, tpd_BCIN_BCOUT((323 - 0)- 18*8), true),
			27 => (BCIN_dly(8)'last_event, tpd_BCIN_BCOUT((323 - 0)- 18*9), true),
			28 => (BCIN_dly(7)'last_event, tpd_BCIN_BCOUT((323 - 0)- 18*10), true),
			29 => (BCIN_dly(6)'last_event, tpd_BCIN_BCOUT((323 - 0)- 18*11), true),
			30 => (BCIN_dly(5)'last_event, tpd_BCIN_BCOUT((323 - 0)- 18*12), true),
			31 => (BCIN_dly(4)'last_event, tpd_BCIN_BCOUT((323 - 0)- 18*13), true),
			32 => (BCIN_dly(3)'last_event, tpd_BCIN_BCOUT((323 - 0)- 18*14), true),
			33 => (BCIN_dly(2)'last_event, tpd_BCIN_BCOUT((323 - 0)- 18*15), true),
			34 => (BCIN_dly(1)'last_event, tpd_BCIN_BCOUT((323 - 0)- 18*16), true),
			35 => (BCIN_dly(0)'last_event, tpd_BCIN_BCOUT((323 - 0)- 18*17), true),
			36 => (D_dly(17)'last_event, tpd_D_BCOUT((323 - 0)- 18*0), true),
			37 => (D_dly(16)'last_event, tpd_D_BCOUT((323 - 0)- 18*1), true),
			38 => (D_dly(15)'last_event, tpd_D_BCOUT((323 - 0)- 18*2), true),
			39 => (D_dly(14)'last_event, tpd_D_BCOUT((323 - 0)- 18*3), true),
			40 => (D_dly(13)'last_event, tpd_D_BCOUT((323 - 0)- 18*4), true),
			41 => (D_dly(12)'last_event, tpd_D_BCOUT((323 - 0)- 18*5), true),
			42 => (D_dly(11)'last_event, tpd_D_BCOUT((323 - 0)- 18*6), true),
			43 => (D_dly(10)'last_event, tpd_D_BCOUT((323 - 0)- 18*7), true),
			44 => (D_dly(9)'last_event, tpd_D_BCOUT((323 - 0)- 18*8), true),
			45 => (D_dly(8)'last_event, tpd_D_BCOUT((323 - 0)- 18*9), true),
			46 => (D_dly(7)'last_event, tpd_D_BCOUT((323 - 0)- 18*10), true),
			47 => (D_dly(6)'last_event, tpd_D_BCOUT((323 - 0)- 18*11), true),
			48 => (D_dly(5)'last_event, tpd_D_BCOUT((323 - 0)- 18*12), true),
			49 => (D_dly(4)'last_event, tpd_D_BCOUT((323 - 0)- 18*13), true),
			50 => (D_dly(3)'last_event, tpd_D_BCOUT((323 - 0)- 18*14), true),
			51 => (D_dly(2)'last_event, tpd_D_BCOUT((323 - 0)- 18*15), true),
			52 => (D_dly(1)'last_event, tpd_D_BCOUT((323 - 0)- 18*16), true),
			53 => (D_dly(0)'last_event, tpd_D_BCOUT((323 - 0)- 18*17), true),
			54 => (OPMODE_dly(7)'last_event, tpd_OPMODE_BCOUT((143 - 0)- 18*0), true),
			55 => (OPMODE_dly(6)'last_event, tpd_OPMODE_BCOUT((143 - 0)- 18*1), true),
			56 => (OPMODE_dly(5)'last_event, tpd_OPMODE_BCOUT((143 - 0)- 18*2), true),
			57 => (OPMODE_dly(4)'last_event, tpd_OPMODE_BCOUT((143 - 0)- 18*3), true),
			58 => (OPMODE_dly(3)'last_event, tpd_OPMODE_BCOUT((143 - 0)- 18*4), true),
			59 => (OPMODE_dly(2)'last_event, tpd_OPMODE_BCOUT((143 - 0)- 18*5), true),
			60 => (OPMODE_dly(1)'last_event, tpd_OPMODE_BCOUT((143 - 0)- 18*6), true),
			61 => (OPMODE_dly(0)'last_event, tpd_OPMODE_BCOUT((143 - 0)- 18*7), true),
			62 => (RSTB_dly'last_event, tpd_RSTB_BCOUT(17), true),
			63 => (RSTD_dly'last_event, tpd_RSTD_BCOUT(17), true),
			64 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_BCOUT(17), true),
			65 => (CLK_dly'last_event, tpd_CLK_BCOUT(17), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> BCOUT(16),
         GlitchData	=> BCOUT_GlitchData(16),
         OutSignalName	=> "BCOUT(16)",
         OutTemp	=> BCOUT_zd(16),
         Paths		=> (
			0 => (B_dly(16)'last_event, tpd_B_BCOUT((323 - 1)- 18*1), true),
			1 => (B_dly(15)'last_event, tpd_B_BCOUT((323 - 1)- 18*2), true),
			2 => (B_dly(14)'last_event, tpd_B_BCOUT((323 - 1)- 18*3), true),
			3 => (B_dly(13)'last_event, tpd_B_BCOUT((323 - 1)- 18*4), true),
			4 => (B_dly(12)'last_event, tpd_B_BCOUT((323 - 1)- 18*5), true),
			5 => (B_dly(11)'last_event, tpd_B_BCOUT((323 - 1)- 18*6), true),
			6 => (B_dly(10)'last_event, tpd_B_BCOUT((323 - 1)- 18*7), true),
			7 => (B_dly(9)'last_event, tpd_B_BCOUT((323 - 1)- 18*8), true),
			8 => (B_dly(8)'last_event, tpd_B_BCOUT((323 - 1)- 18*9), true),
			9 => (B_dly(7)'last_event, tpd_B_BCOUT((323 - 1)- 18*10), true),
			10 => (B_dly(6)'last_event, tpd_B_BCOUT((323 - 1)- 18*11), true),
			11 => (B_dly(5)'last_event, tpd_B_BCOUT((323 - 1)- 18*12), true),
			12 => (B_dly(4)'last_event, tpd_B_BCOUT((323 - 1)- 18*13), true),
			13 => (B_dly(3)'last_event, tpd_B_BCOUT((323 - 1)- 18*14), true),
			14 => (B_dly(2)'last_event, tpd_B_BCOUT((323 - 1)- 18*15), true),
			15 => (B_dly(1)'last_event, tpd_B_BCOUT((323 - 1)- 18*16), true),
			16 => (B_dly(0)'last_event, tpd_B_BCOUT((323 - 1)- 18*17), true),
			17 => (BCIN_dly(16)'last_event, tpd_BCIN_BCOUT((323 - 1)- 18*1), true),
			18 => (BCIN_dly(15)'last_event, tpd_BCIN_BCOUT((323 - 1)- 18*2), true),
			19 => (BCIN_dly(14)'last_event, tpd_BCIN_BCOUT((323 - 1)- 18*3), true),
			20 => (BCIN_dly(13)'last_event, tpd_BCIN_BCOUT((323 - 1)- 18*4), true),
			21 => (BCIN_dly(12)'last_event, tpd_BCIN_BCOUT((323 - 1)- 18*5), true),
			22 => (BCIN_dly(11)'last_event, tpd_BCIN_BCOUT((323 - 1)- 18*6), true),
			23 => (BCIN_dly(10)'last_event, tpd_BCIN_BCOUT((323 - 1)- 18*7), true),
			24 => (BCIN_dly(9)'last_event, tpd_BCIN_BCOUT((323 - 1)- 18*8), true),
			25 => (BCIN_dly(8)'last_event, tpd_BCIN_BCOUT((323 - 1)- 18*9), true),
			26 => (BCIN_dly(7)'last_event, tpd_BCIN_BCOUT((323 - 1)- 18*10), true),
			27 => (BCIN_dly(6)'last_event, tpd_BCIN_BCOUT((323 - 1)- 18*11), true),
			28 => (BCIN_dly(5)'last_event, tpd_BCIN_BCOUT((323 - 1)- 18*12), true),
			29 => (BCIN_dly(4)'last_event, tpd_BCIN_BCOUT((323 - 1)- 18*13), true),
			30 => (BCIN_dly(3)'last_event, tpd_BCIN_BCOUT((323 - 1)- 18*14), true),
			31 => (BCIN_dly(2)'last_event, tpd_BCIN_BCOUT((323 - 1)- 18*15), true),
			32 => (BCIN_dly(1)'last_event, tpd_BCIN_BCOUT((323 - 1)- 18*16), true),
			33 => (BCIN_dly(0)'last_event, tpd_BCIN_BCOUT((323 - 1)- 18*17), true),
			34 => (D_dly(16)'last_event, tpd_D_BCOUT((323 - 1)- 18*1), true),
			35 => (D_dly(15)'last_event, tpd_D_BCOUT((323 - 1)- 18*2), true),
			36 => (D_dly(14)'last_event, tpd_D_BCOUT((323 - 1)- 18*3), true),
			37 => (D_dly(13)'last_event, tpd_D_BCOUT((323 - 1)- 18*4), true),
			38 => (D_dly(12)'last_event, tpd_D_BCOUT((323 - 1)- 18*5), true),
			39 => (D_dly(11)'last_event, tpd_D_BCOUT((323 - 1)- 18*6), true),
			40 => (D_dly(10)'last_event, tpd_D_BCOUT((323 - 1)- 18*7), true),
			41 => (D_dly(9)'last_event, tpd_D_BCOUT((323 - 1)- 18*8), true),
			42 => (D_dly(8)'last_event, tpd_D_BCOUT((323 - 1)- 18*9), true),
			43 => (D_dly(7)'last_event, tpd_D_BCOUT((323 - 1)- 18*10), true),
			44 => (D_dly(6)'last_event, tpd_D_BCOUT((323 - 1)- 18*11), true),
			45 => (D_dly(5)'last_event, tpd_D_BCOUT((323 - 1)- 18*12), true),
			46 => (D_dly(4)'last_event, tpd_D_BCOUT((323 - 1)- 18*13), true),
			47 => (D_dly(3)'last_event, tpd_D_BCOUT((323 - 1)- 18*14), true),
			48 => (D_dly(2)'last_event, tpd_D_BCOUT((323 - 1)- 18*15), true),
			49 => (D_dly(1)'last_event, tpd_D_BCOUT((323 - 1)- 18*16), true),
			50 => (D_dly(0)'last_event, tpd_D_BCOUT((323 - 1)- 18*17), true),
			51 => (OPMODE_dly(7)'last_event, tpd_OPMODE_BCOUT((143 - 1)- 18*0), true),
			52 => (OPMODE_dly(6)'last_event, tpd_OPMODE_BCOUT((143 - 1)- 18*1), true),
			53 => (OPMODE_dly(5)'last_event, tpd_OPMODE_BCOUT((143 - 1)- 18*2), true),
			54 => (OPMODE_dly(4)'last_event, tpd_OPMODE_BCOUT((143 - 1)- 18*3), true),
			55 => (OPMODE_dly(3)'last_event, tpd_OPMODE_BCOUT((143 - 1)- 18*4), true),
			56 => (OPMODE_dly(2)'last_event, tpd_OPMODE_BCOUT((143 - 1)- 18*5), true),
			57 => (OPMODE_dly(1)'last_event, tpd_OPMODE_BCOUT((143 - 1)- 18*6), true),
			58 => (OPMODE_dly(0)'last_event, tpd_OPMODE_BCOUT((143 - 1)- 18*7), true),
			59 => (RSTB_dly'last_event, tpd_RSTB_BCOUT(16), true),
			60 => (RSTD_dly'last_event, tpd_RSTD_BCOUT(16), true),
			61 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_BCOUT(16), true),
			62 => (CLK_dly'last_event, tpd_CLK_BCOUT(16), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> BCOUT(15),
         GlitchData	=> BCOUT_GlitchData(15),
         OutSignalName	=> "BCOUT(15)",
         OutTemp	=> BCOUT_zd(15),
         Paths		=> (
			0 => (B_dly(15)'last_event, tpd_B_BCOUT((323 - 2)- 18*2), true),
			1 => (B_dly(14)'last_event, tpd_B_BCOUT((323 - 2)- 18*3), true),
			2 => (B_dly(13)'last_event, tpd_B_BCOUT((323 - 2)- 18*4), true),
			3 => (B_dly(12)'last_event, tpd_B_BCOUT((323 - 2)- 18*5), true),
			4 => (B_dly(11)'last_event, tpd_B_BCOUT((323 - 2)- 18*6), true),
			5 => (B_dly(10)'last_event, tpd_B_BCOUT((323 - 2)- 18*7), true),
			6 => (B_dly(9)'last_event, tpd_B_BCOUT((323 - 2)- 18*8), true),
			7 => (B_dly(8)'last_event, tpd_B_BCOUT((323 - 2)- 18*9), true),
			8 => (B_dly(7)'last_event, tpd_B_BCOUT((323 - 2)- 18*10), true),
			9 => (B_dly(6)'last_event, tpd_B_BCOUT((323 - 2)- 18*11), true),
			10 => (B_dly(5)'last_event, tpd_B_BCOUT((323 - 2)- 18*12), true),
			11 => (B_dly(4)'last_event, tpd_B_BCOUT((323 - 2)- 18*13), true),
			12 => (B_dly(3)'last_event, tpd_B_BCOUT((323 - 2)- 18*14), true),
			13 => (B_dly(2)'last_event, tpd_B_BCOUT((323 - 2)- 18*15), true),
			14 => (B_dly(1)'last_event, tpd_B_BCOUT((323 - 2)- 18*16), true),
			15 => (B_dly(0)'last_event, tpd_B_BCOUT((323 - 2)- 18*17), true),
			16 => (BCIN_dly(15)'last_event, tpd_BCIN_BCOUT((323 - 2)- 18*2), true),
			17 => (BCIN_dly(14)'last_event, tpd_BCIN_BCOUT((323 - 2)- 18*3), true),
			18 => (BCIN_dly(13)'last_event, tpd_BCIN_BCOUT((323 - 2)- 18*4), true),
			19 => (BCIN_dly(12)'last_event, tpd_BCIN_BCOUT((323 - 2)- 18*5), true),
			20 => (BCIN_dly(11)'last_event, tpd_BCIN_BCOUT((323 - 2)- 18*6), true),
			21 => (BCIN_dly(10)'last_event, tpd_BCIN_BCOUT((323 - 2)- 18*7), true),
			22 => (BCIN_dly(9)'last_event, tpd_BCIN_BCOUT((323 - 2)- 18*8), true),
			23 => (BCIN_dly(8)'last_event, tpd_BCIN_BCOUT((323 - 2)- 18*9), true),
			24 => (BCIN_dly(7)'last_event, tpd_BCIN_BCOUT((323 - 2)- 18*10), true),
			25 => (BCIN_dly(6)'last_event, tpd_BCIN_BCOUT((323 - 2)- 18*11), true),
			26 => (BCIN_dly(5)'last_event, tpd_BCIN_BCOUT((323 - 2)- 18*12), true),
			27 => (BCIN_dly(4)'last_event, tpd_BCIN_BCOUT((323 - 2)- 18*13), true),
			28 => (BCIN_dly(3)'last_event, tpd_BCIN_BCOUT((323 - 2)- 18*14), true),
			29 => (BCIN_dly(2)'last_event, tpd_BCIN_BCOUT((323 - 2)- 18*15), true),
			30 => (BCIN_dly(1)'last_event, tpd_BCIN_BCOUT((323 - 2)- 18*16), true),
			31 => (BCIN_dly(0)'last_event, tpd_BCIN_BCOUT((323 - 2)- 18*17), true),
			32 => (D_dly(15)'last_event, tpd_D_BCOUT((323 - 2)- 18*2), true),
			33 => (D_dly(14)'last_event, tpd_D_BCOUT((323 - 2)- 18*3), true),
			34 => (D_dly(13)'last_event, tpd_D_BCOUT((323 - 2)- 18*4), true),
			35 => (D_dly(12)'last_event, tpd_D_BCOUT((323 - 2)- 18*5), true),
			36 => (D_dly(11)'last_event, tpd_D_BCOUT((323 - 2)- 18*6), true),
			37 => (D_dly(10)'last_event, tpd_D_BCOUT((323 - 2)- 18*7), true),
			38 => (D_dly(9)'last_event, tpd_D_BCOUT((323 - 2)- 18*8), true),
			39 => (D_dly(8)'last_event, tpd_D_BCOUT((323 - 2)- 18*9), true),
			40 => (D_dly(7)'last_event, tpd_D_BCOUT((323 - 2)- 18*10), true),
			41 => (D_dly(6)'last_event, tpd_D_BCOUT((323 - 2)- 18*11), true),
			42 => (D_dly(5)'last_event, tpd_D_BCOUT((323 - 2)- 18*12), true),
			43 => (D_dly(4)'last_event, tpd_D_BCOUT((323 - 2)- 18*13), true),
			44 => (D_dly(3)'last_event, tpd_D_BCOUT((323 - 2)- 18*14), true),
			45 => (D_dly(2)'last_event, tpd_D_BCOUT((323 - 2)- 18*15), true),
			46 => (D_dly(1)'last_event, tpd_D_BCOUT((323 - 2)- 18*16), true),
			47 => (D_dly(0)'last_event, tpd_D_BCOUT((323 - 2)- 18*17), true),
			48 => (OPMODE_dly(7)'last_event, tpd_OPMODE_BCOUT((143 - 2)- 18*0), true),
			49 => (OPMODE_dly(6)'last_event, tpd_OPMODE_BCOUT((143 - 2)- 18*1), true),
			50 => (OPMODE_dly(5)'last_event, tpd_OPMODE_BCOUT((143 - 2)- 18*2), true),
			51 => (OPMODE_dly(4)'last_event, tpd_OPMODE_BCOUT((143 - 2)- 18*3), true),
			52 => (OPMODE_dly(3)'last_event, tpd_OPMODE_BCOUT((143 - 2)- 18*4), true),
			53 => (OPMODE_dly(2)'last_event, tpd_OPMODE_BCOUT((143 - 2)- 18*5), true),
			54 => (OPMODE_dly(1)'last_event, tpd_OPMODE_BCOUT((143 - 2)- 18*6), true),
			55 => (OPMODE_dly(0)'last_event, tpd_OPMODE_BCOUT((143 - 2)- 18*7), true),
			56 => (RSTB_dly'last_event, tpd_RSTB_BCOUT(15), true),
			57 => (RSTD_dly'last_event, tpd_RSTD_BCOUT(15), true),
			58 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_BCOUT(15), true),
			59 => (CLK_dly'last_event, tpd_CLK_BCOUT(15), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> BCOUT(14),
         GlitchData	=> BCOUT_GlitchData(14),
         OutSignalName	=> "BCOUT(14)",
         OutTemp	=> BCOUT_zd(14),
         Paths		=> (
			0 => (B_dly(14)'last_event, tpd_B_BCOUT((323 - 3)- 18*3), true),
			1 => (B_dly(13)'last_event, tpd_B_BCOUT((323 - 3)- 18*4), true),
			2 => (B_dly(12)'last_event, tpd_B_BCOUT((323 - 3)- 18*5), true),
			3 => (B_dly(11)'last_event, tpd_B_BCOUT((323 - 3)- 18*6), true),
			4 => (B_dly(10)'last_event, tpd_B_BCOUT((323 - 3)- 18*7), true),
			5 => (B_dly(9)'last_event, tpd_B_BCOUT((323 - 3)- 18*8), true),
			6 => (B_dly(8)'last_event, tpd_B_BCOUT((323 - 3)- 18*9), true),
			7 => (B_dly(7)'last_event, tpd_B_BCOUT((323 - 3)- 18*10), true),
			8 => (B_dly(6)'last_event, tpd_B_BCOUT((323 - 3)- 18*11), true),
			9 => (B_dly(5)'last_event, tpd_B_BCOUT((323 - 3)- 18*12), true),
			10 => (B_dly(4)'last_event, tpd_B_BCOUT((323 - 3)- 18*13), true),
			11 => (B_dly(3)'last_event, tpd_B_BCOUT((323 - 3)- 18*14), true),
			12 => (B_dly(2)'last_event, tpd_B_BCOUT((323 - 3)- 18*15), true),
			13 => (B_dly(1)'last_event, tpd_B_BCOUT((323 - 3)- 18*16), true),
			14 => (B_dly(0)'last_event, tpd_B_BCOUT((323 - 3)- 18*17), true),
			15 => (BCIN_dly(14)'last_event, tpd_BCIN_BCOUT((323 - 3)- 18*3), true),
			16 => (BCIN_dly(13)'last_event, tpd_BCIN_BCOUT((323 - 3)- 18*4), true),
			17 => (BCIN_dly(12)'last_event, tpd_BCIN_BCOUT((323 - 3)- 18*5), true),
			18 => (BCIN_dly(11)'last_event, tpd_BCIN_BCOUT((323 - 3)- 18*6), true),
			19 => (BCIN_dly(10)'last_event, tpd_BCIN_BCOUT((323 - 3)- 18*7), true),
			20 => (BCIN_dly(9)'last_event, tpd_BCIN_BCOUT((323 - 3)- 18*8), true),
			21 => (BCIN_dly(8)'last_event, tpd_BCIN_BCOUT((323 - 3)- 18*9), true),
			22 => (BCIN_dly(7)'last_event, tpd_BCIN_BCOUT((323 - 3)- 18*10), true),
			23 => (BCIN_dly(6)'last_event, tpd_BCIN_BCOUT((323 - 3)- 18*11), true),
			24 => (BCIN_dly(5)'last_event, tpd_BCIN_BCOUT((323 - 3)- 18*12), true),
			25 => (BCIN_dly(4)'last_event, tpd_BCIN_BCOUT((323 - 3)- 18*13), true),
			26 => (BCIN_dly(3)'last_event, tpd_BCIN_BCOUT((323 - 3)- 18*14), true),
			27 => (BCIN_dly(2)'last_event, tpd_BCIN_BCOUT((323 - 3)- 18*15), true),
			28 => (BCIN_dly(1)'last_event, tpd_BCIN_BCOUT((323 - 3)- 18*16), true),
			29 => (BCIN_dly(0)'last_event, tpd_BCIN_BCOUT((323 - 3)- 18*17), true),
			30 => (D_dly(14)'last_event, tpd_D_BCOUT((323 - 3)- 18*3), true),
			31 => (D_dly(13)'last_event, tpd_D_BCOUT((323 - 3)- 18*4), true),
			32 => (D_dly(12)'last_event, tpd_D_BCOUT((323 - 3)- 18*5), true),
			33 => (D_dly(11)'last_event, tpd_D_BCOUT((323 - 3)- 18*6), true),
			34 => (D_dly(10)'last_event, tpd_D_BCOUT((323 - 3)- 18*7), true),
			35 => (D_dly(9)'last_event, tpd_D_BCOUT((323 - 3)- 18*8), true),
			36 => (D_dly(8)'last_event, tpd_D_BCOUT((323 - 3)- 18*9), true),
			37 => (D_dly(7)'last_event, tpd_D_BCOUT((323 - 3)- 18*10), true),
			38 => (D_dly(6)'last_event, tpd_D_BCOUT((323 - 3)- 18*11), true),
			39 => (D_dly(5)'last_event, tpd_D_BCOUT((323 - 3)- 18*12), true),
			40 => (D_dly(4)'last_event, tpd_D_BCOUT((323 - 3)- 18*13), true),
			41 => (D_dly(3)'last_event, tpd_D_BCOUT((323 - 3)- 18*14), true),
			42 => (D_dly(2)'last_event, tpd_D_BCOUT((323 - 3)- 18*15), true),
			43 => (D_dly(1)'last_event, tpd_D_BCOUT((323 - 3)- 18*16), true),
			44 => (D_dly(0)'last_event, tpd_D_BCOUT((323 - 3)- 18*17), true),
			45 => (OPMODE_dly(7)'last_event, tpd_OPMODE_BCOUT((143 - 3)- 18*0), true),
			46 => (OPMODE_dly(6)'last_event, tpd_OPMODE_BCOUT((143 - 3)- 18*1), true),
			47 => (OPMODE_dly(5)'last_event, tpd_OPMODE_BCOUT((143 - 3)- 18*2), true),
			48 => (OPMODE_dly(4)'last_event, tpd_OPMODE_BCOUT((143 - 3)- 18*3), true),
			49 => (OPMODE_dly(3)'last_event, tpd_OPMODE_BCOUT((143 - 3)- 18*4), true),
			50 => (OPMODE_dly(2)'last_event, tpd_OPMODE_BCOUT((143 - 3)- 18*5), true),
			51 => (OPMODE_dly(1)'last_event, tpd_OPMODE_BCOUT((143 - 3)- 18*6), true),
			52 => (OPMODE_dly(0)'last_event, tpd_OPMODE_BCOUT((143 - 3)- 18*7), true),
			53 => (RSTB_dly'last_event, tpd_RSTB_BCOUT(14), true),
			54 => (RSTD_dly'last_event, tpd_RSTD_BCOUT(14), true),
			55 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_BCOUT(14), true),
			56 => (CLK_dly'last_event, tpd_CLK_BCOUT(14), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> BCOUT(13),
         GlitchData	=> BCOUT_GlitchData(13),
         OutSignalName	=> "BCOUT(13)",
         OutTemp	=> BCOUT_zd(13),
         Paths		=> (
			0 => (B_dly(13)'last_event, tpd_B_BCOUT((323 - 4)- 18*4), true),
			1 => (B_dly(12)'last_event, tpd_B_BCOUT((323 - 4)- 18*5), true),
			2 => (B_dly(11)'last_event, tpd_B_BCOUT((323 - 4)- 18*6), true),
			3 => (B_dly(10)'last_event, tpd_B_BCOUT((323 - 4)- 18*7), true),
			4 => (B_dly(9)'last_event, tpd_B_BCOUT((323 - 4)- 18*8), true),
			5 => (B_dly(8)'last_event, tpd_B_BCOUT((323 - 4)- 18*9), true),
			6 => (B_dly(7)'last_event, tpd_B_BCOUT((323 - 4)- 18*10), true),
			7 => (B_dly(6)'last_event, tpd_B_BCOUT((323 - 4)- 18*11), true),
			8 => (B_dly(5)'last_event, tpd_B_BCOUT((323 - 4)- 18*12), true),
			9 => (B_dly(4)'last_event, tpd_B_BCOUT((323 - 4)- 18*13), true),
			10 => (B_dly(3)'last_event, tpd_B_BCOUT((323 - 4)- 18*14), true),
			11 => (B_dly(2)'last_event, tpd_B_BCOUT((323 - 4)- 18*15), true),
			12 => (B_dly(1)'last_event, tpd_B_BCOUT((323 - 4)- 18*16), true),
			13 => (B_dly(0)'last_event, tpd_B_BCOUT((323 - 4)- 18*17), true),
			14 => (BCIN_dly(13)'last_event, tpd_BCIN_BCOUT((323 - 4)- 18*4), true),
			15 => (BCIN_dly(12)'last_event, tpd_BCIN_BCOUT((323 - 4)- 18*5), true),
			16 => (BCIN_dly(11)'last_event, tpd_BCIN_BCOUT((323 - 4)- 18*6), true),
			17 => (BCIN_dly(10)'last_event, tpd_BCIN_BCOUT((323 - 4)- 18*7), true),
			18 => (BCIN_dly(9)'last_event, tpd_BCIN_BCOUT((323 - 4)- 18*8), true),
			19 => (BCIN_dly(8)'last_event, tpd_BCIN_BCOUT((323 - 4)- 18*9), true),
			20 => (BCIN_dly(7)'last_event, tpd_BCIN_BCOUT((323 - 4)- 18*10), true),
			21 => (BCIN_dly(6)'last_event, tpd_BCIN_BCOUT((323 - 4)- 18*11), true),
			22 => (BCIN_dly(5)'last_event, tpd_BCIN_BCOUT((323 - 4)- 18*12), true),
			23 => (BCIN_dly(4)'last_event, tpd_BCIN_BCOUT((323 - 4)- 18*13), true),
			24 => (BCIN_dly(3)'last_event, tpd_BCIN_BCOUT((323 - 4)- 18*14), true),
			25 => (BCIN_dly(2)'last_event, tpd_BCIN_BCOUT((323 - 4)- 18*15), true),
			26 => (BCIN_dly(1)'last_event, tpd_BCIN_BCOUT((323 - 4)- 18*16), true),
			27 => (BCIN_dly(0)'last_event, tpd_BCIN_BCOUT((323 - 4)- 18*17), true),
			28 => (D_dly(13)'last_event, tpd_D_BCOUT((323 - 4)- 18*4), true),
			29 => (D_dly(12)'last_event, tpd_D_BCOUT((323 - 4)- 18*5), true),
			30 => (D_dly(11)'last_event, tpd_D_BCOUT((323 - 4)- 18*6), true),
			31 => (D_dly(10)'last_event, tpd_D_BCOUT((323 - 4)- 18*7), true),
			32 => (D_dly(9)'last_event, tpd_D_BCOUT((323 - 4)- 18*8), true),
			33 => (D_dly(8)'last_event, tpd_D_BCOUT((323 - 4)- 18*9), true),
			34 => (D_dly(7)'last_event, tpd_D_BCOUT((323 - 4)- 18*10), true),
			35 => (D_dly(6)'last_event, tpd_D_BCOUT((323 - 4)- 18*11), true),
			36 => (D_dly(5)'last_event, tpd_D_BCOUT((323 - 4)- 18*12), true),
			37 => (D_dly(4)'last_event, tpd_D_BCOUT((323 - 4)- 18*13), true),
			38 => (D_dly(3)'last_event, tpd_D_BCOUT((323 - 4)- 18*14), true),
			39 => (D_dly(2)'last_event, tpd_D_BCOUT((323 - 4)- 18*15), true),
			40 => (D_dly(1)'last_event, tpd_D_BCOUT((323 - 4)- 18*16), true),
			41 => (D_dly(0)'last_event, tpd_D_BCOUT((323 - 4)- 18*17), true),
			42 => (OPMODE_dly(7)'last_event, tpd_OPMODE_BCOUT((143 - 4)- 18*0), true),
			43 => (OPMODE_dly(6)'last_event, tpd_OPMODE_BCOUT((143 - 4)- 18*1), true),
			44 => (OPMODE_dly(5)'last_event, tpd_OPMODE_BCOUT((143 - 4)- 18*2), true),
			45 => (OPMODE_dly(4)'last_event, tpd_OPMODE_BCOUT((143 - 4)- 18*3), true),
			46 => (OPMODE_dly(3)'last_event, tpd_OPMODE_BCOUT((143 - 4)- 18*4), true),
			47 => (OPMODE_dly(2)'last_event, tpd_OPMODE_BCOUT((143 - 4)- 18*5), true),
			48 => (OPMODE_dly(1)'last_event, tpd_OPMODE_BCOUT((143 - 4)- 18*6), true),
			49 => (OPMODE_dly(0)'last_event, tpd_OPMODE_BCOUT((143 - 4)- 18*7), true),
			50 => (RSTB_dly'last_event, tpd_RSTB_BCOUT(13), true),
			51 => (RSTD_dly'last_event, tpd_RSTD_BCOUT(13), true),
			52 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_BCOUT(13), true),
			53 => (CLK_dly'last_event, tpd_CLK_BCOUT(13), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> BCOUT(12),
         GlitchData	=> BCOUT_GlitchData(12),
         OutSignalName	=> "BCOUT(12)",
         OutTemp	=> BCOUT_zd(12),
         Paths		=> (
			0 => (B_dly(12)'last_event, tpd_B_BCOUT((323 - 5)- 18*5), true),
			1 => (B_dly(11)'last_event, tpd_B_BCOUT((323 - 5)- 18*6), true),
			2 => (B_dly(10)'last_event, tpd_B_BCOUT((323 - 5)- 18*7), true),
			3 => (B_dly(9)'last_event, tpd_B_BCOUT((323 - 5)- 18*8), true),
			4 => (B_dly(8)'last_event, tpd_B_BCOUT((323 - 5)- 18*9), true),
			5 => (B_dly(7)'last_event, tpd_B_BCOUT((323 - 5)- 18*10), true),
			6 => (B_dly(6)'last_event, tpd_B_BCOUT((323 - 5)- 18*11), true),
			7 => (B_dly(5)'last_event, tpd_B_BCOUT((323 - 5)- 18*12), true),
			8 => (B_dly(4)'last_event, tpd_B_BCOUT((323 - 5)- 18*13), true),
			9 => (B_dly(3)'last_event, tpd_B_BCOUT((323 - 5)- 18*14), true),
			10 => (B_dly(2)'last_event, tpd_B_BCOUT((323 - 5)- 18*15), true),
			11 => (B_dly(1)'last_event, tpd_B_BCOUT((323 - 5)- 18*16), true),
			12 => (B_dly(0)'last_event, tpd_B_BCOUT((323 - 5)- 18*17), true),
			13 => (BCIN_dly(12)'last_event, tpd_BCIN_BCOUT((323 - 5)- 18*5), true),
			14 => (BCIN_dly(11)'last_event, tpd_BCIN_BCOUT((323 - 5)- 18*6), true),
			15 => (BCIN_dly(10)'last_event, tpd_BCIN_BCOUT((323 - 5)- 18*7), true),
			16 => (BCIN_dly(9)'last_event, tpd_BCIN_BCOUT((323 - 5)- 18*8), true),
			17 => (BCIN_dly(8)'last_event, tpd_BCIN_BCOUT((323 - 5)- 18*9), true),
			18 => (BCIN_dly(7)'last_event, tpd_BCIN_BCOUT((323 - 5)- 18*10), true),
			19 => (BCIN_dly(6)'last_event, tpd_BCIN_BCOUT((323 - 5)- 18*11), true),
			20 => (BCIN_dly(5)'last_event, tpd_BCIN_BCOUT((323 - 5)- 18*12), true),
			21 => (BCIN_dly(4)'last_event, tpd_BCIN_BCOUT((323 - 5)- 18*13), true),
			22 => (BCIN_dly(3)'last_event, tpd_BCIN_BCOUT((323 - 5)- 18*14), true),
			23 => (BCIN_dly(2)'last_event, tpd_BCIN_BCOUT((323 - 5)- 18*15), true),
			24 => (BCIN_dly(1)'last_event, tpd_BCIN_BCOUT((323 - 5)- 18*16), true),
			25 => (BCIN_dly(0)'last_event, tpd_BCIN_BCOUT((323 - 5)- 18*17), true),
			26 => (D_dly(12)'last_event, tpd_D_BCOUT((323 - 5)- 18*5), true),
			27 => (D_dly(11)'last_event, tpd_D_BCOUT((323 - 5)- 18*6), true),
			28 => (D_dly(10)'last_event, tpd_D_BCOUT((323 - 5)- 18*7), true),
			29 => (D_dly(9)'last_event, tpd_D_BCOUT((323 - 5)- 18*8), true),
			30 => (D_dly(8)'last_event, tpd_D_BCOUT((323 - 5)- 18*9), true),
			31 => (D_dly(7)'last_event, tpd_D_BCOUT((323 - 5)- 18*10), true),
			32 => (D_dly(6)'last_event, tpd_D_BCOUT((323 - 5)- 18*11), true),
			33 => (D_dly(5)'last_event, tpd_D_BCOUT((323 - 5)- 18*12), true),
			34 => (D_dly(4)'last_event, tpd_D_BCOUT((323 - 5)- 18*13), true),
			35 => (D_dly(3)'last_event, tpd_D_BCOUT((323 - 5)- 18*14), true),
			36 => (D_dly(2)'last_event, tpd_D_BCOUT((323 - 5)- 18*15), true),
			37 => (D_dly(1)'last_event, tpd_D_BCOUT((323 - 5)- 18*16), true),
			38 => (D_dly(0)'last_event, tpd_D_BCOUT((323 - 5)- 18*17), true),
			39 => (OPMODE_dly(7)'last_event, tpd_OPMODE_BCOUT((143 - 5)- 18*0), true),
			40 => (OPMODE_dly(6)'last_event, tpd_OPMODE_BCOUT((143 - 5)- 18*1), true),
			41 => (OPMODE_dly(5)'last_event, tpd_OPMODE_BCOUT((143 - 5)- 18*2), true),
			42 => (OPMODE_dly(4)'last_event, tpd_OPMODE_BCOUT((143 - 5)- 18*3), true),
			43 => (OPMODE_dly(3)'last_event, tpd_OPMODE_BCOUT((143 - 5)- 18*4), true),
			44 => (OPMODE_dly(2)'last_event, tpd_OPMODE_BCOUT((143 - 5)- 18*5), true),
			45 => (OPMODE_dly(1)'last_event, tpd_OPMODE_BCOUT((143 - 5)- 18*6), true),
			46 => (OPMODE_dly(0)'last_event, tpd_OPMODE_BCOUT((143 - 5)- 18*7), true),
			47 => (RSTB_dly'last_event, tpd_RSTB_BCOUT(12), true),
			48 => (RSTD_dly'last_event, tpd_RSTD_BCOUT(12), true),
			49 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_BCOUT(12), true),
			50 => (CLK_dly'last_event, tpd_CLK_BCOUT(12), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> BCOUT(11),
         GlitchData	=> BCOUT_GlitchData(11),
         OutSignalName	=> "BCOUT(11)",
         OutTemp	=> BCOUT_zd(11),
         Paths		=> (
			0 => (B_dly(11)'last_event, tpd_B_BCOUT((323 - 6)- 18*6), true),
			1 => (B_dly(10)'last_event, tpd_B_BCOUT((323 - 6)- 18*7), true),
			2 => (B_dly(9)'last_event, tpd_B_BCOUT((323 - 6)- 18*8), true),
			3 => (B_dly(8)'last_event, tpd_B_BCOUT((323 - 6)- 18*9), true),
			4 => (B_dly(7)'last_event, tpd_B_BCOUT((323 - 6)- 18*10), true),
			5 => (B_dly(6)'last_event, tpd_B_BCOUT((323 - 6)- 18*11), true),
			6 => (B_dly(5)'last_event, tpd_B_BCOUT((323 - 6)- 18*12), true),
			7 => (B_dly(4)'last_event, tpd_B_BCOUT((323 - 6)- 18*13), true),
			8 => (B_dly(3)'last_event, tpd_B_BCOUT((323 - 6)- 18*14), true),
			9 => (B_dly(2)'last_event, tpd_B_BCOUT((323 - 6)- 18*15), true),
			10 => (B_dly(1)'last_event, tpd_B_BCOUT((323 - 6)- 18*16), true),
			11 => (B_dly(0)'last_event, tpd_B_BCOUT((323 - 6)- 18*17), true),
			12 => (BCIN_dly(11)'last_event, tpd_BCIN_BCOUT((323 - 6)- 18*6), true),
			13 => (BCIN_dly(10)'last_event, tpd_BCIN_BCOUT((323 - 6)- 18*7), true),
			14 => (BCIN_dly(9)'last_event, tpd_BCIN_BCOUT((323 - 6)- 18*8), true),
			15 => (BCIN_dly(8)'last_event, tpd_BCIN_BCOUT((323 - 6)- 18*9), true),
			16 => (BCIN_dly(7)'last_event, tpd_BCIN_BCOUT((323 - 6)- 18*10), true),
			17 => (BCIN_dly(6)'last_event, tpd_BCIN_BCOUT((323 - 6)- 18*11), true),
			18 => (BCIN_dly(5)'last_event, tpd_BCIN_BCOUT((323 - 6)- 18*12), true),
			19 => (BCIN_dly(4)'last_event, tpd_BCIN_BCOUT((323 - 6)- 18*13), true),
			20 => (BCIN_dly(3)'last_event, tpd_BCIN_BCOUT((323 - 6)- 18*14), true),
			21 => (BCIN_dly(2)'last_event, tpd_BCIN_BCOUT((323 - 6)- 18*15), true),
			22 => (BCIN_dly(1)'last_event, tpd_BCIN_BCOUT((323 - 6)- 18*16), true),
			23 => (BCIN_dly(0)'last_event, tpd_BCIN_BCOUT((323 - 6)- 18*17), true),
			24 => (D_dly(11)'last_event, tpd_D_BCOUT((323 - 6)- 18*6), true),
			25 => (D_dly(10)'last_event, tpd_D_BCOUT((323 - 6)- 18*7), true),
			26 => (D_dly(9)'last_event, tpd_D_BCOUT((323 - 6)- 18*8), true),
			27 => (D_dly(8)'last_event, tpd_D_BCOUT((323 - 6)- 18*9), true),
			28 => (D_dly(7)'last_event, tpd_D_BCOUT((323 - 6)- 18*10), true),
			29 => (D_dly(6)'last_event, tpd_D_BCOUT((323 - 6)- 18*11), true),
			30 => (D_dly(5)'last_event, tpd_D_BCOUT((323 - 6)- 18*12), true),
			31 => (D_dly(4)'last_event, tpd_D_BCOUT((323 - 6)- 18*13), true),
			32 => (D_dly(3)'last_event, tpd_D_BCOUT((323 - 6)- 18*14), true),
			33 => (D_dly(2)'last_event, tpd_D_BCOUT((323 - 6)- 18*15), true),
			34 => (D_dly(1)'last_event, tpd_D_BCOUT((323 - 6)- 18*16), true),
			35 => (D_dly(0)'last_event, tpd_D_BCOUT((323 - 6)- 18*17), true),
			36 => (OPMODE_dly(7)'last_event, tpd_OPMODE_BCOUT((143 - 6)- 18*0), true),
			37 => (OPMODE_dly(6)'last_event, tpd_OPMODE_BCOUT((143 - 6)- 18*1), true),
			38 => (OPMODE_dly(5)'last_event, tpd_OPMODE_BCOUT((143 - 6)- 18*2), true),
			39 => (OPMODE_dly(4)'last_event, tpd_OPMODE_BCOUT((143 - 6)- 18*3), true),
			40 => (OPMODE_dly(3)'last_event, tpd_OPMODE_BCOUT((143 - 6)- 18*4), true),
			41 => (OPMODE_dly(2)'last_event, tpd_OPMODE_BCOUT((143 - 6)- 18*5), true),
			42 => (OPMODE_dly(1)'last_event, tpd_OPMODE_BCOUT((143 - 6)- 18*6), true),
			43 => (OPMODE_dly(0)'last_event, tpd_OPMODE_BCOUT((143 - 6)- 18*7), true),
			44 => (RSTB_dly'last_event, tpd_RSTB_BCOUT(11), true),
			45 => (RSTD_dly'last_event, tpd_RSTD_BCOUT(11), true),
			46 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_BCOUT(11), true),
			47 => (CLK_dly'last_event, tpd_CLK_BCOUT(11), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> BCOUT(10),
         GlitchData	=> BCOUT_GlitchData(10),
         OutSignalName	=> "BCOUT(10)",
         OutTemp	=> BCOUT_zd(10),
         Paths		=> (
			0 => (B_dly(10)'last_event, tpd_B_BCOUT((323 - 7)- 18*7), true),
			1 => (B_dly(9)'last_event, tpd_B_BCOUT((323 - 7)- 18*8), true),
			2 => (B_dly(8)'last_event, tpd_B_BCOUT((323 - 7)- 18*9), true),
			3 => (B_dly(7)'last_event, tpd_B_BCOUT((323 - 7)- 18*10), true),
			4 => (B_dly(6)'last_event, tpd_B_BCOUT((323 - 7)- 18*11), true),
			5 => (B_dly(5)'last_event, tpd_B_BCOUT((323 - 7)- 18*12), true),
			6 => (B_dly(4)'last_event, tpd_B_BCOUT((323 - 7)- 18*13), true),
			7 => (B_dly(3)'last_event, tpd_B_BCOUT((323 - 7)- 18*14), true),
			8 => (B_dly(2)'last_event, tpd_B_BCOUT((323 - 7)- 18*15), true),
			9 => (B_dly(1)'last_event, tpd_B_BCOUT((323 - 7)- 18*16), true),
			10 => (B_dly(0)'last_event, tpd_B_BCOUT((323 - 7)- 18*17), true),
			11 => (BCIN_dly(10)'last_event, tpd_BCIN_BCOUT((323 - 7)- 18*7), true),
			12 => (BCIN_dly(9)'last_event, tpd_BCIN_BCOUT((323 - 7)- 18*8), true),
			13 => (BCIN_dly(8)'last_event, tpd_BCIN_BCOUT((323 - 7)- 18*9), true),
			14 => (BCIN_dly(7)'last_event, tpd_BCIN_BCOUT((323 - 7)- 18*10), true),
			15 => (BCIN_dly(6)'last_event, tpd_BCIN_BCOUT((323 - 7)- 18*11), true),
			16 => (BCIN_dly(5)'last_event, tpd_BCIN_BCOUT((323 - 7)- 18*12), true),
			17 => (BCIN_dly(4)'last_event, tpd_BCIN_BCOUT((323 - 7)- 18*13), true),
			18 => (BCIN_dly(3)'last_event, tpd_BCIN_BCOUT((323 - 7)- 18*14), true),
			19 => (BCIN_dly(2)'last_event, tpd_BCIN_BCOUT((323 - 7)- 18*15), true),
			20 => (BCIN_dly(1)'last_event, tpd_BCIN_BCOUT((323 - 7)- 18*16), true),
			21 => (BCIN_dly(0)'last_event, tpd_BCIN_BCOUT((323 - 7)- 18*17), true),
			22 => (D_dly(10)'last_event, tpd_D_BCOUT((323 - 7)- 18*7), true),
			23 => (D_dly(9)'last_event, tpd_D_BCOUT((323 - 7)- 18*8), true),
			24 => (D_dly(8)'last_event, tpd_D_BCOUT((323 - 7)- 18*9), true),
			25 => (D_dly(7)'last_event, tpd_D_BCOUT((323 - 7)- 18*10), true),
			26 => (D_dly(6)'last_event, tpd_D_BCOUT((323 - 7)- 18*11), true),
			27 => (D_dly(5)'last_event, tpd_D_BCOUT((323 - 7)- 18*12), true),
			28 => (D_dly(4)'last_event, tpd_D_BCOUT((323 - 7)- 18*13), true),
			29 => (D_dly(3)'last_event, tpd_D_BCOUT((323 - 7)- 18*14), true),
			30 => (D_dly(2)'last_event, tpd_D_BCOUT((323 - 7)- 18*15), true),
			31 => (D_dly(1)'last_event, tpd_D_BCOUT((323 - 7)- 18*16), true),
			32 => (D_dly(0)'last_event, tpd_D_BCOUT((323 - 7)- 18*17), true),
			33 => (OPMODE_dly(7)'last_event, tpd_OPMODE_BCOUT((143 - 7)- 18*0), true),
			34 => (OPMODE_dly(6)'last_event, tpd_OPMODE_BCOUT((143 - 7)- 18*1), true),
			35 => (OPMODE_dly(5)'last_event, tpd_OPMODE_BCOUT((143 - 7)- 18*2), true),
			36 => (OPMODE_dly(4)'last_event, tpd_OPMODE_BCOUT((143 - 7)- 18*3), true),
			37 => (OPMODE_dly(3)'last_event, tpd_OPMODE_BCOUT((143 - 7)- 18*4), true),
			38 => (OPMODE_dly(2)'last_event, tpd_OPMODE_BCOUT((143 - 7)- 18*5), true),
			39 => (OPMODE_dly(1)'last_event, tpd_OPMODE_BCOUT((143 - 7)- 18*6), true),
			40 => (OPMODE_dly(0)'last_event, tpd_OPMODE_BCOUT((143 - 7)- 18*7), true),
			41 => (RSTB_dly'last_event, tpd_RSTB_BCOUT(10), true),
			42 => (RSTD_dly'last_event, tpd_RSTD_BCOUT(10), true),
			43 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_BCOUT(10), true),
			44 => (CLK_dly'last_event, tpd_CLK_BCOUT(10), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> BCOUT(9),
         GlitchData	=> BCOUT_GlitchData(9),
         OutSignalName	=> "BCOUT(9)",
         OutTemp	=> BCOUT_zd(9),
         Paths		=> (
			0 => (B_dly(9)'last_event, tpd_B_BCOUT((323 - 8)- 18*8), true),
			1 => (B_dly(8)'last_event, tpd_B_BCOUT((323 - 8)- 18*9), true),
			2 => (B_dly(7)'last_event, tpd_B_BCOUT((323 - 8)- 18*10), true),
			3 => (B_dly(6)'last_event, tpd_B_BCOUT((323 - 8)- 18*11), true),
			4 => (B_dly(5)'last_event, tpd_B_BCOUT((323 - 8)- 18*12), true),
			5 => (B_dly(4)'last_event, tpd_B_BCOUT((323 - 8)- 18*13), true),
			6 => (B_dly(3)'last_event, tpd_B_BCOUT((323 - 8)- 18*14), true),
			7 => (B_dly(2)'last_event, tpd_B_BCOUT((323 - 8)- 18*15), true),
			8 => (B_dly(1)'last_event, tpd_B_BCOUT((323 - 8)- 18*16), true),
			9 => (B_dly(0)'last_event, tpd_B_BCOUT((323 - 8)- 18*17), true),
			10 => (BCIN_dly(9)'last_event, tpd_BCIN_BCOUT((323 - 8)- 18*8), true),
			11 => (BCIN_dly(8)'last_event, tpd_BCIN_BCOUT((323 - 8)- 18*9), true),
			12 => (BCIN_dly(7)'last_event, tpd_BCIN_BCOUT((323 - 8)- 18*10), true),
			13 => (BCIN_dly(6)'last_event, tpd_BCIN_BCOUT((323 - 8)- 18*11), true),
			14 => (BCIN_dly(5)'last_event, tpd_BCIN_BCOUT((323 - 8)- 18*12), true),
			15 => (BCIN_dly(4)'last_event, tpd_BCIN_BCOUT((323 - 8)- 18*13), true),
			16 => (BCIN_dly(3)'last_event, tpd_BCIN_BCOUT((323 - 8)- 18*14), true),
			17 => (BCIN_dly(2)'last_event, tpd_BCIN_BCOUT((323 - 8)- 18*15), true),
			18 => (BCIN_dly(1)'last_event, tpd_BCIN_BCOUT((323 - 8)- 18*16), true),
			19 => (BCIN_dly(0)'last_event, tpd_BCIN_BCOUT((323 - 8)- 18*17), true),
			20 => (D_dly(9)'last_event, tpd_D_BCOUT((323 - 8)- 18*8), true),
			21 => (D_dly(8)'last_event, tpd_D_BCOUT((323 - 8)- 18*9), true),
			22 => (D_dly(7)'last_event, tpd_D_BCOUT((323 - 8)- 18*10), true),
			23 => (D_dly(6)'last_event, tpd_D_BCOUT((323 - 8)- 18*11), true),
			24 => (D_dly(5)'last_event, tpd_D_BCOUT((323 - 8)- 18*12), true),
			25 => (D_dly(4)'last_event, tpd_D_BCOUT((323 - 8)- 18*13), true),
			26 => (D_dly(3)'last_event, tpd_D_BCOUT((323 - 8)- 18*14), true),
			27 => (D_dly(2)'last_event, tpd_D_BCOUT((323 - 8)- 18*15), true),
			28 => (D_dly(1)'last_event, tpd_D_BCOUT((323 - 8)- 18*16), true),
			29 => (D_dly(0)'last_event, tpd_D_BCOUT((323 - 8)- 18*17), true),
			30 => (OPMODE_dly(7)'last_event, tpd_OPMODE_BCOUT((143 - 8)- 18*0), true),
			31 => (OPMODE_dly(6)'last_event, tpd_OPMODE_BCOUT((143 - 8)- 18*1), true),
			32 => (OPMODE_dly(5)'last_event, tpd_OPMODE_BCOUT((143 - 8)- 18*2), true),
			33 => (OPMODE_dly(4)'last_event, tpd_OPMODE_BCOUT((143 - 8)- 18*3), true),
			34 => (OPMODE_dly(3)'last_event, tpd_OPMODE_BCOUT((143 - 8)- 18*4), true),
			35 => (OPMODE_dly(2)'last_event, tpd_OPMODE_BCOUT((143 - 8)- 18*5), true),
			36 => (OPMODE_dly(1)'last_event, tpd_OPMODE_BCOUT((143 - 8)- 18*6), true),
			37 => (OPMODE_dly(0)'last_event, tpd_OPMODE_BCOUT((143 - 8)- 18*7), true),
			38 => (RSTB_dly'last_event, tpd_RSTB_BCOUT(9), true),
			39 => (RSTD_dly'last_event, tpd_RSTD_BCOUT(9), true),
			40 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_BCOUT(9), true),
			41 => (CLK_dly'last_event, tpd_CLK_BCOUT(9), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> BCOUT(8),
         GlitchData	=> BCOUT_GlitchData(8),
         OutSignalName	=> "BCOUT(8)",
         OutTemp	=> BCOUT_zd(8),
         Paths		=> (
			0 => (B_dly(8)'last_event, tpd_B_BCOUT((323 - 9)- 18*9), true),
			1 => (B_dly(7)'last_event, tpd_B_BCOUT((323 - 9)- 18*10), true),
			2 => (B_dly(6)'last_event, tpd_B_BCOUT((323 - 9)- 18*11), true),
			3 => (B_dly(5)'last_event, tpd_B_BCOUT((323 - 9)- 18*12), true),
			4 => (B_dly(4)'last_event, tpd_B_BCOUT((323 - 9)- 18*13), true),
			5 => (B_dly(3)'last_event, tpd_B_BCOUT((323 - 9)- 18*14), true),
			6 => (B_dly(2)'last_event, tpd_B_BCOUT((323 - 9)- 18*15), true),
			7 => (B_dly(1)'last_event, tpd_B_BCOUT((323 - 9)- 18*16), true),
			8 => (B_dly(0)'last_event, tpd_B_BCOUT((323 - 9)- 18*17), true),
			9 => (BCIN_dly(8)'last_event, tpd_BCIN_BCOUT((323 - 9)- 18*9), true),
			10 => (BCIN_dly(7)'last_event, tpd_BCIN_BCOUT((323 - 9)- 18*10), true),
			11 => (BCIN_dly(6)'last_event, tpd_BCIN_BCOUT((323 - 9)- 18*11), true),
			12 => (BCIN_dly(5)'last_event, tpd_BCIN_BCOUT((323 - 9)- 18*12), true),
			13 => (BCIN_dly(4)'last_event, tpd_BCIN_BCOUT((323 - 9)- 18*13), true),
			14 => (BCIN_dly(3)'last_event, tpd_BCIN_BCOUT((323 - 9)- 18*14), true),
			15 => (BCIN_dly(2)'last_event, tpd_BCIN_BCOUT((323 - 9)- 18*15), true),
			16 => (BCIN_dly(1)'last_event, tpd_BCIN_BCOUT((323 - 9)- 18*16), true),
			17 => (BCIN_dly(0)'last_event, tpd_BCIN_BCOUT((323 - 9)- 18*17), true),
			18 => (D_dly(8)'last_event, tpd_D_BCOUT((323 - 9)- 18*9), true),
			19 => (D_dly(7)'last_event, tpd_D_BCOUT((323 - 9)- 18*10), true),
			20 => (D_dly(6)'last_event, tpd_D_BCOUT((323 - 9)- 18*11), true),
			21 => (D_dly(5)'last_event, tpd_D_BCOUT((323 - 9)- 18*12), true),
			22 => (D_dly(4)'last_event, tpd_D_BCOUT((323 - 9)- 18*13), true),
			23 => (D_dly(3)'last_event, tpd_D_BCOUT((323 - 9)- 18*14), true),
			24 => (D_dly(2)'last_event, tpd_D_BCOUT((323 - 9)- 18*15), true),
			25 => (D_dly(1)'last_event, tpd_D_BCOUT((323 - 9)- 18*16), true),
			26 => (D_dly(0)'last_event, tpd_D_BCOUT((323 - 9)- 18*17), true),
			27 => (OPMODE_dly(7)'last_event, tpd_OPMODE_BCOUT((143 - 9)- 18*0), true),
			28 => (OPMODE_dly(6)'last_event, tpd_OPMODE_BCOUT((143 - 9)- 18*1), true),
			29 => (OPMODE_dly(5)'last_event, tpd_OPMODE_BCOUT((143 - 9)- 18*2), true),
			30 => (OPMODE_dly(4)'last_event, tpd_OPMODE_BCOUT((143 - 9)- 18*3), true),
			31 => (OPMODE_dly(3)'last_event, tpd_OPMODE_BCOUT((143 - 9)- 18*4), true),
			32 => (OPMODE_dly(2)'last_event, tpd_OPMODE_BCOUT((143 - 9)- 18*5), true),
			33 => (OPMODE_dly(1)'last_event, tpd_OPMODE_BCOUT((143 - 9)- 18*6), true),
			34 => (OPMODE_dly(0)'last_event, tpd_OPMODE_BCOUT((143 - 9)- 18*7), true),
			35 => (RSTB_dly'last_event, tpd_RSTB_BCOUT(8), true),
			36 => (RSTD_dly'last_event, tpd_RSTD_BCOUT(8), true),
			37 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_BCOUT(8), true),
			38 => (CLK_dly'last_event, tpd_CLK_BCOUT(8), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> BCOUT(7),
         GlitchData	=> BCOUT_GlitchData(7),
         OutSignalName	=> "BCOUT(7)",
         OutTemp	=> BCOUT_zd(7),
         Paths		=> (
			0 => (B_dly(7)'last_event, tpd_B_BCOUT((323 - 10)- 18*10), true),
			1 => (B_dly(6)'last_event, tpd_B_BCOUT((323 - 10)- 18*11), true),
			2 => (B_dly(5)'last_event, tpd_B_BCOUT((323 - 10)- 18*12), true),
			3 => (B_dly(4)'last_event, tpd_B_BCOUT((323 - 10)- 18*13), true),
			4 => (B_dly(3)'last_event, tpd_B_BCOUT((323 - 10)- 18*14), true),
			5 => (B_dly(2)'last_event, tpd_B_BCOUT((323 - 10)- 18*15), true),
			6 => (B_dly(1)'last_event, tpd_B_BCOUT((323 - 10)- 18*16), true),
			7 => (B_dly(0)'last_event, tpd_B_BCOUT((323 - 10)- 18*17), true),
			8 => (BCIN_dly(7)'last_event, tpd_BCIN_BCOUT((323 - 10)- 18*10), true),
			9 => (BCIN_dly(6)'last_event, tpd_BCIN_BCOUT((323 - 10)- 18*11), true),
			10 => (BCIN_dly(5)'last_event, tpd_BCIN_BCOUT((323 - 10)- 18*12), true),
			11 => (BCIN_dly(4)'last_event, tpd_BCIN_BCOUT((323 - 10)- 18*13), true),
			12 => (BCIN_dly(3)'last_event, tpd_BCIN_BCOUT((323 - 10)- 18*14), true),
			13 => (BCIN_dly(2)'last_event, tpd_BCIN_BCOUT((323 - 10)- 18*15), true),
			14 => (BCIN_dly(1)'last_event, tpd_BCIN_BCOUT((323 - 10)- 18*16), true),
			15 => (BCIN_dly(0)'last_event, tpd_BCIN_BCOUT((323 - 10)- 18*17), true),
			16 => (D_dly(7)'last_event, tpd_D_BCOUT((323 - 10)- 18*10), true),
			17 => (D_dly(6)'last_event, tpd_D_BCOUT((323 - 10)- 18*11), true),
			18 => (D_dly(5)'last_event, tpd_D_BCOUT((323 - 10)- 18*12), true),
			19 => (D_dly(4)'last_event, tpd_D_BCOUT((323 - 10)- 18*13), true),
			20 => (D_dly(3)'last_event, tpd_D_BCOUT((323 - 10)- 18*14), true),
			21 => (D_dly(2)'last_event, tpd_D_BCOUT((323 - 10)- 18*15), true),
			22 => (D_dly(1)'last_event, tpd_D_BCOUT((323 - 10)- 18*16), true),
			23 => (D_dly(0)'last_event, tpd_D_BCOUT((323 - 10)- 18*17), true),
			24 => (OPMODE_dly(7)'last_event, tpd_OPMODE_BCOUT((143 - 10)- 18*0), true),
			25 => (OPMODE_dly(6)'last_event, tpd_OPMODE_BCOUT((143 - 10)- 18*1), true),
			26 => (OPMODE_dly(5)'last_event, tpd_OPMODE_BCOUT((143 - 10)- 18*2), true),
			27 => (OPMODE_dly(4)'last_event, tpd_OPMODE_BCOUT((143 - 10)- 18*3), true),
			28 => (OPMODE_dly(3)'last_event, tpd_OPMODE_BCOUT((143 - 10)- 18*4), true),
			29 => (OPMODE_dly(2)'last_event, tpd_OPMODE_BCOUT((143 - 10)- 18*5), true),
			30 => (OPMODE_dly(1)'last_event, tpd_OPMODE_BCOUT((143 - 10)- 18*6), true),
			31 => (OPMODE_dly(0)'last_event, tpd_OPMODE_BCOUT((143 - 10)- 18*7), true),
			32 => (RSTB_dly'last_event, tpd_RSTB_BCOUT(7), true),
			33 => (RSTD_dly'last_event, tpd_RSTD_BCOUT(7), true),
			34 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_BCOUT(7), true),
			35 => (CLK_dly'last_event, tpd_CLK_BCOUT(7), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> BCOUT(6),
         GlitchData	=> BCOUT_GlitchData(6),
         OutSignalName	=> "BCOUT(6)",
         OutTemp	=> BCOUT_zd(6),
         Paths		=> (
			0 => (B_dly(6)'last_event, tpd_B_BCOUT((323 - 11)- 18*11), true),
			1 => (B_dly(5)'last_event, tpd_B_BCOUT((323 - 11)- 18*12), true),
			2 => (B_dly(4)'last_event, tpd_B_BCOUT((323 - 11)- 18*13), true),
			3 => (B_dly(3)'last_event, tpd_B_BCOUT((323 - 11)- 18*14), true),
			4 => (B_dly(2)'last_event, tpd_B_BCOUT((323 - 11)- 18*15), true),
			5 => (B_dly(1)'last_event, tpd_B_BCOUT((323 - 11)- 18*16), true),
			6 => (B_dly(0)'last_event, tpd_B_BCOUT((323 - 11)- 18*17), true),
			7 => (BCIN_dly(6)'last_event, tpd_BCIN_BCOUT((323 - 11)- 18*11), true),
			8 => (BCIN_dly(5)'last_event, tpd_BCIN_BCOUT((323 - 11)- 18*12), true),
			9 => (BCIN_dly(4)'last_event, tpd_BCIN_BCOUT((323 - 11)- 18*13), true),
			10 => (BCIN_dly(3)'last_event, tpd_BCIN_BCOUT((323 - 11)- 18*14), true),
			11 => (BCIN_dly(2)'last_event, tpd_BCIN_BCOUT((323 - 11)- 18*15), true),
			12 => (BCIN_dly(1)'last_event, tpd_BCIN_BCOUT((323 - 11)- 18*16), true),
			13 => (BCIN_dly(0)'last_event, tpd_BCIN_BCOUT((323 - 11)- 18*17), true),
			14 => (D_dly(6)'last_event, tpd_D_BCOUT((323 - 11)- 18*11), true),
			15 => (D_dly(5)'last_event, tpd_D_BCOUT((323 - 11)- 18*12), true),
			16 => (D_dly(4)'last_event, tpd_D_BCOUT((323 - 11)- 18*13), true),
			17 => (D_dly(3)'last_event, tpd_D_BCOUT((323 - 11)- 18*14), true),
			18 => (D_dly(2)'last_event, tpd_D_BCOUT((323 - 11)- 18*15), true),
			19 => (D_dly(1)'last_event, tpd_D_BCOUT((323 - 11)- 18*16), true),
			20 => (D_dly(0)'last_event, tpd_D_BCOUT((323 - 11)- 18*17), true),
			21 => (OPMODE_dly(6)'last_event, tpd_OPMODE_BCOUT((143 - 11)- 18*1), true),
			22 => (OPMODE_dly(5)'last_event, tpd_OPMODE_BCOUT((143 - 11)- 18*2), true),
			23 => (OPMODE_dly(4)'last_event, tpd_OPMODE_BCOUT((143 - 11)- 18*3), true),
			24 => (OPMODE_dly(3)'last_event, tpd_OPMODE_BCOUT((143 - 11)- 18*4), true),
			25 => (OPMODE_dly(2)'last_event, tpd_OPMODE_BCOUT((143 - 11)- 18*5), true),
			26 => (OPMODE_dly(1)'last_event, tpd_OPMODE_BCOUT((143 - 11)- 18*6), true),
			27 => (OPMODE_dly(0)'last_event, tpd_OPMODE_BCOUT((143 - 11)- 18*7), true),
			28 => (RSTB_dly'last_event, tpd_RSTB_BCOUT(6), true),
			29 => (RSTD_dly'last_event, tpd_RSTD_BCOUT(6), true),
			30 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_BCOUT(6), true),
			31 => (CLK_dly'last_event, tpd_CLK_BCOUT(6), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> BCOUT(5),
         GlitchData	=> BCOUT_GlitchData(5),
         OutSignalName	=> "BCOUT(5)",
         OutTemp	=> BCOUT_zd(5),
         Paths		=> (
			0 => (B_dly(5)'last_event, tpd_B_BCOUT((323 - 12)- 18*12), true),
			1 => (B_dly(4)'last_event, tpd_B_BCOUT((323 - 12)- 18*13), true),
			2 => (B_dly(3)'last_event, tpd_B_BCOUT((323 - 12)- 18*14), true),
			3 => (B_dly(2)'last_event, tpd_B_BCOUT((323 - 12)- 18*15), true),
			4 => (B_dly(1)'last_event, tpd_B_BCOUT((323 - 12)- 18*16), true),
			5 => (B_dly(0)'last_event, tpd_B_BCOUT((323 - 12)- 18*17), true),
			6 => (BCIN_dly(5)'last_event, tpd_BCIN_BCOUT((323 - 12)- 18*12), true),
			7 => (BCIN_dly(4)'last_event, tpd_BCIN_BCOUT((323 - 12)- 18*13), true),
			8 => (BCIN_dly(3)'last_event, tpd_BCIN_BCOUT((323 - 12)- 18*14), true),
			9 => (BCIN_dly(2)'last_event, tpd_BCIN_BCOUT((323 - 12)- 18*15), true),
			10 => (BCIN_dly(1)'last_event, tpd_BCIN_BCOUT((323 - 12)- 18*16), true),
			11 => (BCIN_dly(0)'last_event, tpd_BCIN_BCOUT((323 - 12)- 18*17), true),
			12 => (D_dly(5)'last_event, tpd_D_BCOUT((323 - 12)- 18*12), true),
			13 => (D_dly(4)'last_event, tpd_D_BCOUT((323 - 12)- 18*13), true),
			14 => (D_dly(3)'last_event, tpd_D_BCOUT((323 - 12)- 18*14), true),
			15 => (D_dly(2)'last_event, tpd_D_BCOUT((323 - 12)- 18*15), true),
			16 => (D_dly(1)'last_event, tpd_D_BCOUT((323 - 12)- 18*16), true),
			17 => (D_dly(0)'last_event, tpd_D_BCOUT((323 - 12)- 18*17), true),
			18 => (OPMODE_dly(5)'last_event, tpd_OPMODE_BCOUT((143 - 12)- 18*2), true),
			19 => (OPMODE_dly(4)'last_event, tpd_OPMODE_BCOUT((143 - 12)- 18*3), true),
			20 => (OPMODE_dly(3)'last_event, tpd_OPMODE_BCOUT((143 - 12)- 18*4), true),
			21 => (OPMODE_dly(2)'last_event, tpd_OPMODE_BCOUT((143 - 12)- 18*5), true),
			22 => (OPMODE_dly(1)'last_event, tpd_OPMODE_BCOUT((143 - 12)- 18*6), true),
			23 => (OPMODE_dly(0)'last_event, tpd_OPMODE_BCOUT((143 - 12)- 18*7), true),
			24 => (RSTB_dly'last_event, tpd_RSTB_BCOUT(5), true),
			25 => (RSTD_dly'last_event, tpd_RSTD_BCOUT(5), true),
			26 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_BCOUT(5), true),
			27 => (CLK_dly'last_event, tpd_CLK_BCOUT(5), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> BCOUT(4),
         GlitchData	=> BCOUT_GlitchData(4),
         OutSignalName	=> "BCOUT(4)",
         OutTemp	=> BCOUT_zd(4),
         Paths		=> (
			0 => (B_dly(4)'last_event, tpd_B_BCOUT((323 - 13)- 18*13), true),
			1 => (B_dly(3)'last_event, tpd_B_BCOUT((323 - 13)- 18*14), true),
			2 => (B_dly(2)'last_event, tpd_B_BCOUT((323 - 13)- 18*15), true),
			3 => (B_dly(1)'last_event, tpd_B_BCOUT((323 - 13)- 18*16), true),
			4 => (B_dly(0)'last_event, tpd_B_BCOUT((323 - 13)- 18*17), true),
			5 => (BCIN_dly(4)'last_event, tpd_BCIN_BCOUT((323 - 13)- 18*13), true),
			6 => (BCIN_dly(3)'last_event, tpd_BCIN_BCOUT((323 - 13)- 18*14), true),
			7 => (BCIN_dly(2)'last_event, tpd_BCIN_BCOUT((323 - 13)- 18*15), true),
			8 => (BCIN_dly(1)'last_event, tpd_BCIN_BCOUT((323 - 13)- 18*16), true),
			9 => (BCIN_dly(0)'last_event, tpd_BCIN_BCOUT((323 - 13)- 18*17), true),
			10 => (D_dly(4)'last_event, tpd_D_BCOUT((323 - 13)- 18*13), true),
			11 => (D_dly(3)'last_event, tpd_D_BCOUT((323 - 13)- 18*14), true),
			12 => (D_dly(2)'last_event, tpd_D_BCOUT((323 - 13)- 18*15), true),
			13 => (D_dly(1)'last_event, tpd_D_BCOUT((323 - 13)- 18*16), true),
			14 => (D_dly(0)'last_event, tpd_D_BCOUT((323 - 13)- 18*17), true),
			15 => (OPMODE_dly(4)'last_event, tpd_OPMODE_BCOUT((143 - 13)- 18*3), true),
			16 => (OPMODE_dly(3)'last_event, tpd_OPMODE_BCOUT((143 - 13)- 18*4), true),
			17 => (OPMODE_dly(2)'last_event, tpd_OPMODE_BCOUT((143 - 13)- 18*5), true),
			18 => (OPMODE_dly(1)'last_event, tpd_OPMODE_BCOUT((143 - 13)- 18*6), true),
			19 => (OPMODE_dly(0)'last_event, tpd_OPMODE_BCOUT((143 - 13)- 18*7), true),
			20 => (RSTB_dly'last_event, tpd_RSTB_BCOUT(4), true),
			21 => (RSTD_dly'last_event, tpd_RSTD_BCOUT(4), true),
			22 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_BCOUT(4), true),
			23 => (CLK_dly'last_event, tpd_CLK_BCOUT(4), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> BCOUT(3),
         GlitchData	=> BCOUT_GlitchData(3),
         OutSignalName	=> "BCOUT(3)",
         OutTemp	=> BCOUT_zd(3),
         Paths		=> (
			0 => (B_dly(3)'last_event, tpd_B_BCOUT((323 - 14)- 18*14), true),
			1 => (B_dly(2)'last_event, tpd_B_BCOUT((323 - 14)- 18*15), true),
			2 => (B_dly(1)'last_event, tpd_B_BCOUT((323 - 14)- 18*16), true),
			3 => (B_dly(0)'last_event, tpd_B_BCOUT((323 - 14)- 18*17), true),
			4 => (BCIN_dly(3)'last_event, tpd_BCIN_BCOUT((323 - 14)- 18*14), true),
			5 => (BCIN_dly(2)'last_event, tpd_BCIN_BCOUT((323 - 14)- 18*15), true),
			6 => (BCIN_dly(1)'last_event, tpd_BCIN_BCOUT((323 - 14)- 18*16), true),
			7 => (BCIN_dly(0)'last_event, tpd_BCIN_BCOUT((323 - 14)- 18*17), true),
			8 => (D_dly(3)'last_event, tpd_D_BCOUT((323 - 14)- 18*14), true),
			9 => (D_dly(2)'last_event, tpd_D_BCOUT((323 - 14)- 18*15), true),
			10 => (D_dly(1)'last_event, tpd_D_BCOUT((323 - 14)- 18*16), true),
			11 => (D_dly(0)'last_event, tpd_D_BCOUT((323 - 14)- 18*17), true),
			12 => (OPMODE_dly(3)'last_event, tpd_OPMODE_BCOUT((143 - 14)- 18*4), true),
			13 => (OPMODE_dly(2)'last_event, tpd_OPMODE_BCOUT((143 - 14)- 18*5), true),
			14 => (OPMODE_dly(1)'last_event, tpd_OPMODE_BCOUT((143 - 14)- 18*6), true),
			15 => (OPMODE_dly(0)'last_event, tpd_OPMODE_BCOUT((143 - 14)- 18*7), true),
			16 => (RSTB_dly'last_event, tpd_RSTB_BCOUT(3), true),
			17 => (RSTD_dly'last_event, tpd_RSTD_BCOUT(3), true),
			18 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_BCOUT(3), true),
			19 => (CLK_dly'last_event, tpd_CLK_BCOUT(3), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> BCOUT(2),
         GlitchData	=> BCOUT_GlitchData(2),
         OutSignalName	=> "BCOUT(2)",
         OutTemp	=> BCOUT_zd(2),
         Paths		=> (
			0 => (B_dly(2)'last_event, tpd_B_BCOUT((323 - 15)- 18*15), true),
			1 => (B_dly(1)'last_event, tpd_B_BCOUT((323 - 15)- 18*16), true),
			2 => (B_dly(0)'last_event, tpd_B_BCOUT((323 - 15)- 18*17), true),
			3 => (BCIN_dly(2)'last_event, tpd_BCIN_BCOUT((323 - 15)- 18*15), true),
			4 => (BCIN_dly(1)'last_event, tpd_BCIN_BCOUT((323 - 15)- 18*16), true),
			5 => (BCIN_dly(0)'last_event, tpd_BCIN_BCOUT((323 - 15)- 18*17), true),
			6 => (D_dly(2)'last_event, tpd_D_BCOUT((323 - 15)- 18*15), true),
			7 => (D_dly(1)'last_event, tpd_D_BCOUT((323 - 15)- 18*16), true),
			8 => (D_dly(0)'last_event, tpd_D_BCOUT((323 - 15)- 18*17), true),
			9 => (OPMODE_dly(2)'last_event, tpd_OPMODE_BCOUT((143 - 15)- 18*5), true),
			10 => (OPMODE_dly(1)'last_event, tpd_OPMODE_BCOUT((143 - 15)- 18*6), true),
			11 => (OPMODE_dly(0)'last_event, tpd_OPMODE_BCOUT((143 - 15)- 18*7), true),
			12 => (RSTB_dly'last_event, tpd_RSTB_BCOUT(2), true),
			13 => (RSTD_dly'last_event, tpd_RSTD_BCOUT(2), true),
			14 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_BCOUT(2), true),
			15 => (CLK_dly'last_event, tpd_CLK_BCOUT(2), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> BCOUT(1),
         GlitchData	=> BCOUT_GlitchData(1),
         OutSignalName	=> "BCOUT(1)",
         OutTemp	=> BCOUT_zd(1),
         Paths		=> (
			0 => (B_dly(1)'last_event, tpd_B_BCOUT((323 - 16)- 18*16), true),
			1 => (B_dly(0)'last_event, tpd_B_BCOUT((323 - 16)- 18*17), true),
			2 => (BCIN_dly(1)'last_event, tpd_BCIN_BCOUT((323 - 16)- 18*16), true),
			3 => (BCIN_dly(0)'last_event, tpd_BCIN_BCOUT((323 - 16)- 18*17), true),
			4 => (D_dly(1)'last_event, tpd_D_BCOUT((323 - 16)- 18*16), true),
			5 => (D_dly(0)'last_event, tpd_D_BCOUT((323 - 16)- 18*17), true),
			6 => (OPMODE_dly(1)'last_event, tpd_OPMODE_BCOUT((143 - 16)- 18*6), true),
			7 => (OPMODE_dly(0)'last_event, tpd_OPMODE_BCOUT((143 - 16)- 18*7), true),
			8 => (RSTB_dly'last_event, tpd_RSTB_BCOUT(1), true),
			9 => (RSTD_dly'last_event, tpd_RSTD_BCOUT(1), true),
			10 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_BCOUT(1), true),
			11 => (CLK_dly'last_event, tpd_CLK_BCOUT(1), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> BCOUT(0),
         GlitchData	=> BCOUT_GlitchData(0),
         OutSignalName	=> "BCOUT(0)",
         OutTemp	=> BCOUT_zd(0),
         Paths		=> (
			0 => (B_dly(0)'last_event, tpd_B_BCOUT((323 - 17)- 18*17), true),
			1 => (BCIN_dly(0)'last_event, tpd_BCIN_BCOUT((323 - 17)- 18*17), true),
			2 => (D_dly(0)'last_event, tpd_D_BCOUT((323 - 17)- 18*17), true),
			3 => (OPMODE_dly(0)'last_event, tpd_OPMODE_BCOUT((143 - 17)- 18*7), true),
			4 => (RSTB_dly'last_event, tpd_RSTB_BCOUT(0), true),
			5 => (RSTD_dly'last_event, tpd_RSTD_BCOUT(0), true),
			6 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_BCOUT(0), true),
			7 => (CLK_dly'last_event, tpd_CLK_BCOUT(0), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

------------------

       VitalPathDelay01 (
         OutSignal	=> CARRYOUT,
         GlitchData	=> CARRYOUT_GlitchData,
         OutSignalName	=> "CARRYOUT",
         OutTemp	=> CARRYOUT_zd,
         Paths		=> (
			0 => (A_ipd(0)'last_event, tpd_A_CARRYOUT(0), true),
			1 => (A_ipd(1)'last_event, tpd_A_CARRYOUT(1), true),
			2 => (A_ipd(2)'last_event, tpd_A_CARRYOUT(2), true),
			3 => (A_ipd(3)'last_event, tpd_A_CARRYOUT(3), true),
			4 => (A_ipd(4)'last_event, tpd_A_CARRYOUT(4), true),
			5 => (A_ipd(5)'last_event, tpd_A_CARRYOUT(5), true),
			6 => (A_ipd(6)'last_event, tpd_A_CARRYOUT(6), true),
			7 => (A_ipd(7)'last_event, tpd_A_CARRYOUT(7), true),
			8 => (A_ipd(8)'last_event, tpd_A_CARRYOUT(8), true),
			9 => (A_ipd(9)'last_event, tpd_A_CARRYOUT(9), true),
			10 => (A_ipd(10)'last_event, tpd_A_CARRYOUT(10), true),
			11 => (A_ipd(11)'last_event, tpd_A_CARRYOUT(11), true),
			12 => (A_ipd(12)'last_event, tpd_A_CARRYOUT(12), true),
			13 => (A_ipd(13)'last_event, tpd_A_CARRYOUT(13), true),
			14 => (A_ipd(14)'last_event, tpd_A_CARRYOUT(14), true),
			15 => (A_ipd(15)'last_event, tpd_A_CARRYOUT(15), true),
			16 => (A_ipd(16)'last_event, tpd_A_CARRYOUT(16), true),
			17 => (A_ipd(17)'last_event, tpd_A_CARRYOUT(17), true),
			18 => (B_ipd(0)'last_event, tpd_B_CARRYOUT(0), true),
			19 => (B_ipd(1)'last_event, tpd_B_CARRYOUT(1), true),
			20 => (B_ipd(2)'last_event, tpd_B_CARRYOUT(2), true),
			21 => (B_ipd(3)'last_event, tpd_B_CARRYOUT(3), true),
			22 => (B_ipd(4)'last_event, tpd_B_CARRYOUT(4), true),
			23 => (B_ipd(5)'last_event, tpd_B_CARRYOUT(5), true),
			24 => (B_ipd(6)'last_event, tpd_B_CARRYOUT(6), true),
			25 => (B_ipd(7)'last_event, tpd_B_CARRYOUT(7), true),
			26 => (B_ipd(8)'last_event, tpd_B_CARRYOUT(8), true),
			27 => (B_ipd(9)'last_event, tpd_B_CARRYOUT(9), true),
			28 => (B_ipd(10)'last_event, tpd_B_CARRYOUT(10), true),
			29 => (B_ipd(11)'last_event, tpd_B_CARRYOUT(11), true),
			30 => (B_ipd(12)'last_event, tpd_B_CARRYOUT(12), true),
			31 => (B_ipd(13)'last_event, tpd_B_CARRYOUT(13), true),
			32 => (B_ipd(14)'last_event, tpd_B_CARRYOUT(14), true),
			33 => (B_ipd(15)'last_event, tpd_B_CARRYOUT(15), true),
			34 => (B_ipd(16)'last_event, tpd_B_CARRYOUT(16), true),
			35 => (B_ipd(17)'last_event, tpd_B_CARRYOUT(17), true),
			36 => (BCIN_ipd(0)'last_event, tpd_BCIN_CARRYOUT(0), true),
			37 => (BCIN_ipd(1)'last_event, tpd_BCIN_CARRYOUT(1), true),
			38 => (BCIN_ipd(2)'last_event, tpd_BCIN_CARRYOUT(2), true),
			39 => (BCIN_ipd(3)'last_event, tpd_BCIN_CARRYOUT(3), true),
			40 => (BCIN_ipd(4)'last_event, tpd_BCIN_CARRYOUT(4), true),
			41 => (BCIN_ipd(5)'last_event, tpd_BCIN_CARRYOUT(5), true),
			42 => (BCIN_ipd(6)'last_event, tpd_BCIN_CARRYOUT(6), true),
			43 => (BCIN_ipd(7)'last_event, tpd_BCIN_CARRYOUT(7), true),
			44 => (BCIN_ipd(8)'last_event, tpd_BCIN_CARRYOUT(8), true),
			45 => (BCIN_ipd(9)'last_event, tpd_BCIN_CARRYOUT(9), true),
			46 => (BCIN_ipd(10)'last_event, tpd_BCIN_CARRYOUT(10), true),
			47 => (BCIN_ipd(11)'last_event, tpd_BCIN_CARRYOUT(11), true),
			48 => (BCIN_ipd(12)'last_event, tpd_BCIN_CARRYOUT(12), true),
			49 => (BCIN_ipd(13)'last_event, tpd_BCIN_CARRYOUT(13), true),
			50 => (BCIN_ipd(14)'last_event, tpd_BCIN_CARRYOUT(14), true),
			51 => (BCIN_ipd(15)'last_event, tpd_BCIN_CARRYOUT(15), true),
			52 => (BCIN_ipd(16)'last_event, tpd_BCIN_CARRYOUT(16), true),
			53 => (BCIN_ipd(17)'last_event, tpd_BCIN_CARRYOUT(17), true),
			54 => (C_ipd(0)'last_event, tpd_C_CARRYOUT(0), true),
			55 => (C_ipd(1)'last_event, tpd_C_CARRYOUT(1), true),
			56 => (C_ipd(2)'last_event, tpd_C_CARRYOUT(2), true),
			57 => (C_ipd(3)'last_event, tpd_C_CARRYOUT(3), true),
			58 => (C_ipd(4)'last_event, tpd_C_CARRYOUT(4), true),
			59 => (C_ipd(5)'last_event, tpd_C_CARRYOUT(5), true),
			60 => (C_ipd(6)'last_event, tpd_C_CARRYOUT(6), true),
			61 => (C_ipd(7)'last_event, tpd_C_CARRYOUT(7), true),
			62 => (C_ipd(8)'last_event, tpd_C_CARRYOUT(8), true),
			63 => (C_ipd(9)'last_event, tpd_C_CARRYOUT(9), true),
			64 => (C_ipd(10)'last_event, tpd_C_CARRYOUT(10), true),
			65 => (C_ipd(11)'last_event, tpd_C_CARRYOUT(11), true),
			66 => (C_ipd(12)'last_event, tpd_C_CARRYOUT(12), true),
			67 => (C_ipd(13)'last_event, tpd_C_CARRYOUT(13), true),
			68 => (C_ipd(14)'last_event, tpd_C_CARRYOUT(14), true),
			69 => (C_ipd(15)'last_event, tpd_C_CARRYOUT(15), true),
			70 => (C_ipd(16)'last_event, tpd_C_CARRYOUT(16), true),
			71 => (C_ipd(17)'last_event, tpd_C_CARRYOUT(17), true),
			72 => (C_ipd(18)'last_event, tpd_C_CARRYOUT(18), true),
			73 => (C_ipd(19)'last_event, tpd_C_CARRYOUT(19), true),
			74 => (C_ipd(20)'last_event, tpd_C_CARRYOUT(20), true),
			75 => (C_ipd(21)'last_event, tpd_C_CARRYOUT(21), true),
			76 => (C_ipd(22)'last_event, tpd_C_CARRYOUT(22), true),
			77 => (C_ipd(23)'last_event, tpd_C_CARRYOUT(23), true),
			78 => (C_ipd(24)'last_event, tpd_C_CARRYOUT(24), true),
			79 => (C_ipd(25)'last_event, tpd_C_CARRYOUT(25), true),
			80 => (C_ipd(26)'last_event, tpd_C_CARRYOUT(26), true),
			81 => (C_ipd(27)'last_event, tpd_C_CARRYOUT(27), true),
			82 => (C_ipd(28)'last_event, tpd_C_CARRYOUT(28), true),
			83 => (C_ipd(29)'last_event, tpd_C_CARRYOUT(29), true),
			84 => (C_ipd(30)'last_event, tpd_C_CARRYOUT(30), true),
			85 => (C_ipd(31)'last_event, tpd_C_CARRYOUT(31), true),
			86 => (C_ipd(32)'last_event, tpd_C_CARRYOUT(32), true),
			87 => (C_ipd(33)'last_event, tpd_C_CARRYOUT(33), true),
			88 => (C_ipd(34)'last_event, tpd_C_CARRYOUT(34), true),
			89 => (C_ipd(35)'last_event, tpd_C_CARRYOUT(35), true),
			90 => (C_ipd(36)'last_event, tpd_C_CARRYOUT(36), true),
			91 => (C_ipd(37)'last_event, tpd_C_CARRYOUT(37), true),
			92 => (C_ipd(38)'last_event, tpd_C_CARRYOUT(38), true),
			93 => (C_ipd(39)'last_event, tpd_C_CARRYOUT(39), true),
			94 => (C_ipd(40)'last_event, tpd_C_CARRYOUT(40), true),
			95 => (C_ipd(41)'last_event, tpd_C_CARRYOUT(41), true),
			96 => (C_ipd(42)'last_event, tpd_C_CARRYOUT(42), true),
			97 => (C_ipd(43)'last_event, tpd_C_CARRYOUT(43), true),
			98 => (C_ipd(44)'last_event, tpd_C_CARRYOUT(44), true),
			99 => (C_ipd(45)'last_event, tpd_C_CARRYOUT(45), true),
			100 => (C_ipd(46)'last_event, tpd_C_CARRYOUT(46), true),
			101 => (C_ipd(47)'last_event, tpd_C_CARRYOUT(47), true),
			102 => (CARRYIN_ipd'last_event, tpd_CARRYIN_CARRYOUT, true),
			103 => (D_ipd(0)'last_event, tpd_D_CARRYOUT(0), true),
			104 => (D_ipd(1)'last_event, tpd_D_CARRYOUT(1), true),
			105 => (D_ipd(2)'last_event, tpd_D_CARRYOUT(2), true),
			106 => (D_ipd(3)'last_event, tpd_D_CARRYOUT(3), true),
			107 => (D_ipd(4)'last_event, tpd_D_CARRYOUT(4), true),
			108 => (D_ipd(5)'last_event, tpd_D_CARRYOUT(5), true),
			109 => (D_ipd(6)'last_event, tpd_D_CARRYOUT(6), true),
			110 => (D_ipd(7)'last_event, tpd_D_CARRYOUT(7), true),
			111 => (D_ipd(8)'last_event, tpd_D_CARRYOUT(8), true),
			112 => (D_ipd(9)'last_event, tpd_D_CARRYOUT(9), true),
			113 => (D_ipd(10)'last_event, tpd_D_CARRYOUT(10), true),
			114 => (D_ipd(11)'last_event, tpd_D_CARRYOUT(11), true),
			115 => (D_ipd(12)'last_event, tpd_D_CARRYOUT(12), true),
			116 => (D_ipd(13)'last_event, tpd_D_CARRYOUT(13), true),
			117 => (D_ipd(14)'last_event, tpd_D_CARRYOUT(14), true),
			118 => (D_ipd(15)'last_event, tpd_D_CARRYOUT(15), true),
			119 => (D_ipd(16)'last_event, tpd_D_CARRYOUT(16), true),
			120 => (D_ipd(17)'last_event, tpd_D_CARRYOUT(17), true),
			121 => (OPMODE_ipd(0)'last_event, tpd_OPMODE_CARRYOUT(0), true),
			122 => (OPMODE_ipd(1)'last_event, tpd_OPMODE_CARRYOUT(1), true),
			123 => (OPMODE_ipd(2)'last_event, tpd_OPMODE_CARRYOUT(2), true),
			124 => (OPMODE_ipd(3)'last_event, tpd_OPMODE_CARRYOUT(3), true),
			125 => (OPMODE_ipd(4)'last_event, tpd_OPMODE_CARRYOUT(4), true),
			126 => (OPMODE_ipd(5)'last_event, tpd_OPMODE_CARRYOUT(5), true),
			127 => (OPMODE_ipd(6)'last_event, tpd_OPMODE_CARRYOUT(6), true),
			128 => (OPMODE_ipd(7)'last_event, tpd_OPMODE_CARRYOUT(7), true),
			129 => (PCIN_ipd(0)'last_event, tpd_PCIN_CARRYOUT(0), true),
			130 => (PCIN_ipd(1)'last_event, tpd_PCIN_CARRYOUT(1), true),
			131 => (PCIN_ipd(2)'last_event, tpd_PCIN_CARRYOUT(2), true),
			132 => (PCIN_ipd(3)'last_event, tpd_PCIN_CARRYOUT(3), true),
			133 => (PCIN_ipd(4)'last_event, tpd_PCIN_CARRYOUT(4), true),
			134 => (PCIN_ipd(5)'last_event, tpd_PCIN_CARRYOUT(5), true),
			135 => (PCIN_ipd(6)'last_event, tpd_PCIN_CARRYOUT(6), true),
			136 => (PCIN_ipd(7)'last_event, tpd_PCIN_CARRYOUT(7), true),
			137 => (PCIN_ipd(8)'last_event, tpd_PCIN_CARRYOUT(8), true),
			138 => (PCIN_ipd(9)'last_event, tpd_PCIN_CARRYOUT(9), true),
			139 => (PCIN_ipd(10)'last_event, tpd_PCIN_CARRYOUT(10), true),
			140 => (PCIN_ipd(11)'last_event, tpd_PCIN_CARRYOUT(11), true),
			141 => (PCIN_ipd(12)'last_event, tpd_PCIN_CARRYOUT(12), true),
			142 => (PCIN_ipd(13)'last_event, tpd_PCIN_CARRYOUT(13), true),
			143 => (PCIN_ipd(14)'last_event, tpd_PCIN_CARRYOUT(14), true),
			144 => (PCIN_ipd(15)'last_event, tpd_PCIN_CARRYOUT(15), true),
			145 => (PCIN_ipd(16)'last_event, tpd_PCIN_CARRYOUT(16), true),
			146 => (PCIN_ipd(17)'last_event, tpd_PCIN_CARRYOUT(17), true),
			147 => (PCIN_ipd(18)'last_event, tpd_PCIN_CARRYOUT(18), true),
			148 => (PCIN_ipd(19)'last_event, tpd_PCIN_CARRYOUT(19), true),
			149 => (PCIN_ipd(20)'last_event, tpd_PCIN_CARRYOUT(20), true),
			150 => (PCIN_ipd(21)'last_event, tpd_PCIN_CARRYOUT(21), true),
			151 => (PCIN_ipd(22)'last_event, tpd_PCIN_CARRYOUT(22), true),
			152 => (PCIN_ipd(23)'last_event, tpd_PCIN_CARRYOUT(23), true),
			153 => (PCIN_ipd(24)'last_event, tpd_PCIN_CARRYOUT(24), true),
			154 => (PCIN_ipd(25)'last_event, tpd_PCIN_CARRYOUT(25), true),
			155 => (PCIN_ipd(26)'last_event, tpd_PCIN_CARRYOUT(26), true),
			156 => (PCIN_ipd(27)'last_event, tpd_PCIN_CARRYOUT(27), true),
			157 => (PCIN_ipd(28)'last_event, tpd_PCIN_CARRYOUT(28), true),
			158 => (PCIN_ipd(29)'last_event, tpd_PCIN_CARRYOUT(29), true),
			159 => (PCIN_ipd(30)'last_event, tpd_PCIN_CARRYOUT(30), true),
			160 => (PCIN_ipd(31)'last_event, tpd_PCIN_CARRYOUT(31), true),
			161 => (PCIN_ipd(32)'last_event, tpd_PCIN_CARRYOUT(32), true),
			162 => (PCIN_ipd(33)'last_event, tpd_PCIN_CARRYOUT(33), true),
			163 => (PCIN_ipd(34)'last_event, tpd_PCIN_CARRYOUT(34), true),
			164 => (PCIN_ipd(35)'last_event, tpd_PCIN_CARRYOUT(35), true),
			165 => (PCIN_ipd(36)'last_event, tpd_PCIN_CARRYOUT(36), true),
			166 => (PCIN_ipd(37)'last_event, tpd_PCIN_CARRYOUT(37), true),
			167 => (PCIN_ipd(38)'last_event, tpd_PCIN_CARRYOUT(38), true),
			168 => (PCIN_ipd(39)'last_event, tpd_PCIN_CARRYOUT(39), true),
			169 => (PCIN_ipd(40)'last_event, tpd_PCIN_CARRYOUT(40), true),
			170 => (PCIN_ipd(41)'last_event, tpd_PCIN_CARRYOUT(41), true),
			171 => (PCIN_ipd(42)'last_event, tpd_PCIN_CARRYOUT(42), true),
			172 => (PCIN_ipd(43)'last_event, tpd_PCIN_CARRYOUT(43), true),
			173 => (PCIN_ipd(44)'last_event, tpd_PCIN_CARRYOUT(44), true),
			174 => (PCIN_ipd(45)'last_event, tpd_PCIN_CARRYOUT(45), true),
			175 => (PCIN_ipd(46)'last_event, tpd_PCIN_CARRYOUT(46), true),
			176 => (PCIN_ipd(47)'last_event, tpd_PCIN_CARRYOUT(47), true),
			177 => (RSTA_dly'last_event, tpd_RSTA_CARRYOUT, RSTTYPE="ASYNC"),
			178 => (RSTB_dly'last_event, tpd_RSTB_CARRYOUT, RSTTYPE="ASYNC"),
			179 => (RSTC_dly'last_event, tpd_RSTC_CARRYOUT, RSTTYPE="ASYNC"),
			180 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_CARRYOUT, RSTTYPE="ASYNC"),
			181 => (RSTD_dly'last_event, tpd_RSTD_CARRYOUT, RSTTYPE="ASYNC"),
			182 => (RSTM_dly'last_event, tpd_RSTM_CARRYOUT, RSTTYPE="ASYNC"),
			183 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_CARRYOUT, RSTTYPE="ASYNC"),
			184 => (CLK_dly'last_event, tpd_CLK_CARRYOUT, true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

-----------------------------------------

       VitalPathDelay01 (
         OutSignal	=> P(47),
         GlitchData	=> P_GlitchData(47),
         OutSignalName	=> "P(47)",
         OutTemp	=> P_zd(47),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_P((863 - 0)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_P((863 - 0)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_P((863 - 0)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_P((863 - 0)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_P((863 - 0)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_P((863 - 0)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_P((863 - 0)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_P((863 - 0)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_P((863 - 0)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_P((863 - 0)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_P((863 - 0)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_P((863 - 0)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_P((863 - 0)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_P((863 - 0)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_P((863 - 0)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_P((863 - 0)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_P((863 - 0)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_P((863 - 0)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_P((863 - 0)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_P((863 - 0)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_P((863 - 0)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_P((863 - 0)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_P((863 - 0)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_P((863 - 0)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_P((863 - 0)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_P((863 - 0)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_P((863 - 0)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_P((863 - 0)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_P((863 - 0)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_P((863 - 0)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_P((863 - 0)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_P((863 - 0)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_P((863 - 0)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_P((863 - 0)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_P((863 - 0)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_P((863 - 0)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_P((863 - 0)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_P((863 - 0)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_P((863 - 0)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_P((863 - 0)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_P((863 - 0)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_P((863 - 0)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_P((863 - 0)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_P((863 - 0)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_P((863 - 0)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_P((863 - 0)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_P((863 - 0)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_P((863 - 0)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 0)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 0)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 0)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 0)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 0)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 0)- 48*17), true),
			54 => (C_dly(47)'last_event, tpd_C_P((2303 - 0)- 48*0), true),
			55 => (C_dly(46)'last_event, tpd_C_P((2303 - 0)- 48*1), true),
			56 => (C_dly(45)'last_event, tpd_C_P((2303 - 0)- 48*2), true),
			57 => (C_dly(44)'last_event, tpd_C_P((2303 - 0)- 48*3), true),
			58 => (C_dly(43)'last_event, tpd_C_P((2303 - 0)- 48*4), true),
			59 => (C_dly(42)'last_event, tpd_C_P((2303 - 0)- 48*5), true),
			60 => (C_dly(41)'last_event, tpd_C_P((2303 - 0)- 48*6), true),
			61 => (C_dly(40)'last_event, tpd_C_P((2303 - 0)- 48*7), true),
			62 => (C_dly(39)'last_event, tpd_C_P((2303 - 0)- 48*8), true),
			63 => (C_dly(38)'last_event, tpd_C_P((2303 - 0)- 48*9), true),
			64 => (C_dly(37)'last_event, tpd_C_P((2303 - 0)- 48*10), true),
			65 => (C_dly(36)'last_event, tpd_C_P((2303 - 0)- 48*11), true),
			66 => (C_dly(35)'last_event, tpd_C_P((2303 - 0)- 48*12), true),
			67 => (C_dly(34)'last_event, tpd_C_P((2303 - 0)- 48*13), true),
			68 => (C_dly(33)'last_event, tpd_C_P((2303 - 0)- 48*14), true),
			69 => (C_dly(32)'last_event, tpd_C_P((2303 - 0)- 48*15), true),
			70 => (C_dly(31)'last_event, tpd_C_P((2303 - 0)- 48*16), true),
			71 => (C_dly(30)'last_event, tpd_C_P((2303 - 0)- 48*17), true),
			72 => (C_dly(29)'last_event, tpd_C_P((2303 - 0)- 48*18), true),
			73 => (C_dly(28)'last_event, tpd_C_P((2303 - 0)- 48*19), true),
			74 => (C_dly(27)'last_event, tpd_C_P((2303 - 0)- 48*20), true),
			75 => (C_dly(26)'last_event, tpd_C_P((2303 - 0)- 48*21), true),
			76 => (C_dly(25)'last_event, tpd_C_P((2303 - 0)- 48*22), true),
			77 => (C_dly(24)'last_event, tpd_C_P((2303 - 0)- 48*23), true),
			78 => (C_dly(23)'last_event, tpd_C_P((2303 - 0)- 48*24), true),
			79 => (C_dly(22)'last_event, tpd_C_P((2303 - 0)- 48*25), true),
			80 => (C_dly(21)'last_event, tpd_C_P((2303 - 0)- 48*26), true),
			81 => (C_dly(20)'last_event, tpd_C_P((2303 - 0)- 48*27), true),
			82 => (C_dly(19)'last_event, tpd_C_P((2303 - 0)- 48*28), true),
			83 => (C_dly(18)'last_event, tpd_C_P((2303 - 0)- 48*29), true),
			84 => (C_dly(17)'last_event, tpd_C_P((2303 - 0)- 48*30), true),
			85 => (C_dly(16)'last_event, tpd_C_P((2303 - 0)- 48*31), true),
			86 => (C_dly(15)'last_event, tpd_C_P((2303 - 0)- 48*32), true),
			87 => (C_dly(14)'last_event, tpd_C_P((2303 - 0)- 48*33), true),
			88 => (C_dly(13)'last_event, tpd_C_P((2303 - 0)- 48*34), true),
			89 => (C_dly(12)'last_event, tpd_C_P((2303 - 0)- 48*35), true),
			90 => (C_dly(11)'last_event, tpd_C_P((2303 - 0)- 48*36), true),
			91 => (C_dly(10)'last_event, tpd_C_P((2303 - 0)- 48*37), true),
			92 => (C_dly(9)'last_event, tpd_C_P((2303 - 0)- 48*38), true),
			93 => (C_dly(8)'last_event, tpd_C_P((2303 - 0)- 48*39), true),
			94 => (C_dly(7)'last_event, tpd_C_P((2303 - 0)- 48*40), true),
			95 => (C_dly(6)'last_event, tpd_C_P((2303 - 0)- 48*41), true),
			96 => (C_dly(5)'last_event, tpd_C_P((2303 - 0)- 48*42), true),
			97 => (C_dly(4)'last_event, tpd_C_P((2303 - 0)- 48*43), true),
			98 => (C_dly(3)'last_event, tpd_C_P((2303 - 0)- 48*44), true),
			99 => (C_dly(2)'last_event, tpd_C_P((2303 - 0)- 48*45), true),
			100 => (C_dly(1)'last_event, tpd_C_P((2303 - 0)- 48*46), true),
			101 => (C_dly(0)'last_event, tpd_C_P((2303 - 0)- 48*47), true),
			102 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(47), true),
			103 => (D_dly(17)'last_event, tpd_D_P((863 - 0)- 48*0), true),
			104 => (D_dly(16)'last_event, tpd_D_P((863 - 0)- 48*1), true),
			105 => (D_dly(15)'last_event, tpd_D_P((863 - 0)- 48*2), true),
			106 => (D_dly(14)'last_event, tpd_D_P((863 - 0)- 48*3), true),
			107 => (D_dly(13)'last_event, tpd_D_P((863 - 0)- 48*4), true),
			108 => (D_dly(12)'last_event, tpd_D_P((863 - 0)- 48*5), true),
			109 => (D_dly(11)'last_event, tpd_D_P((863 - 0)- 48*6), true),
			110 => (D_dly(10)'last_event, tpd_D_P((863 - 0)- 48*7), true),
			111 => (D_dly(9)'last_event, tpd_D_P((863 - 0)- 48*8), true),
			112 => (D_dly(8)'last_event, tpd_D_P((863 - 0)- 48*9), true),
			113 => (D_dly(7)'last_event, tpd_D_P((863 - 0)- 48*10), true),
			114 => (D_dly(6)'last_event, tpd_D_P((863 - 0)- 48*11), true),
			115 => (D_dly(5)'last_event, tpd_D_P((863 - 0)- 48*12), true),
			116 => (D_dly(4)'last_event, tpd_D_P((863 - 0)- 48*13), true),
			117 => (D_dly(3)'last_event, tpd_D_P((863 - 0)- 48*14), true),
			118 => (D_dly(2)'last_event, tpd_D_P((863 - 0)- 48*15), true),
			119 => (D_dly(1)'last_event, tpd_D_P((863 - 0)- 48*16), true),
			120 => (D_dly(0)'last_event, tpd_D_P((863 - 0)- 48*17), true),
			121 => (OPMODE_dly(7)'last_event, tpd_OPMODE_P((383 - 0)- 48*0), true),
			122 => (OPMODE_dly(6)'last_event, tpd_OPMODE_P((383 - 0)- 48*1), true),
			123 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 0)- 48*2), true),
			124 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 0)- 48*3), true),
			125 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 0)- 48*4), true),
			126 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 0)- 48*5), true),
			127 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 0)- 48*6), true),
			128 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 0)- 48*7), true),
			129 => (PCIN_dly(47)'last_event, tpd_PCIN_P((2303 - 0)- 48*0), true),
			130 => (PCIN_dly(46)'last_event, tpd_PCIN_P((2303 - 0)- 48*1), true),
			131 => (PCIN_dly(45)'last_event, tpd_PCIN_P((2303 - 0)- 48*2), true),
			132 => (PCIN_dly(44)'last_event, tpd_PCIN_P((2303 - 0)- 48*3), true),
			133 => (PCIN_dly(43)'last_event, tpd_PCIN_P((2303 - 0)- 48*4), true),
			134 => (PCIN_dly(42)'last_event, tpd_PCIN_P((2303 - 0)- 48*5), true),
			135 => (PCIN_dly(41)'last_event, tpd_PCIN_P((2303 - 0)- 48*6), true),
			136 => (PCIN_dly(40)'last_event, tpd_PCIN_P((2303 - 0)- 48*7), true),
			137 => (PCIN_dly(39)'last_event, tpd_PCIN_P((2303 - 0)- 48*8), true),
			138 => (PCIN_dly(38)'last_event, tpd_PCIN_P((2303 - 0)- 48*9), true),
			139 => (PCIN_dly(37)'last_event, tpd_PCIN_P((2303 - 0)- 48*10), true),
			140 => (PCIN_dly(36)'last_event, tpd_PCIN_P((2303 - 0)- 48*11), true),
			141 => (PCIN_dly(35)'last_event, tpd_PCIN_P((2303 - 0)- 48*12), true),
			142 => (PCIN_dly(34)'last_event, tpd_PCIN_P((2303 - 0)- 48*13), true),
			143 => (PCIN_dly(33)'last_event, tpd_PCIN_P((2303 - 0)- 48*14), true),
			144 => (PCIN_dly(32)'last_event, tpd_PCIN_P((2303 - 0)- 48*15), true),
			145 => (PCIN_dly(31)'last_event, tpd_PCIN_P((2303 - 0)- 48*16), true),
			146 => (PCIN_dly(30)'last_event, tpd_PCIN_P((2303 - 0)- 48*17), true),
			147 => (PCIN_dly(29)'last_event, tpd_PCIN_P((2303 - 0)- 48*18), true),
			148 => (PCIN_dly(28)'last_event, tpd_PCIN_P((2303 - 0)- 48*19), true),
			149 => (PCIN_dly(27)'last_event, tpd_PCIN_P((2303 - 0)- 48*20), true),
			150 => (PCIN_dly(26)'last_event, tpd_PCIN_P((2303 - 0)- 48*21), true),
			151 => (PCIN_dly(25)'last_event, tpd_PCIN_P((2303 - 0)- 48*22), true),
			152 => (PCIN_dly(24)'last_event, tpd_PCIN_P((2303 - 0)- 48*23), true),
			153 => (PCIN_dly(23)'last_event, tpd_PCIN_P((2303 - 0)- 48*24), true),
			154 => (PCIN_dly(22)'last_event, tpd_PCIN_P((2303 - 0)- 48*25), true),
			155 => (PCIN_dly(21)'last_event, tpd_PCIN_P((2303 - 0)- 48*26), true),
			156 => (PCIN_dly(20)'last_event, tpd_PCIN_P((2303 - 0)- 48*27), true),
			157 => (PCIN_dly(19)'last_event, tpd_PCIN_P((2303 - 0)- 48*28), true),
			158 => (PCIN_dly(18)'last_event, tpd_PCIN_P((2303 - 0)- 48*29), true),
			159 => (PCIN_dly(17)'last_event, tpd_PCIN_P((2303 - 0)- 48*30), true),
			160 => (PCIN_dly(16)'last_event, tpd_PCIN_P((2303 - 0)- 48*31), true),
			161 => (PCIN_dly(15)'last_event, tpd_PCIN_P((2303 - 0)- 48*32), true),
			162 => (PCIN_dly(14)'last_event, tpd_PCIN_P((2303 - 0)- 48*33), true),
			163 => (PCIN_dly(13)'last_event, tpd_PCIN_P((2303 - 0)- 48*34), true),
			164 => (PCIN_dly(12)'last_event, tpd_PCIN_P((2303 - 0)- 48*35), true),
			165 => (PCIN_dly(11)'last_event, tpd_PCIN_P((2303 - 0)- 48*36), true),
			166 => (PCIN_dly(10)'last_event, tpd_PCIN_P((2303 - 0)- 48*37), true),
			167 => (PCIN_dly(9)'last_event, tpd_PCIN_P((2303 - 0)- 48*38), true),
			168 => (PCIN_dly(8)'last_event, tpd_PCIN_P((2303 - 0)- 48*39), true),
			169 => (PCIN_dly(7)'last_event, tpd_PCIN_P((2303 - 0)- 48*40), true),
			170 => (PCIN_dly(6)'last_event, tpd_PCIN_P((2303 - 0)- 48*41), true),
			171 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 0)- 48*42), true),
			172 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 0)- 48*43), true),
			173 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 0)- 48*44), true),
			174 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 0)- 48*45), true),
			175 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 0)- 48*46), true),
			176 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 0)- 48*47), true),
			177 => (RSTA_dly'last_event, tpd_RSTA_P(47), true),
			178 => (RSTB_dly'last_event, tpd_RSTB_P(47), true),
			179 => (RSTC_dly'last_event, tpd_RSTC_P(47), true),
			180 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(47), true),
			181 => (RSTD_dly'last_event, tpd_RSTD_P(47), true),
			182 => (RSTM_dly'last_event, tpd_RSTM_P(47), true),
			183 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(47), true),
			184 => (RSTP_dly'last_event, tpd_RSTP_P(47), true),
			185 => (CLK_dly'last_event, tpd_CLK_P(47), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(46),
         GlitchData	=> P_GlitchData(46),
         OutSignalName	=> "P(46)",
         OutTemp	=> P_zd(46),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_P((863 - 1)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_P((863 - 1)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_P((863 - 1)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_P((863 - 1)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_P((863 - 1)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_P((863 - 1)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_P((863 - 1)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_P((863 - 1)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_P((863 - 1)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_P((863 - 1)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_P((863 - 1)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_P((863 - 1)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_P((863 - 1)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_P((863 - 1)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_P((863 - 1)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_P((863 - 1)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_P((863 - 1)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_P((863 - 1)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_P((863 - 1)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_P((863 - 1)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_P((863 - 1)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_P((863 - 1)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_P((863 - 1)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_P((863 - 1)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_P((863 - 1)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_P((863 - 1)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_P((863 - 1)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_P((863 - 1)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_P((863 - 1)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_P((863 - 1)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_P((863 - 1)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_P((863 - 1)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_P((863 - 1)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_P((863 - 1)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_P((863 - 1)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_P((863 - 1)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_P((863 - 1)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_P((863 - 1)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_P((863 - 1)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_P((863 - 1)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_P((863 - 1)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_P((863 - 1)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_P((863 - 1)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_P((863 - 1)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_P((863 - 1)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_P((863 - 1)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_P((863 - 1)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_P((863 - 1)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 1)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 1)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 1)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 1)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 1)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 1)- 48*17), true),
			54 => (C_dly(46)'last_event, tpd_C_P((2303 - 1)- 48*1), true),
			55 => (C_dly(45)'last_event, tpd_C_P((2303 - 1)- 48*2), true),
			56 => (C_dly(44)'last_event, tpd_C_P((2303 - 1)- 48*3), true),
			57 => (C_dly(43)'last_event, tpd_C_P((2303 - 1)- 48*4), true),
			58 => (C_dly(42)'last_event, tpd_C_P((2303 - 1)- 48*5), true),
			59 => (C_dly(41)'last_event, tpd_C_P((2303 - 1)- 48*6), true),
			60 => (C_dly(40)'last_event, tpd_C_P((2303 - 1)- 48*7), true),
			61 => (C_dly(39)'last_event, tpd_C_P((2303 - 1)- 48*8), true),
			62 => (C_dly(38)'last_event, tpd_C_P((2303 - 1)- 48*9), true),
			63 => (C_dly(37)'last_event, tpd_C_P((2303 - 1)- 48*10), true),
			64 => (C_dly(36)'last_event, tpd_C_P((2303 - 1)- 48*11), true),
			65 => (C_dly(35)'last_event, tpd_C_P((2303 - 1)- 48*12), true),
			66 => (C_dly(34)'last_event, tpd_C_P((2303 - 1)- 48*13), true),
			67 => (C_dly(33)'last_event, tpd_C_P((2303 - 1)- 48*14), true),
			68 => (C_dly(32)'last_event, tpd_C_P((2303 - 1)- 48*15), true),
			69 => (C_dly(31)'last_event, tpd_C_P((2303 - 1)- 48*16), true),
			70 => (C_dly(30)'last_event, tpd_C_P((2303 - 1)- 48*17), true),
			71 => (C_dly(29)'last_event, tpd_C_P((2303 - 1)- 48*18), true),
			72 => (C_dly(28)'last_event, tpd_C_P((2303 - 1)- 48*19), true),
			73 => (C_dly(27)'last_event, tpd_C_P((2303 - 1)- 48*20), true),
			74 => (C_dly(26)'last_event, tpd_C_P((2303 - 1)- 48*21), true),
			75 => (C_dly(25)'last_event, tpd_C_P((2303 - 1)- 48*22), true),
			76 => (C_dly(24)'last_event, tpd_C_P((2303 - 1)- 48*23), true),
			77 => (C_dly(23)'last_event, tpd_C_P((2303 - 1)- 48*24), true),
			78 => (C_dly(22)'last_event, tpd_C_P((2303 - 1)- 48*25), true),
			79 => (C_dly(21)'last_event, tpd_C_P((2303 - 1)- 48*26), true),
			80 => (C_dly(20)'last_event, tpd_C_P((2303 - 1)- 48*27), true),
			81 => (C_dly(19)'last_event, tpd_C_P((2303 - 1)- 48*28), true),
			82 => (C_dly(18)'last_event, tpd_C_P((2303 - 1)- 48*29), true),
			83 => (C_dly(17)'last_event, tpd_C_P((2303 - 1)- 48*30), true),
			84 => (C_dly(16)'last_event, tpd_C_P((2303 - 1)- 48*31), true),
			85 => (C_dly(15)'last_event, tpd_C_P((2303 - 1)- 48*32), true),
			86 => (C_dly(14)'last_event, tpd_C_P((2303 - 1)- 48*33), true),
			87 => (C_dly(13)'last_event, tpd_C_P((2303 - 1)- 48*34), true),
			88 => (C_dly(12)'last_event, tpd_C_P((2303 - 1)- 48*35), true),
			89 => (C_dly(11)'last_event, tpd_C_P((2303 - 1)- 48*36), true),
			90 => (C_dly(10)'last_event, tpd_C_P((2303 - 1)- 48*37), true),
			91 => (C_dly(9)'last_event, tpd_C_P((2303 - 1)- 48*38), true),
			92 => (C_dly(8)'last_event, tpd_C_P((2303 - 1)- 48*39), true),
			93 => (C_dly(7)'last_event, tpd_C_P((2303 - 1)- 48*40), true),
			94 => (C_dly(6)'last_event, tpd_C_P((2303 - 1)- 48*41), true),
			95 => (C_dly(5)'last_event, tpd_C_P((2303 - 1)- 48*42), true),
			96 => (C_dly(4)'last_event, tpd_C_P((2303 - 1)- 48*43), true),
			97 => (C_dly(3)'last_event, tpd_C_P((2303 - 1)- 48*44), true),
			98 => (C_dly(2)'last_event, tpd_C_P((2303 - 1)- 48*45), true),
			99 => (C_dly(1)'last_event, tpd_C_P((2303 - 1)- 48*46), true),
			100 => (C_dly(0)'last_event, tpd_C_P((2303 - 1)- 48*47), true),
			101 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(46), true),
			102 => (D_dly(17)'last_event, tpd_D_P((863 - 1)- 48*0), true),
			103 => (D_dly(16)'last_event, tpd_D_P((863 - 1)- 48*1), true),
			104 => (D_dly(15)'last_event, tpd_D_P((863 - 1)- 48*2), true),
			105 => (D_dly(14)'last_event, tpd_D_P((863 - 1)- 48*3), true),
			106 => (D_dly(13)'last_event, tpd_D_P((863 - 1)- 48*4), true),
			107 => (D_dly(12)'last_event, tpd_D_P((863 - 1)- 48*5), true),
			108 => (D_dly(11)'last_event, tpd_D_P((863 - 1)- 48*6), true),
			109 => (D_dly(10)'last_event, tpd_D_P((863 - 1)- 48*7), true),
			110 => (D_dly(9)'last_event, tpd_D_P((863 - 1)- 48*8), true),
			111 => (D_dly(8)'last_event, tpd_D_P((863 - 1)- 48*9), true),
			112 => (D_dly(7)'last_event, tpd_D_P((863 - 1)- 48*10), true),
			113 => (D_dly(6)'last_event, tpd_D_P((863 - 1)- 48*11), true),
			114 => (D_dly(5)'last_event, tpd_D_P((863 - 1)- 48*12), true),
			115 => (D_dly(4)'last_event, tpd_D_P((863 - 1)- 48*13), true),
			116 => (D_dly(3)'last_event, tpd_D_P((863 - 1)- 48*14), true),
			117 => (D_dly(2)'last_event, tpd_D_P((863 - 1)- 48*15), true),
			118 => (D_dly(1)'last_event, tpd_D_P((863 - 1)- 48*16), true),
			119 => (D_dly(0)'last_event, tpd_D_P((863 - 1)- 48*17), true),
			120 => (OPMODE_dly(7)'last_event, tpd_OPMODE_P((383 - 1)- 48*0), true),
			121 => (OPMODE_dly(6)'last_event, tpd_OPMODE_P((383 - 1)- 48*1), true),
			122 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 1)- 48*2), true),
			123 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 1)- 48*3), true),
			124 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 1)- 48*4), true),
			125 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 1)- 48*5), true),
			126 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 1)- 48*6), true),
			127 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 1)- 48*7), true),
			128 => (PCIN_dly(46)'last_event, tpd_PCIN_P((2303 - 1)- 48*1), true),
			129 => (PCIN_dly(45)'last_event, tpd_PCIN_P((2303 - 1)- 48*2), true),
			130 => (PCIN_dly(44)'last_event, tpd_PCIN_P((2303 - 1)- 48*3), true),
			131 => (PCIN_dly(43)'last_event, tpd_PCIN_P((2303 - 1)- 48*4), true),
			132 => (PCIN_dly(42)'last_event, tpd_PCIN_P((2303 - 1)- 48*5), true),
			133 => (PCIN_dly(41)'last_event, tpd_PCIN_P((2303 - 1)- 48*6), true),
			134 => (PCIN_dly(40)'last_event, tpd_PCIN_P((2303 - 1)- 48*7), true),
			135 => (PCIN_dly(39)'last_event, tpd_PCIN_P((2303 - 1)- 48*8), true),
			136 => (PCIN_dly(38)'last_event, tpd_PCIN_P((2303 - 1)- 48*9), true),
			137 => (PCIN_dly(37)'last_event, tpd_PCIN_P((2303 - 1)- 48*10), true),
			138 => (PCIN_dly(36)'last_event, tpd_PCIN_P((2303 - 1)- 48*11), true),
			139 => (PCIN_dly(35)'last_event, tpd_PCIN_P((2303 - 1)- 48*12), true),
			140 => (PCIN_dly(34)'last_event, tpd_PCIN_P((2303 - 1)- 48*13), true),
			141 => (PCIN_dly(33)'last_event, tpd_PCIN_P((2303 - 1)- 48*14), true),
			142 => (PCIN_dly(32)'last_event, tpd_PCIN_P((2303 - 1)- 48*15), true),
			143 => (PCIN_dly(31)'last_event, tpd_PCIN_P((2303 - 1)- 48*16), true),
			144 => (PCIN_dly(30)'last_event, tpd_PCIN_P((2303 - 1)- 48*17), true),
			145 => (PCIN_dly(29)'last_event, tpd_PCIN_P((2303 - 1)- 48*18), true),
			146 => (PCIN_dly(28)'last_event, tpd_PCIN_P((2303 - 1)- 48*19), true),
			147 => (PCIN_dly(27)'last_event, tpd_PCIN_P((2303 - 1)- 48*20), true),
			148 => (PCIN_dly(26)'last_event, tpd_PCIN_P((2303 - 1)- 48*21), true),
			149 => (PCIN_dly(25)'last_event, tpd_PCIN_P((2303 - 1)- 48*22), true),
			150 => (PCIN_dly(24)'last_event, tpd_PCIN_P((2303 - 1)- 48*23), true),
			151 => (PCIN_dly(23)'last_event, tpd_PCIN_P((2303 - 1)- 48*24), true),
			152 => (PCIN_dly(22)'last_event, tpd_PCIN_P((2303 - 1)- 48*25), true),
			153 => (PCIN_dly(21)'last_event, tpd_PCIN_P((2303 - 1)- 48*26), true),
			154 => (PCIN_dly(20)'last_event, tpd_PCIN_P((2303 - 1)- 48*27), true),
			155 => (PCIN_dly(19)'last_event, tpd_PCIN_P((2303 - 1)- 48*28), true),
			156 => (PCIN_dly(18)'last_event, tpd_PCIN_P((2303 - 1)- 48*29), true),
			157 => (PCIN_dly(17)'last_event, tpd_PCIN_P((2303 - 1)- 48*30), true),
			158 => (PCIN_dly(16)'last_event, tpd_PCIN_P((2303 - 1)- 48*31), true),
			159 => (PCIN_dly(15)'last_event, tpd_PCIN_P((2303 - 1)- 48*32), true),
			160 => (PCIN_dly(14)'last_event, tpd_PCIN_P((2303 - 1)- 48*33), true),
			161 => (PCIN_dly(13)'last_event, tpd_PCIN_P((2303 - 1)- 48*34), true),
			162 => (PCIN_dly(12)'last_event, tpd_PCIN_P((2303 - 1)- 48*35), true),
			163 => (PCIN_dly(11)'last_event, tpd_PCIN_P((2303 - 1)- 48*36), true),
			164 => (PCIN_dly(10)'last_event, tpd_PCIN_P((2303 - 1)- 48*37), true),
			165 => (PCIN_dly(9)'last_event, tpd_PCIN_P((2303 - 1)- 48*38), true),
			166 => (PCIN_dly(8)'last_event, tpd_PCIN_P((2303 - 1)- 48*39), true),
			167 => (PCIN_dly(7)'last_event, tpd_PCIN_P((2303 - 1)- 48*40), true),
			168 => (PCIN_dly(6)'last_event, tpd_PCIN_P((2303 - 1)- 48*41), true),
			169 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 1)- 48*42), true),
			170 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 1)- 48*43), true),
			171 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 1)- 48*44), true),
			172 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 1)- 48*45), true),
			173 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 1)- 48*46), true),
			174 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 1)- 48*47), true),
			175 => (RSTA_dly'last_event, tpd_RSTA_P(46), true),
			176 => (RSTB_dly'last_event, tpd_RSTB_P(46), true),
			177 => (RSTC_dly'last_event, tpd_RSTC_P(46), true),
			178 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(46), true),
			179 => (RSTD_dly'last_event, tpd_RSTD_P(46), true),
			180 => (RSTM_dly'last_event, tpd_RSTM_P(46), true),
			181 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(46), true),
			182 => (RSTP_dly'last_event, tpd_RSTP_P(46), true),
			183 => (CLK_dly'last_event, tpd_CLK_P(46), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(45),
         GlitchData	=> P_GlitchData(45),
         OutSignalName	=> "P(45)",
         OutTemp	=> P_zd(45),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_P((863 - 2)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_P((863 - 2)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_P((863 - 2)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_P((863 - 2)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_P((863 - 2)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_P((863 - 2)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_P((863 - 2)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_P((863 - 2)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_P((863 - 2)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_P((863 - 2)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_P((863 - 2)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_P((863 - 2)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_P((863 - 2)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_P((863 - 2)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_P((863 - 2)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_P((863 - 2)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_P((863 - 2)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_P((863 - 2)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_P((863 - 2)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_P((863 - 2)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_P((863 - 2)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_P((863 - 2)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_P((863 - 2)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_P((863 - 2)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_P((863 - 2)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_P((863 - 2)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_P((863 - 2)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_P((863 - 2)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_P((863 - 2)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_P((863 - 2)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_P((863 - 2)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_P((863 - 2)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_P((863 - 2)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_P((863 - 2)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_P((863 - 2)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_P((863 - 2)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_P((863 - 2)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_P((863 - 2)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_P((863 - 2)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_P((863 - 2)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_P((863 - 2)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_P((863 - 2)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_P((863 - 2)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_P((863 - 2)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_P((863 - 2)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_P((863 - 2)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_P((863 - 2)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_P((863 - 2)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 2)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 2)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 2)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 2)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 2)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 2)- 48*17), true),
			54 => (C_dly(45)'last_event, tpd_C_P((2303 - 2)- 48*2), true),
			55 => (C_dly(44)'last_event, tpd_C_P((2303 - 2)- 48*3), true),
			56 => (C_dly(43)'last_event, tpd_C_P((2303 - 2)- 48*4), true),
			57 => (C_dly(42)'last_event, tpd_C_P((2303 - 2)- 48*5), true),
			58 => (C_dly(41)'last_event, tpd_C_P((2303 - 2)- 48*6), true),
			59 => (C_dly(40)'last_event, tpd_C_P((2303 - 2)- 48*7), true),
			60 => (C_dly(39)'last_event, tpd_C_P((2303 - 2)- 48*8), true),
			61 => (C_dly(38)'last_event, tpd_C_P((2303 - 2)- 48*9), true),
			62 => (C_dly(37)'last_event, tpd_C_P((2303 - 2)- 48*10), true),
			63 => (C_dly(36)'last_event, tpd_C_P((2303 - 2)- 48*11), true),
			64 => (C_dly(35)'last_event, tpd_C_P((2303 - 2)- 48*12), true),
			65 => (C_dly(34)'last_event, tpd_C_P((2303 - 2)- 48*13), true),
			66 => (C_dly(33)'last_event, tpd_C_P((2303 - 2)- 48*14), true),
			67 => (C_dly(32)'last_event, tpd_C_P((2303 - 2)- 48*15), true),
			68 => (C_dly(31)'last_event, tpd_C_P((2303 - 2)- 48*16), true),
			69 => (C_dly(30)'last_event, tpd_C_P((2303 - 2)- 48*17), true),
			70 => (C_dly(29)'last_event, tpd_C_P((2303 - 2)- 48*18), true),
			71 => (C_dly(28)'last_event, tpd_C_P((2303 - 2)- 48*19), true),
			72 => (C_dly(27)'last_event, tpd_C_P((2303 - 2)- 48*20), true),
			73 => (C_dly(26)'last_event, tpd_C_P((2303 - 2)- 48*21), true),
			74 => (C_dly(25)'last_event, tpd_C_P((2303 - 2)- 48*22), true),
			75 => (C_dly(24)'last_event, tpd_C_P((2303 - 2)- 48*23), true),
			76 => (C_dly(23)'last_event, tpd_C_P((2303 - 2)- 48*24), true),
			77 => (C_dly(22)'last_event, tpd_C_P((2303 - 2)- 48*25), true),
			78 => (C_dly(21)'last_event, tpd_C_P((2303 - 2)- 48*26), true),
			79 => (C_dly(20)'last_event, tpd_C_P((2303 - 2)- 48*27), true),
			80 => (C_dly(19)'last_event, tpd_C_P((2303 - 2)- 48*28), true),
			81 => (C_dly(18)'last_event, tpd_C_P((2303 - 2)- 48*29), true),
			82 => (C_dly(17)'last_event, tpd_C_P((2303 - 2)- 48*30), true),
			83 => (C_dly(16)'last_event, tpd_C_P((2303 - 2)- 48*31), true),
			84 => (C_dly(15)'last_event, tpd_C_P((2303 - 2)- 48*32), true),
			85 => (C_dly(14)'last_event, tpd_C_P((2303 - 2)- 48*33), true),
			86 => (C_dly(13)'last_event, tpd_C_P((2303 - 2)- 48*34), true),
			87 => (C_dly(12)'last_event, tpd_C_P((2303 - 2)- 48*35), true),
			88 => (C_dly(11)'last_event, tpd_C_P((2303 - 2)- 48*36), true),
			89 => (C_dly(10)'last_event, tpd_C_P((2303 - 2)- 48*37), true),
			90 => (C_dly(9)'last_event, tpd_C_P((2303 - 2)- 48*38), true),
			91 => (C_dly(8)'last_event, tpd_C_P((2303 - 2)- 48*39), true),
			92 => (C_dly(7)'last_event, tpd_C_P((2303 - 2)- 48*40), true),
			93 => (C_dly(6)'last_event, tpd_C_P((2303 - 2)- 48*41), true),
			94 => (C_dly(5)'last_event, tpd_C_P((2303 - 2)- 48*42), true),
			95 => (C_dly(4)'last_event, tpd_C_P((2303 - 2)- 48*43), true),
			96 => (C_dly(3)'last_event, tpd_C_P((2303 - 2)- 48*44), true),
			97 => (C_dly(2)'last_event, tpd_C_P((2303 - 2)- 48*45), true),
			98 => (C_dly(1)'last_event, tpd_C_P((2303 - 2)- 48*46), true),
			99 => (C_dly(0)'last_event, tpd_C_P((2303 - 2)- 48*47), true),
			100 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(45), true),
			101 => (D_dly(17)'last_event, tpd_D_P((863 - 2)- 48*0), true),
			102 => (D_dly(16)'last_event, tpd_D_P((863 - 2)- 48*1), true),
			103 => (D_dly(15)'last_event, tpd_D_P((863 - 2)- 48*2), true),
			104 => (D_dly(14)'last_event, tpd_D_P((863 - 2)- 48*3), true),
			105 => (D_dly(13)'last_event, tpd_D_P((863 - 2)- 48*4), true),
			106 => (D_dly(12)'last_event, tpd_D_P((863 - 2)- 48*5), true),
			107 => (D_dly(11)'last_event, tpd_D_P((863 - 2)- 48*6), true),
			108 => (D_dly(10)'last_event, tpd_D_P((863 - 2)- 48*7), true),
			109 => (D_dly(9)'last_event, tpd_D_P((863 - 2)- 48*8), true),
			110 => (D_dly(8)'last_event, tpd_D_P((863 - 2)- 48*9), true),
			111 => (D_dly(7)'last_event, tpd_D_P((863 - 2)- 48*10), true),
			112 => (D_dly(6)'last_event, tpd_D_P((863 - 2)- 48*11), true),
			113 => (D_dly(5)'last_event, tpd_D_P((863 - 2)- 48*12), true),
			114 => (D_dly(4)'last_event, tpd_D_P((863 - 2)- 48*13), true),
			115 => (D_dly(3)'last_event, tpd_D_P((863 - 2)- 48*14), true),
			116 => (D_dly(2)'last_event, tpd_D_P((863 - 2)- 48*15), true),
			117 => (D_dly(1)'last_event, tpd_D_P((863 - 2)- 48*16), true),
			118 => (D_dly(0)'last_event, tpd_D_P((863 - 2)- 48*17), true),
			119 => (OPMODE_dly(7)'last_event, tpd_OPMODE_P((383 - 2)- 48*0), true),
			120 => (OPMODE_dly(6)'last_event, tpd_OPMODE_P((383 - 2)- 48*1), true),
			121 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 2)- 48*2), true),
			122 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 2)- 48*3), true),
			123 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 2)- 48*4), true),
			124 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 2)- 48*5), true),
			125 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 2)- 48*6), true),
			126 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 2)- 48*7), true),
			127 => (PCIN_dly(45)'last_event, tpd_PCIN_P((2303 - 2)- 48*2), true),
			128 => (PCIN_dly(44)'last_event, tpd_PCIN_P((2303 - 2)- 48*3), true),
			129 => (PCIN_dly(43)'last_event, tpd_PCIN_P((2303 - 2)- 48*4), true),
			130 => (PCIN_dly(42)'last_event, tpd_PCIN_P((2303 - 2)- 48*5), true),
			131 => (PCIN_dly(41)'last_event, tpd_PCIN_P((2303 - 2)- 48*6), true),
			132 => (PCIN_dly(40)'last_event, tpd_PCIN_P((2303 - 2)- 48*7), true),
			133 => (PCIN_dly(39)'last_event, tpd_PCIN_P((2303 - 2)- 48*8), true),
			134 => (PCIN_dly(38)'last_event, tpd_PCIN_P((2303 - 2)- 48*9), true),
			135 => (PCIN_dly(37)'last_event, tpd_PCIN_P((2303 - 2)- 48*10), true),
			136 => (PCIN_dly(36)'last_event, tpd_PCIN_P((2303 - 2)- 48*11), true),
			137 => (PCIN_dly(35)'last_event, tpd_PCIN_P((2303 - 2)- 48*12), true),
			138 => (PCIN_dly(34)'last_event, tpd_PCIN_P((2303 - 2)- 48*13), true),
			139 => (PCIN_dly(33)'last_event, tpd_PCIN_P((2303 - 2)- 48*14), true),
			140 => (PCIN_dly(32)'last_event, tpd_PCIN_P((2303 - 2)- 48*15), true),
			141 => (PCIN_dly(31)'last_event, tpd_PCIN_P((2303 - 2)- 48*16), true),
			142 => (PCIN_dly(30)'last_event, tpd_PCIN_P((2303 - 2)- 48*17), true),
			143 => (PCIN_dly(29)'last_event, tpd_PCIN_P((2303 - 2)- 48*18), true),
			144 => (PCIN_dly(28)'last_event, tpd_PCIN_P((2303 - 2)- 48*19), true),
			145 => (PCIN_dly(27)'last_event, tpd_PCIN_P((2303 - 2)- 48*20), true),
			146 => (PCIN_dly(26)'last_event, tpd_PCIN_P((2303 - 2)- 48*21), true),
			147 => (PCIN_dly(25)'last_event, tpd_PCIN_P((2303 - 2)- 48*22), true),
			148 => (PCIN_dly(24)'last_event, tpd_PCIN_P((2303 - 2)- 48*23), true),
			149 => (PCIN_dly(23)'last_event, tpd_PCIN_P((2303 - 2)- 48*24), true),
			150 => (PCIN_dly(22)'last_event, tpd_PCIN_P((2303 - 2)- 48*25), true),
			151 => (PCIN_dly(21)'last_event, tpd_PCIN_P((2303 - 2)- 48*26), true),
			152 => (PCIN_dly(20)'last_event, tpd_PCIN_P((2303 - 2)- 48*27), true),
			153 => (PCIN_dly(19)'last_event, tpd_PCIN_P((2303 - 2)- 48*28), true),
			154 => (PCIN_dly(18)'last_event, tpd_PCIN_P((2303 - 2)- 48*29), true),
			155 => (PCIN_dly(17)'last_event, tpd_PCIN_P((2303 - 2)- 48*30), true),
			156 => (PCIN_dly(16)'last_event, tpd_PCIN_P((2303 - 2)- 48*31), true),
			157 => (PCIN_dly(15)'last_event, tpd_PCIN_P((2303 - 2)- 48*32), true),
			158 => (PCIN_dly(14)'last_event, tpd_PCIN_P((2303 - 2)- 48*33), true),
			159 => (PCIN_dly(13)'last_event, tpd_PCIN_P((2303 - 2)- 48*34), true),
			160 => (PCIN_dly(12)'last_event, tpd_PCIN_P((2303 - 2)- 48*35), true),
			161 => (PCIN_dly(11)'last_event, tpd_PCIN_P((2303 - 2)- 48*36), true),
			162 => (PCIN_dly(10)'last_event, tpd_PCIN_P((2303 - 2)- 48*37), true),
			163 => (PCIN_dly(9)'last_event, tpd_PCIN_P((2303 - 2)- 48*38), true),
			164 => (PCIN_dly(8)'last_event, tpd_PCIN_P((2303 - 2)- 48*39), true),
			165 => (PCIN_dly(7)'last_event, tpd_PCIN_P((2303 - 2)- 48*40), true),
			166 => (PCIN_dly(6)'last_event, tpd_PCIN_P((2303 - 2)- 48*41), true),
			167 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 2)- 48*42), true),
			168 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 2)- 48*43), true),
			169 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 2)- 48*44), true),
			170 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 2)- 48*45), true),
			171 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 2)- 48*46), true),
			172 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 2)- 48*47), true),
			173 => (RSTA_dly'last_event, tpd_RSTA_P(45), true),
			174 => (RSTB_dly'last_event, tpd_RSTB_P(45), true),
			175 => (RSTC_dly'last_event, tpd_RSTC_P(45), true),
			176 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(45), true),
			177 => (RSTD_dly'last_event, tpd_RSTD_P(45), true),
			178 => (RSTM_dly'last_event, tpd_RSTM_P(45), true),
			179 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(45), true),
			180 => (RSTP_dly'last_event, tpd_RSTP_P(45), true),
			181 => (CLK_dly'last_event, tpd_CLK_P(45), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(44),
         GlitchData	=> P_GlitchData(44),
         OutSignalName	=> "P(44)",
         OutTemp	=> P_zd(44),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_P((863 - 3)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_P((863 - 3)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_P((863 - 3)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_P((863 - 3)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_P((863 - 3)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_P((863 - 3)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_P((863 - 3)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_P((863 - 3)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_P((863 - 3)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_P((863 - 3)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_P((863 - 3)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_P((863 - 3)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_P((863 - 3)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_P((863 - 3)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_P((863 - 3)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_P((863 - 3)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_P((863 - 3)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_P((863 - 3)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_P((863 - 3)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_P((863 - 3)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_P((863 - 3)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_P((863 - 3)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_P((863 - 3)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_P((863 - 3)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_P((863 - 3)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_P((863 - 3)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_P((863 - 3)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_P((863 - 3)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_P((863 - 3)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_P((863 - 3)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_P((863 - 3)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_P((863 - 3)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_P((863 - 3)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_P((863 - 3)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_P((863 - 3)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_P((863 - 3)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_P((863 - 3)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_P((863 - 3)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_P((863 - 3)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_P((863 - 3)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_P((863 - 3)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_P((863 - 3)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_P((863 - 3)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_P((863 - 3)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_P((863 - 3)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_P((863 - 3)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_P((863 - 3)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_P((863 - 3)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 3)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 3)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 3)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 3)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 3)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 3)- 48*17), true),
			54 => (C_dly(44)'last_event, tpd_C_P((2303 - 3)- 48*3), true),
			55 => (C_dly(43)'last_event, tpd_C_P((2303 - 3)- 48*4), true),
			56 => (C_dly(42)'last_event, tpd_C_P((2303 - 3)- 48*5), true),
			57 => (C_dly(41)'last_event, tpd_C_P((2303 - 3)- 48*6), true),
			58 => (C_dly(40)'last_event, tpd_C_P((2303 - 3)- 48*7), true),
			59 => (C_dly(39)'last_event, tpd_C_P((2303 - 3)- 48*8), true),
			60 => (C_dly(38)'last_event, tpd_C_P((2303 - 3)- 48*9), true),
			61 => (C_dly(37)'last_event, tpd_C_P((2303 - 3)- 48*10), true),
			62 => (C_dly(36)'last_event, tpd_C_P((2303 - 3)- 48*11), true),
			63 => (C_dly(35)'last_event, tpd_C_P((2303 - 3)- 48*12), true),
			64 => (C_dly(34)'last_event, tpd_C_P((2303 - 3)- 48*13), true),
			65 => (C_dly(33)'last_event, tpd_C_P((2303 - 3)- 48*14), true),
			66 => (C_dly(32)'last_event, tpd_C_P((2303 - 3)- 48*15), true),
			67 => (C_dly(31)'last_event, tpd_C_P((2303 - 3)- 48*16), true),
			68 => (C_dly(30)'last_event, tpd_C_P((2303 - 3)- 48*17), true),
			69 => (C_dly(29)'last_event, tpd_C_P((2303 - 3)- 48*18), true),
			70 => (C_dly(28)'last_event, tpd_C_P((2303 - 3)- 48*19), true),
			71 => (C_dly(27)'last_event, tpd_C_P((2303 - 3)- 48*20), true),
			72 => (C_dly(26)'last_event, tpd_C_P((2303 - 3)- 48*21), true),
			73 => (C_dly(25)'last_event, tpd_C_P((2303 - 3)- 48*22), true),
			74 => (C_dly(24)'last_event, tpd_C_P((2303 - 3)- 48*23), true),
			75 => (C_dly(23)'last_event, tpd_C_P((2303 - 3)- 48*24), true),
			76 => (C_dly(22)'last_event, tpd_C_P((2303 - 3)- 48*25), true),
			77 => (C_dly(21)'last_event, tpd_C_P((2303 - 3)- 48*26), true),
			78 => (C_dly(20)'last_event, tpd_C_P((2303 - 3)- 48*27), true),
			79 => (C_dly(19)'last_event, tpd_C_P((2303 - 3)- 48*28), true),
			80 => (C_dly(18)'last_event, tpd_C_P((2303 - 3)- 48*29), true),
			81 => (C_dly(17)'last_event, tpd_C_P((2303 - 3)- 48*30), true),
			82 => (C_dly(16)'last_event, tpd_C_P((2303 - 3)- 48*31), true),
			83 => (C_dly(15)'last_event, tpd_C_P((2303 - 3)- 48*32), true),
			84 => (C_dly(14)'last_event, tpd_C_P((2303 - 3)- 48*33), true),
			85 => (C_dly(13)'last_event, tpd_C_P((2303 - 3)- 48*34), true),
			86 => (C_dly(12)'last_event, tpd_C_P((2303 - 3)- 48*35), true),
			87 => (C_dly(11)'last_event, tpd_C_P((2303 - 3)- 48*36), true),
			88 => (C_dly(10)'last_event, tpd_C_P((2303 - 3)- 48*37), true),
			89 => (C_dly(9)'last_event, tpd_C_P((2303 - 3)- 48*38), true),
			90 => (C_dly(8)'last_event, tpd_C_P((2303 - 3)- 48*39), true),
			91 => (C_dly(7)'last_event, tpd_C_P((2303 - 3)- 48*40), true),
			92 => (C_dly(6)'last_event, tpd_C_P((2303 - 3)- 48*41), true),
			93 => (C_dly(5)'last_event, tpd_C_P((2303 - 3)- 48*42), true),
			94 => (C_dly(4)'last_event, tpd_C_P((2303 - 3)- 48*43), true),
			95 => (C_dly(3)'last_event, tpd_C_P((2303 - 3)- 48*44), true),
			96 => (C_dly(2)'last_event, tpd_C_P((2303 - 3)- 48*45), true),
			97 => (C_dly(1)'last_event, tpd_C_P((2303 - 3)- 48*46), true),
			98 => (C_dly(0)'last_event, tpd_C_P((2303 - 3)- 48*47), true),
			99 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(44), true),
			100 => (D_dly(17)'last_event, tpd_D_P((863 - 3)- 48*0), true),
			101 => (D_dly(16)'last_event, tpd_D_P((863 - 3)- 48*1), true),
			102 => (D_dly(15)'last_event, tpd_D_P((863 - 3)- 48*2), true),
			103 => (D_dly(14)'last_event, tpd_D_P((863 - 3)- 48*3), true),
			104 => (D_dly(13)'last_event, tpd_D_P((863 - 3)- 48*4), true),
			105 => (D_dly(12)'last_event, tpd_D_P((863 - 3)- 48*5), true),
			106 => (D_dly(11)'last_event, tpd_D_P((863 - 3)- 48*6), true),
			107 => (D_dly(10)'last_event, tpd_D_P((863 - 3)- 48*7), true),
			108 => (D_dly(9)'last_event, tpd_D_P((863 - 3)- 48*8), true),
			109 => (D_dly(8)'last_event, tpd_D_P((863 - 3)- 48*9), true),
			110 => (D_dly(7)'last_event, tpd_D_P((863 - 3)- 48*10), true),
			111 => (D_dly(6)'last_event, tpd_D_P((863 - 3)- 48*11), true),
			112 => (D_dly(5)'last_event, tpd_D_P((863 - 3)- 48*12), true),
			113 => (D_dly(4)'last_event, tpd_D_P((863 - 3)- 48*13), true),
			114 => (D_dly(3)'last_event, tpd_D_P((863 - 3)- 48*14), true),
			115 => (D_dly(2)'last_event, tpd_D_P((863 - 3)- 48*15), true),
			116 => (D_dly(1)'last_event, tpd_D_P((863 - 3)- 48*16), true),
			117 => (D_dly(0)'last_event, tpd_D_P((863 - 3)- 48*17), true),
			118 => (OPMODE_dly(7)'last_event, tpd_OPMODE_P((383 - 3)- 48*0), true),
			119 => (OPMODE_dly(6)'last_event, tpd_OPMODE_P((383 - 3)- 48*1), true),
			120 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 3)- 48*2), true),
			121 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 3)- 48*3), true),
			122 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 3)- 48*4), true),
			123 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 3)- 48*5), true),
			124 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 3)- 48*6), true),
			125 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 3)- 48*7), true),
			126 => (PCIN_dly(44)'last_event, tpd_PCIN_P((2303 - 3)- 48*3), true),
			127 => (PCIN_dly(43)'last_event, tpd_PCIN_P((2303 - 3)- 48*4), true),
			128 => (PCIN_dly(42)'last_event, tpd_PCIN_P((2303 - 3)- 48*5), true),
			129 => (PCIN_dly(41)'last_event, tpd_PCIN_P((2303 - 3)- 48*6), true),
			130 => (PCIN_dly(40)'last_event, tpd_PCIN_P((2303 - 3)- 48*7), true),
			131 => (PCIN_dly(39)'last_event, tpd_PCIN_P((2303 - 3)- 48*8), true),
			132 => (PCIN_dly(38)'last_event, tpd_PCIN_P((2303 - 3)- 48*9), true),
			133 => (PCIN_dly(37)'last_event, tpd_PCIN_P((2303 - 3)- 48*10), true),
			134 => (PCIN_dly(36)'last_event, tpd_PCIN_P((2303 - 3)- 48*11), true),
			135 => (PCIN_dly(35)'last_event, tpd_PCIN_P((2303 - 3)- 48*12), true),
			136 => (PCIN_dly(34)'last_event, tpd_PCIN_P((2303 - 3)- 48*13), true),
			137 => (PCIN_dly(33)'last_event, tpd_PCIN_P((2303 - 3)- 48*14), true),
			138 => (PCIN_dly(32)'last_event, tpd_PCIN_P((2303 - 3)- 48*15), true),
			139 => (PCIN_dly(31)'last_event, tpd_PCIN_P((2303 - 3)- 48*16), true),
			140 => (PCIN_dly(30)'last_event, tpd_PCIN_P((2303 - 3)- 48*17), true),
			141 => (PCIN_dly(29)'last_event, tpd_PCIN_P((2303 - 3)- 48*18), true),
			142 => (PCIN_dly(28)'last_event, tpd_PCIN_P((2303 - 3)- 48*19), true),
			143 => (PCIN_dly(27)'last_event, tpd_PCIN_P((2303 - 3)- 48*20), true),
			144 => (PCIN_dly(26)'last_event, tpd_PCIN_P((2303 - 3)- 48*21), true),
			145 => (PCIN_dly(25)'last_event, tpd_PCIN_P((2303 - 3)- 48*22), true),
			146 => (PCIN_dly(24)'last_event, tpd_PCIN_P((2303 - 3)- 48*23), true),
			147 => (PCIN_dly(23)'last_event, tpd_PCIN_P((2303 - 3)- 48*24), true),
			148 => (PCIN_dly(22)'last_event, tpd_PCIN_P((2303 - 3)- 48*25), true),
			149 => (PCIN_dly(21)'last_event, tpd_PCIN_P((2303 - 3)- 48*26), true),
			150 => (PCIN_dly(20)'last_event, tpd_PCIN_P((2303 - 3)- 48*27), true),
			151 => (PCIN_dly(19)'last_event, tpd_PCIN_P((2303 - 3)- 48*28), true),
			152 => (PCIN_dly(18)'last_event, tpd_PCIN_P((2303 - 3)- 48*29), true),
			153 => (PCIN_dly(17)'last_event, tpd_PCIN_P((2303 - 3)- 48*30), true),
			154 => (PCIN_dly(16)'last_event, tpd_PCIN_P((2303 - 3)- 48*31), true),
			155 => (PCIN_dly(15)'last_event, tpd_PCIN_P((2303 - 3)- 48*32), true),
			156 => (PCIN_dly(14)'last_event, tpd_PCIN_P((2303 - 3)- 48*33), true),
			157 => (PCIN_dly(13)'last_event, tpd_PCIN_P((2303 - 3)- 48*34), true),
			158 => (PCIN_dly(12)'last_event, tpd_PCIN_P((2303 - 3)- 48*35), true),
			159 => (PCIN_dly(11)'last_event, tpd_PCIN_P((2303 - 3)- 48*36), true),
			160 => (PCIN_dly(10)'last_event, tpd_PCIN_P((2303 - 3)- 48*37), true),
			161 => (PCIN_dly(9)'last_event, tpd_PCIN_P((2303 - 3)- 48*38), true),
			162 => (PCIN_dly(8)'last_event, tpd_PCIN_P((2303 - 3)- 48*39), true),
			163 => (PCIN_dly(7)'last_event, tpd_PCIN_P((2303 - 3)- 48*40), true),
			164 => (PCIN_dly(6)'last_event, tpd_PCIN_P((2303 - 3)- 48*41), true),
			165 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 3)- 48*42), true),
			166 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 3)- 48*43), true),
			167 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 3)- 48*44), true),
			168 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 3)- 48*45), true),
			169 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 3)- 48*46), true),
			170 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 3)- 48*47), true),
			171 => (RSTA_dly'last_event, tpd_RSTA_P(44), true),
			172 => (RSTB_dly'last_event, tpd_RSTB_P(44), true),
			173 => (RSTC_dly'last_event, tpd_RSTC_P(44), true),
			174 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(44), true),
			175 => (RSTD_dly'last_event, tpd_RSTD_P(44), true),
			176 => (RSTM_dly'last_event, tpd_RSTM_P(44), true),
			177 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(44), true),
			178 => (RSTP_dly'last_event, tpd_RSTP_P(44), true),
			179 => (CLK_dly'last_event, tpd_CLK_P(44), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(43),
         GlitchData	=> P_GlitchData(43),
         OutSignalName	=> "P(43)",
         OutTemp	=> P_zd(43),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_P((863 - 4)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_P((863 - 4)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_P((863 - 4)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_P((863 - 4)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_P((863 - 4)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_P((863 - 4)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_P((863 - 4)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_P((863 - 4)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_P((863 - 4)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_P((863 - 4)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_P((863 - 4)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_P((863 - 4)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_P((863 - 4)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_P((863 - 4)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_P((863 - 4)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_P((863 - 4)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_P((863 - 4)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_P((863 - 4)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_P((863 - 4)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_P((863 - 4)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_P((863 - 4)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_P((863 - 4)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_P((863 - 4)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_P((863 - 4)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_P((863 - 4)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_P((863 - 4)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_P((863 - 4)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_P((863 - 4)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_P((863 - 4)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_P((863 - 4)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_P((863 - 4)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_P((863 - 4)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_P((863 - 4)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_P((863 - 4)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_P((863 - 4)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_P((863 - 4)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_P((863 - 4)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_P((863 - 4)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_P((863 - 4)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_P((863 - 4)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_P((863 - 4)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_P((863 - 4)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_P((863 - 4)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_P((863 - 4)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_P((863 - 4)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_P((863 - 4)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_P((863 - 4)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_P((863 - 4)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 4)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 4)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 4)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 4)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 4)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 4)- 48*17), true),
			54 => (C_dly(43)'last_event, tpd_C_P((2303 - 4)- 48*4), true),
			55 => (C_dly(42)'last_event, tpd_C_P((2303 - 4)- 48*5), true),
			56 => (C_dly(41)'last_event, tpd_C_P((2303 - 4)- 48*6), true),
			57 => (C_dly(40)'last_event, tpd_C_P((2303 - 4)- 48*7), true),
			58 => (C_dly(39)'last_event, tpd_C_P((2303 - 4)- 48*8), true),
			59 => (C_dly(38)'last_event, tpd_C_P((2303 - 4)- 48*9), true),
			60 => (C_dly(37)'last_event, tpd_C_P((2303 - 4)- 48*10), true),
			61 => (C_dly(36)'last_event, tpd_C_P((2303 - 4)- 48*11), true),
			62 => (C_dly(35)'last_event, tpd_C_P((2303 - 4)- 48*12), true),
			63 => (C_dly(34)'last_event, tpd_C_P((2303 - 4)- 48*13), true),
			64 => (C_dly(33)'last_event, tpd_C_P((2303 - 4)- 48*14), true),
			65 => (C_dly(32)'last_event, tpd_C_P((2303 - 4)- 48*15), true),
			66 => (C_dly(31)'last_event, tpd_C_P((2303 - 4)- 48*16), true),
			67 => (C_dly(30)'last_event, tpd_C_P((2303 - 4)- 48*17), true),
			68 => (C_dly(29)'last_event, tpd_C_P((2303 - 4)- 48*18), true),
			69 => (C_dly(28)'last_event, tpd_C_P((2303 - 4)- 48*19), true),
			70 => (C_dly(27)'last_event, tpd_C_P((2303 - 4)- 48*20), true),
			71 => (C_dly(26)'last_event, tpd_C_P((2303 - 4)- 48*21), true),
			72 => (C_dly(25)'last_event, tpd_C_P((2303 - 4)- 48*22), true),
			73 => (C_dly(24)'last_event, tpd_C_P((2303 - 4)- 48*23), true),
			74 => (C_dly(23)'last_event, tpd_C_P((2303 - 4)- 48*24), true),
			75 => (C_dly(22)'last_event, tpd_C_P((2303 - 4)- 48*25), true),
			76 => (C_dly(21)'last_event, tpd_C_P((2303 - 4)- 48*26), true),
			77 => (C_dly(20)'last_event, tpd_C_P((2303 - 4)- 48*27), true),
			78 => (C_dly(19)'last_event, tpd_C_P((2303 - 4)- 48*28), true),
			79 => (C_dly(18)'last_event, tpd_C_P((2303 - 4)- 48*29), true),
			80 => (C_dly(17)'last_event, tpd_C_P((2303 - 4)- 48*30), true),
			81 => (C_dly(16)'last_event, tpd_C_P((2303 - 4)- 48*31), true),
			82 => (C_dly(15)'last_event, tpd_C_P((2303 - 4)- 48*32), true),
			83 => (C_dly(14)'last_event, tpd_C_P((2303 - 4)- 48*33), true),
			84 => (C_dly(13)'last_event, tpd_C_P((2303 - 4)- 48*34), true),
			85 => (C_dly(12)'last_event, tpd_C_P((2303 - 4)- 48*35), true),
			86 => (C_dly(11)'last_event, tpd_C_P((2303 - 4)- 48*36), true),
			87 => (C_dly(10)'last_event, tpd_C_P((2303 - 4)- 48*37), true),
			88 => (C_dly(9)'last_event, tpd_C_P((2303 - 4)- 48*38), true),
			89 => (C_dly(8)'last_event, tpd_C_P((2303 - 4)- 48*39), true),
			90 => (C_dly(7)'last_event, tpd_C_P((2303 - 4)- 48*40), true),
			91 => (C_dly(6)'last_event, tpd_C_P((2303 - 4)- 48*41), true),
			92 => (C_dly(5)'last_event, tpd_C_P((2303 - 4)- 48*42), true),
			93 => (C_dly(4)'last_event, tpd_C_P((2303 - 4)- 48*43), true),
			94 => (C_dly(3)'last_event, tpd_C_P((2303 - 4)- 48*44), true),
			95 => (C_dly(2)'last_event, tpd_C_P((2303 - 4)- 48*45), true),
			96 => (C_dly(1)'last_event, tpd_C_P((2303 - 4)- 48*46), true),
			97 => (C_dly(0)'last_event, tpd_C_P((2303 - 4)- 48*47), true),
			98 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(43), true),
			99 => (D_dly(17)'last_event, tpd_D_P((863 - 4)- 48*0), true),
			100 => (D_dly(16)'last_event, tpd_D_P((863 - 4)- 48*1), true),
			101 => (D_dly(15)'last_event, tpd_D_P((863 - 4)- 48*2), true),
			102 => (D_dly(14)'last_event, tpd_D_P((863 - 4)- 48*3), true),
			103 => (D_dly(13)'last_event, tpd_D_P((863 - 4)- 48*4), true),
			104 => (D_dly(12)'last_event, tpd_D_P((863 - 4)- 48*5), true),
			105 => (D_dly(11)'last_event, tpd_D_P((863 - 4)- 48*6), true),
			106 => (D_dly(10)'last_event, tpd_D_P((863 - 4)- 48*7), true),
			107 => (D_dly(9)'last_event, tpd_D_P((863 - 4)- 48*8), true),
			108 => (D_dly(8)'last_event, tpd_D_P((863 - 4)- 48*9), true),
			109 => (D_dly(7)'last_event, tpd_D_P((863 - 4)- 48*10), true),
			110 => (D_dly(6)'last_event, tpd_D_P((863 - 4)- 48*11), true),
			111 => (D_dly(5)'last_event, tpd_D_P((863 - 4)- 48*12), true),
			112 => (D_dly(4)'last_event, tpd_D_P((863 - 4)- 48*13), true),
			113 => (D_dly(3)'last_event, tpd_D_P((863 - 4)- 48*14), true),
			114 => (D_dly(2)'last_event, tpd_D_P((863 - 4)- 48*15), true),
			115 => (D_dly(1)'last_event, tpd_D_P((863 - 4)- 48*16), true),
			116 => (D_dly(0)'last_event, tpd_D_P((863 - 4)- 48*17), true),
			117 => (OPMODE_dly(7)'last_event, tpd_OPMODE_P((383 - 4)- 48*0), true),
			118 => (OPMODE_dly(6)'last_event, tpd_OPMODE_P((383 - 4)- 48*1), true),
			119 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 4)- 48*2), true),
			120 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 4)- 48*3), true),
			121 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 4)- 48*4), true),
			122 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 4)- 48*5), true),
			123 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 4)- 48*6), true),
			124 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 4)- 48*7), true),
			125 => (PCIN_dly(43)'last_event, tpd_PCIN_P((2303 - 4)- 48*4), true),
			126 => (PCIN_dly(42)'last_event, tpd_PCIN_P((2303 - 4)- 48*5), true),
			127 => (PCIN_dly(41)'last_event, tpd_PCIN_P((2303 - 4)- 48*6), true),
			128 => (PCIN_dly(40)'last_event, tpd_PCIN_P((2303 - 4)- 48*7), true),
			129 => (PCIN_dly(39)'last_event, tpd_PCIN_P((2303 - 4)- 48*8), true),
			130 => (PCIN_dly(38)'last_event, tpd_PCIN_P((2303 - 4)- 48*9), true),
			131 => (PCIN_dly(37)'last_event, tpd_PCIN_P((2303 - 4)- 48*10), true),
			132 => (PCIN_dly(36)'last_event, tpd_PCIN_P((2303 - 4)- 48*11), true),
			133 => (PCIN_dly(35)'last_event, tpd_PCIN_P((2303 - 4)- 48*12), true),
			134 => (PCIN_dly(34)'last_event, tpd_PCIN_P((2303 - 4)- 48*13), true),
			135 => (PCIN_dly(33)'last_event, tpd_PCIN_P((2303 - 4)- 48*14), true),
			136 => (PCIN_dly(32)'last_event, tpd_PCIN_P((2303 - 4)- 48*15), true),
			137 => (PCIN_dly(31)'last_event, tpd_PCIN_P((2303 - 4)- 48*16), true),
			138 => (PCIN_dly(30)'last_event, tpd_PCIN_P((2303 - 4)- 48*17), true),
			139 => (PCIN_dly(29)'last_event, tpd_PCIN_P((2303 - 4)- 48*18), true),
			140 => (PCIN_dly(28)'last_event, tpd_PCIN_P((2303 - 4)- 48*19), true),
			141 => (PCIN_dly(27)'last_event, tpd_PCIN_P((2303 - 4)- 48*20), true),
			142 => (PCIN_dly(26)'last_event, tpd_PCIN_P((2303 - 4)- 48*21), true),
			143 => (PCIN_dly(25)'last_event, tpd_PCIN_P((2303 - 4)- 48*22), true),
			144 => (PCIN_dly(24)'last_event, tpd_PCIN_P((2303 - 4)- 48*23), true),
			145 => (PCIN_dly(23)'last_event, tpd_PCIN_P((2303 - 4)- 48*24), true),
			146 => (PCIN_dly(22)'last_event, tpd_PCIN_P((2303 - 4)- 48*25), true),
			147 => (PCIN_dly(21)'last_event, tpd_PCIN_P((2303 - 4)- 48*26), true),
			148 => (PCIN_dly(20)'last_event, tpd_PCIN_P((2303 - 4)- 48*27), true),
			149 => (PCIN_dly(19)'last_event, tpd_PCIN_P((2303 - 4)- 48*28), true),
			150 => (PCIN_dly(18)'last_event, tpd_PCIN_P((2303 - 4)- 48*29), true),
			151 => (PCIN_dly(17)'last_event, tpd_PCIN_P((2303 - 4)- 48*30), true),
			152 => (PCIN_dly(16)'last_event, tpd_PCIN_P((2303 - 4)- 48*31), true),
			153 => (PCIN_dly(15)'last_event, tpd_PCIN_P((2303 - 4)- 48*32), true),
			154 => (PCIN_dly(14)'last_event, tpd_PCIN_P((2303 - 4)- 48*33), true),
			155 => (PCIN_dly(13)'last_event, tpd_PCIN_P((2303 - 4)- 48*34), true),
			156 => (PCIN_dly(12)'last_event, tpd_PCIN_P((2303 - 4)- 48*35), true),
			157 => (PCIN_dly(11)'last_event, tpd_PCIN_P((2303 - 4)- 48*36), true),
			158 => (PCIN_dly(10)'last_event, tpd_PCIN_P((2303 - 4)- 48*37), true),
			159 => (PCIN_dly(9)'last_event, tpd_PCIN_P((2303 - 4)- 48*38), true),
			160 => (PCIN_dly(8)'last_event, tpd_PCIN_P((2303 - 4)- 48*39), true),
			161 => (PCIN_dly(7)'last_event, tpd_PCIN_P((2303 - 4)- 48*40), true),
			162 => (PCIN_dly(6)'last_event, tpd_PCIN_P((2303 - 4)- 48*41), true),
			163 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 4)- 48*42), true),
			164 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 4)- 48*43), true),
			165 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 4)- 48*44), true),
			166 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 4)- 48*45), true),
			167 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 4)- 48*46), true),
			168 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 4)- 48*47), true),
			169 => (RSTA_dly'last_event, tpd_RSTA_P(43), true),
			170 => (RSTB_dly'last_event, tpd_RSTB_P(43), true),
			171 => (RSTC_dly'last_event, tpd_RSTC_P(43), true),
			172 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(43), true),
			173 => (RSTD_dly'last_event, tpd_RSTD_P(43), true),
			174 => (RSTM_dly'last_event, tpd_RSTM_P(43), true),
			175 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(43), true),
			176 => (RSTP_dly'last_event, tpd_RSTP_P(43), true),
			177 => (CLK_dly'last_event, tpd_CLK_P(43), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(42),
         GlitchData	=> P_GlitchData(42),
         OutSignalName	=> "P(42)",
         OutTemp	=> P_zd(42),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_P((863 - 5)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_P((863 - 5)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_P((863 - 5)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_P((863 - 5)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_P((863 - 5)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_P((863 - 5)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_P((863 - 5)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_P((863 - 5)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_P((863 - 5)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_P((863 - 5)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_P((863 - 5)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_P((863 - 5)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_P((863 - 5)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_P((863 - 5)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_P((863 - 5)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_P((863 - 5)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_P((863 - 5)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_P((863 - 5)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_P((863 - 5)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_P((863 - 5)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_P((863 - 5)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_P((863 - 5)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_P((863 - 5)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_P((863 - 5)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_P((863 - 5)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_P((863 - 5)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_P((863 - 5)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_P((863 - 5)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_P((863 - 5)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_P((863 - 5)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_P((863 - 5)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_P((863 - 5)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_P((863 - 5)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_P((863 - 5)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_P((863 - 5)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_P((863 - 5)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_P((863 - 5)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_P((863 - 5)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_P((863 - 5)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_P((863 - 5)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_P((863 - 5)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_P((863 - 5)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_P((863 - 5)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_P((863 - 5)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_P((863 - 5)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_P((863 - 5)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_P((863 - 5)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_P((863 - 5)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 5)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 5)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 5)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 5)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 5)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 5)- 48*17), true),
			54 => (C_dly(42)'last_event, tpd_C_P((2303 - 5)- 48*5), true),
			55 => (C_dly(41)'last_event, tpd_C_P((2303 - 5)- 48*6), true),
			56 => (C_dly(40)'last_event, tpd_C_P((2303 - 5)- 48*7), true),
			57 => (C_dly(39)'last_event, tpd_C_P((2303 - 5)- 48*8), true),
			58 => (C_dly(38)'last_event, tpd_C_P((2303 - 5)- 48*9), true),
			59 => (C_dly(37)'last_event, tpd_C_P((2303 - 5)- 48*10), true),
			60 => (C_dly(36)'last_event, tpd_C_P((2303 - 5)- 48*11), true),
			61 => (C_dly(35)'last_event, tpd_C_P((2303 - 5)- 48*12), true),
			62 => (C_dly(34)'last_event, tpd_C_P((2303 - 5)- 48*13), true),
			63 => (C_dly(33)'last_event, tpd_C_P((2303 - 5)- 48*14), true),
			64 => (C_dly(32)'last_event, tpd_C_P((2303 - 5)- 48*15), true),
			65 => (C_dly(31)'last_event, tpd_C_P((2303 - 5)- 48*16), true),
			66 => (C_dly(30)'last_event, tpd_C_P((2303 - 5)- 48*17), true),
			67 => (C_dly(29)'last_event, tpd_C_P((2303 - 5)- 48*18), true),
			68 => (C_dly(28)'last_event, tpd_C_P((2303 - 5)- 48*19), true),
			69 => (C_dly(27)'last_event, tpd_C_P((2303 - 5)- 48*20), true),
			70 => (C_dly(26)'last_event, tpd_C_P((2303 - 5)- 48*21), true),
			71 => (C_dly(25)'last_event, tpd_C_P((2303 - 5)- 48*22), true),
			72 => (C_dly(24)'last_event, tpd_C_P((2303 - 5)- 48*23), true),
			73 => (C_dly(23)'last_event, tpd_C_P((2303 - 5)- 48*24), true),
			74 => (C_dly(22)'last_event, tpd_C_P((2303 - 5)- 48*25), true),
			75 => (C_dly(21)'last_event, tpd_C_P((2303 - 5)- 48*26), true),
			76 => (C_dly(20)'last_event, tpd_C_P((2303 - 5)- 48*27), true),
			77 => (C_dly(19)'last_event, tpd_C_P((2303 - 5)- 48*28), true),
			78 => (C_dly(18)'last_event, tpd_C_P((2303 - 5)- 48*29), true),
			79 => (C_dly(17)'last_event, tpd_C_P((2303 - 5)- 48*30), true),
			80 => (C_dly(16)'last_event, tpd_C_P((2303 - 5)- 48*31), true),
			81 => (C_dly(15)'last_event, tpd_C_P((2303 - 5)- 48*32), true),
			82 => (C_dly(14)'last_event, tpd_C_P((2303 - 5)- 48*33), true),
			83 => (C_dly(13)'last_event, tpd_C_P((2303 - 5)- 48*34), true),
			84 => (C_dly(12)'last_event, tpd_C_P((2303 - 5)- 48*35), true),
			85 => (C_dly(11)'last_event, tpd_C_P((2303 - 5)- 48*36), true),
			86 => (C_dly(10)'last_event, tpd_C_P((2303 - 5)- 48*37), true),
			87 => (C_dly(9)'last_event, tpd_C_P((2303 - 5)- 48*38), true),
			88 => (C_dly(8)'last_event, tpd_C_P((2303 - 5)- 48*39), true),
			89 => (C_dly(7)'last_event, tpd_C_P((2303 - 5)- 48*40), true),
			90 => (C_dly(6)'last_event, tpd_C_P((2303 - 5)- 48*41), true),
			91 => (C_dly(5)'last_event, tpd_C_P((2303 - 5)- 48*42), true),
			92 => (C_dly(4)'last_event, tpd_C_P((2303 - 5)- 48*43), true),
			93 => (C_dly(3)'last_event, tpd_C_P((2303 - 5)- 48*44), true),
			94 => (C_dly(2)'last_event, tpd_C_P((2303 - 5)- 48*45), true),
			95 => (C_dly(1)'last_event, tpd_C_P((2303 - 5)- 48*46), true),
			96 => (C_dly(0)'last_event, tpd_C_P((2303 - 5)- 48*47), true),
			97 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(42), true),
			98 => (D_dly(17)'last_event, tpd_D_P((863 - 5)- 48*0), true),
			99 => (D_dly(16)'last_event, tpd_D_P((863 - 5)- 48*1), true),
			100 => (D_dly(15)'last_event, tpd_D_P((863 - 5)- 48*2), true),
			101 => (D_dly(14)'last_event, tpd_D_P((863 - 5)- 48*3), true),
			102 => (D_dly(13)'last_event, tpd_D_P((863 - 5)- 48*4), true),
			103 => (D_dly(12)'last_event, tpd_D_P((863 - 5)- 48*5), true),
			104 => (D_dly(11)'last_event, tpd_D_P((863 - 5)- 48*6), true),
			105 => (D_dly(10)'last_event, tpd_D_P((863 - 5)- 48*7), true),
			106 => (D_dly(9)'last_event, tpd_D_P((863 - 5)- 48*8), true),
			107 => (D_dly(8)'last_event, tpd_D_P((863 - 5)- 48*9), true),
			108 => (D_dly(7)'last_event, tpd_D_P((863 - 5)- 48*10), true),
			109 => (D_dly(6)'last_event, tpd_D_P((863 - 5)- 48*11), true),
			110 => (D_dly(5)'last_event, tpd_D_P((863 - 5)- 48*12), true),
			111 => (D_dly(4)'last_event, tpd_D_P((863 - 5)- 48*13), true),
			112 => (D_dly(3)'last_event, tpd_D_P((863 - 5)- 48*14), true),
			113 => (D_dly(2)'last_event, tpd_D_P((863 - 5)- 48*15), true),
			114 => (D_dly(1)'last_event, tpd_D_P((863 - 5)- 48*16), true),
			115 => (D_dly(0)'last_event, tpd_D_P((863 - 5)- 48*17), true),
			116 => (OPMODE_dly(7)'last_event, tpd_OPMODE_P((383 - 5)- 48*0), true),
			117 => (OPMODE_dly(6)'last_event, tpd_OPMODE_P((383 - 5)- 48*1), true),
			118 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 5)- 48*2), true),
			119 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 5)- 48*3), true),
			120 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 5)- 48*4), true),
			121 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 5)- 48*5), true),
			122 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 5)- 48*6), true),
			123 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 5)- 48*7), true),
			124 => (PCIN_dly(42)'last_event, tpd_PCIN_P((2303 - 5)- 48*5), true),
			125 => (PCIN_dly(41)'last_event, tpd_PCIN_P((2303 - 5)- 48*6), true),
			126 => (PCIN_dly(40)'last_event, tpd_PCIN_P((2303 - 5)- 48*7), true),
			127 => (PCIN_dly(39)'last_event, tpd_PCIN_P((2303 - 5)- 48*8), true),
			128 => (PCIN_dly(38)'last_event, tpd_PCIN_P((2303 - 5)- 48*9), true),
			129 => (PCIN_dly(37)'last_event, tpd_PCIN_P((2303 - 5)- 48*10), true),
			130 => (PCIN_dly(36)'last_event, tpd_PCIN_P((2303 - 5)- 48*11), true),
			131 => (PCIN_dly(35)'last_event, tpd_PCIN_P((2303 - 5)- 48*12), true),
			132 => (PCIN_dly(34)'last_event, tpd_PCIN_P((2303 - 5)- 48*13), true),
			133 => (PCIN_dly(33)'last_event, tpd_PCIN_P((2303 - 5)- 48*14), true),
			134 => (PCIN_dly(32)'last_event, tpd_PCIN_P((2303 - 5)- 48*15), true),
			135 => (PCIN_dly(31)'last_event, tpd_PCIN_P((2303 - 5)- 48*16), true),
			136 => (PCIN_dly(30)'last_event, tpd_PCIN_P((2303 - 5)- 48*17), true),
			137 => (PCIN_dly(29)'last_event, tpd_PCIN_P((2303 - 5)- 48*18), true),
			138 => (PCIN_dly(28)'last_event, tpd_PCIN_P((2303 - 5)- 48*19), true),
			139 => (PCIN_dly(27)'last_event, tpd_PCIN_P((2303 - 5)- 48*20), true),
			140 => (PCIN_dly(26)'last_event, tpd_PCIN_P((2303 - 5)- 48*21), true),
			141 => (PCIN_dly(25)'last_event, tpd_PCIN_P((2303 - 5)- 48*22), true),
			142 => (PCIN_dly(24)'last_event, tpd_PCIN_P((2303 - 5)- 48*23), true),
			143 => (PCIN_dly(23)'last_event, tpd_PCIN_P((2303 - 5)- 48*24), true),
			144 => (PCIN_dly(22)'last_event, tpd_PCIN_P((2303 - 5)- 48*25), true),
			145 => (PCIN_dly(21)'last_event, tpd_PCIN_P((2303 - 5)- 48*26), true),
			146 => (PCIN_dly(20)'last_event, tpd_PCIN_P((2303 - 5)- 48*27), true),
			147 => (PCIN_dly(19)'last_event, tpd_PCIN_P((2303 - 5)- 48*28), true),
			148 => (PCIN_dly(18)'last_event, tpd_PCIN_P((2303 - 5)- 48*29), true),
			149 => (PCIN_dly(17)'last_event, tpd_PCIN_P((2303 - 5)- 48*30), true),
			150 => (PCIN_dly(16)'last_event, tpd_PCIN_P((2303 - 5)- 48*31), true),
			151 => (PCIN_dly(15)'last_event, tpd_PCIN_P((2303 - 5)- 48*32), true),
			152 => (PCIN_dly(14)'last_event, tpd_PCIN_P((2303 - 5)- 48*33), true),
			153 => (PCIN_dly(13)'last_event, tpd_PCIN_P((2303 - 5)- 48*34), true),
			154 => (PCIN_dly(12)'last_event, tpd_PCIN_P((2303 - 5)- 48*35), true),
			155 => (PCIN_dly(11)'last_event, tpd_PCIN_P((2303 - 5)- 48*36), true),
			156 => (PCIN_dly(10)'last_event, tpd_PCIN_P((2303 - 5)- 48*37), true),
			157 => (PCIN_dly(9)'last_event, tpd_PCIN_P((2303 - 5)- 48*38), true),
			158 => (PCIN_dly(8)'last_event, tpd_PCIN_P((2303 - 5)- 48*39), true),
			159 => (PCIN_dly(7)'last_event, tpd_PCIN_P((2303 - 5)- 48*40), true),
			160 => (PCIN_dly(6)'last_event, tpd_PCIN_P((2303 - 5)- 48*41), true),
			161 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 5)- 48*42), true),
			162 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 5)- 48*43), true),
			163 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 5)- 48*44), true),
			164 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 5)- 48*45), true),
			165 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 5)- 48*46), true),
			166 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 5)- 48*47), true),
			167 => (RSTA_dly'last_event, tpd_RSTA_P(42), true),
			168 => (RSTB_dly'last_event, tpd_RSTB_P(42), true),
			169 => (RSTC_dly'last_event, tpd_RSTC_P(42), true),
			170 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(42), true),
			171 => (RSTD_dly'last_event, tpd_RSTD_P(42), true),
			172 => (RSTM_dly'last_event, tpd_RSTM_P(42), true),
			173 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(42), true),
			174 => (RSTP_dly'last_event, tpd_RSTP_P(42), true),
			175 => (CLK_dly'last_event, tpd_CLK_P(42), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(41),
         GlitchData	=> P_GlitchData(41),
         OutSignalName	=> "P(41)",
         OutTemp	=> P_zd(41),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_P((863 - 6)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_P((863 - 6)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_P((863 - 6)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_P((863 - 6)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_P((863 - 6)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_P((863 - 6)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_P((863 - 6)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_P((863 - 6)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_P((863 - 6)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_P((863 - 6)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_P((863 - 6)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_P((863 - 6)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_P((863 - 6)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_P((863 - 6)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_P((863 - 6)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_P((863 - 6)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_P((863 - 6)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_P((863 - 6)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_P((863 - 6)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_P((863 - 6)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_P((863 - 6)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_P((863 - 6)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_P((863 - 6)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_P((863 - 6)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_P((863 - 6)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_P((863 - 6)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_P((863 - 6)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_P((863 - 6)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_P((863 - 6)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_P((863 - 6)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_P((863 - 6)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_P((863 - 6)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_P((863 - 6)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_P((863 - 6)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_P((863 - 6)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_P((863 - 6)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_P((863 - 6)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_P((863 - 6)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_P((863 - 6)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_P((863 - 6)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_P((863 - 6)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_P((863 - 6)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_P((863 - 6)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_P((863 - 6)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_P((863 - 6)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_P((863 - 6)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_P((863 - 6)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_P((863 - 6)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 6)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 6)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 6)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 6)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 6)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 6)- 48*17), true),
			54 => (C_dly(41)'last_event, tpd_C_P((2303 - 6)- 48*6), true),
			55 => (C_dly(40)'last_event, tpd_C_P((2303 - 6)- 48*7), true),
			56 => (C_dly(39)'last_event, tpd_C_P((2303 - 6)- 48*8), true),
			57 => (C_dly(38)'last_event, tpd_C_P((2303 - 6)- 48*9), true),
			58 => (C_dly(37)'last_event, tpd_C_P((2303 - 6)- 48*10), true),
			59 => (C_dly(36)'last_event, tpd_C_P((2303 - 6)- 48*11), true),
			60 => (C_dly(35)'last_event, tpd_C_P((2303 - 6)- 48*12), true),
			61 => (C_dly(34)'last_event, tpd_C_P((2303 - 6)- 48*13), true),
			62 => (C_dly(33)'last_event, tpd_C_P((2303 - 6)- 48*14), true),
			63 => (C_dly(32)'last_event, tpd_C_P((2303 - 6)- 48*15), true),
			64 => (C_dly(31)'last_event, tpd_C_P((2303 - 6)- 48*16), true),
			65 => (C_dly(30)'last_event, tpd_C_P((2303 - 6)- 48*17), true),
			66 => (C_dly(29)'last_event, tpd_C_P((2303 - 6)- 48*18), true),
			67 => (C_dly(28)'last_event, tpd_C_P((2303 - 6)- 48*19), true),
			68 => (C_dly(27)'last_event, tpd_C_P((2303 - 6)- 48*20), true),
			69 => (C_dly(26)'last_event, tpd_C_P((2303 - 6)- 48*21), true),
			70 => (C_dly(25)'last_event, tpd_C_P((2303 - 6)- 48*22), true),
			71 => (C_dly(24)'last_event, tpd_C_P((2303 - 6)- 48*23), true),
			72 => (C_dly(23)'last_event, tpd_C_P((2303 - 6)- 48*24), true),
			73 => (C_dly(22)'last_event, tpd_C_P((2303 - 6)- 48*25), true),
			74 => (C_dly(21)'last_event, tpd_C_P((2303 - 6)- 48*26), true),
			75 => (C_dly(20)'last_event, tpd_C_P((2303 - 6)- 48*27), true),
			76 => (C_dly(19)'last_event, tpd_C_P((2303 - 6)- 48*28), true),
			77 => (C_dly(18)'last_event, tpd_C_P((2303 - 6)- 48*29), true),
			78 => (C_dly(17)'last_event, tpd_C_P((2303 - 6)- 48*30), true),
			79 => (C_dly(16)'last_event, tpd_C_P((2303 - 6)- 48*31), true),
			80 => (C_dly(15)'last_event, tpd_C_P((2303 - 6)- 48*32), true),
			81 => (C_dly(14)'last_event, tpd_C_P((2303 - 6)- 48*33), true),
			82 => (C_dly(13)'last_event, tpd_C_P((2303 - 6)- 48*34), true),
			83 => (C_dly(12)'last_event, tpd_C_P((2303 - 6)- 48*35), true),
			84 => (C_dly(11)'last_event, tpd_C_P((2303 - 6)- 48*36), true),
			85 => (C_dly(10)'last_event, tpd_C_P((2303 - 6)- 48*37), true),
			86 => (C_dly(9)'last_event, tpd_C_P((2303 - 6)- 48*38), true),
			87 => (C_dly(8)'last_event, tpd_C_P((2303 - 6)- 48*39), true),
			88 => (C_dly(7)'last_event, tpd_C_P((2303 - 6)- 48*40), true),
			89 => (C_dly(6)'last_event, tpd_C_P((2303 - 6)- 48*41), true),
			90 => (C_dly(5)'last_event, tpd_C_P((2303 - 6)- 48*42), true),
			91 => (C_dly(4)'last_event, tpd_C_P((2303 - 6)- 48*43), true),
			92 => (C_dly(3)'last_event, tpd_C_P((2303 - 6)- 48*44), true),
			93 => (C_dly(2)'last_event, tpd_C_P((2303 - 6)- 48*45), true),
			94 => (C_dly(1)'last_event, tpd_C_P((2303 - 6)- 48*46), true),
			95 => (C_dly(0)'last_event, tpd_C_P((2303 - 6)- 48*47), true),
			96 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(41), true),
			97 => (D_dly(17)'last_event, tpd_D_P((863 - 6)- 48*0), true),
			98 => (D_dly(16)'last_event, tpd_D_P((863 - 6)- 48*1), true),
			99 => (D_dly(15)'last_event, tpd_D_P((863 - 6)- 48*2), true),
			100 => (D_dly(14)'last_event, tpd_D_P((863 - 6)- 48*3), true),
			101 => (D_dly(13)'last_event, tpd_D_P((863 - 6)- 48*4), true),
			102 => (D_dly(12)'last_event, tpd_D_P((863 - 6)- 48*5), true),
			103 => (D_dly(11)'last_event, tpd_D_P((863 - 6)- 48*6), true),
			104 => (D_dly(10)'last_event, tpd_D_P((863 - 6)- 48*7), true),
			105 => (D_dly(9)'last_event, tpd_D_P((863 - 6)- 48*8), true),
			106 => (D_dly(8)'last_event, tpd_D_P((863 - 6)- 48*9), true),
			107 => (D_dly(7)'last_event, tpd_D_P((863 - 6)- 48*10), true),
			108 => (D_dly(6)'last_event, tpd_D_P((863 - 6)- 48*11), true),
			109 => (D_dly(5)'last_event, tpd_D_P((863 - 6)- 48*12), true),
			110 => (D_dly(4)'last_event, tpd_D_P((863 - 6)- 48*13), true),
			111 => (D_dly(3)'last_event, tpd_D_P((863 - 6)- 48*14), true),
			112 => (D_dly(2)'last_event, tpd_D_P((863 - 6)- 48*15), true),
			113 => (D_dly(1)'last_event, tpd_D_P((863 - 6)- 48*16), true),
			114 => (D_dly(0)'last_event, tpd_D_P((863 - 6)- 48*17), true),
			115 => (OPMODE_dly(7)'last_event, tpd_OPMODE_P((383 - 6)- 48*0), true),
			116 => (OPMODE_dly(6)'last_event, tpd_OPMODE_P((383 - 6)- 48*1), true),
			117 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 6)- 48*2), true),
			118 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 6)- 48*3), true),
			119 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 6)- 48*4), true),
			120 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 6)- 48*5), true),
			121 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 6)- 48*6), true),
			122 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 6)- 48*7), true),
			123 => (PCIN_dly(41)'last_event, tpd_PCIN_P((2303 - 6)- 48*6), true),
			124 => (PCIN_dly(40)'last_event, tpd_PCIN_P((2303 - 6)- 48*7), true),
			125 => (PCIN_dly(39)'last_event, tpd_PCIN_P((2303 - 6)- 48*8), true),
			126 => (PCIN_dly(38)'last_event, tpd_PCIN_P((2303 - 6)- 48*9), true),
			127 => (PCIN_dly(37)'last_event, tpd_PCIN_P((2303 - 6)- 48*10), true),
			128 => (PCIN_dly(36)'last_event, tpd_PCIN_P((2303 - 6)- 48*11), true),
			129 => (PCIN_dly(35)'last_event, tpd_PCIN_P((2303 - 6)- 48*12), true),
			130 => (PCIN_dly(34)'last_event, tpd_PCIN_P((2303 - 6)- 48*13), true),
			131 => (PCIN_dly(33)'last_event, tpd_PCIN_P((2303 - 6)- 48*14), true),
			132 => (PCIN_dly(32)'last_event, tpd_PCIN_P((2303 - 6)- 48*15), true),
			133 => (PCIN_dly(31)'last_event, tpd_PCIN_P((2303 - 6)- 48*16), true),
			134 => (PCIN_dly(30)'last_event, tpd_PCIN_P((2303 - 6)- 48*17), true),
			135 => (PCIN_dly(29)'last_event, tpd_PCIN_P((2303 - 6)- 48*18), true),
			136 => (PCIN_dly(28)'last_event, tpd_PCIN_P((2303 - 6)- 48*19), true),
			137 => (PCIN_dly(27)'last_event, tpd_PCIN_P((2303 - 6)- 48*20), true),
			138 => (PCIN_dly(26)'last_event, tpd_PCIN_P((2303 - 6)- 48*21), true),
			139 => (PCIN_dly(25)'last_event, tpd_PCIN_P((2303 - 6)- 48*22), true),
			140 => (PCIN_dly(24)'last_event, tpd_PCIN_P((2303 - 6)- 48*23), true),
			141 => (PCIN_dly(23)'last_event, tpd_PCIN_P((2303 - 6)- 48*24), true),
			142 => (PCIN_dly(22)'last_event, tpd_PCIN_P((2303 - 6)- 48*25), true),
			143 => (PCIN_dly(21)'last_event, tpd_PCIN_P((2303 - 6)- 48*26), true),
			144 => (PCIN_dly(20)'last_event, tpd_PCIN_P((2303 - 6)- 48*27), true),
			145 => (PCIN_dly(19)'last_event, tpd_PCIN_P((2303 - 6)- 48*28), true),
			146 => (PCIN_dly(18)'last_event, tpd_PCIN_P((2303 - 6)- 48*29), true),
			147 => (PCIN_dly(17)'last_event, tpd_PCIN_P((2303 - 6)- 48*30), true),
			148 => (PCIN_dly(16)'last_event, tpd_PCIN_P((2303 - 6)- 48*31), true),
			149 => (PCIN_dly(15)'last_event, tpd_PCIN_P((2303 - 6)- 48*32), true),
			150 => (PCIN_dly(14)'last_event, tpd_PCIN_P((2303 - 6)- 48*33), true),
			151 => (PCIN_dly(13)'last_event, tpd_PCIN_P((2303 - 6)- 48*34), true),
			152 => (PCIN_dly(12)'last_event, tpd_PCIN_P((2303 - 6)- 48*35), true),
			153 => (PCIN_dly(11)'last_event, tpd_PCIN_P((2303 - 6)- 48*36), true),
			154 => (PCIN_dly(10)'last_event, tpd_PCIN_P((2303 - 6)- 48*37), true),
			155 => (PCIN_dly(9)'last_event, tpd_PCIN_P((2303 - 6)- 48*38), true),
			156 => (PCIN_dly(8)'last_event, tpd_PCIN_P((2303 - 6)- 48*39), true),
			157 => (PCIN_dly(7)'last_event, tpd_PCIN_P((2303 - 6)- 48*40), true),
			158 => (PCIN_dly(6)'last_event, tpd_PCIN_P((2303 - 6)- 48*41), true),
			159 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 6)- 48*42), true),
			160 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 6)- 48*43), true),
			161 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 6)- 48*44), true),
			162 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 6)- 48*45), true),
			163 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 6)- 48*46), true),
			164 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 6)- 48*47), true),
			165 => (RSTA_dly'last_event, tpd_RSTA_P(41), true),
			166 => (RSTB_dly'last_event, tpd_RSTB_P(41), true),
			167 => (RSTC_dly'last_event, tpd_RSTC_P(41), true),
			168 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(41), true),
			169 => (RSTD_dly'last_event, tpd_RSTD_P(41), true),
			170 => (RSTM_dly'last_event, tpd_RSTM_P(41), true),
			171 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(41), true),
			172 => (RSTP_dly'last_event, tpd_RSTP_P(41), true),
			173 => (CLK_dly'last_event, tpd_CLK_P(41), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(40),
         GlitchData	=> P_GlitchData(40),
         OutSignalName	=> "P(40)",
         OutTemp	=> P_zd(40),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_P((863 - 7)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_P((863 - 7)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_P((863 - 7)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_P((863 - 7)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_P((863 - 7)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_P((863 - 7)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_P((863 - 7)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_P((863 - 7)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_P((863 - 7)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_P((863 - 7)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_P((863 - 7)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_P((863 - 7)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_P((863 - 7)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_P((863 - 7)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_P((863 - 7)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_P((863 - 7)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_P((863 - 7)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_P((863 - 7)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_P((863 - 7)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_P((863 - 7)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_P((863 - 7)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_P((863 - 7)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_P((863 - 7)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_P((863 - 7)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_P((863 - 7)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_P((863 - 7)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_P((863 - 7)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_P((863 - 7)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_P((863 - 7)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_P((863 - 7)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_P((863 - 7)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_P((863 - 7)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_P((863 - 7)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_P((863 - 7)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_P((863 - 7)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_P((863 - 7)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_P((863 - 7)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_P((863 - 7)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_P((863 - 7)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_P((863 - 7)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_P((863 - 7)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_P((863 - 7)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_P((863 - 7)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_P((863 - 7)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_P((863 - 7)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_P((863 - 7)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_P((863 - 7)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_P((863 - 7)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 7)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 7)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 7)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 7)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 7)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 7)- 48*17), true),
			54 => (C_dly(40)'last_event, tpd_C_P((2303 - 7)- 48*7), true),
			55 => (C_dly(39)'last_event, tpd_C_P((2303 - 7)- 48*8), true),
			56 => (C_dly(38)'last_event, tpd_C_P((2303 - 7)- 48*9), true),
			57 => (C_dly(37)'last_event, tpd_C_P((2303 - 7)- 48*10), true),
			58 => (C_dly(36)'last_event, tpd_C_P((2303 - 7)- 48*11), true),
			59 => (C_dly(35)'last_event, tpd_C_P((2303 - 7)- 48*12), true),
			60 => (C_dly(34)'last_event, tpd_C_P((2303 - 7)- 48*13), true),
			61 => (C_dly(33)'last_event, tpd_C_P((2303 - 7)- 48*14), true),
			62 => (C_dly(32)'last_event, tpd_C_P((2303 - 7)- 48*15), true),
			63 => (C_dly(31)'last_event, tpd_C_P((2303 - 7)- 48*16), true),
			64 => (C_dly(30)'last_event, tpd_C_P((2303 - 7)- 48*17), true),
			65 => (C_dly(29)'last_event, tpd_C_P((2303 - 7)- 48*18), true),
			66 => (C_dly(28)'last_event, tpd_C_P((2303 - 7)- 48*19), true),
			67 => (C_dly(27)'last_event, tpd_C_P((2303 - 7)- 48*20), true),
			68 => (C_dly(26)'last_event, tpd_C_P((2303 - 7)- 48*21), true),
			69 => (C_dly(25)'last_event, tpd_C_P((2303 - 7)- 48*22), true),
			70 => (C_dly(24)'last_event, tpd_C_P((2303 - 7)- 48*23), true),
			71 => (C_dly(23)'last_event, tpd_C_P((2303 - 7)- 48*24), true),
			72 => (C_dly(22)'last_event, tpd_C_P((2303 - 7)- 48*25), true),
			73 => (C_dly(21)'last_event, tpd_C_P((2303 - 7)- 48*26), true),
			74 => (C_dly(20)'last_event, tpd_C_P((2303 - 7)- 48*27), true),
			75 => (C_dly(19)'last_event, tpd_C_P((2303 - 7)- 48*28), true),
			76 => (C_dly(18)'last_event, tpd_C_P((2303 - 7)- 48*29), true),
			77 => (C_dly(17)'last_event, tpd_C_P((2303 - 7)- 48*30), true),
			78 => (C_dly(16)'last_event, tpd_C_P((2303 - 7)- 48*31), true),
			79 => (C_dly(15)'last_event, tpd_C_P((2303 - 7)- 48*32), true),
			80 => (C_dly(14)'last_event, tpd_C_P((2303 - 7)- 48*33), true),
			81 => (C_dly(13)'last_event, tpd_C_P((2303 - 7)- 48*34), true),
			82 => (C_dly(12)'last_event, tpd_C_P((2303 - 7)- 48*35), true),
			83 => (C_dly(11)'last_event, tpd_C_P((2303 - 7)- 48*36), true),
			84 => (C_dly(10)'last_event, tpd_C_P((2303 - 7)- 48*37), true),
			85 => (C_dly(9)'last_event, tpd_C_P((2303 - 7)- 48*38), true),
			86 => (C_dly(8)'last_event, tpd_C_P((2303 - 7)- 48*39), true),
			87 => (C_dly(7)'last_event, tpd_C_P((2303 - 7)- 48*40), true),
			88 => (C_dly(6)'last_event, tpd_C_P((2303 - 7)- 48*41), true),
			89 => (C_dly(5)'last_event, tpd_C_P((2303 - 7)- 48*42), true),
			90 => (C_dly(4)'last_event, tpd_C_P((2303 - 7)- 48*43), true),
			91 => (C_dly(3)'last_event, tpd_C_P((2303 - 7)- 48*44), true),
			92 => (C_dly(2)'last_event, tpd_C_P((2303 - 7)- 48*45), true),
			93 => (C_dly(1)'last_event, tpd_C_P((2303 - 7)- 48*46), true),
			94 => (C_dly(0)'last_event, tpd_C_P((2303 - 7)- 48*47), true),
			95 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(40), true),
			96 => (D_dly(17)'last_event, tpd_D_P((863 - 7)- 48*0), true),
			97 => (D_dly(16)'last_event, tpd_D_P((863 - 7)- 48*1), true),
			98 => (D_dly(15)'last_event, tpd_D_P((863 - 7)- 48*2), true),
			99 => (D_dly(14)'last_event, tpd_D_P((863 - 7)- 48*3), true),
			100 => (D_dly(13)'last_event, tpd_D_P((863 - 7)- 48*4), true),
			101 => (D_dly(12)'last_event, tpd_D_P((863 - 7)- 48*5), true),
			102 => (D_dly(11)'last_event, tpd_D_P((863 - 7)- 48*6), true),
			103 => (D_dly(10)'last_event, tpd_D_P((863 - 7)- 48*7), true),
			104 => (D_dly(9)'last_event, tpd_D_P((863 - 7)- 48*8), true),
			105 => (D_dly(8)'last_event, tpd_D_P((863 - 7)- 48*9), true),
			106 => (D_dly(7)'last_event, tpd_D_P((863 - 7)- 48*10), true),
			107 => (D_dly(6)'last_event, tpd_D_P((863 - 7)- 48*11), true),
			108 => (D_dly(5)'last_event, tpd_D_P((863 - 7)- 48*12), true),
			109 => (D_dly(4)'last_event, tpd_D_P((863 - 7)- 48*13), true),
			110 => (D_dly(3)'last_event, tpd_D_P((863 - 7)- 48*14), true),
			111 => (D_dly(2)'last_event, tpd_D_P((863 - 7)- 48*15), true),
			112 => (D_dly(1)'last_event, tpd_D_P((863 - 7)- 48*16), true),
			113 => (D_dly(0)'last_event, tpd_D_P((863 - 7)- 48*17), true),
			114 => (OPMODE_dly(7)'last_event, tpd_OPMODE_P((383 - 7)- 48*0), true),
			115 => (OPMODE_dly(6)'last_event, tpd_OPMODE_P((383 - 7)- 48*1), true),
			116 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 7)- 48*2), true),
			117 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 7)- 48*3), true),
			118 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 7)- 48*4), true),
			119 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 7)- 48*5), true),
			120 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 7)- 48*6), true),
			121 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 7)- 48*7), true),
			122 => (PCIN_dly(40)'last_event, tpd_PCIN_P((2303 - 7)- 48*7), true),
			123 => (PCIN_dly(39)'last_event, tpd_PCIN_P((2303 - 7)- 48*8), true),
			124 => (PCIN_dly(38)'last_event, tpd_PCIN_P((2303 - 7)- 48*9), true),
			125 => (PCIN_dly(37)'last_event, tpd_PCIN_P((2303 - 7)- 48*10), true),
			126 => (PCIN_dly(36)'last_event, tpd_PCIN_P((2303 - 7)- 48*11), true),
			127 => (PCIN_dly(35)'last_event, tpd_PCIN_P((2303 - 7)- 48*12), true),
			128 => (PCIN_dly(34)'last_event, tpd_PCIN_P((2303 - 7)- 48*13), true),
			129 => (PCIN_dly(33)'last_event, tpd_PCIN_P((2303 - 7)- 48*14), true),
			130 => (PCIN_dly(32)'last_event, tpd_PCIN_P((2303 - 7)- 48*15), true),
			131 => (PCIN_dly(31)'last_event, tpd_PCIN_P((2303 - 7)- 48*16), true),
			132 => (PCIN_dly(30)'last_event, tpd_PCIN_P((2303 - 7)- 48*17), true),
			133 => (PCIN_dly(29)'last_event, tpd_PCIN_P((2303 - 7)- 48*18), true),
			134 => (PCIN_dly(28)'last_event, tpd_PCIN_P((2303 - 7)- 48*19), true),
			135 => (PCIN_dly(27)'last_event, tpd_PCIN_P((2303 - 7)- 48*20), true),
			136 => (PCIN_dly(26)'last_event, tpd_PCIN_P((2303 - 7)- 48*21), true),
			137 => (PCIN_dly(25)'last_event, tpd_PCIN_P((2303 - 7)- 48*22), true),
			138 => (PCIN_dly(24)'last_event, tpd_PCIN_P((2303 - 7)- 48*23), true),
			139 => (PCIN_dly(23)'last_event, tpd_PCIN_P((2303 - 7)- 48*24), true),
			140 => (PCIN_dly(22)'last_event, tpd_PCIN_P((2303 - 7)- 48*25), true),
			141 => (PCIN_dly(21)'last_event, tpd_PCIN_P((2303 - 7)- 48*26), true),
			142 => (PCIN_dly(20)'last_event, tpd_PCIN_P((2303 - 7)- 48*27), true),
			143 => (PCIN_dly(19)'last_event, tpd_PCIN_P((2303 - 7)- 48*28), true),
			144 => (PCIN_dly(18)'last_event, tpd_PCIN_P((2303 - 7)- 48*29), true),
			145 => (PCIN_dly(17)'last_event, tpd_PCIN_P((2303 - 7)- 48*30), true),
			146 => (PCIN_dly(16)'last_event, tpd_PCIN_P((2303 - 7)- 48*31), true),
			147 => (PCIN_dly(15)'last_event, tpd_PCIN_P((2303 - 7)- 48*32), true),
			148 => (PCIN_dly(14)'last_event, tpd_PCIN_P((2303 - 7)- 48*33), true),
			149 => (PCIN_dly(13)'last_event, tpd_PCIN_P((2303 - 7)- 48*34), true),
			150 => (PCIN_dly(12)'last_event, tpd_PCIN_P((2303 - 7)- 48*35), true),
			151 => (PCIN_dly(11)'last_event, tpd_PCIN_P((2303 - 7)- 48*36), true),
			152 => (PCIN_dly(10)'last_event, tpd_PCIN_P((2303 - 7)- 48*37), true),
			153 => (PCIN_dly(9)'last_event, tpd_PCIN_P((2303 - 7)- 48*38), true),
			154 => (PCIN_dly(8)'last_event, tpd_PCIN_P((2303 - 7)- 48*39), true),
			155 => (PCIN_dly(7)'last_event, tpd_PCIN_P((2303 - 7)- 48*40), true),
			156 => (PCIN_dly(6)'last_event, tpd_PCIN_P((2303 - 7)- 48*41), true),
			157 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 7)- 48*42), true),
			158 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 7)- 48*43), true),
			159 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 7)- 48*44), true),
			160 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 7)- 48*45), true),
			161 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 7)- 48*46), true),
			162 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 7)- 48*47), true),
			163 => (RSTA_dly'last_event, tpd_RSTA_P(40), true),
			164 => (RSTB_dly'last_event, tpd_RSTB_P(40), true),
			165 => (RSTC_dly'last_event, tpd_RSTC_P(40), true),
			166 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(40), true),
			167 => (RSTD_dly'last_event, tpd_RSTD_P(40), true),
			168 => (RSTM_dly'last_event, tpd_RSTM_P(40), true),
			169 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(40), true),
			170 => (RSTP_dly'last_event, tpd_RSTP_P(40), true),
			171 => (CLK_dly'last_event, tpd_CLK_P(40), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(39),
         GlitchData	=> P_GlitchData(39),
         OutSignalName	=> "P(39)",
         OutTemp	=> P_zd(39),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_P((863 - 8)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_P((863 - 8)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_P((863 - 8)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_P((863 - 8)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_P((863 - 8)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_P((863 - 8)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_P((863 - 8)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_P((863 - 8)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_P((863 - 8)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_P((863 - 8)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_P((863 - 8)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_P((863 - 8)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_P((863 - 8)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_P((863 - 8)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_P((863 - 8)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_P((863 - 8)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_P((863 - 8)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_P((863 - 8)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_P((863 - 8)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_P((863 - 8)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_P((863 - 8)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_P((863 - 8)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_P((863 - 8)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_P((863 - 8)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_P((863 - 8)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_P((863 - 8)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_P((863 - 8)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_P((863 - 8)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_P((863 - 8)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_P((863 - 8)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_P((863 - 8)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_P((863 - 8)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_P((863 - 8)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_P((863 - 8)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_P((863 - 8)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_P((863 - 8)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_P((863 - 8)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_P((863 - 8)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_P((863 - 8)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_P((863 - 8)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_P((863 - 8)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_P((863 - 8)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_P((863 - 8)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_P((863 - 8)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_P((863 - 8)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_P((863 - 8)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_P((863 - 8)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_P((863 - 8)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 8)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 8)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 8)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 8)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 8)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 8)- 48*17), true),
			54 => (C_dly(39)'last_event, tpd_C_P((2303 - 8)- 48*8), true),
			55 => (C_dly(38)'last_event, tpd_C_P((2303 - 8)- 48*9), true),
			56 => (C_dly(37)'last_event, tpd_C_P((2303 - 8)- 48*10), true),
			57 => (C_dly(36)'last_event, tpd_C_P((2303 - 8)- 48*11), true),
			58 => (C_dly(35)'last_event, tpd_C_P((2303 - 8)- 48*12), true),
			59 => (C_dly(34)'last_event, tpd_C_P((2303 - 8)- 48*13), true),
			60 => (C_dly(33)'last_event, tpd_C_P((2303 - 8)- 48*14), true),
			61 => (C_dly(32)'last_event, tpd_C_P((2303 - 8)- 48*15), true),
			62 => (C_dly(31)'last_event, tpd_C_P((2303 - 8)- 48*16), true),
			63 => (C_dly(30)'last_event, tpd_C_P((2303 - 8)- 48*17), true),
			64 => (C_dly(29)'last_event, tpd_C_P((2303 - 8)- 48*18), true),
			65 => (C_dly(28)'last_event, tpd_C_P((2303 - 8)- 48*19), true),
			66 => (C_dly(27)'last_event, tpd_C_P((2303 - 8)- 48*20), true),
			67 => (C_dly(26)'last_event, tpd_C_P((2303 - 8)- 48*21), true),
			68 => (C_dly(25)'last_event, tpd_C_P((2303 - 8)- 48*22), true),
			69 => (C_dly(24)'last_event, tpd_C_P((2303 - 8)- 48*23), true),
			70 => (C_dly(23)'last_event, tpd_C_P((2303 - 8)- 48*24), true),
			71 => (C_dly(22)'last_event, tpd_C_P((2303 - 8)- 48*25), true),
			72 => (C_dly(21)'last_event, tpd_C_P((2303 - 8)- 48*26), true),
			73 => (C_dly(20)'last_event, tpd_C_P((2303 - 8)- 48*27), true),
			74 => (C_dly(19)'last_event, tpd_C_P((2303 - 8)- 48*28), true),
			75 => (C_dly(18)'last_event, tpd_C_P((2303 - 8)- 48*29), true),
			76 => (C_dly(17)'last_event, tpd_C_P((2303 - 8)- 48*30), true),
			77 => (C_dly(16)'last_event, tpd_C_P((2303 - 8)- 48*31), true),
			78 => (C_dly(15)'last_event, tpd_C_P((2303 - 8)- 48*32), true),
			79 => (C_dly(14)'last_event, tpd_C_P((2303 - 8)- 48*33), true),
			80 => (C_dly(13)'last_event, tpd_C_P((2303 - 8)- 48*34), true),
			81 => (C_dly(12)'last_event, tpd_C_P((2303 - 8)- 48*35), true),
			82 => (C_dly(11)'last_event, tpd_C_P((2303 - 8)- 48*36), true),
			83 => (C_dly(10)'last_event, tpd_C_P((2303 - 8)- 48*37), true),
			84 => (C_dly(9)'last_event, tpd_C_P((2303 - 8)- 48*38), true),
			85 => (C_dly(8)'last_event, tpd_C_P((2303 - 8)- 48*39), true),
			86 => (C_dly(7)'last_event, tpd_C_P((2303 - 8)- 48*40), true),
			87 => (C_dly(6)'last_event, tpd_C_P((2303 - 8)- 48*41), true),
			88 => (C_dly(5)'last_event, tpd_C_P((2303 - 8)- 48*42), true),
			89 => (C_dly(4)'last_event, tpd_C_P((2303 - 8)- 48*43), true),
			90 => (C_dly(3)'last_event, tpd_C_P((2303 - 8)- 48*44), true),
			91 => (C_dly(2)'last_event, tpd_C_P((2303 - 8)- 48*45), true),
			92 => (C_dly(1)'last_event, tpd_C_P((2303 - 8)- 48*46), true),
			93 => (C_dly(0)'last_event, tpd_C_P((2303 - 8)- 48*47), true),
			94 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(39), true),
			95 => (D_dly(17)'last_event, tpd_D_P((863 - 8)- 48*0), true),
			96 => (D_dly(16)'last_event, tpd_D_P((863 - 8)- 48*1), true),
			97 => (D_dly(15)'last_event, tpd_D_P((863 - 8)- 48*2), true),
			98 => (D_dly(14)'last_event, tpd_D_P((863 - 8)- 48*3), true),
			99 => (D_dly(13)'last_event, tpd_D_P((863 - 8)- 48*4), true),
			100 => (D_dly(12)'last_event, tpd_D_P((863 - 8)- 48*5), true),
			101 => (D_dly(11)'last_event, tpd_D_P((863 - 8)- 48*6), true),
			102 => (D_dly(10)'last_event, tpd_D_P((863 - 8)- 48*7), true),
			103 => (D_dly(9)'last_event, tpd_D_P((863 - 8)- 48*8), true),
			104 => (D_dly(8)'last_event, tpd_D_P((863 - 8)- 48*9), true),
			105 => (D_dly(7)'last_event, tpd_D_P((863 - 8)- 48*10), true),
			106 => (D_dly(6)'last_event, tpd_D_P((863 - 8)- 48*11), true),
			107 => (D_dly(5)'last_event, tpd_D_P((863 - 8)- 48*12), true),
			108 => (D_dly(4)'last_event, tpd_D_P((863 - 8)- 48*13), true),
			109 => (D_dly(3)'last_event, tpd_D_P((863 - 8)- 48*14), true),
			110 => (D_dly(2)'last_event, tpd_D_P((863 - 8)- 48*15), true),
			111 => (D_dly(1)'last_event, tpd_D_P((863 - 8)- 48*16), true),
			112 => (D_dly(0)'last_event, tpd_D_P((863 - 8)- 48*17), true),
			113 => (OPMODE_dly(7)'last_event, tpd_OPMODE_P((383 - 8)- 48*0), true),
			114 => (OPMODE_dly(6)'last_event, tpd_OPMODE_P((383 - 8)- 48*1), true),
			115 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 8)- 48*2), true),
			116 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 8)- 48*3), true),
			117 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 8)- 48*4), true),
			118 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 8)- 48*5), true),
			119 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 8)- 48*6), true),
			120 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 8)- 48*7), true),
			121 => (PCIN_dly(39)'last_event, tpd_PCIN_P((2303 - 8)- 48*8), true),
			122 => (PCIN_dly(38)'last_event, tpd_PCIN_P((2303 - 8)- 48*9), true),
			123 => (PCIN_dly(37)'last_event, tpd_PCIN_P((2303 - 8)- 48*10), true),
			124 => (PCIN_dly(36)'last_event, tpd_PCIN_P((2303 - 8)- 48*11), true),
			125 => (PCIN_dly(35)'last_event, tpd_PCIN_P((2303 - 8)- 48*12), true),
			126 => (PCIN_dly(34)'last_event, tpd_PCIN_P((2303 - 8)- 48*13), true),
			127 => (PCIN_dly(33)'last_event, tpd_PCIN_P((2303 - 8)- 48*14), true),
			128 => (PCIN_dly(32)'last_event, tpd_PCIN_P((2303 - 8)- 48*15), true),
			129 => (PCIN_dly(31)'last_event, tpd_PCIN_P((2303 - 8)- 48*16), true),
			130 => (PCIN_dly(30)'last_event, tpd_PCIN_P((2303 - 8)- 48*17), true),
			131 => (PCIN_dly(29)'last_event, tpd_PCIN_P((2303 - 8)- 48*18), true),
			132 => (PCIN_dly(28)'last_event, tpd_PCIN_P((2303 - 8)- 48*19), true),
			133 => (PCIN_dly(27)'last_event, tpd_PCIN_P((2303 - 8)- 48*20), true),
			134 => (PCIN_dly(26)'last_event, tpd_PCIN_P((2303 - 8)- 48*21), true),
			135 => (PCIN_dly(25)'last_event, tpd_PCIN_P((2303 - 8)- 48*22), true),
			136 => (PCIN_dly(24)'last_event, tpd_PCIN_P((2303 - 8)- 48*23), true),
			137 => (PCIN_dly(23)'last_event, tpd_PCIN_P((2303 - 8)- 48*24), true),
			138 => (PCIN_dly(22)'last_event, tpd_PCIN_P((2303 - 8)- 48*25), true),
			139 => (PCIN_dly(21)'last_event, tpd_PCIN_P((2303 - 8)- 48*26), true),
			140 => (PCIN_dly(20)'last_event, tpd_PCIN_P((2303 - 8)- 48*27), true),
			141 => (PCIN_dly(19)'last_event, tpd_PCIN_P((2303 - 8)- 48*28), true),
			142 => (PCIN_dly(18)'last_event, tpd_PCIN_P((2303 - 8)- 48*29), true),
			143 => (PCIN_dly(17)'last_event, tpd_PCIN_P((2303 - 8)- 48*30), true),
			144 => (PCIN_dly(16)'last_event, tpd_PCIN_P((2303 - 8)- 48*31), true),
			145 => (PCIN_dly(15)'last_event, tpd_PCIN_P((2303 - 8)- 48*32), true),
			146 => (PCIN_dly(14)'last_event, tpd_PCIN_P((2303 - 8)- 48*33), true),
			147 => (PCIN_dly(13)'last_event, tpd_PCIN_P((2303 - 8)- 48*34), true),
			148 => (PCIN_dly(12)'last_event, tpd_PCIN_P((2303 - 8)- 48*35), true),
			149 => (PCIN_dly(11)'last_event, tpd_PCIN_P((2303 - 8)- 48*36), true),
			150 => (PCIN_dly(10)'last_event, tpd_PCIN_P((2303 - 8)- 48*37), true),
			151 => (PCIN_dly(9)'last_event, tpd_PCIN_P((2303 - 8)- 48*38), true),
			152 => (PCIN_dly(8)'last_event, tpd_PCIN_P((2303 - 8)- 48*39), true),
			153 => (PCIN_dly(7)'last_event, tpd_PCIN_P((2303 - 8)- 48*40), true),
			154 => (PCIN_dly(6)'last_event, tpd_PCIN_P((2303 - 8)- 48*41), true),
			155 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 8)- 48*42), true),
			156 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 8)- 48*43), true),
			157 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 8)- 48*44), true),
			158 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 8)- 48*45), true),
			159 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 8)- 48*46), true),
			160 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 8)- 48*47), true),
			161 => (RSTA_dly'last_event, tpd_RSTA_P(39), true),
			162 => (RSTB_dly'last_event, tpd_RSTB_P(39), true),
			163 => (RSTC_dly'last_event, tpd_RSTC_P(39), true),
			164 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(39), true),
			165 => (RSTD_dly'last_event, tpd_RSTD_P(39), true),
			166 => (RSTM_dly'last_event, tpd_RSTM_P(39), true),
			167 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(39), true),
			168 => (RSTP_dly'last_event, tpd_RSTP_P(39), true),
			169 => (CLK_dly'last_event, tpd_CLK_P(39), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(38),
         GlitchData	=> P_GlitchData(38),
         OutSignalName	=> "P(38)",
         OutTemp	=> P_zd(38),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_P((863 - 9)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_P((863 - 9)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_P((863 - 9)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_P((863 - 9)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_P((863 - 9)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_P((863 - 9)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_P((863 - 9)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_P((863 - 9)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_P((863 - 9)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_P((863 - 9)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_P((863 - 9)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_P((863 - 9)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_P((863 - 9)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_P((863 - 9)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_P((863 - 9)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_P((863 - 9)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_P((863 - 9)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_P((863 - 9)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_P((863 - 9)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_P((863 - 9)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_P((863 - 9)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_P((863 - 9)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_P((863 - 9)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_P((863 - 9)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_P((863 - 9)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_P((863 - 9)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_P((863 - 9)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_P((863 - 9)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_P((863 - 9)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_P((863 - 9)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_P((863 - 9)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_P((863 - 9)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_P((863 - 9)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_P((863 - 9)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_P((863 - 9)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_P((863 - 9)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_P((863 - 9)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_P((863 - 9)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_P((863 - 9)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_P((863 - 9)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_P((863 - 9)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_P((863 - 9)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_P((863 - 9)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_P((863 - 9)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_P((863 - 9)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_P((863 - 9)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_P((863 - 9)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_P((863 - 9)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 9)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 9)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 9)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 9)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 9)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 9)- 48*17), true),
			54 => (C_dly(38)'last_event, tpd_C_P((2303 - 9)- 48*9), true),
			55 => (C_dly(37)'last_event, tpd_C_P((2303 - 9)- 48*10), true),
			56 => (C_dly(36)'last_event, tpd_C_P((2303 - 9)- 48*11), true),
			57 => (C_dly(35)'last_event, tpd_C_P((2303 - 9)- 48*12), true),
			58 => (C_dly(34)'last_event, tpd_C_P((2303 - 9)- 48*13), true),
			59 => (C_dly(33)'last_event, tpd_C_P((2303 - 9)- 48*14), true),
			60 => (C_dly(32)'last_event, tpd_C_P((2303 - 9)- 48*15), true),
			61 => (C_dly(31)'last_event, tpd_C_P((2303 - 9)- 48*16), true),
			62 => (C_dly(30)'last_event, tpd_C_P((2303 - 9)- 48*17), true),
			63 => (C_dly(29)'last_event, tpd_C_P((2303 - 9)- 48*18), true),
			64 => (C_dly(28)'last_event, tpd_C_P((2303 - 9)- 48*19), true),
			65 => (C_dly(27)'last_event, tpd_C_P((2303 - 9)- 48*20), true),
			66 => (C_dly(26)'last_event, tpd_C_P((2303 - 9)- 48*21), true),
			67 => (C_dly(25)'last_event, tpd_C_P((2303 - 9)- 48*22), true),
			68 => (C_dly(24)'last_event, tpd_C_P((2303 - 9)- 48*23), true),
			69 => (C_dly(23)'last_event, tpd_C_P((2303 - 9)- 48*24), true),
			70 => (C_dly(22)'last_event, tpd_C_P((2303 - 9)- 48*25), true),
			71 => (C_dly(21)'last_event, tpd_C_P((2303 - 9)- 48*26), true),
			72 => (C_dly(20)'last_event, tpd_C_P((2303 - 9)- 48*27), true),
			73 => (C_dly(19)'last_event, tpd_C_P((2303 - 9)- 48*28), true),
			74 => (C_dly(18)'last_event, tpd_C_P((2303 - 9)- 48*29), true),
			75 => (C_dly(17)'last_event, tpd_C_P((2303 - 9)- 48*30), true),
			76 => (C_dly(16)'last_event, tpd_C_P((2303 - 9)- 48*31), true),
			77 => (C_dly(15)'last_event, tpd_C_P((2303 - 9)- 48*32), true),
			78 => (C_dly(14)'last_event, tpd_C_P((2303 - 9)- 48*33), true),
			79 => (C_dly(13)'last_event, tpd_C_P((2303 - 9)- 48*34), true),
			80 => (C_dly(12)'last_event, tpd_C_P((2303 - 9)- 48*35), true),
			81 => (C_dly(11)'last_event, tpd_C_P((2303 - 9)- 48*36), true),
			82 => (C_dly(10)'last_event, tpd_C_P((2303 - 9)- 48*37), true),
			83 => (C_dly(9)'last_event, tpd_C_P((2303 - 9)- 48*38), true),
			84 => (C_dly(8)'last_event, tpd_C_P((2303 - 9)- 48*39), true),
			85 => (C_dly(7)'last_event, tpd_C_P((2303 - 9)- 48*40), true),
			86 => (C_dly(6)'last_event, tpd_C_P((2303 - 9)- 48*41), true),
			87 => (C_dly(5)'last_event, tpd_C_P((2303 - 9)- 48*42), true),
			88 => (C_dly(4)'last_event, tpd_C_P((2303 - 9)- 48*43), true),
			89 => (C_dly(3)'last_event, tpd_C_P((2303 - 9)- 48*44), true),
			90 => (C_dly(2)'last_event, tpd_C_P((2303 - 9)- 48*45), true),
			91 => (C_dly(1)'last_event, tpd_C_P((2303 - 9)- 48*46), true),
			92 => (C_dly(0)'last_event, tpd_C_P((2303 - 9)- 48*47), true),
			93 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(38), true),
			94 => (D_dly(17)'last_event, tpd_D_P((863 - 9)- 48*0), true),
			95 => (D_dly(16)'last_event, tpd_D_P((863 - 9)- 48*1), true),
			96 => (D_dly(15)'last_event, tpd_D_P((863 - 9)- 48*2), true),
			97 => (D_dly(14)'last_event, tpd_D_P((863 - 9)- 48*3), true),
			98 => (D_dly(13)'last_event, tpd_D_P((863 - 9)- 48*4), true),
			99 => (D_dly(12)'last_event, tpd_D_P((863 - 9)- 48*5), true),
			100 => (D_dly(11)'last_event, tpd_D_P((863 - 9)- 48*6), true),
			101 => (D_dly(10)'last_event, tpd_D_P((863 - 9)- 48*7), true),
			102 => (D_dly(9)'last_event, tpd_D_P((863 - 9)- 48*8), true),
			103 => (D_dly(8)'last_event, tpd_D_P((863 - 9)- 48*9), true),
			104 => (D_dly(7)'last_event, tpd_D_P((863 - 9)- 48*10), true),
			105 => (D_dly(6)'last_event, tpd_D_P((863 - 9)- 48*11), true),
			106 => (D_dly(5)'last_event, tpd_D_P((863 - 9)- 48*12), true),
			107 => (D_dly(4)'last_event, tpd_D_P((863 - 9)- 48*13), true),
			108 => (D_dly(3)'last_event, tpd_D_P((863 - 9)- 48*14), true),
			109 => (D_dly(2)'last_event, tpd_D_P((863 - 9)- 48*15), true),
			110 => (D_dly(1)'last_event, tpd_D_P((863 - 9)- 48*16), true),
			111 => (D_dly(0)'last_event, tpd_D_P((863 - 9)- 48*17), true),
			112 => (OPMODE_dly(7)'last_event, tpd_OPMODE_P((383 - 9)- 48*0), true),
			113 => (OPMODE_dly(6)'last_event, tpd_OPMODE_P((383 - 9)- 48*1), true),
			114 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 9)- 48*2), true),
			115 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 9)- 48*3), true),
			116 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 9)- 48*4), true),
			117 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 9)- 48*5), true),
			118 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 9)- 48*6), true),
			119 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 9)- 48*7), true),
			120 => (PCIN_dly(38)'last_event, tpd_PCIN_P((2303 - 9)- 48*9), true),
			121 => (PCIN_dly(37)'last_event, tpd_PCIN_P((2303 - 9)- 48*10), true),
			122 => (PCIN_dly(36)'last_event, tpd_PCIN_P((2303 - 9)- 48*11), true),
			123 => (PCIN_dly(35)'last_event, tpd_PCIN_P((2303 - 9)- 48*12), true),
			124 => (PCIN_dly(34)'last_event, tpd_PCIN_P((2303 - 9)- 48*13), true),
			125 => (PCIN_dly(33)'last_event, tpd_PCIN_P((2303 - 9)- 48*14), true),
			126 => (PCIN_dly(32)'last_event, tpd_PCIN_P((2303 - 9)- 48*15), true),
			127 => (PCIN_dly(31)'last_event, tpd_PCIN_P((2303 - 9)- 48*16), true),
			128 => (PCIN_dly(30)'last_event, tpd_PCIN_P((2303 - 9)- 48*17), true),
			129 => (PCIN_dly(29)'last_event, tpd_PCIN_P((2303 - 9)- 48*18), true),
			130 => (PCIN_dly(28)'last_event, tpd_PCIN_P((2303 - 9)- 48*19), true),
			131 => (PCIN_dly(27)'last_event, tpd_PCIN_P((2303 - 9)- 48*20), true),
			132 => (PCIN_dly(26)'last_event, tpd_PCIN_P((2303 - 9)- 48*21), true),
			133 => (PCIN_dly(25)'last_event, tpd_PCIN_P((2303 - 9)- 48*22), true),
			134 => (PCIN_dly(24)'last_event, tpd_PCIN_P((2303 - 9)- 48*23), true),
			135 => (PCIN_dly(23)'last_event, tpd_PCIN_P((2303 - 9)- 48*24), true),
			136 => (PCIN_dly(22)'last_event, tpd_PCIN_P((2303 - 9)- 48*25), true),
			137 => (PCIN_dly(21)'last_event, tpd_PCIN_P((2303 - 9)- 48*26), true),
			138 => (PCIN_dly(20)'last_event, tpd_PCIN_P((2303 - 9)- 48*27), true),
			139 => (PCIN_dly(19)'last_event, tpd_PCIN_P((2303 - 9)- 48*28), true),
			140 => (PCIN_dly(18)'last_event, tpd_PCIN_P((2303 - 9)- 48*29), true),
			141 => (PCIN_dly(17)'last_event, tpd_PCIN_P((2303 - 9)- 48*30), true),
			142 => (PCIN_dly(16)'last_event, tpd_PCIN_P((2303 - 9)- 48*31), true),
			143 => (PCIN_dly(15)'last_event, tpd_PCIN_P((2303 - 9)- 48*32), true),
			144 => (PCIN_dly(14)'last_event, tpd_PCIN_P((2303 - 9)- 48*33), true),
			145 => (PCIN_dly(13)'last_event, tpd_PCIN_P((2303 - 9)- 48*34), true),
			146 => (PCIN_dly(12)'last_event, tpd_PCIN_P((2303 - 9)- 48*35), true),
			147 => (PCIN_dly(11)'last_event, tpd_PCIN_P((2303 - 9)- 48*36), true),
			148 => (PCIN_dly(10)'last_event, tpd_PCIN_P((2303 - 9)- 48*37), true),
			149 => (PCIN_dly(9)'last_event, tpd_PCIN_P((2303 - 9)- 48*38), true),
			150 => (PCIN_dly(8)'last_event, tpd_PCIN_P((2303 - 9)- 48*39), true),
			151 => (PCIN_dly(7)'last_event, tpd_PCIN_P((2303 - 9)- 48*40), true),
			152 => (PCIN_dly(6)'last_event, tpd_PCIN_P((2303 - 9)- 48*41), true),
			153 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 9)- 48*42), true),
			154 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 9)- 48*43), true),
			155 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 9)- 48*44), true),
			156 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 9)- 48*45), true),
			157 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 9)- 48*46), true),
			158 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 9)- 48*47), true),
			159 => (RSTA_dly'last_event, tpd_RSTA_P(38), true),
			160 => (RSTB_dly'last_event, tpd_RSTB_P(38), true),
			161 => (RSTC_dly'last_event, tpd_RSTC_P(38), true),
			162 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(38), true),
			163 => (RSTD_dly'last_event, tpd_RSTD_P(38), true),
			164 => (RSTM_dly'last_event, tpd_RSTM_P(38), true),
			165 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(38), true),
			166 => (RSTP_dly'last_event, tpd_RSTP_P(38), true),
			167 => (CLK_dly'last_event, tpd_CLK_P(38), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(37),
         GlitchData	=> P_GlitchData(37),
         OutSignalName	=> "P(37)",
         OutTemp	=> P_zd(37),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_P((863 - 10)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_P((863 - 10)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_P((863 - 10)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_P((863 - 10)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_P((863 - 10)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_P((863 - 10)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_P((863 - 10)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_P((863 - 10)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_P((863 - 10)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_P((863 - 10)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_P((863 - 10)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_P((863 - 10)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_P((863 - 10)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_P((863 - 10)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_P((863 - 10)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_P((863 - 10)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_P((863 - 10)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_P((863 - 10)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_P((863 - 10)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_P((863 - 10)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_P((863 - 10)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_P((863 - 10)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_P((863 - 10)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_P((863 - 10)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_P((863 - 10)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_P((863 - 10)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_P((863 - 10)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_P((863 - 10)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_P((863 - 10)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_P((863 - 10)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_P((863 - 10)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_P((863 - 10)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_P((863 - 10)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_P((863 - 10)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_P((863 - 10)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_P((863 - 10)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_P((863 - 10)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_P((863 - 10)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_P((863 - 10)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_P((863 - 10)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_P((863 - 10)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_P((863 - 10)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_P((863 - 10)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_P((863 - 10)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_P((863 - 10)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_P((863 - 10)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_P((863 - 10)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_P((863 - 10)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 10)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 10)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 10)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 10)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 10)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 10)- 48*17), true),
			54 => (C_dly(37)'last_event, tpd_C_P((2303 - 10)- 48*10), true),
			55 => (C_dly(36)'last_event, tpd_C_P((2303 - 10)- 48*11), true),
			56 => (C_dly(35)'last_event, tpd_C_P((2303 - 10)- 48*12), true),
			57 => (C_dly(34)'last_event, tpd_C_P((2303 - 10)- 48*13), true),
			58 => (C_dly(33)'last_event, tpd_C_P((2303 - 10)- 48*14), true),
			59 => (C_dly(32)'last_event, tpd_C_P((2303 - 10)- 48*15), true),
			60 => (C_dly(31)'last_event, tpd_C_P((2303 - 10)- 48*16), true),
			61 => (C_dly(30)'last_event, tpd_C_P((2303 - 10)- 48*17), true),
			62 => (C_dly(29)'last_event, tpd_C_P((2303 - 10)- 48*18), true),
			63 => (C_dly(28)'last_event, tpd_C_P((2303 - 10)- 48*19), true),
			64 => (C_dly(27)'last_event, tpd_C_P((2303 - 10)- 48*20), true),
			65 => (C_dly(26)'last_event, tpd_C_P((2303 - 10)- 48*21), true),
			66 => (C_dly(25)'last_event, tpd_C_P((2303 - 10)- 48*22), true),
			67 => (C_dly(24)'last_event, tpd_C_P((2303 - 10)- 48*23), true),
			68 => (C_dly(23)'last_event, tpd_C_P((2303 - 10)- 48*24), true),
			69 => (C_dly(22)'last_event, tpd_C_P((2303 - 10)- 48*25), true),
			70 => (C_dly(21)'last_event, tpd_C_P((2303 - 10)- 48*26), true),
			71 => (C_dly(20)'last_event, tpd_C_P((2303 - 10)- 48*27), true),
			72 => (C_dly(19)'last_event, tpd_C_P((2303 - 10)- 48*28), true),
			73 => (C_dly(18)'last_event, tpd_C_P((2303 - 10)- 48*29), true),
			74 => (C_dly(17)'last_event, tpd_C_P((2303 - 10)- 48*30), true),
			75 => (C_dly(16)'last_event, tpd_C_P((2303 - 10)- 48*31), true),
			76 => (C_dly(15)'last_event, tpd_C_P((2303 - 10)- 48*32), true),
			77 => (C_dly(14)'last_event, tpd_C_P((2303 - 10)- 48*33), true),
			78 => (C_dly(13)'last_event, tpd_C_P((2303 - 10)- 48*34), true),
			79 => (C_dly(12)'last_event, tpd_C_P((2303 - 10)- 48*35), true),
			80 => (C_dly(11)'last_event, tpd_C_P((2303 - 10)- 48*36), true),
			81 => (C_dly(10)'last_event, tpd_C_P((2303 - 10)- 48*37), true),
			82 => (C_dly(9)'last_event, tpd_C_P((2303 - 10)- 48*38), true),
			83 => (C_dly(8)'last_event, tpd_C_P((2303 - 10)- 48*39), true),
			84 => (C_dly(7)'last_event, tpd_C_P((2303 - 10)- 48*40), true),
			85 => (C_dly(6)'last_event, tpd_C_P((2303 - 10)- 48*41), true),
			86 => (C_dly(5)'last_event, tpd_C_P((2303 - 10)- 48*42), true),
			87 => (C_dly(4)'last_event, tpd_C_P((2303 - 10)- 48*43), true),
			88 => (C_dly(3)'last_event, tpd_C_P((2303 - 10)- 48*44), true),
			89 => (C_dly(2)'last_event, tpd_C_P((2303 - 10)- 48*45), true),
			90 => (C_dly(1)'last_event, tpd_C_P((2303 - 10)- 48*46), true),
			91 => (C_dly(0)'last_event, tpd_C_P((2303 - 10)- 48*47), true),
			92 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(37), true),
			93 => (D_dly(17)'last_event, tpd_D_P((863 - 10)- 48*0), true),
			94 => (D_dly(16)'last_event, tpd_D_P((863 - 10)- 48*1), true),
			95 => (D_dly(15)'last_event, tpd_D_P((863 - 10)- 48*2), true),
			96 => (D_dly(14)'last_event, tpd_D_P((863 - 10)- 48*3), true),
			97 => (D_dly(13)'last_event, tpd_D_P((863 - 10)- 48*4), true),
			98 => (D_dly(12)'last_event, tpd_D_P((863 - 10)- 48*5), true),
			99 => (D_dly(11)'last_event, tpd_D_P((863 - 10)- 48*6), true),
			100 => (D_dly(10)'last_event, tpd_D_P((863 - 10)- 48*7), true),
			101 => (D_dly(9)'last_event, tpd_D_P((863 - 10)- 48*8), true),
			102 => (D_dly(8)'last_event, tpd_D_P((863 - 10)- 48*9), true),
			103 => (D_dly(7)'last_event, tpd_D_P((863 - 10)- 48*10), true),
			104 => (D_dly(6)'last_event, tpd_D_P((863 - 10)- 48*11), true),
			105 => (D_dly(5)'last_event, tpd_D_P((863 - 10)- 48*12), true),
			106 => (D_dly(4)'last_event, tpd_D_P((863 - 10)- 48*13), true),
			107 => (D_dly(3)'last_event, tpd_D_P((863 - 10)- 48*14), true),
			108 => (D_dly(2)'last_event, tpd_D_P((863 - 10)- 48*15), true),
			109 => (D_dly(1)'last_event, tpd_D_P((863 - 10)- 48*16), true),
			110 => (D_dly(0)'last_event, tpd_D_P((863 - 10)- 48*17), true),
			111 => (OPMODE_dly(7)'last_event, tpd_OPMODE_P((383 - 10)- 48*0), true),
			112 => (OPMODE_dly(6)'last_event, tpd_OPMODE_P((383 - 10)- 48*1), true),
			113 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 10)- 48*2), true),
			114 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 10)- 48*3), true),
			115 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 10)- 48*4), true),
			116 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 10)- 48*5), true),
			117 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 10)- 48*6), true),
			118 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 10)- 48*7), true),
			119 => (PCIN_dly(37)'last_event, tpd_PCIN_P((2303 - 10)- 48*10), true),
			120 => (PCIN_dly(36)'last_event, tpd_PCIN_P((2303 - 10)- 48*11), true),
			121 => (PCIN_dly(35)'last_event, tpd_PCIN_P((2303 - 10)- 48*12), true),
			122 => (PCIN_dly(34)'last_event, tpd_PCIN_P((2303 - 10)- 48*13), true),
			123 => (PCIN_dly(33)'last_event, tpd_PCIN_P((2303 - 10)- 48*14), true),
			124 => (PCIN_dly(32)'last_event, tpd_PCIN_P((2303 - 10)- 48*15), true),
			125 => (PCIN_dly(31)'last_event, tpd_PCIN_P((2303 - 10)- 48*16), true),
			126 => (PCIN_dly(30)'last_event, tpd_PCIN_P((2303 - 10)- 48*17), true),
			127 => (PCIN_dly(29)'last_event, tpd_PCIN_P((2303 - 10)- 48*18), true),
			128 => (PCIN_dly(28)'last_event, tpd_PCIN_P((2303 - 10)- 48*19), true),
			129 => (PCIN_dly(27)'last_event, tpd_PCIN_P((2303 - 10)- 48*20), true),
			130 => (PCIN_dly(26)'last_event, tpd_PCIN_P((2303 - 10)- 48*21), true),
			131 => (PCIN_dly(25)'last_event, tpd_PCIN_P((2303 - 10)- 48*22), true),
			132 => (PCIN_dly(24)'last_event, tpd_PCIN_P((2303 - 10)- 48*23), true),
			133 => (PCIN_dly(23)'last_event, tpd_PCIN_P((2303 - 10)- 48*24), true),
			134 => (PCIN_dly(22)'last_event, tpd_PCIN_P((2303 - 10)- 48*25), true),
			135 => (PCIN_dly(21)'last_event, tpd_PCIN_P((2303 - 10)- 48*26), true),
			136 => (PCIN_dly(20)'last_event, tpd_PCIN_P((2303 - 10)- 48*27), true),
			137 => (PCIN_dly(19)'last_event, tpd_PCIN_P((2303 - 10)- 48*28), true),
			138 => (PCIN_dly(18)'last_event, tpd_PCIN_P((2303 - 10)- 48*29), true),
			139 => (PCIN_dly(17)'last_event, tpd_PCIN_P((2303 - 10)- 48*30), true),
			140 => (PCIN_dly(16)'last_event, tpd_PCIN_P((2303 - 10)- 48*31), true),
			141 => (PCIN_dly(15)'last_event, tpd_PCIN_P((2303 - 10)- 48*32), true),
			142 => (PCIN_dly(14)'last_event, tpd_PCIN_P((2303 - 10)- 48*33), true),
			143 => (PCIN_dly(13)'last_event, tpd_PCIN_P((2303 - 10)- 48*34), true),
			144 => (PCIN_dly(12)'last_event, tpd_PCIN_P((2303 - 10)- 48*35), true),
			145 => (PCIN_dly(11)'last_event, tpd_PCIN_P((2303 - 10)- 48*36), true),
			146 => (PCIN_dly(10)'last_event, tpd_PCIN_P((2303 - 10)- 48*37), true),
			147 => (PCIN_dly(9)'last_event, tpd_PCIN_P((2303 - 10)- 48*38), true),
			148 => (PCIN_dly(8)'last_event, tpd_PCIN_P((2303 - 10)- 48*39), true),
			149 => (PCIN_dly(7)'last_event, tpd_PCIN_P((2303 - 10)- 48*40), true),
			150 => (PCIN_dly(6)'last_event, tpd_PCIN_P((2303 - 10)- 48*41), true),
			151 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 10)- 48*42), true),
			152 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 10)- 48*43), true),
			153 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 10)- 48*44), true),
			154 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 10)- 48*45), true),
			155 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 10)- 48*46), true),
			156 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 10)- 48*47), true),
			157 => (RSTA_dly'last_event, tpd_RSTA_P(37), true),
			158 => (RSTB_dly'last_event, tpd_RSTB_P(37), true),
			159 => (RSTC_dly'last_event, tpd_RSTC_P(37), true),
			160 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(37), true),
			161 => (RSTD_dly'last_event, tpd_RSTD_P(37), true),
			162 => (RSTM_dly'last_event, tpd_RSTM_P(37), true),
			163 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(37), true),
			164 => (RSTP_dly'last_event, tpd_RSTP_P(37), true),
			165 => (CLK_dly'last_event, tpd_CLK_P(37), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(36),
         GlitchData	=> P_GlitchData(36),
         OutSignalName	=> "P(36)",
         OutTemp	=> P_zd(36),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_P((863 - 11)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_P((863 - 11)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_P((863 - 11)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_P((863 - 11)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_P((863 - 11)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_P((863 - 11)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_P((863 - 11)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_P((863 - 11)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_P((863 - 11)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_P((863 - 11)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_P((863 - 11)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_P((863 - 11)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_P((863 - 11)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_P((863 - 11)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_P((863 - 11)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_P((863 - 11)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_P((863 - 11)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_P((863 - 11)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_P((863 - 11)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_P((863 - 11)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_P((863 - 11)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_P((863 - 11)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_P((863 - 11)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_P((863 - 11)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_P((863 - 11)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_P((863 - 11)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_P((863 - 11)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_P((863 - 11)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_P((863 - 11)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_P((863 - 11)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_P((863 - 11)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_P((863 - 11)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_P((863 - 11)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_P((863 - 11)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_P((863 - 11)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_P((863 - 11)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_P((863 - 11)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_P((863 - 11)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_P((863 - 11)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_P((863 - 11)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_P((863 - 11)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_P((863 - 11)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_P((863 - 11)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_P((863 - 11)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_P((863 - 11)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_P((863 - 11)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_P((863 - 11)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_P((863 - 11)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 11)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 11)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 11)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 11)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 11)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 11)- 48*17), true),
			54 => (C_dly(36)'last_event, tpd_C_P((2303 - 11)- 48*11), true),
			55 => (C_dly(35)'last_event, tpd_C_P((2303 - 11)- 48*12), true),
			56 => (C_dly(34)'last_event, tpd_C_P((2303 - 11)- 48*13), true),
			57 => (C_dly(33)'last_event, tpd_C_P((2303 - 11)- 48*14), true),
			58 => (C_dly(32)'last_event, tpd_C_P((2303 - 11)- 48*15), true),
			59 => (C_dly(31)'last_event, tpd_C_P((2303 - 11)- 48*16), true),
			60 => (C_dly(30)'last_event, tpd_C_P((2303 - 11)- 48*17), true),
			61 => (C_dly(29)'last_event, tpd_C_P((2303 - 11)- 48*18), true),
			62 => (C_dly(28)'last_event, tpd_C_P((2303 - 11)- 48*19), true),
			63 => (C_dly(27)'last_event, tpd_C_P((2303 - 11)- 48*20), true),
			64 => (C_dly(26)'last_event, tpd_C_P((2303 - 11)- 48*21), true),
			65 => (C_dly(25)'last_event, tpd_C_P((2303 - 11)- 48*22), true),
			66 => (C_dly(24)'last_event, tpd_C_P((2303 - 11)- 48*23), true),
			67 => (C_dly(23)'last_event, tpd_C_P((2303 - 11)- 48*24), true),
			68 => (C_dly(22)'last_event, tpd_C_P((2303 - 11)- 48*25), true),
			69 => (C_dly(21)'last_event, tpd_C_P((2303 - 11)- 48*26), true),
			70 => (C_dly(20)'last_event, tpd_C_P((2303 - 11)- 48*27), true),
			71 => (C_dly(19)'last_event, tpd_C_P((2303 - 11)- 48*28), true),
			72 => (C_dly(18)'last_event, tpd_C_P((2303 - 11)- 48*29), true),
			73 => (C_dly(17)'last_event, tpd_C_P((2303 - 11)- 48*30), true),
			74 => (C_dly(16)'last_event, tpd_C_P((2303 - 11)- 48*31), true),
			75 => (C_dly(15)'last_event, tpd_C_P((2303 - 11)- 48*32), true),
			76 => (C_dly(14)'last_event, tpd_C_P((2303 - 11)- 48*33), true),
			77 => (C_dly(13)'last_event, tpd_C_P((2303 - 11)- 48*34), true),
			78 => (C_dly(12)'last_event, tpd_C_P((2303 - 11)- 48*35), true),
			79 => (C_dly(11)'last_event, tpd_C_P((2303 - 11)- 48*36), true),
			80 => (C_dly(10)'last_event, tpd_C_P((2303 - 11)- 48*37), true),
			81 => (C_dly(9)'last_event, tpd_C_P((2303 - 11)- 48*38), true),
			82 => (C_dly(8)'last_event, tpd_C_P((2303 - 11)- 48*39), true),
			83 => (C_dly(7)'last_event, tpd_C_P((2303 - 11)- 48*40), true),
			84 => (C_dly(6)'last_event, tpd_C_P((2303 - 11)- 48*41), true),
			85 => (C_dly(5)'last_event, tpd_C_P((2303 - 11)- 48*42), true),
			86 => (C_dly(4)'last_event, tpd_C_P((2303 - 11)- 48*43), true),
			87 => (C_dly(3)'last_event, tpd_C_P((2303 - 11)- 48*44), true),
			88 => (C_dly(2)'last_event, tpd_C_P((2303 - 11)- 48*45), true),
			89 => (C_dly(1)'last_event, tpd_C_P((2303 - 11)- 48*46), true),
			90 => (C_dly(0)'last_event, tpd_C_P((2303 - 11)- 48*47), true),
			91 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(36), true),
			92 => (D_dly(17)'last_event, tpd_D_P((863 - 11)- 48*0), true),
			93 => (D_dly(16)'last_event, tpd_D_P((863 - 11)- 48*1), true),
			94 => (D_dly(15)'last_event, tpd_D_P((863 - 11)- 48*2), true),
			95 => (D_dly(14)'last_event, tpd_D_P((863 - 11)- 48*3), true),
			96 => (D_dly(13)'last_event, tpd_D_P((863 - 11)- 48*4), true),
			97 => (D_dly(12)'last_event, tpd_D_P((863 - 11)- 48*5), true),
			98 => (D_dly(11)'last_event, tpd_D_P((863 - 11)- 48*6), true),
			99 => (D_dly(10)'last_event, tpd_D_P((863 - 11)- 48*7), true),
			100 => (D_dly(9)'last_event, tpd_D_P((863 - 11)- 48*8), true),
			101 => (D_dly(8)'last_event, tpd_D_P((863 - 11)- 48*9), true),
			102 => (D_dly(7)'last_event, tpd_D_P((863 - 11)- 48*10), true),
			103 => (D_dly(6)'last_event, tpd_D_P((863 - 11)- 48*11), true),
			104 => (D_dly(5)'last_event, tpd_D_P((863 - 11)- 48*12), true),
			105 => (D_dly(4)'last_event, tpd_D_P((863 - 11)- 48*13), true),
			106 => (D_dly(3)'last_event, tpd_D_P((863 - 11)- 48*14), true),
			107 => (D_dly(2)'last_event, tpd_D_P((863 - 11)- 48*15), true),
			108 => (D_dly(1)'last_event, tpd_D_P((863 - 11)- 48*16), true),
			109 => (D_dly(0)'last_event, tpd_D_P((863 - 11)- 48*17), true),
			110 => (OPMODE_dly(7)'last_event, tpd_OPMODE_P((383 - 11)- 48*0), true),
			111 => (OPMODE_dly(6)'last_event, tpd_OPMODE_P((383 - 11)- 48*1), true),
			112 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 11)- 48*2), true),
			113 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 11)- 48*3), true),
			114 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 11)- 48*4), true),
			115 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 11)- 48*5), true),
			116 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 11)- 48*6), true),
			117 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 11)- 48*7), true),
			118 => (PCIN_dly(36)'last_event, tpd_PCIN_P((2303 - 11)- 48*11), true),
			119 => (PCIN_dly(35)'last_event, tpd_PCIN_P((2303 - 11)- 48*12), true),
			120 => (PCIN_dly(34)'last_event, tpd_PCIN_P((2303 - 11)- 48*13), true),
			121 => (PCIN_dly(33)'last_event, tpd_PCIN_P((2303 - 11)- 48*14), true),
			122 => (PCIN_dly(32)'last_event, tpd_PCIN_P((2303 - 11)- 48*15), true),
			123 => (PCIN_dly(31)'last_event, tpd_PCIN_P((2303 - 11)- 48*16), true),
			124 => (PCIN_dly(30)'last_event, tpd_PCIN_P((2303 - 11)- 48*17), true),
			125 => (PCIN_dly(29)'last_event, tpd_PCIN_P((2303 - 11)- 48*18), true),
			126 => (PCIN_dly(28)'last_event, tpd_PCIN_P((2303 - 11)- 48*19), true),
			127 => (PCIN_dly(27)'last_event, tpd_PCIN_P((2303 - 11)- 48*20), true),
			128 => (PCIN_dly(26)'last_event, tpd_PCIN_P((2303 - 11)- 48*21), true),
			129 => (PCIN_dly(25)'last_event, tpd_PCIN_P((2303 - 11)- 48*22), true),
			130 => (PCIN_dly(24)'last_event, tpd_PCIN_P((2303 - 11)- 48*23), true),
			131 => (PCIN_dly(23)'last_event, tpd_PCIN_P((2303 - 11)- 48*24), true),
			132 => (PCIN_dly(22)'last_event, tpd_PCIN_P((2303 - 11)- 48*25), true),
			133 => (PCIN_dly(21)'last_event, tpd_PCIN_P((2303 - 11)- 48*26), true),
			134 => (PCIN_dly(20)'last_event, tpd_PCIN_P((2303 - 11)- 48*27), true),
			135 => (PCIN_dly(19)'last_event, tpd_PCIN_P((2303 - 11)- 48*28), true),
			136 => (PCIN_dly(18)'last_event, tpd_PCIN_P((2303 - 11)- 48*29), true),
			137 => (PCIN_dly(17)'last_event, tpd_PCIN_P((2303 - 11)- 48*30), true),
			138 => (PCIN_dly(16)'last_event, tpd_PCIN_P((2303 - 11)- 48*31), true),
			139 => (PCIN_dly(15)'last_event, tpd_PCIN_P((2303 - 11)- 48*32), true),
			140 => (PCIN_dly(14)'last_event, tpd_PCIN_P((2303 - 11)- 48*33), true),
			141 => (PCIN_dly(13)'last_event, tpd_PCIN_P((2303 - 11)- 48*34), true),
			142 => (PCIN_dly(12)'last_event, tpd_PCIN_P((2303 - 11)- 48*35), true),
			143 => (PCIN_dly(11)'last_event, tpd_PCIN_P((2303 - 11)- 48*36), true),
			144 => (PCIN_dly(10)'last_event, tpd_PCIN_P((2303 - 11)- 48*37), true),
			145 => (PCIN_dly(9)'last_event, tpd_PCIN_P((2303 - 11)- 48*38), true),
			146 => (PCIN_dly(8)'last_event, tpd_PCIN_P((2303 - 11)- 48*39), true),
			147 => (PCIN_dly(7)'last_event, tpd_PCIN_P((2303 - 11)- 48*40), true),
			148 => (PCIN_dly(6)'last_event, tpd_PCIN_P((2303 - 11)- 48*41), true),
			149 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 11)- 48*42), true),
			150 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 11)- 48*43), true),
			151 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 11)- 48*44), true),
			152 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 11)- 48*45), true),
			153 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 11)- 48*46), true),
			154 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 11)- 48*47), true),
			155 => (RSTA_dly'last_event, tpd_RSTA_P(36), true),
			156 => (RSTB_dly'last_event, tpd_RSTB_P(36), true),
			157 => (RSTC_dly'last_event, tpd_RSTC_P(36), true),
			158 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(36), true),
			159 => (RSTD_dly'last_event, tpd_RSTD_P(36), true),
			160 => (RSTM_dly'last_event, tpd_RSTM_P(36), true),
			161 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(36), true),
			162 => (RSTP_dly'last_event, tpd_RSTP_P(36), true),
			163 => (CLK_dly'last_event, tpd_CLK_P(36), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(35),
         GlitchData	=> P_GlitchData(35),
         OutSignalName	=> "P(35)",
         OutTemp	=> P_zd(35),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_P((863 - 12)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_P((863 - 12)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_P((863 - 12)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_P((863 - 12)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_P((863 - 12)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_P((863 - 12)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_P((863 - 12)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_P((863 - 12)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_P((863 - 12)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_P((863 - 12)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_P((863 - 12)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_P((863 - 12)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_P((863 - 12)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_P((863 - 12)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_P((863 - 12)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_P((863 - 12)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_P((863 - 12)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_P((863 - 12)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_P((863 - 12)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_P((863 - 12)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_P((863 - 12)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_P((863 - 12)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_P((863 - 12)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_P((863 - 12)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_P((863 - 12)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_P((863 - 12)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_P((863 - 12)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_P((863 - 12)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_P((863 - 12)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_P((863 - 12)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_P((863 - 12)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_P((863 - 12)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_P((863 - 12)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_P((863 - 12)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_P((863 - 12)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_P((863 - 12)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_P((863 - 12)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_P((863 - 12)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_P((863 - 12)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_P((863 - 12)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_P((863 - 12)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_P((863 - 12)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_P((863 - 12)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_P((863 - 12)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_P((863 - 12)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_P((863 - 12)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_P((863 - 12)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_P((863 - 12)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 12)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 12)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 12)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 12)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 12)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 12)- 48*17), true),
			54 => (C_dly(35)'last_event, tpd_C_P((2303 - 12)- 48*12), true),
			55 => (C_dly(34)'last_event, tpd_C_P((2303 - 12)- 48*13), true),
			56 => (C_dly(33)'last_event, tpd_C_P((2303 - 12)- 48*14), true),
			57 => (C_dly(32)'last_event, tpd_C_P((2303 - 12)- 48*15), true),
			58 => (C_dly(31)'last_event, tpd_C_P((2303 - 12)- 48*16), true),
			59 => (C_dly(30)'last_event, tpd_C_P((2303 - 12)- 48*17), true),
			60 => (C_dly(29)'last_event, tpd_C_P((2303 - 12)- 48*18), true),
			61 => (C_dly(28)'last_event, tpd_C_P((2303 - 12)- 48*19), true),
			62 => (C_dly(27)'last_event, tpd_C_P((2303 - 12)- 48*20), true),
			63 => (C_dly(26)'last_event, tpd_C_P((2303 - 12)- 48*21), true),
			64 => (C_dly(25)'last_event, tpd_C_P((2303 - 12)- 48*22), true),
			65 => (C_dly(24)'last_event, tpd_C_P((2303 - 12)- 48*23), true),
			66 => (C_dly(23)'last_event, tpd_C_P((2303 - 12)- 48*24), true),
			67 => (C_dly(22)'last_event, tpd_C_P((2303 - 12)- 48*25), true),
			68 => (C_dly(21)'last_event, tpd_C_P((2303 - 12)- 48*26), true),
			69 => (C_dly(20)'last_event, tpd_C_P((2303 - 12)- 48*27), true),
			70 => (C_dly(19)'last_event, tpd_C_P((2303 - 12)- 48*28), true),
			71 => (C_dly(18)'last_event, tpd_C_P((2303 - 12)- 48*29), true),
			72 => (C_dly(17)'last_event, tpd_C_P((2303 - 12)- 48*30), true),
			73 => (C_dly(16)'last_event, tpd_C_P((2303 - 12)- 48*31), true),
			74 => (C_dly(15)'last_event, tpd_C_P((2303 - 12)- 48*32), true),
			75 => (C_dly(14)'last_event, tpd_C_P((2303 - 12)- 48*33), true),
			76 => (C_dly(13)'last_event, tpd_C_P((2303 - 12)- 48*34), true),
			77 => (C_dly(12)'last_event, tpd_C_P((2303 - 12)- 48*35), true),
			78 => (C_dly(11)'last_event, tpd_C_P((2303 - 12)- 48*36), true),
			79 => (C_dly(10)'last_event, tpd_C_P((2303 - 12)- 48*37), true),
			80 => (C_dly(9)'last_event, tpd_C_P((2303 - 12)- 48*38), true),
			81 => (C_dly(8)'last_event, tpd_C_P((2303 - 12)- 48*39), true),
			82 => (C_dly(7)'last_event, tpd_C_P((2303 - 12)- 48*40), true),
			83 => (C_dly(6)'last_event, tpd_C_P((2303 - 12)- 48*41), true),
			84 => (C_dly(5)'last_event, tpd_C_P((2303 - 12)- 48*42), true),
			85 => (C_dly(4)'last_event, tpd_C_P((2303 - 12)- 48*43), true),
			86 => (C_dly(3)'last_event, tpd_C_P((2303 - 12)- 48*44), true),
			87 => (C_dly(2)'last_event, tpd_C_P((2303 - 12)- 48*45), true),
			88 => (C_dly(1)'last_event, tpd_C_P((2303 - 12)- 48*46), true),
			89 => (C_dly(0)'last_event, tpd_C_P((2303 - 12)- 48*47), true),
			90 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(35), true),
			91 => (D_dly(17)'last_event, tpd_D_P((863 - 12)- 48*0), true),
			92 => (D_dly(16)'last_event, tpd_D_P((863 - 12)- 48*1), true),
			93 => (D_dly(15)'last_event, tpd_D_P((863 - 12)- 48*2), true),
			94 => (D_dly(14)'last_event, tpd_D_P((863 - 12)- 48*3), true),
			95 => (D_dly(13)'last_event, tpd_D_P((863 - 12)- 48*4), true),
			96 => (D_dly(12)'last_event, tpd_D_P((863 - 12)- 48*5), true),
			97 => (D_dly(11)'last_event, tpd_D_P((863 - 12)- 48*6), true),
			98 => (D_dly(10)'last_event, tpd_D_P((863 - 12)- 48*7), true),
			99 => (D_dly(9)'last_event, tpd_D_P((863 - 12)- 48*8), true),
			100 => (D_dly(8)'last_event, tpd_D_P((863 - 12)- 48*9), true),
			101 => (D_dly(7)'last_event, tpd_D_P((863 - 12)- 48*10), true),
			102 => (D_dly(6)'last_event, tpd_D_P((863 - 12)- 48*11), true),
			103 => (D_dly(5)'last_event, tpd_D_P((863 - 12)- 48*12), true),
			104 => (D_dly(4)'last_event, tpd_D_P((863 - 12)- 48*13), true),
			105 => (D_dly(3)'last_event, tpd_D_P((863 - 12)- 48*14), true),
			106 => (D_dly(2)'last_event, tpd_D_P((863 - 12)- 48*15), true),
			107 => (D_dly(1)'last_event, tpd_D_P((863 - 12)- 48*16), true),
			108 => (D_dly(0)'last_event, tpd_D_P((863 - 12)- 48*17), true),
			109 => (OPMODE_dly(7)'last_event, tpd_OPMODE_P((383 - 12)- 48*0), true),
			110 => (OPMODE_dly(6)'last_event, tpd_OPMODE_P((383 - 12)- 48*1), true),
			111 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 12)- 48*2), true),
			112 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 12)- 48*3), true),
			113 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 12)- 48*4), true),
			114 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 12)- 48*5), true),
			115 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 12)- 48*6), true),
			116 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 12)- 48*7), true),
			117 => (PCIN_dly(35)'last_event, tpd_PCIN_P((2303 - 12)- 48*12), true),
			118 => (PCIN_dly(34)'last_event, tpd_PCIN_P((2303 - 12)- 48*13), true),
			119 => (PCIN_dly(33)'last_event, tpd_PCIN_P((2303 - 12)- 48*14), true),
			120 => (PCIN_dly(32)'last_event, tpd_PCIN_P((2303 - 12)- 48*15), true),
			121 => (PCIN_dly(31)'last_event, tpd_PCIN_P((2303 - 12)- 48*16), true),
			122 => (PCIN_dly(30)'last_event, tpd_PCIN_P((2303 - 12)- 48*17), true),
			123 => (PCIN_dly(29)'last_event, tpd_PCIN_P((2303 - 12)- 48*18), true),
			124 => (PCIN_dly(28)'last_event, tpd_PCIN_P((2303 - 12)- 48*19), true),
			125 => (PCIN_dly(27)'last_event, tpd_PCIN_P((2303 - 12)- 48*20), true),
			126 => (PCIN_dly(26)'last_event, tpd_PCIN_P((2303 - 12)- 48*21), true),
			127 => (PCIN_dly(25)'last_event, tpd_PCIN_P((2303 - 12)- 48*22), true),
			128 => (PCIN_dly(24)'last_event, tpd_PCIN_P((2303 - 12)- 48*23), true),
			129 => (PCIN_dly(23)'last_event, tpd_PCIN_P((2303 - 12)- 48*24), true),
			130 => (PCIN_dly(22)'last_event, tpd_PCIN_P((2303 - 12)- 48*25), true),
			131 => (PCIN_dly(21)'last_event, tpd_PCIN_P((2303 - 12)- 48*26), true),
			132 => (PCIN_dly(20)'last_event, tpd_PCIN_P((2303 - 12)- 48*27), true),
			133 => (PCIN_dly(19)'last_event, tpd_PCIN_P((2303 - 12)- 48*28), true),
			134 => (PCIN_dly(18)'last_event, tpd_PCIN_P((2303 - 12)- 48*29), true),
			135 => (PCIN_dly(17)'last_event, tpd_PCIN_P((2303 - 12)- 48*30), true),
			136 => (PCIN_dly(16)'last_event, tpd_PCIN_P((2303 - 12)- 48*31), true),
			137 => (PCIN_dly(15)'last_event, tpd_PCIN_P((2303 - 12)- 48*32), true),
			138 => (PCIN_dly(14)'last_event, tpd_PCIN_P((2303 - 12)- 48*33), true),
			139 => (PCIN_dly(13)'last_event, tpd_PCIN_P((2303 - 12)- 48*34), true),
			140 => (PCIN_dly(12)'last_event, tpd_PCIN_P((2303 - 12)- 48*35), true),
			141 => (PCIN_dly(11)'last_event, tpd_PCIN_P((2303 - 12)- 48*36), true),
			142 => (PCIN_dly(10)'last_event, tpd_PCIN_P((2303 - 12)- 48*37), true),
			143 => (PCIN_dly(9)'last_event, tpd_PCIN_P((2303 - 12)- 48*38), true),
			144 => (PCIN_dly(8)'last_event, tpd_PCIN_P((2303 - 12)- 48*39), true),
			145 => (PCIN_dly(7)'last_event, tpd_PCIN_P((2303 - 12)- 48*40), true),
			146 => (PCIN_dly(6)'last_event, tpd_PCIN_P((2303 - 12)- 48*41), true),
			147 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 12)- 48*42), true),
			148 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 12)- 48*43), true),
			149 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 12)- 48*44), true),
			150 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 12)- 48*45), true),
			151 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 12)- 48*46), true),
			152 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 12)- 48*47), true),
			153 => (RSTA_dly'last_event, tpd_RSTA_P(35), true),
			154 => (RSTB_dly'last_event, tpd_RSTB_P(35), true),
			155 => (RSTC_dly'last_event, tpd_RSTC_P(35), true),
			156 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(35), true),
			157 => (RSTD_dly'last_event, tpd_RSTD_P(35), true),
			158 => (RSTM_dly'last_event, tpd_RSTM_P(35), true),
			159 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(35), true),
			160 => (RSTP_dly'last_event, tpd_RSTP_P(35), true),
			161 => (CLK_dly'last_event, tpd_CLK_P(35), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(34),
         GlitchData	=> P_GlitchData(34),
         OutSignalName	=> "P(34)",
         OutTemp	=> P_zd(34),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_P((863 - 13)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_P((863 - 13)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_P((863 - 13)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_P((863 - 13)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_P((863 - 13)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_P((863 - 13)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_P((863 - 13)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_P((863 - 13)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_P((863 - 13)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_P((863 - 13)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_P((863 - 13)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_P((863 - 13)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_P((863 - 13)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_P((863 - 13)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_P((863 - 13)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_P((863 - 13)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_P((863 - 13)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_P((863 - 13)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_P((863 - 13)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_P((863 - 13)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_P((863 - 13)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_P((863 - 13)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_P((863 - 13)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_P((863 - 13)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_P((863 - 13)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_P((863 - 13)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_P((863 - 13)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_P((863 - 13)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_P((863 - 13)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_P((863 - 13)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_P((863 - 13)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_P((863 - 13)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_P((863 - 13)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_P((863 - 13)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_P((863 - 13)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_P((863 - 13)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_P((863 - 13)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_P((863 - 13)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_P((863 - 13)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_P((863 - 13)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_P((863 - 13)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_P((863 - 13)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_P((863 - 13)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_P((863 - 13)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_P((863 - 13)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_P((863 - 13)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_P((863 - 13)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_P((863 - 13)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 13)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 13)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 13)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 13)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 13)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 13)- 48*17), true),
			54 => (C_dly(34)'last_event, tpd_C_P((2303 - 13)- 48*13), true),
			55 => (C_dly(33)'last_event, tpd_C_P((2303 - 13)- 48*14), true),
			56 => (C_dly(32)'last_event, tpd_C_P((2303 - 13)- 48*15), true),
			57 => (C_dly(31)'last_event, tpd_C_P((2303 - 13)- 48*16), true),
			58 => (C_dly(30)'last_event, tpd_C_P((2303 - 13)- 48*17), true),
			59 => (C_dly(29)'last_event, tpd_C_P((2303 - 13)- 48*18), true),
			60 => (C_dly(28)'last_event, tpd_C_P((2303 - 13)- 48*19), true),
			61 => (C_dly(27)'last_event, tpd_C_P((2303 - 13)- 48*20), true),
			62 => (C_dly(26)'last_event, tpd_C_P((2303 - 13)- 48*21), true),
			63 => (C_dly(25)'last_event, tpd_C_P((2303 - 13)- 48*22), true),
			64 => (C_dly(24)'last_event, tpd_C_P((2303 - 13)- 48*23), true),
			65 => (C_dly(23)'last_event, tpd_C_P((2303 - 13)- 48*24), true),
			66 => (C_dly(22)'last_event, tpd_C_P((2303 - 13)- 48*25), true),
			67 => (C_dly(21)'last_event, tpd_C_P((2303 - 13)- 48*26), true),
			68 => (C_dly(20)'last_event, tpd_C_P((2303 - 13)- 48*27), true),
			69 => (C_dly(19)'last_event, tpd_C_P((2303 - 13)- 48*28), true),
			70 => (C_dly(18)'last_event, tpd_C_P((2303 - 13)- 48*29), true),
			71 => (C_dly(17)'last_event, tpd_C_P((2303 - 13)- 48*30), true),
			72 => (C_dly(16)'last_event, tpd_C_P((2303 - 13)- 48*31), true),
			73 => (C_dly(15)'last_event, tpd_C_P((2303 - 13)- 48*32), true),
			74 => (C_dly(14)'last_event, tpd_C_P((2303 - 13)- 48*33), true),
			75 => (C_dly(13)'last_event, tpd_C_P((2303 - 13)- 48*34), true),
			76 => (C_dly(12)'last_event, tpd_C_P((2303 - 13)- 48*35), true),
			77 => (C_dly(11)'last_event, tpd_C_P((2303 - 13)- 48*36), true),
			78 => (C_dly(10)'last_event, tpd_C_P((2303 - 13)- 48*37), true),
			79 => (C_dly(9)'last_event, tpd_C_P((2303 - 13)- 48*38), true),
			80 => (C_dly(8)'last_event, tpd_C_P((2303 - 13)- 48*39), true),
			81 => (C_dly(7)'last_event, tpd_C_P((2303 - 13)- 48*40), true),
			82 => (C_dly(6)'last_event, tpd_C_P((2303 - 13)- 48*41), true),
			83 => (C_dly(5)'last_event, tpd_C_P((2303 - 13)- 48*42), true),
			84 => (C_dly(4)'last_event, tpd_C_P((2303 - 13)- 48*43), true),
			85 => (C_dly(3)'last_event, tpd_C_P((2303 - 13)- 48*44), true),
			86 => (C_dly(2)'last_event, tpd_C_P((2303 - 13)- 48*45), true),
			87 => (C_dly(1)'last_event, tpd_C_P((2303 - 13)- 48*46), true),
			88 => (C_dly(0)'last_event, tpd_C_P((2303 - 13)- 48*47), true),
			89 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(34), true),
			90 => (D_dly(17)'last_event, tpd_D_P((863 - 13)- 48*0), true),
			91 => (D_dly(16)'last_event, tpd_D_P((863 - 13)- 48*1), true),
			92 => (D_dly(15)'last_event, tpd_D_P((863 - 13)- 48*2), true),
			93 => (D_dly(14)'last_event, tpd_D_P((863 - 13)- 48*3), true),
			94 => (D_dly(13)'last_event, tpd_D_P((863 - 13)- 48*4), true),
			95 => (D_dly(12)'last_event, tpd_D_P((863 - 13)- 48*5), true),
			96 => (D_dly(11)'last_event, tpd_D_P((863 - 13)- 48*6), true),
			97 => (D_dly(10)'last_event, tpd_D_P((863 - 13)- 48*7), true),
			98 => (D_dly(9)'last_event, tpd_D_P((863 - 13)- 48*8), true),
			99 => (D_dly(8)'last_event, tpd_D_P((863 - 13)- 48*9), true),
			100 => (D_dly(7)'last_event, tpd_D_P((863 - 13)- 48*10), true),
			101 => (D_dly(6)'last_event, tpd_D_P((863 - 13)- 48*11), true),
			102 => (D_dly(5)'last_event, tpd_D_P((863 - 13)- 48*12), true),
			103 => (D_dly(4)'last_event, tpd_D_P((863 - 13)- 48*13), true),
			104 => (D_dly(3)'last_event, tpd_D_P((863 - 13)- 48*14), true),
			105 => (D_dly(2)'last_event, tpd_D_P((863 - 13)- 48*15), true),
			106 => (D_dly(1)'last_event, tpd_D_P((863 - 13)- 48*16), true),
			107 => (D_dly(0)'last_event, tpd_D_P((863 - 13)- 48*17), true),
			108 => (OPMODE_dly(7)'last_event, tpd_OPMODE_P((383 - 13)- 48*0), true),
			109 => (OPMODE_dly(6)'last_event, tpd_OPMODE_P((383 - 13)- 48*1), true),
			110 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 13)- 48*2), true),
			111 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 13)- 48*3), true),
			112 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 13)- 48*4), true),
			113 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 13)- 48*5), true),
			114 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 13)- 48*6), true),
			115 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 13)- 48*7), true),
			116 => (PCIN_dly(34)'last_event, tpd_PCIN_P((2303 - 13)- 48*13), true),
			117 => (PCIN_dly(33)'last_event, tpd_PCIN_P((2303 - 13)- 48*14), true),
			118 => (PCIN_dly(32)'last_event, tpd_PCIN_P((2303 - 13)- 48*15), true),
			119 => (PCIN_dly(31)'last_event, tpd_PCIN_P((2303 - 13)- 48*16), true),
			120 => (PCIN_dly(30)'last_event, tpd_PCIN_P((2303 - 13)- 48*17), true),
			121 => (PCIN_dly(29)'last_event, tpd_PCIN_P((2303 - 13)- 48*18), true),
			122 => (PCIN_dly(28)'last_event, tpd_PCIN_P((2303 - 13)- 48*19), true),
			123 => (PCIN_dly(27)'last_event, tpd_PCIN_P((2303 - 13)- 48*20), true),
			124 => (PCIN_dly(26)'last_event, tpd_PCIN_P((2303 - 13)- 48*21), true),
			125 => (PCIN_dly(25)'last_event, tpd_PCIN_P((2303 - 13)- 48*22), true),
			126 => (PCIN_dly(24)'last_event, tpd_PCIN_P((2303 - 13)- 48*23), true),
			127 => (PCIN_dly(23)'last_event, tpd_PCIN_P((2303 - 13)- 48*24), true),
			128 => (PCIN_dly(22)'last_event, tpd_PCIN_P((2303 - 13)- 48*25), true),
			129 => (PCIN_dly(21)'last_event, tpd_PCIN_P((2303 - 13)- 48*26), true),
			130 => (PCIN_dly(20)'last_event, tpd_PCIN_P((2303 - 13)- 48*27), true),
			131 => (PCIN_dly(19)'last_event, tpd_PCIN_P((2303 - 13)- 48*28), true),
			132 => (PCIN_dly(18)'last_event, tpd_PCIN_P((2303 - 13)- 48*29), true),
			133 => (PCIN_dly(17)'last_event, tpd_PCIN_P((2303 - 13)- 48*30), true),
			134 => (PCIN_dly(16)'last_event, tpd_PCIN_P((2303 - 13)- 48*31), true),
			135 => (PCIN_dly(15)'last_event, tpd_PCIN_P((2303 - 13)- 48*32), true),
			136 => (PCIN_dly(14)'last_event, tpd_PCIN_P((2303 - 13)- 48*33), true),
			137 => (PCIN_dly(13)'last_event, tpd_PCIN_P((2303 - 13)- 48*34), true),
			138 => (PCIN_dly(12)'last_event, tpd_PCIN_P((2303 - 13)- 48*35), true),
			139 => (PCIN_dly(11)'last_event, tpd_PCIN_P((2303 - 13)- 48*36), true),
			140 => (PCIN_dly(10)'last_event, tpd_PCIN_P((2303 - 13)- 48*37), true),
			141 => (PCIN_dly(9)'last_event, tpd_PCIN_P((2303 - 13)- 48*38), true),
			142 => (PCIN_dly(8)'last_event, tpd_PCIN_P((2303 - 13)- 48*39), true),
			143 => (PCIN_dly(7)'last_event, tpd_PCIN_P((2303 - 13)- 48*40), true),
			144 => (PCIN_dly(6)'last_event, tpd_PCIN_P((2303 - 13)- 48*41), true),
			145 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 13)- 48*42), true),
			146 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 13)- 48*43), true),
			147 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 13)- 48*44), true),
			148 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 13)- 48*45), true),
			149 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 13)- 48*46), true),
			150 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 13)- 48*47), true),
			151 => (RSTA_dly'last_event, tpd_RSTA_P(34), true),
			152 => (RSTB_dly'last_event, tpd_RSTB_P(34), true),
			153 => (RSTC_dly'last_event, tpd_RSTC_P(34), true),
			154 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(34), true),
			155 => (RSTD_dly'last_event, tpd_RSTD_P(34), true),
			156 => (RSTM_dly'last_event, tpd_RSTM_P(34), true),
			157 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(34), true),
			158 => (RSTP_dly'last_event, tpd_RSTP_P(34), true),
			159 => (CLK_dly'last_event, tpd_CLK_P(34), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(33),
         GlitchData	=> P_GlitchData(33),
         OutSignalName	=> "P(33)",
         OutTemp	=> P_zd(33),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_P((863 - 14)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_P((863 - 14)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_P((863 - 14)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_P((863 - 14)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_P((863 - 14)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_P((863 - 14)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_P((863 - 14)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_P((863 - 14)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_P((863 - 14)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_P((863 - 14)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_P((863 - 14)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_P((863 - 14)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_P((863 - 14)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_P((863 - 14)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_P((863 - 14)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_P((863 - 14)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_P((863 - 14)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_P((863 - 14)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_P((863 - 14)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_P((863 - 14)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_P((863 - 14)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_P((863 - 14)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_P((863 - 14)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_P((863 - 14)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_P((863 - 14)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_P((863 - 14)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_P((863 - 14)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_P((863 - 14)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_P((863 - 14)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_P((863 - 14)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_P((863 - 14)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_P((863 - 14)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_P((863 - 14)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_P((863 - 14)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_P((863 - 14)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_P((863 - 14)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_P((863 - 14)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_P((863 - 14)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_P((863 - 14)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_P((863 - 14)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_P((863 - 14)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_P((863 - 14)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_P((863 - 14)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_P((863 - 14)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_P((863 - 14)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_P((863 - 14)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_P((863 - 14)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_P((863 - 14)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 14)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 14)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 14)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 14)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 14)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 14)- 48*17), true),
			54 => (C_dly(33)'last_event, tpd_C_P((2303 - 14)- 48*14), true),
			55 => (C_dly(32)'last_event, tpd_C_P((2303 - 14)- 48*15), true),
			56 => (C_dly(31)'last_event, tpd_C_P((2303 - 14)- 48*16), true),
			57 => (C_dly(30)'last_event, tpd_C_P((2303 - 14)- 48*17), true),
			58 => (C_dly(29)'last_event, tpd_C_P((2303 - 14)- 48*18), true),
			59 => (C_dly(28)'last_event, tpd_C_P((2303 - 14)- 48*19), true),
			60 => (C_dly(27)'last_event, tpd_C_P((2303 - 14)- 48*20), true),
			61 => (C_dly(26)'last_event, tpd_C_P((2303 - 14)- 48*21), true),
			62 => (C_dly(25)'last_event, tpd_C_P((2303 - 14)- 48*22), true),
			63 => (C_dly(24)'last_event, tpd_C_P((2303 - 14)- 48*23), true),
			64 => (C_dly(23)'last_event, tpd_C_P((2303 - 14)- 48*24), true),
			65 => (C_dly(22)'last_event, tpd_C_P((2303 - 14)- 48*25), true),
			66 => (C_dly(21)'last_event, tpd_C_P((2303 - 14)- 48*26), true),
			67 => (C_dly(20)'last_event, tpd_C_P((2303 - 14)- 48*27), true),
			68 => (C_dly(19)'last_event, tpd_C_P((2303 - 14)- 48*28), true),
			69 => (C_dly(18)'last_event, tpd_C_P((2303 - 14)- 48*29), true),
			70 => (C_dly(17)'last_event, tpd_C_P((2303 - 14)- 48*30), true),
			71 => (C_dly(16)'last_event, tpd_C_P((2303 - 14)- 48*31), true),
			72 => (C_dly(15)'last_event, tpd_C_P((2303 - 14)- 48*32), true),
			73 => (C_dly(14)'last_event, tpd_C_P((2303 - 14)- 48*33), true),
			74 => (C_dly(13)'last_event, tpd_C_P((2303 - 14)- 48*34), true),
			75 => (C_dly(12)'last_event, tpd_C_P((2303 - 14)- 48*35), true),
			76 => (C_dly(11)'last_event, tpd_C_P((2303 - 14)- 48*36), true),
			77 => (C_dly(10)'last_event, tpd_C_P((2303 - 14)- 48*37), true),
			78 => (C_dly(9)'last_event, tpd_C_P((2303 - 14)- 48*38), true),
			79 => (C_dly(8)'last_event, tpd_C_P((2303 - 14)- 48*39), true),
			80 => (C_dly(7)'last_event, tpd_C_P((2303 - 14)- 48*40), true),
			81 => (C_dly(6)'last_event, tpd_C_P((2303 - 14)- 48*41), true),
			82 => (C_dly(5)'last_event, tpd_C_P((2303 - 14)- 48*42), true),
			83 => (C_dly(4)'last_event, tpd_C_P((2303 - 14)- 48*43), true),
			84 => (C_dly(3)'last_event, tpd_C_P((2303 - 14)- 48*44), true),
			85 => (C_dly(2)'last_event, tpd_C_P((2303 - 14)- 48*45), true),
			86 => (C_dly(1)'last_event, tpd_C_P((2303 - 14)- 48*46), true),
			87 => (C_dly(0)'last_event, tpd_C_P((2303 - 14)- 48*47), true),
			88 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(33), true),
			89 => (D_dly(17)'last_event, tpd_D_P((863 - 14)- 48*0), true),
			90 => (D_dly(16)'last_event, tpd_D_P((863 - 14)- 48*1), true),
			91 => (D_dly(15)'last_event, tpd_D_P((863 - 14)- 48*2), true),
			92 => (D_dly(14)'last_event, tpd_D_P((863 - 14)- 48*3), true),
			93 => (D_dly(13)'last_event, tpd_D_P((863 - 14)- 48*4), true),
			94 => (D_dly(12)'last_event, tpd_D_P((863 - 14)- 48*5), true),
			95 => (D_dly(11)'last_event, tpd_D_P((863 - 14)- 48*6), true),
			96 => (D_dly(10)'last_event, tpd_D_P((863 - 14)- 48*7), true),
			97 => (D_dly(9)'last_event, tpd_D_P((863 - 14)- 48*8), true),
			98 => (D_dly(8)'last_event, tpd_D_P((863 - 14)- 48*9), true),
			99 => (D_dly(7)'last_event, tpd_D_P((863 - 14)- 48*10), true),
			100 => (D_dly(6)'last_event, tpd_D_P((863 - 14)- 48*11), true),
			101 => (D_dly(5)'last_event, tpd_D_P((863 - 14)- 48*12), true),
			102 => (D_dly(4)'last_event, tpd_D_P((863 - 14)- 48*13), true),
			103 => (D_dly(3)'last_event, tpd_D_P((863 - 14)- 48*14), true),
			104 => (D_dly(2)'last_event, tpd_D_P((863 - 14)- 48*15), true),
			105 => (D_dly(1)'last_event, tpd_D_P((863 - 14)- 48*16), true),
			106 => (D_dly(0)'last_event, tpd_D_P((863 - 14)- 48*17), true),
			107 => (OPMODE_dly(7)'last_event, tpd_OPMODE_P((383 - 14)- 48*0), true),
			108 => (OPMODE_dly(6)'last_event, tpd_OPMODE_P((383 - 14)- 48*1), true),
			109 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 14)- 48*2), true),
			110 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 14)- 48*3), true),
			111 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 14)- 48*4), true),
			112 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 14)- 48*5), true),
			113 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 14)- 48*6), true),
			114 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 14)- 48*7), true),
			115 => (PCIN_dly(33)'last_event, tpd_PCIN_P((2303 - 14)- 48*14), true),
			116 => (PCIN_dly(32)'last_event, tpd_PCIN_P((2303 - 14)- 48*15), true),
			117 => (PCIN_dly(31)'last_event, tpd_PCIN_P((2303 - 14)- 48*16), true),
			118 => (PCIN_dly(30)'last_event, tpd_PCIN_P((2303 - 14)- 48*17), true),
			119 => (PCIN_dly(29)'last_event, tpd_PCIN_P((2303 - 14)- 48*18), true),
			120 => (PCIN_dly(28)'last_event, tpd_PCIN_P((2303 - 14)- 48*19), true),
			121 => (PCIN_dly(27)'last_event, tpd_PCIN_P((2303 - 14)- 48*20), true),
			122 => (PCIN_dly(26)'last_event, tpd_PCIN_P((2303 - 14)- 48*21), true),
			123 => (PCIN_dly(25)'last_event, tpd_PCIN_P((2303 - 14)- 48*22), true),
			124 => (PCIN_dly(24)'last_event, tpd_PCIN_P((2303 - 14)- 48*23), true),
			125 => (PCIN_dly(23)'last_event, tpd_PCIN_P((2303 - 14)- 48*24), true),
			126 => (PCIN_dly(22)'last_event, tpd_PCIN_P((2303 - 14)- 48*25), true),
			127 => (PCIN_dly(21)'last_event, tpd_PCIN_P((2303 - 14)- 48*26), true),
			128 => (PCIN_dly(20)'last_event, tpd_PCIN_P((2303 - 14)- 48*27), true),
			129 => (PCIN_dly(19)'last_event, tpd_PCIN_P((2303 - 14)- 48*28), true),
			130 => (PCIN_dly(18)'last_event, tpd_PCIN_P((2303 - 14)- 48*29), true),
			131 => (PCIN_dly(17)'last_event, tpd_PCIN_P((2303 - 14)- 48*30), true),
			132 => (PCIN_dly(16)'last_event, tpd_PCIN_P((2303 - 14)- 48*31), true),
			133 => (PCIN_dly(15)'last_event, tpd_PCIN_P((2303 - 14)- 48*32), true),
			134 => (PCIN_dly(14)'last_event, tpd_PCIN_P((2303 - 14)- 48*33), true),
			135 => (PCIN_dly(13)'last_event, tpd_PCIN_P((2303 - 14)- 48*34), true),
			136 => (PCIN_dly(12)'last_event, tpd_PCIN_P((2303 - 14)- 48*35), true),
			137 => (PCIN_dly(11)'last_event, tpd_PCIN_P((2303 - 14)- 48*36), true),
			138 => (PCIN_dly(10)'last_event, tpd_PCIN_P((2303 - 14)- 48*37), true),
			139 => (PCIN_dly(9)'last_event, tpd_PCIN_P((2303 - 14)- 48*38), true),
			140 => (PCIN_dly(8)'last_event, tpd_PCIN_P((2303 - 14)- 48*39), true),
			141 => (PCIN_dly(7)'last_event, tpd_PCIN_P((2303 - 14)- 48*40), true),
			142 => (PCIN_dly(6)'last_event, tpd_PCIN_P((2303 - 14)- 48*41), true),
			143 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 14)- 48*42), true),
			144 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 14)- 48*43), true),
			145 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 14)- 48*44), true),
			146 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 14)- 48*45), true),
			147 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 14)- 48*46), true),
			148 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 14)- 48*47), true),
			149 => (RSTA_dly'last_event, tpd_RSTA_P(33), true),
			150 => (RSTB_dly'last_event, tpd_RSTB_P(33), true),
			151 => (RSTC_dly'last_event, tpd_RSTC_P(33), true),
			152 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(33), true),
			153 => (RSTD_dly'last_event, tpd_RSTD_P(33), true),
			154 => (RSTM_dly'last_event, tpd_RSTM_P(33), true),
			155 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(33), true),
			156 => (RSTP_dly'last_event, tpd_RSTP_P(33), true),
			157 => (CLK_dly'last_event, tpd_CLK_P(33), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(32),
         GlitchData	=> P_GlitchData(32),
         OutSignalName	=> "P(32)",
         OutTemp	=> P_zd(32),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_P((863 - 15)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_P((863 - 15)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_P((863 - 15)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_P((863 - 15)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_P((863 - 15)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_P((863 - 15)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_P((863 - 15)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_P((863 - 15)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_P((863 - 15)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_P((863 - 15)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_P((863 - 15)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_P((863 - 15)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_P((863 - 15)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_P((863 - 15)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_P((863 - 15)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_P((863 - 15)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_P((863 - 15)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_P((863 - 15)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_P((863 - 15)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_P((863 - 15)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_P((863 - 15)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_P((863 - 15)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_P((863 - 15)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_P((863 - 15)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_P((863 - 15)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_P((863 - 15)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_P((863 - 15)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_P((863 - 15)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_P((863 - 15)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_P((863 - 15)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_P((863 - 15)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_P((863 - 15)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_P((863 - 15)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_P((863 - 15)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_P((863 - 15)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_P((863 - 15)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_P((863 - 15)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_P((863 - 15)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_P((863 - 15)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_P((863 - 15)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_P((863 - 15)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_P((863 - 15)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_P((863 - 15)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_P((863 - 15)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_P((863 - 15)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_P((863 - 15)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_P((863 - 15)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_P((863 - 15)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 15)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 15)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 15)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 15)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 15)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 15)- 48*17), true),
			54 => (C_dly(32)'last_event, tpd_C_P((2303 - 15)- 48*15), true),
			55 => (C_dly(31)'last_event, tpd_C_P((2303 - 15)- 48*16), true),
			56 => (C_dly(30)'last_event, tpd_C_P((2303 - 15)- 48*17), true),
			57 => (C_dly(29)'last_event, tpd_C_P((2303 - 15)- 48*18), true),
			58 => (C_dly(28)'last_event, tpd_C_P((2303 - 15)- 48*19), true),
			59 => (C_dly(27)'last_event, tpd_C_P((2303 - 15)- 48*20), true),
			60 => (C_dly(26)'last_event, tpd_C_P((2303 - 15)- 48*21), true),
			61 => (C_dly(25)'last_event, tpd_C_P((2303 - 15)- 48*22), true),
			62 => (C_dly(24)'last_event, tpd_C_P((2303 - 15)- 48*23), true),
			63 => (C_dly(23)'last_event, tpd_C_P((2303 - 15)- 48*24), true),
			64 => (C_dly(22)'last_event, tpd_C_P((2303 - 15)- 48*25), true),
			65 => (C_dly(21)'last_event, tpd_C_P((2303 - 15)- 48*26), true),
			66 => (C_dly(20)'last_event, tpd_C_P((2303 - 15)- 48*27), true),
			67 => (C_dly(19)'last_event, tpd_C_P((2303 - 15)- 48*28), true),
			68 => (C_dly(18)'last_event, tpd_C_P((2303 - 15)- 48*29), true),
			69 => (C_dly(17)'last_event, tpd_C_P((2303 - 15)- 48*30), true),
			70 => (C_dly(16)'last_event, tpd_C_P((2303 - 15)- 48*31), true),
			71 => (C_dly(15)'last_event, tpd_C_P((2303 - 15)- 48*32), true),
			72 => (C_dly(14)'last_event, tpd_C_P((2303 - 15)- 48*33), true),
			73 => (C_dly(13)'last_event, tpd_C_P((2303 - 15)- 48*34), true),
			74 => (C_dly(12)'last_event, tpd_C_P((2303 - 15)- 48*35), true),
			75 => (C_dly(11)'last_event, tpd_C_P((2303 - 15)- 48*36), true),
			76 => (C_dly(10)'last_event, tpd_C_P((2303 - 15)- 48*37), true),
			77 => (C_dly(9)'last_event, tpd_C_P((2303 - 15)- 48*38), true),
			78 => (C_dly(8)'last_event, tpd_C_P((2303 - 15)- 48*39), true),
			79 => (C_dly(7)'last_event, tpd_C_P((2303 - 15)- 48*40), true),
			80 => (C_dly(6)'last_event, tpd_C_P((2303 - 15)- 48*41), true),
			81 => (C_dly(5)'last_event, tpd_C_P((2303 - 15)- 48*42), true),
			82 => (C_dly(4)'last_event, tpd_C_P((2303 - 15)- 48*43), true),
			83 => (C_dly(3)'last_event, tpd_C_P((2303 - 15)- 48*44), true),
			84 => (C_dly(2)'last_event, tpd_C_P((2303 - 15)- 48*45), true),
			85 => (C_dly(1)'last_event, tpd_C_P((2303 - 15)- 48*46), true),
			86 => (C_dly(0)'last_event, tpd_C_P((2303 - 15)- 48*47), true),
			87 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(32), true),
			88 => (D_dly(17)'last_event, tpd_D_P((863 - 15)- 48*0), true),
			89 => (D_dly(16)'last_event, tpd_D_P((863 - 15)- 48*1), true),
			90 => (D_dly(15)'last_event, tpd_D_P((863 - 15)- 48*2), true),
			91 => (D_dly(14)'last_event, tpd_D_P((863 - 15)- 48*3), true),
			92 => (D_dly(13)'last_event, tpd_D_P((863 - 15)- 48*4), true),
			93 => (D_dly(12)'last_event, tpd_D_P((863 - 15)- 48*5), true),
			94 => (D_dly(11)'last_event, tpd_D_P((863 - 15)- 48*6), true),
			95 => (D_dly(10)'last_event, tpd_D_P((863 - 15)- 48*7), true),
			96 => (D_dly(9)'last_event, tpd_D_P((863 - 15)- 48*8), true),
			97 => (D_dly(8)'last_event, tpd_D_P((863 - 15)- 48*9), true),
			98 => (D_dly(7)'last_event, tpd_D_P((863 - 15)- 48*10), true),
			99 => (D_dly(6)'last_event, tpd_D_P((863 - 15)- 48*11), true),
			100 => (D_dly(5)'last_event, tpd_D_P((863 - 15)- 48*12), true),
			101 => (D_dly(4)'last_event, tpd_D_P((863 - 15)- 48*13), true),
			102 => (D_dly(3)'last_event, tpd_D_P((863 - 15)- 48*14), true),
			103 => (D_dly(2)'last_event, tpd_D_P((863 - 15)- 48*15), true),
			104 => (D_dly(1)'last_event, tpd_D_P((863 - 15)- 48*16), true),
			105 => (D_dly(0)'last_event, tpd_D_P((863 - 15)- 48*17), true),
			106 => (OPMODE_dly(7)'last_event, tpd_OPMODE_P((383 - 15)- 48*0), true),
			107 => (OPMODE_dly(6)'last_event, tpd_OPMODE_P((383 - 15)- 48*1), true),
			108 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 15)- 48*2), true),
			109 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 15)- 48*3), true),
			110 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 15)- 48*4), true),
			111 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 15)- 48*5), true),
			112 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 15)- 48*6), true),
			113 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 15)- 48*7), true),
			114 => (PCIN_dly(32)'last_event, tpd_PCIN_P((2303 - 15)- 48*15), true),
			115 => (PCIN_dly(31)'last_event, tpd_PCIN_P((2303 - 15)- 48*16), true),
			116 => (PCIN_dly(30)'last_event, tpd_PCIN_P((2303 - 15)- 48*17), true),
			117 => (PCIN_dly(29)'last_event, tpd_PCIN_P((2303 - 15)- 48*18), true),
			118 => (PCIN_dly(28)'last_event, tpd_PCIN_P((2303 - 15)- 48*19), true),
			119 => (PCIN_dly(27)'last_event, tpd_PCIN_P((2303 - 15)- 48*20), true),
			120 => (PCIN_dly(26)'last_event, tpd_PCIN_P((2303 - 15)- 48*21), true),
			121 => (PCIN_dly(25)'last_event, tpd_PCIN_P((2303 - 15)- 48*22), true),
			122 => (PCIN_dly(24)'last_event, tpd_PCIN_P((2303 - 15)- 48*23), true),
			123 => (PCIN_dly(23)'last_event, tpd_PCIN_P((2303 - 15)- 48*24), true),
			124 => (PCIN_dly(22)'last_event, tpd_PCIN_P((2303 - 15)- 48*25), true),
			125 => (PCIN_dly(21)'last_event, tpd_PCIN_P((2303 - 15)- 48*26), true),
			126 => (PCIN_dly(20)'last_event, tpd_PCIN_P((2303 - 15)- 48*27), true),
			127 => (PCIN_dly(19)'last_event, tpd_PCIN_P((2303 - 15)- 48*28), true),
			128 => (PCIN_dly(18)'last_event, tpd_PCIN_P((2303 - 15)- 48*29), true),
			129 => (PCIN_dly(17)'last_event, tpd_PCIN_P((2303 - 15)- 48*30), true),
			130 => (PCIN_dly(16)'last_event, tpd_PCIN_P((2303 - 15)- 48*31), true),
			131 => (PCIN_dly(15)'last_event, tpd_PCIN_P((2303 - 15)- 48*32), true),
			132 => (PCIN_dly(14)'last_event, tpd_PCIN_P((2303 - 15)- 48*33), true),
			133 => (PCIN_dly(13)'last_event, tpd_PCIN_P((2303 - 15)- 48*34), true),
			134 => (PCIN_dly(12)'last_event, tpd_PCIN_P((2303 - 15)- 48*35), true),
			135 => (PCIN_dly(11)'last_event, tpd_PCIN_P((2303 - 15)- 48*36), true),
			136 => (PCIN_dly(10)'last_event, tpd_PCIN_P((2303 - 15)- 48*37), true),
			137 => (PCIN_dly(9)'last_event, tpd_PCIN_P((2303 - 15)- 48*38), true),
			138 => (PCIN_dly(8)'last_event, tpd_PCIN_P((2303 - 15)- 48*39), true),
			139 => (PCIN_dly(7)'last_event, tpd_PCIN_P((2303 - 15)- 48*40), true),
			140 => (PCIN_dly(6)'last_event, tpd_PCIN_P((2303 - 15)- 48*41), true),
			141 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 15)- 48*42), true),
			142 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 15)- 48*43), true),
			143 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 15)- 48*44), true),
			144 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 15)- 48*45), true),
			145 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 15)- 48*46), true),
			146 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 15)- 48*47), true),
			147 => (RSTA_dly'last_event, tpd_RSTA_P(32), true),
			148 => (RSTB_dly'last_event, tpd_RSTB_P(32), true),
			149 => (RSTC_dly'last_event, tpd_RSTC_P(32), true),
			150 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(32), true),
			151 => (RSTD_dly'last_event, tpd_RSTD_P(32), true),
			152 => (RSTM_dly'last_event, tpd_RSTM_P(32), true),
			153 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(32), true),
			154 => (RSTP_dly'last_event, tpd_RSTP_P(32), true),
			155 => (CLK_dly'last_event, tpd_CLK_P(32), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(31),
         GlitchData	=> P_GlitchData(31),
         OutSignalName	=> "P(31)",
         OutTemp	=> P_zd(31),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_P((863 - 16)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_P((863 - 16)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_P((863 - 16)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_P((863 - 16)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_P((863 - 16)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_P((863 - 16)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_P((863 - 16)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_P((863 - 16)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_P((863 - 16)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_P((863 - 16)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_P((863 - 16)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_P((863 - 16)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_P((863 - 16)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_P((863 - 16)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_P((863 - 16)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_P((863 - 16)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_P((863 - 16)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_P((863 - 16)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_P((863 - 16)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_P((863 - 16)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_P((863 - 16)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_P((863 - 16)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_P((863 - 16)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_P((863 - 16)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_P((863 - 16)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_P((863 - 16)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_P((863 - 16)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_P((863 - 16)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_P((863 - 16)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_P((863 - 16)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_P((863 - 16)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_P((863 - 16)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_P((863 - 16)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_P((863 - 16)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_P((863 - 16)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_P((863 - 16)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_P((863 - 16)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_P((863 - 16)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_P((863 - 16)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_P((863 - 16)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_P((863 - 16)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_P((863 - 16)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_P((863 - 16)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_P((863 - 16)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_P((863 - 16)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_P((863 - 16)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_P((863 - 16)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_P((863 - 16)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 16)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 16)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 16)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 16)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 16)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 16)- 48*17), true),
			54 => (C_dly(31)'last_event, tpd_C_P((2303 - 16)- 48*16), true),
			55 => (C_dly(30)'last_event, tpd_C_P((2303 - 16)- 48*17), true),
			56 => (C_dly(29)'last_event, tpd_C_P((2303 - 16)- 48*18), true),
			57 => (C_dly(28)'last_event, tpd_C_P((2303 - 16)- 48*19), true),
			58 => (C_dly(27)'last_event, tpd_C_P((2303 - 16)- 48*20), true),
			59 => (C_dly(26)'last_event, tpd_C_P((2303 - 16)- 48*21), true),
			60 => (C_dly(25)'last_event, tpd_C_P((2303 - 16)- 48*22), true),
			61 => (C_dly(24)'last_event, tpd_C_P((2303 - 16)- 48*23), true),
			62 => (C_dly(23)'last_event, tpd_C_P((2303 - 16)- 48*24), true),
			63 => (C_dly(22)'last_event, tpd_C_P((2303 - 16)- 48*25), true),
			64 => (C_dly(21)'last_event, tpd_C_P((2303 - 16)- 48*26), true),
			65 => (C_dly(20)'last_event, tpd_C_P((2303 - 16)- 48*27), true),
			66 => (C_dly(19)'last_event, tpd_C_P((2303 - 16)- 48*28), true),
			67 => (C_dly(18)'last_event, tpd_C_P((2303 - 16)- 48*29), true),
			68 => (C_dly(17)'last_event, tpd_C_P((2303 - 16)- 48*30), true),
			69 => (C_dly(16)'last_event, tpd_C_P((2303 - 16)- 48*31), true),
			70 => (C_dly(15)'last_event, tpd_C_P((2303 - 16)- 48*32), true),
			71 => (C_dly(14)'last_event, tpd_C_P((2303 - 16)- 48*33), true),
			72 => (C_dly(13)'last_event, tpd_C_P((2303 - 16)- 48*34), true),
			73 => (C_dly(12)'last_event, tpd_C_P((2303 - 16)- 48*35), true),
			74 => (C_dly(11)'last_event, tpd_C_P((2303 - 16)- 48*36), true),
			75 => (C_dly(10)'last_event, tpd_C_P((2303 - 16)- 48*37), true),
			76 => (C_dly(9)'last_event, tpd_C_P((2303 - 16)- 48*38), true),
			77 => (C_dly(8)'last_event, tpd_C_P((2303 - 16)- 48*39), true),
			78 => (C_dly(7)'last_event, tpd_C_P((2303 - 16)- 48*40), true),
			79 => (C_dly(6)'last_event, tpd_C_P((2303 - 16)- 48*41), true),
			80 => (C_dly(5)'last_event, tpd_C_P((2303 - 16)- 48*42), true),
			81 => (C_dly(4)'last_event, tpd_C_P((2303 - 16)- 48*43), true),
			82 => (C_dly(3)'last_event, tpd_C_P((2303 - 16)- 48*44), true),
			83 => (C_dly(2)'last_event, tpd_C_P((2303 - 16)- 48*45), true),
			84 => (C_dly(1)'last_event, tpd_C_P((2303 - 16)- 48*46), true),
			85 => (C_dly(0)'last_event, tpd_C_P((2303 - 16)- 48*47), true),
			86 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(31), true),
			87 => (D_dly(17)'last_event, tpd_D_P((863 - 16)- 48*0), true),
			88 => (D_dly(16)'last_event, tpd_D_P((863 - 16)- 48*1), true),
			89 => (D_dly(15)'last_event, tpd_D_P((863 - 16)- 48*2), true),
			90 => (D_dly(14)'last_event, tpd_D_P((863 - 16)- 48*3), true),
			91 => (D_dly(13)'last_event, tpd_D_P((863 - 16)- 48*4), true),
			92 => (D_dly(12)'last_event, tpd_D_P((863 - 16)- 48*5), true),
			93 => (D_dly(11)'last_event, tpd_D_P((863 - 16)- 48*6), true),
			94 => (D_dly(10)'last_event, tpd_D_P((863 - 16)- 48*7), true),
			95 => (D_dly(9)'last_event, tpd_D_P((863 - 16)- 48*8), true),
			96 => (D_dly(8)'last_event, tpd_D_P((863 - 16)- 48*9), true),
			97 => (D_dly(7)'last_event, tpd_D_P((863 - 16)- 48*10), true),
			98 => (D_dly(6)'last_event, tpd_D_P((863 - 16)- 48*11), true),
			99 => (D_dly(5)'last_event, tpd_D_P((863 - 16)- 48*12), true),
			100 => (D_dly(4)'last_event, tpd_D_P((863 - 16)- 48*13), true),
			101 => (D_dly(3)'last_event, tpd_D_P((863 - 16)- 48*14), true),
			102 => (D_dly(2)'last_event, tpd_D_P((863 - 16)- 48*15), true),
			103 => (D_dly(1)'last_event, tpd_D_P((863 - 16)- 48*16), true),
			104 => (D_dly(0)'last_event, tpd_D_P((863 - 16)- 48*17), true),
			105 => (OPMODE_dly(7)'last_event, tpd_OPMODE_P((383 - 16)- 48*0), true),
			106 => (OPMODE_dly(6)'last_event, tpd_OPMODE_P((383 - 16)- 48*1), true),
			107 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 16)- 48*2), true),
			108 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 16)- 48*3), true),
			109 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 16)- 48*4), true),
			110 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 16)- 48*5), true),
			111 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 16)- 48*6), true),
			112 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 16)- 48*7), true),
			113 => (PCIN_dly(31)'last_event, tpd_PCIN_P((2303 - 16)- 48*16), true),
			114 => (PCIN_dly(30)'last_event, tpd_PCIN_P((2303 - 16)- 48*17), true),
			115 => (PCIN_dly(29)'last_event, tpd_PCIN_P((2303 - 16)- 48*18), true),
			116 => (PCIN_dly(28)'last_event, tpd_PCIN_P((2303 - 16)- 48*19), true),
			117 => (PCIN_dly(27)'last_event, tpd_PCIN_P((2303 - 16)- 48*20), true),
			118 => (PCIN_dly(26)'last_event, tpd_PCIN_P((2303 - 16)- 48*21), true),
			119 => (PCIN_dly(25)'last_event, tpd_PCIN_P((2303 - 16)- 48*22), true),
			120 => (PCIN_dly(24)'last_event, tpd_PCIN_P((2303 - 16)- 48*23), true),
			121 => (PCIN_dly(23)'last_event, tpd_PCIN_P((2303 - 16)- 48*24), true),
			122 => (PCIN_dly(22)'last_event, tpd_PCIN_P((2303 - 16)- 48*25), true),
			123 => (PCIN_dly(21)'last_event, tpd_PCIN_P((2303 - 16)- 48*26), true),
			124 => (PCIN_dly(20)'last_event, tpd_PCIN_P((2303 - 16)- 48*27), true),
			125 => (PCIN_dly(19)'last_event, tpd_PCIN_P((2303 - 16)- 48*28), true),
			126 => (PCIN_dly(18)'last_event, tpd_PCIN_P((2303 - 16)- 48*29), true),
			127 => (PCIN_dly(17)'last_event, tpd_PCIN_P((2303 - 16)- 48*30), true),
			128 => (PCIN_dly(16)'last_event, tpd_PCIN_P((2303 - 16)- 48*31), true),
			129 => (PCIN_dly(15)'last_event, tpd_PCIN_P((2303 - 16)- 48*32), true),
			130 => (PCIN_dly(14)'last_event, tpd_PCIN_P((2303 - 16)- 48*33), true),
			131 => (PCIN_dly(13)'last_event, tpd_PCIN_P((2303 - 16)- 48*34), true),
			132 => (PCIN_dly(12)'last_event, tpd_PCIN_P((2303 - 16)- 48*35), true),
			133 => (PCIN_dly(11)'last_event, tpd_PCIN_P((2303 - 16)- 48*36), true),
			134 => (PCIN_dly(10)'last_event, tpd_PCIN_P((2303 - 16)- 48*37), true),
			135 => (PCIN_dly(9)'last_event, tpd_PCIN_P((2303 - 16)- 48*38), true),
			136 => (PCIN_dly(8)'last_event, tpd_PCIN_P((2303 - 16)- 48*39), true),
			137 => (PCIN_dly(7)'last_event, tpd_PCIN_P((2303 - 16)- 48*40), true),
			138 => (PCIN_dly(6)'last_event, tpd_PCIN_P((2303 - 16)- 48*41), true),
			139 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 16)- 48*42), true),
			140 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 16)- 48*43), true),
			141 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 16)- 48*44), true),
			142 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 16)- 48*45), true),
			143 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 16)- 48*46), true),
			144 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 16)- 48*47), true),
			145 => (RSTA_dly'last_event, tpd_RSTA_P(31), true),
			146 => (RSTB_dly'last_event, tpd_RSTB_P(31), true),
			147 => (RSTC_dly'last_event, tpd_RSTC_P(31), true),
			148 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(31), true),
			149 => (RSTD_dly'last_event, tpd_RSTD_P(31), true),
			150 => (RSTM_dly'last_event, tpd_RSTM_P(31), true),
			151 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(31), true),
			152 => (RSTP_dly'last_event, tpd_RSTP_P(31), true),
			153 => (CLK_dly'last_event, tpd_CLK_P(31), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(30),
         GlitchData	=> P_GlitchData(30),
         OutSignalName	=> "P(30)",
         OutTemp	=> P_zd(30),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_P((863 - 17)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_P((863 - 17)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_P((863 - 17)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_P((863 - 17)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_P((863 - 17)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_P((863 - 17)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_P((863 - 17)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_P((863 - 17)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_P((863 - 17)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_P((863 - 17)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_P((863 - 17)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_P((863 - 17)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_P((863 - 17)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_P((863 - 17)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_P((863 - 17)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_P((863 - 17)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_P((863 - 17)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_P((863 - 17)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_P((863 - 17)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_P((863 - 17)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_P((863 - 17)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_P((863 - 17)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_P((863 - 17)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_P((863 - 17)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_P((863 - 17)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_P((863 - 17)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_P((863 - 17)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_P((863 - 17)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_P((863 - 17)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_P((863 - 17)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_P((863 - 17)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_P((863 - 17)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_P((863 - 17)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_P((863 - 17)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_P((863 - 17)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_P((863 - 17)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_P((863 - 17)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_P((863 - 17)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_P((863 - 17)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_P((863 - 17)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_P((863 - 17)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_P((863 - 17)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_P((863 - 17)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_P((863 - 17)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_P((863 - 17)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_P((863 - 17)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_P((863 - 17)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_P((863 - 17)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 17)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 17)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 17)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 17)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 17)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 17)- 48*17), true),
			54 => (C_dly(30)'last_event, tpd_C_P((2303 - 17)- 48*17), true),
			55 => (C_dly(29)'last_event, tpd_C_P((2303 - 17)- 48*18), true),
			56 => (C_dly(28)'last_event, tpd_C_P((2303 - 17)- 48*19), true),
			57 => (C_dly(27)'last_event, tpd_C_P((2303 - 17)- 48*20), true),
			58 => (C_dly(26)'last_event, tpd_C_P((2303 - 17)- 48*21), true),
			59 => (C_dly(25)'last_event, tpd_C_P((2303 - 17)- 48*22), true),
			60 => (C_dly(24)'last_event, tpd_C_P((2303 - 17)- 48*23), true),
			61 => (C_dly(23)'last_event, tpd_C_P((2303 - 17)- 48*24), true),
			62 => (C_dly(22)'last_event, tpd_C_P((2303 - 17)- 48*25), true),
			63 => (C_dly(21)'last_event, tpd_C_P((2303 - 17)- 48*26), true),
			64 => (C_dly(20)'last_event, tpd_C_P((2303 - 17)- 48*27), true),
			65 => (C_dly(19)'last_event, tpd_C_P((2303 - 17)- 48*28), true),
			66 => (C_dly(18)'last_event, tpd_C_P((2303 - 17)- 48*29), true),
			67 => (C_dly(17)'last_event, tpd_C_P((2303 - 17)- 48*30), true),
			68 => (C_dly(16)'last_event, tpd_C_P((2303 - 17)- 48*31), true),
			69 => (C_dly(15)'last_event, tpd_C_P((2303 - 17)- 48*32), true),
			70 => (C_dly(14)'last_event, tpd_C_P((2303 - 17)- 48*33), true),
			71 => (C_dly(13)'last_event, tpd_C_P((2303 - 17)- 48*34), true),
			72 => (C_dly(12)'last_event, tpd_C_P((2303 - 17)- 48*35), true),
			73 => (C_dly(11)'last_event, tpd_C_P((2303 - 17)- 48*36), true),
			74 => (C_dly(10)'last_event, tpd_C_P((2303 - 17)- 48*37), true),
			75 => (C_dly(9)'last_event, tpd_C_P((2303 - 17)- 48*38), true),
			76 => (C_dly(8)'last_event, tpd_C_P((2303 - 17)- 48*39), true),
			77 => (C_dly(7)'last_event, tpd_C_P((2303 - 17)- 48*40), true),
			78 => (C_dly(6)'last_event, tpd_C_P((2303 - 17)- 48*41), true),
			79 => (C_dly(5)'last_event, tpd_C_P((2303 - 17)- 48*42), true),
			80 => (C_dly(4)'last_event, tpd_C_P((2303 - 17)- 48*43), true),
			81 => (C_dly(3)'last_event, tpd_C_P((2303 - 17)- 48*44), true),
			82 => (C_dly(2)'last_event, tpd_C_P((2303 - 17)- 48*45), true),
			83 => (C_dly(1)'last_event, tpd_C_P((2303 - 17)- 48*46), true),
			84 => (C_dly(0)'last_event, tpd_C_P((2303 - 17)- 48*47), true),
			85 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(30), true),
			86 => (D_dly(17)'last_event, tpd_D_P((863 - 17)- 48*0), true),
			87 => (D_dly(16)'last_event, tpd_D_P((863 - 17)- 48*1), true),
			88 => (D_dly(15)'last_event, tpd_D_P((863 - 17)- 48*2), true),
			89 => (D_dly(14)'last_event, tpd_D_P((863 - 17)- 48*3), true),
			90 => (D_dly(13)'last_event, tpd_D_P((863 - 17)- 48*4), true),
			91 => (D_dly(12)'last_event, tpd_D_P((863 - 17)- 48*5), true),
			92 => (D_dly(11)'last_event, tpd_D_P((863 - 17)- 48*6), true),
			93 => (D_dly(10)'last_event, tpd_D_P((863 - 17)- 48*7), true),
			94 => (D_dly(9)'last_event, tpd_D_P((863 - 17)- 48*8), true),
			95 => (D_dly(8)'last_event, tpd_D_P((863 - 17)- 48*9), true),
			96 => (D_dly(7)'last_event, tpd_D_P((863 - 17)- 48*10), true),
			97 => (D_dly(6)'last_event, tpd_D_P((863 - 17)- 48*11), true),
			98 => (D_dly(5)'last_event, tpd_D_P((863 - 17)- 48*12), true),
			99 => (D_dly(4)'last_event, tpd_D_P((863 - 17)- 48*13), true),
			100 => (D_dly(3)'last_event, tpd_D_P((863 - 17)- 48*14), true),
			101 => (D_dly(2)'last_event, tpd_D_P((863 - 17)- 48*15), true),
			102 => (D_dly(1)'last_event, tpd_D_P((863 - 17)- 48*16), true),
			103 => (D_dly(0)'last_event, tpd_D_P((863 - 17)- 48*17), true),
			104 => (OPMODE_dly(7)'last_event, tpd_OPMODE_P((383 - 17)- 48*0), true),
			105 => (OPMODE_dly(6)'last_event, tpd_OPMODE_P((383 - 17)- 48*1), true),
			106 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 17)- 48*2), true),
			107 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 17)- 48*3), true),
			108 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 17)- 48*4), true),
			109 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 17)- 48*5), true),
			110 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 17)- 48*6), true),
			111 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 17)- 48*7), true),
			112 => (PCIN_dly(30)'last_event, tpd_PCIN_P((2303 - 17)- 48*17), true),
			113 => (PCIN_dly(29)'last_event, tpd_PCIN_P((2303 - 17)- 48*18), true),
			114 => (PCIN_dly(28)'last_event, tpd_PCIN_P((2303 - 17)- 48*19), true),
			115 => (PCIN_dly(27)'last_event, tpd_PCIN_P((2303 - 17)- 48*20), true),
			116 => (PCIN_dly(26)'last_event, tpd_PCIN_P((2303 - 17)- 48*21), true),
			117 => (PCIN_dly(25)'last_event, tpd_PCIN_P((2303 - 17)- 48*22), true),
			118 => (PCIN_dly(24)'last_event, tpd_PCIN_P((2303 - 17)- 48*23), true),
			119 => (PCIN_dly(23)'last_event, tpd_PCIN_P((2303 - 17)- 48*24), true),
			120 => (PCIN_dly(22)'last_event, tpd_PCIN_P((2303 - 17)- 48*25), true),
			121 => (PCIN_dly(21)'last_event, tpd_PCIN_P((2303 - 17)- 48*26), true),
			122 => (PCIN_dly(20)'last_event, tpd_PCIN_P((2303 - 17)- 48*27), true),
			123 => (PCIN_dly(19)'last_event, tpd_PCIN_P((2303 - 17)- 48*28), true),
			124 => (PCIN_dly(18)'last_event, tpd_PCIN_P((2303 - 17)- 48*29), true),
			125 => (PCIN_dly(17)'last_event, tpd_PCIN_P((2303 - 17)- 48*30), true),
			126 => (PCIN_dly(16)'last_event, tpd_PCIN_P((2303 - 17)- 48*31), true),
			127 => (PCIN_dly(15)'last_event, tpd_PCIN_P((2303 - 17)- 48*32), true),
			128 => (PCIN_dly(14)'last_event, tpd_PCIN_P((2303 - 17)- 48*33), true),
			129 => (PCIN_dly(13)'last_event, tpd_PCIN_P((2303 - 17)- 48*34), true),
			130 => (PCIN_dly(12)'last_event, tpd_PCIN_P((2303 - 17)- 48*35), true),
			131 => (PCIN_dly(11)'last_event, tpd_PCIN_P((2303 - 17)- 48*36), true),
			132 => (PCIN_dly(10)'last_event, tpd_PCIN_P((2303 - 17)- 48*37), true),
			133 => (PCIN_dly(9)'last_event, tpd_PCIN_P((2303 - 17)- 48*38), true),
			134 => (PCIN_dly(8)'last_event, tpd_PCIN_P((2303 - 17)- 48*39), true),
			135 => (PCIN_dly(7)'last_event, tpd_PCIN_P((2303 - 17)- 48*40), true),
			136 => (PCIN_dly(6)'last_event, tpd_PCIN_P((2303 - 17)- 48*41), true),
			137 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 17)- 48*42), true),
			138 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 17)- 48*43), true),
			139 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 17)- 48*44), true),
			140 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 17)- 48*45), true),
			141 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 17)- 48*46), true),
			142 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 17)- 48*47), true),
			143 => (RSTA_dly'last_event, tpd_RSTA_P(30), true),
			144 => (RSTB_dly'last_event, tpd_RSTB_P(30), true),
			145 => (RSTC_dly'last_event, tpd_RSTC_P(30), true),
			146 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(30), true),
			147 => (RSTD_dly'last_event, tpd_RSTD_P(30), true),
			148 => (RSTM_dly'last_event, tpd_RSTM_P(30), true),
			149 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(30), true),
			150 => (RSTP_dly'last_event, tpd_RSTP_P(30), true),
			151 => (CLK_dly'last_event, tpd_CLK_P(30), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(29),
         GlitchData	=> P_GlitchData(29),
         OutSignalName	=> "P(29)",
         OutTemp	=> P_zd(29),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_P((863 - 18)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_P((863 - 18)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_P((863 - 18)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_P((863 - 18)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_P((863 - 18)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_P((863 - 18)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_P((863 - 18)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_P((863 - 18)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_P((863 - 18)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_P((863 - 18)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_P((863 - 18)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_P((863 - 18)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_P((863 - 18)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_P((863 - 18)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_P((863 - 18)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_P((863 - 18)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_P((863 - 18)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_P((863 - 18)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_P((863 - 18)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_P((863 - 18)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_P((863 - 18)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_P((863 - 18)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_P((863 - 18)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_P((863 - 18)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_P((863 - 18)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_P((863 - 18)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_P((863 - 18)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_P((863 - 18)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_P((863 - 18)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_P((863 - 18)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_P((863 - 18)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_P((863 - 18)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_P((863 - 18)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_P((863 - 18)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_P((863 - 18)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_P((863 - 18)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_P((863 - 18)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_P((863 - 18)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_P((863 - 18)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_P((863 - 18)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_P((863 - 18)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_P((863 - 18)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_P((863 - 18)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_P((863 - 18)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_P((863 - 18)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_P((863 - 18)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_P((863 - 18)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_P((863 - 18)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 18)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 18)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 18)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 18)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 18)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 18)- 48*17), true),
			54 => (C_dly(29)'last_event, tpd_C_P((2303 - 18)- 48*18), true),
			55 => (C_dly(28)'last_event, tpd_C_P((2303 - 18)- 48*19), true),
			56 => (C_dly(27)'last_event, tpd_C_P((2303 - 18)- 48*20), true),
			57 => (C_dly(26)'last_event, tpd_C_P((2303 - 18)- 48*21), true),
			58 => (C_dly(25)'last_event, tpd_C_P((2303 - 18)- 48*22), true),
			59 => (C_dly(24)'last_event, tpd_C_P((2303 - 18)- 48*23), true),
			60 => (C_dly(23)'last_event, tpd_C_P((2303 - 18)- 48*24), true),
			61 => (C_dly(22)'last_event, tpd_C_P((2303 - 18)- 48*25), true),
			62 => (C_dly(21)'last_event, tpd_C_P((2303 - 18)- 48*26), true),
			63 => (C_dly(20)'last_event, tpd_C_P((2303 - 18)- 48*27), true),
			64 => (C_dly(19)'last_event, tpd_C_P((2303 - 18)- 48*28), true),
			65 => (C_dly(18)'last_event, tpd_C_P((2303 - 18)- 48*29), true),
			66 => (C_dly(17)'last_event, tpd_C_P((2303 - 18)- 48*30), true),
			67 => (C_dly(16)'last_event, tpd_C_P((2303 - 18)- 48*31), true),
			68 => (C_dly(15)'last_event, tpd_C_P((2303 - 18)- 48*32), true),
			69 => (C_dly(14)'last_event, tpd_C_P((2303 - 18)- 48*33), true),
			70 => (C_dly(13)'last_event, tpd_C_P((2303 - 18)- 48*34), true),
			71 => (C_dly(12)'last_event, tpd_C_P((2303 - 18)- 48*35), true),
			72 => (C_dly(11)'last_event, tpd_C_P((2303 - 18)- 48*36), true),
			73 => (C_dly(10)'last_event, tpd_C_P((2303 - 18)- 48*37), true),
			74 => (C_dly(9)'last_event, tpd_C_P((2303 - 18)- 48*38), true),
			75 => (C_dly(8)'last_event, tpd_C_P((2303 - 18)- 48*39), true),
			76 => (C_dly(7)'last_event, tpd_C_P((2303 - 18)- 48*40), true),
			77 => (C_dly(6)'last_event, tpd_C_P((2303 - 18)- 48*41), true),
			78 => (C_dly(5)'last_event, tpd_C_P((2303 - 18)- 48*42), true),
			79 => (C_dly(4)'last_event, tpd_C_P((2303 - 18)- 48*43), true),
			80 => (C_dly(3)'last_event, tpd_C_P((2303 - 18)- 48*44), true),
			81 => (C_dly(2)'last_event, tpd_C_P((2303 - 18)- 48*45), true),
			82 => (C_dly(1)'last_event, tpd_C_P((2303 - 18)- 48*46), true),
			83 => (C_dly(0)'last_event, tpd_C_P((2303 - 18)- 48*47), true),
			84 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(29), true),
			85 => (D_dly(17)'last_event, tpd_D_P((863 - 18)- 48*0), true),
			86 => (D_dly(16)'last_event, tpd_D_P((863 - 18)- 48*1), true),
			87 => (D_dly(15)'last_event, tpd_D_P((863 - 18)- 48*2), true),
			88 => (D_dly(14)'last_event, tpd_D_P((863 - 18)- 48*3), true),
			89 => (D_dly(13)'last_event, tpd_D_P((863 - 18)- 48*4), true),
			90 => (D_dly(12)'last_event, tpd_D_P((863 - 18)- 48*5), true),
			91 => (D_dly(11)'last_event, tpd_D_P((863 - 18)- 48*6), true),
			92 => (D_dly(10)'last_event, tpd_D_P((863 - 18)- 48*7), true),
			93 => (D_dly(9)'last_event, tpd_D_P((863 - 18)- 48*8), true),
			94 => (D_dly(8)'last_event, tpd_D_P((863 - 18)- 48*9), true),
			95 => (D_dly(7)'last_event, tpd_D_P((863 - 18)- 48*10), true),
			96 => (D_dly(6)'last_event, tpd_D_P((863 - 18)- 48*11), true),
			97 => (D_dly(5)'last_event, tpd_D_P((863 - 18)- 48*12), true),
			98 => (D_dly(4)'last_event, tpd_D_P((863 - 18)- 48*13), true),
			99 => (D_dly(3)'last_event, tpd_D_P((863 - 18)- 48*14), true),
			100 => (D_dly(2)'last_event, tpd_D_P((863 - 18)- 48*15), true),
			101 => (D_dly(1)'last_event, tpd_D_P((863 - 18)- 48*16), true),
			102 => (D_dly(0)'last_event, tpd_D_P((863 - 18)- 48*17), true),
			103 => (OPMODE_dly(7)'last_event, tpd_OPMODE_P((383 - 18)- 48*0), true),
			104 => (OPMODE_dly(6)'last_event, tpd_OPMODE_P((383 - 18)- 48*1), true),
			105 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 18)- 48*2), true),
			106 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 18)- 48*3), true),
			107 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 18)- 48*4), true),
			108 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 18)- 48*5), true),
			109 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 18)- 48*6), true),
			110 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 18)- 48*7), true),
			111 => (PCIN_dly(29)'last_event, tpd_PCIN_P((2303 - 18)- 48*18), true),
			112 => (PCIN_dly(28)'last_event, tpd_PCIN_P((2303 - 18)- 48*19), true),
			113 => (PCIN_dly(27)'last_event, tpd_PCIN_P((2303 - 18)- 48*20), true),
			114 => (PCIN_dly(26)'last_event, tpd_PCIN_P((2303 - 18)- 48*21), true),
			115 => (PCIN_dly(25)'last_event, tpd_PCIN_P((2303 - 18)- 48*22), true),
			116 => (PCIN_dly(24)'last_event, tpd_PCIN_P((2303 - 18)- 48*23), true),
			117 => (PCIN_dly(23)'last_event, tpd_PCIN_P((2303 - 18)- 48*24), true),
			118 => (PCIN_dly(22)'last_event, tpd_PCIN_P((2303 - 18)- 48*25), true),
			119 => (PCIN_dly(21)'last_event, tpd_PCIN_P((2303 - 18)- 48*26), true),
			120 => (PCIN_dly(20)'last_event, tpd_PCIN_P((2303 - 18)- 48*27), true),
			121 => (PCIN_dly(19)'last_event, tpd_PCIN_P((2303 - 18)- 48*28), true),
			122 => (PCIN_dly(18)'last_event, tpd_PCIN_P((2303 - 18)- 48*29), true),
			123 => (PCIN_dly(17)'last_event, tpd_PCIN_P((2303 - 18)- 48*30), true),
			124 => (PCIN_dly(16)'last_event, tpd_PCIN_P((2303 - 18)- 48*31), true),
			125 => (PCIN_dly(15)'last_event, tpd_PCIN_P((2303 - 18)- 48*32), true),
			126 => (PCIN_dly(14)'last_event, tpd_PCIN_P((2303 - 18)- 48*33), true),
			127 => (PCIN_dly(13)'last_event, tpd_PCIN_P((2303 - 18)- 48*34), true),
			128 => (PCIN_dly(12)'last_event, tpd_PCIN_P((2303 - 18)- 48*35), true),
			129 => (PCIN_dly(11)'last_event, tpd_PCIN_P((2303 - 18)- 48*36), true),
			130 => (PCIN_dly(10)'last_event, tpd_PCIN_P((2303 - 18)- 48*37), true),
			131 => (PCIN_dly(9)'last_event, tpd_PCIN_P((2303 - 18)- 48*38), true),
			132 => (PCIN_dly(8)'last_event, tpd_PCIN_P((2303 - 18)- 48*39), true),
			133 => (PCIN_dly(7)'last_event, tpd_PCIN_P((2303 - 18)- 48*40), true),
			134 => (PCIN_dly(6)'last_event, tpd_PCIN_P((2303 - 18)- 48*41), true),
			135 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 18)- 48*42), true),
			136 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 18)- 48*43), true),
			137 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 18)- 48*44), true),
			138 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 18)- 48*45), true),
			139 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 18)- 48*46), true),
			140 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 18)- 48*47), true),
			141 => (RSTA_dly'last_event, tpd_RSTA_P(29), true),
			142 => (RSTB_dly'last_event, tpd_RSTB_P(29), true),
			143 => (RSTC_dly'last_event, tpd_RSTC_P(29), true),
			144 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(29), true),
			145 => (RSTD_dly'last_event, tpd_RSTD_P(29), true),
			146 => (RSTM_dly'last_event, tpd_RSTM_P(29), true),
			147 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(29), true),
			148 => (RSTP_dly'last_event, tpd_RSTP_P(29), true),
			149 => (CLK_dly'last_event, tpd_CLK_P(29), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(28),
         GlitchData	=> P_GlitchData(28),
         OutSignalName	=> "P(28)",
         OutTemp	=> P_zd(28),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_P((863 - 19)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_P((863 - 19)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_P((863 - 19)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_P((863 - 19)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_P((863 - 19)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_P((863 - 19)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_P((863 - 19)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_P((863 - 19)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_P((863 - 19)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_P((863 - 19)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_P((863 - 19)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_P((863 - 19)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_P((863 - 19)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_P((863 - 19)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_P((863 - 19)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_P((863 - 19)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_P((863 - 19)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_P((863 - 19)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_P((863 - 19)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_P((863 - 19)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_P((863 - 19)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_P((863 - 19)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_P((863 - 19)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_P((863 - 19)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_P((863 - 19)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_P((863 - 19)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_P((863 - 19)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_P((863 - 19)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_P((863 - 19)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_P((863 - 19)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_P((863 - 19)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_P((863 - 19)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_P((863 - 19)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_P((863 - 19)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_P((863 - 19)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_P((863 - 19)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_P((863 - 19)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_P((863 - 19)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_P((863 - 19)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_P((863 - 19)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_P((863 - 19)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_P((863 - 19)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_P((863 - 19)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_P((863 - 19)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_P((863 - 19)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_P((863 - 19)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_P((863 - 19)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_P((863 - 19)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 19)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 19)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 19)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 19)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 19)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 19)- 48*17), true),
			54 => (C_dly(28)'last_event, tpd_C_P((2303 - 19)- 48*19), true),
			55 => (C_dly(27)'last_event, tpd_C_P((2303 - 19)- 48*20), true),
			56 => (C_dly(26)'last_event, tpd_C_P((2303 - 19)- 48*21), true),
			57 => (C_dly(25)'last_event, tpd_C_P((2303 - 19)- 48*22), true),
			58 => (C_dly(24)'last_event, tpd_C_P((2303 - 19)- 48*23), true),
			59 => (C_dly(23)'last_event, tpd_C_P((2303 - 19)- 48*24), true),
			60 => (C_dly(22)'last_event, tpd_C_P((2303 - 19)- 48*25), true),
			61 => (C_dly(21)'last_event, tpd_C_P((2303 - 19)- 48*26), true),
			62 => (C_dly(20)'last_event, tpd_C_P((2303 - 19)- 48*27), true),
			63 => (C_dly(19)'last_event, tpd_C_P((2303 - 19)- 48*28), true),
			64 => (C_dly(18)'last_event, tpd_C_P((2303 - 19)- 48*29), true),
			65 => (C_dly(17)'last_event, tpd_C_P((2303 - 19)- 48*30), true),
			66 => (C_dly(16)'last_event, tpd_C_P((2303 - 19)- 48*31), true),
			67 => (C_dly(15)'last_event, tpd_C_P((2303 - 19)- 48*32), true),
			68 => (C_dly(14)'last_event, tpd_C_P((2303 - 19)- 48*33), true),
			69 => (C_dly(13)'last_event, tpd_C_P((2303 - 19)- 48*34), true),
			70 => (C_dly(12)'last_event, tpd_C_P((2303 - 19)- 48*35), true),
			71 => (C_dly(11)'last_event, tpd_C_P((2303 - 19)- 48*36), true),
			72 => (C_dly(10)'last_event, tpd_C_P((2303 - 19)- 48*37), true),
			73 => (C_dly(9)'last_event, tpd_C_P((2303 - 19)- 48*38), true),
			74 => (C_dly(8)'last_event, tpd_C_P((2303 - 19)- 48*39), true),
			75 => (C_dly(7)'last_event, tpd_C_P((2303 - 19)- 48*40), true),
			76 => (C_dly(6)'last_event, tpd_C_P((2303 - 19)- 48*41), true),
			77 => (C_dly(5)'last_event, tpd_C_P((2303 - 19)- 48*42), true),
			78 => (C_dly(4)'last_event, tpd_C_P((2303 - 19)- 48*43), true),
			79 => (C_dly(3)'last_event, tpd_C_P((2303 - 19)- 48*44), true),
			80 => (C_dly(2)'last_event, tpd_C_P((2303 - 19)- 48*45), true),
			81 => (C_dly(1)'last_event, tpd_C_P((2303 - 19)- 48*46), true),
			82 => (C_dly(0)'last_event, tpd_C_P((2303 - 19)- 48*47), true),
			83 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(28), true),
			84 => (D_dly(17)'last_event, tpd_D_P((863 - 19)- 48*0), true),
			85 => (D_dly(16)'last_event, tpd_D_P((863 - 19)- 48*1), true),
			86 => (D_dly(15)'last_event, tpd_D_P((863 - 19)- 48*2), true),
			87 => (D_dly(14)'last_event, tpd_D_P((863 - 19)- 48*3), true),
			88 => (D_dly(13)'last_event, tpd_D_P((863 - 19)- 48*4), true),
			89 => (D_dly(12)'last_event, tpd_D_P((863 - 19)- 48*5), true),
			90 => (D_dly(11)'last_event, tpd_D_P((863 - 19)- 48*6), true),
			91 => (D_dly(10)'last_event, tpd_D_P((863 - 19)- 48*7), true),
			92 => (D_dly(9)'last_event, tpd_D_P((863 - 19)- 48*8), true),
			93 => (D_dly(8)'last_event, tpd_D_P((863 - 19)- 48*9), true),
			94 => (D_dly(7)'last_event, tpd_D_P((863 - 19)- 48*10), true),
			95 => (D_dly(6)'last_event, tpd_D_P((863 - 19)- 48*11), true),
			96 => (D_dly(5)'last_event, tpd_D_P((863 - 19)- 48*12), true),
			97 => (D_dly(4)'last_event, tpd_D_P((863 - 19)- 48*13), true),
			98 => (D_dly(3)'last_event, tpd_D_P((863 - 19)- 48*14), true),
			99 => (D_dly(2)'last_event, tpd_D_P((863 - 19)- 48*15), true),
			100 => (D_dly(1)'last_event, tpd_D_P((863 - 19)- 48*16), true),
			101 => (D_dly(0)'last_event, tpd_D_P((863 - 19)- 48*17), true),
			102 => (OPMODE_dly(7)'last_event, tpd_OPMODE_P((383 - 19)- 48*0), true),
			103 => (OPMODE_dly(6)'last_event, tpd_OPMODE_P((383 - 19)- 48*1), true),
			104 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 19)- 48*2), true),
			105 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 19)- 48*3), true),
			106 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 19)- 48*4), true),
			107 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 19)- 48*5), true),
			108 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 19)- 48*6), true),
			109 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 19)- 48*7), true),
			110 => (PCIN_dly(28)'last_event, tpd_PCIN_P((2303 - 19)- 48*19), true),
			111 => (PCIN_dly(27)'last_event, tpd_PCIN_P((2303 - 19)- 48*20), true),
			112 => (PCIN_dly(26)'last_event, tpd_PCIN_P((2303 - 19)- 48*21), true),
			113 => (PCIN_dly(25)'last_event, tpd_PCIN_P((2303 - 19)- 48*22), true),
			114 => (PCIN_dly(24)'last_event, tpd_PCIN_P((2303 - 19)- 48*23), true),
			115 => (PCIN_dly(23)'last_event, tpd_PCIN_P((2303 - 19)- 48*24), true),
			116 => (PCIN_dly(22)'last_event, tpd_PCIN_P((2303 - 19)- 48*25), true),
			117 => (PCIN_dly(21)'last_event, tpd_PCIN_P((2303 - 19)- 48*26), true),
			118 => (PCIN_dly(20)'last_event, tpd_PCIN_P((2303 - 19)- 48*27), true),
			119 => (PCIN_dly(19)'last_event, tpd_PCIN_P((2303 - 19)- 48*28), true),
			120 => (PCIN_dly(18)'last_event, tpd_PCIN_P((2303 - 19)- 48*29), true),
			121 => (PCIN_dly(17)'last_event, tpd_PCIN_P((2303 - 19)- 48*30), true),
			122 => (PCIN_dly(16)'last_event, tpd_PCIN_P((2303 - 19)- 48*31), true),
			123 => (PCIN_dly(15)'last_event, tpd_PCIN_P((2303 - 19)- 48*32), true),
			124 => (PCIN_dly(14)'last_event, tpd_PCIN_P((2303 - 19)- 48*33), true),
			125 => (PCIN_dly(13)'last_event, tpd_PCIN_P((2303 - 19)- 48*34), true),
			126 => (PCIN_dly(12)'last_event, tpd_PCIN_P((2303 - 19)- 48*35), true),
			127 => (PCIN_dly(11)'last_event, tpd_PCIN_P((2303 - 19)- 48*36), true),
			128 => (PCIN_dly(10)'last_event, tpd_PCIN_P((2303 - 19)- 48*37), true),
			129 => (PCIN_dly(9)'last_event, tpd_PCIN_P((2303 - 19)- 48*38), true),
			130 => (PCIN_dly(8)'last_event, tpd_PCIN_P((2303 - 19)- 48*39), true),
			131 => (PCIN_dly(7)'last_event, tpd_PCIN_P((2303 - 19)- 48*40), true),
			132 => (PCIN_dly(6)'last_event, tpd_PCIN_P((2303 - 19)- 48*41), true),
			133 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 19)- 48*42), true),
			134 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 19)- 48*43), true),
			135 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 19)- 48*44), true),
			136 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 19)- 48*45), true),
			137 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 19)- 48*46), true),
			138 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 19)- 48*47), true),
			139 => (RSTA_dly'last_event, tpd_RSTA_P(28), true),
			140 => (RSTB_dly'last_event, tpd_RSTB_P(28), true),
			141 => (RSTC_dly'last_event, tpd_RSTC_P(28), true),
			142 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(28), true),
			143 => (RSTD_dly'last_event, tpd_RSTD_P(28), true),
			144 => (RSTM_dly'last_event, tpd_RSTM_P(28), true),
			145 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(28), true),
			146 => (RSTP_dly'last_event, tpd_RSTP_P(28), true),
			147 => (CLK_dly'last_event, tpd_CLK_P(28), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(27),
         GlitchData	=> P_GlitchData(27),
         OutSignalName	=> "P(27)",
         OutTemp	=> P_zd(27),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_P((863 - 20)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_P((863 - 20)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_P((863 - 20)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_P((863 - 20)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_P((863 - 20)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_P((863 - 20)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_P((863 - 20)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_P((863 - 20)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_P((863 - 20)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_P((863 - 20)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_P((863 - 20)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_P((863 - 20)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_P((863 - 20)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_P((863 - 20)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_P((863 - 20)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_P((863 - 20)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_P((863 - 20)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_P((863 - 20)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_P((863 - 20)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_P((863 - 20)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_P((863 - 20)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_P((863 - 20)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_P((863 - 20)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_P((863 - 20)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_P((863 - 20)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_P((863 - 20)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_P((863 - 20)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_P((863 - 20)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_P((863 - 20)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_P((863 - 20)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_P((863 - 20)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_P((863 - 20)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_P((863 - 20)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_P((863 - 20)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_P((863 - 20)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_P((863 - 20)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_P((863 - 20)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_P((863 - 20)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_P((863 - 20)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_P((863 - 20)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_P((863 - 20)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_P((863 - 20)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_P((863 - 20)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_P((863 - 20)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_P((863 - 20)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_P((863 - 20)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_P((863 - 20)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_P((863 - 20)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 20)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 20)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 20)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 20)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 20)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 20)- 48*17), true),
			54 => (C_dly(27)'last_event, tpd_C_P((2303 - 20)- 48*20), true),
			55 => (C_dly(26)'last_event, tpd_C_P((2303 - 20)- 48*21), true),
			56 => (C_dly(25)'last_event, tpd_C_P((2303 - 20)- 48*22), true),
			57 => (C_dly(24)'last_event, tpd_C_P((2303 - 20)- 48*23), true),
			58 => (C_dly(23)'last_event, tpd_C_P((2303 - 20)- 48*24), true),
			59 => (C_dly(22)'last_event, tpd_C_P((2303 - 20)- 48*25), true),
			60 => (C_dly(21)'last_event, tpd_C_P((2303 - 20)- 48*26), true),
			61 => (C_dly(20)'last_event, tpd_C_P((2303 - 20)- 48*27), true),
			62 => (C_dly(19)'last_event, tpd_C_P((2303 - 20)- 48*28), true),
			63 => (C_dly(18)'last_event, tpd_C_P((2303 - 20)- 48*29), true),
			64 => (C_dly(17)'last_event, tpd_C_P((2303 - 20)- 48*30), true),
			65 => (C_dly(16)'last_event, tpd_C_P((2303 - 20)- 48*31), true),
			66 => (C_dly(15)'last_event, tpd_C_P((2303 - 20)- 48*32), true),
			67 => (C_dly(14)'last_event, tpd_C_P((2303 - 20)- 48*33), true),
			68 => (C_dly(13)'last_event, tpd_C_P((2303 - 20)- 48*34), true),
			69 => (C_dly(12)'last_event, tpd_C_P((2303 - 20)- 48*35), true),
			70 => (C_dly(11)'last_event, tpd_C_P((2303 - 20)- 48*36), true),
			71 => (C_dly(10)'last_event, tpd_C_P((2303 - 20)- 48*37), true),
			72 => (C_dly(9)'last_event, tpd_C_P((2303 - 20)- 48*38), true),
			73 => (C_dly(8)'last_event, tpd_C_P((2303 - 20)- 48*39), true),
			74 => (C_dly(7)'last_event, tpd_C_P((2303 - 20)- 48*40), true),
			75 => (C_dly(6)'last_event, tpd_C_P((2303 - 20)- 48*41), true),
			76 => (C_dly(5)'last_event, tpd_C_P((2303 - 20)- 48*42), true),
			77 => (C_dly(4)'last_event, tpd_C_P((2303 - 20)- 48*43), true),
			78 => (C_dly(3)'last_event, tpd_C_P((2303 - 20)- 48*44), true),
			79 => (C_dly(2)'last_event, tpd_C_P((2303 - 20)- 48*45), true),
			80 => (C_dly(1)'last_event, tpd_C_P((2303 - 20)- 48*46), true),
			81 => (C_dly(0)'last_event, tpd_C_P((2303 - 20)- 48*47), true),
			82 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(27), true),
			83 => (D_dly(17)'last_event, tpd_D_P((863 - 20)- 48*0), true),
			84 => (D_dly(16)'last_event, tpd_D_P((863 - 20)- 48*1), true),
			85 => (D_dly(15)'last_event, tpd_D_P((863 - 20)- 48*2), true),
			86 => (D_dly(14)'last_event, tpd_D_P((863 - 20)- 48*3), true),
			87 => (D_dly(13)'last_event, tpd_D_P((863 - 20)- 48*4), true),
			88 => (D_dly(12)'last_event, tpd_D_P((863 - 20)- 48*5), true),
			89 => (D_dly(11)'last_event, tpd_D_P((863 - 20)- 48*6), true),
			90 => (D_dly(10)'last_event, tpd_D_P((863 - 20)- 48*7), true),
			91 => (D_dly(9)'last_event, tpd_D_P((863 - 20)- 48*8), true),
			92 => (D_dly(8)'last_event, tpd_D_P((863 - 20)- 48*9), true),
			93 => (D_dly(7)'last_event, tpd_D_P((863 - 20)- 48*10), true),
			94 => (D_dly(6)'last_event, tpd_D_P((863 - 20)- 48*11), true),
			95 => (D_dly(5)'last_event, tpd_D_P((863 - 20)- 48*12), true),
			96 => (D_dly(4)'last_event, tpd_D_P((863 - 20)- 48*13), true),
			97 => (D_dly(3)'last_event, tpd_D_P((863 - 20)- 48*14), true),
			98 => (D_dly(2)'last_event, tpd_D_P((863 - 20)- 48*15), true),
			99 => (D_dly(1)'last_event, tpd_D_P((863 - 20)- 48*16), true),
			100 => (D_dly(0)'last_event, tpd_D_P((863 - 20)- 48*17), true),
			101 => (OPMODE_dly(7)'last_event, tpd_OPMODE_P((383 - 20)- 48*0), true),
			102 => (OPMODE_dly(6)'last_event, tpd_OPMODE_P((383 - 20)- 48*1), true),
			103 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 20)- 48*2), true),
			104 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 20)- 48*3), true),
			105 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 20)- 48*4), true),
			106 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 20)- 48*5), true),
			107 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 20)- 48*6), true),
			108 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 20)- 48*7), true),
			109 => (PCIN_dly(27)'last_event, tpd_PCIN_P((2303 - 20)- 48*20), true),
			110 => (PCIN_dly(26)'last_event, tpd_PCIN_P((2303 - 20)- 48*21), true),
			111 => (PCIN_dly(25)'last_event, tpd_PCIN_P((2303 - 20)- 48*22), true),
			112 => (PCIN_dly(24)'last_event, tpd_PCIN_P((2303 - 20)- 48*23), true),
			113 => (PCIN_dly(23)'last_event, tpd_PCIN_P((2303 - 20)- 48*24), true),
			114 => (PCIN_dly(22)'last_event, tpd_PCIN_P((2303 - 20)- 48*25), true),
			115 => (PCIN_dly(21)'last_event, tpd_PCIN_P((2303 - 20)- 48*26), true),
			116 => (PCIN_dly(20)'last_event, tpd_PCIN_P((2303 - 20)- 48*27), true),
			117 => (PCIN_dly(19)'last_event, tpd_PCIN_P((2303 - 20)- 48*28), true),
			118 => (PCIN_dly(18)'last_event, tpd_PCIN_P((2303 - 20)- 48*29), true),
			119 => (PCIN_dly(17)'last_event, tpd_PCIN_P((2303 - 20)- 48*30), true),
			120 => (PCIN_dly(16)'last_event, tpd_PCIN_P((2303 - 20)- 48*31), true),
			121 => (PCIN_dly(15)'last_event, tpd_PCIN_P((2303 - 20)- 48*32), true),
			122 => (PCIN_dly(14)'last_event, tpd_PCIN_P((2303 - 20)- 48*33), true),
			123 => (PCIN_dly(13)'last_event, tpd_PCIN_P((2303 - 20)- 48*34), true),
			124 => (PCIN_dly(12)'last_event, tpd_PCIN_P((2303 - 20)- 48*35), true),
			125 => (PCIN_dly(11)'last_event, tpd_PCIN_P((2303 - 20)- 48*36), true),
			126 => (PCIN_dly(10)'last_event, tpd_PCIN_P((2303 - 20)- 48*37), true),
			127 => (PCIN_dly(9)'last_event, tpd_PCIN_P((2303 - 20)- 48*38), true),
			128 => (PCIN_dly(8)'last_event, tpd_PCIN_P((2303 - 20)- 48*39), true),
			129 => (PCIN_dly(7)'last_event, tpd_PCIN_P((2303 - 20)- 48*40), true),
			130 => (PCIN_dly(6)'last_event, tpd_PCIN_P((2303 - 20)- 48*41), true),
			131 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 20)- 48*42), true),
			132 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 20)- 48*43), true),
			133 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 20)- 48*44), true),
			134 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 20)- 48*45), true),
			135 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 20)- 48*46), true),
			136 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 20)- 48*47), true),
			137 => (RSTA_dly'last_event, tpd_RSTA_P(27), true),
			138 => (RSTB_dly'last_event, tpd_RSTB_P(27), true),
			139 => (RSTC_dly'last_event, tpd_RSTC_P(27), true),
			140 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(27), true),
			141 => (RSTD_dly'last_event, tpd_RSTD_P(27), true),
			142 => (RSTM_dly'last_event, tpd_RSTM_P(27), true),
			143 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(27), true),
			144 => (RSTP_dly'last_event, tpd_RSTP_P(27), true),
			145 => (CLK_dly'last_event, tpd_CLK_P(27), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(26),
         GlitchData	=> P_GlitchData(26),
         OutSignalName	=> "P(26)",
         OutTemp	=> P_zd(26),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_P((863 - 21)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_P((863 - 21)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_P((863 - 21)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_P((863 - 21)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_P((863 - 21)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_P((863 - 21)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_P((863 - 21)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_P((863 - 21)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_P((863 - 21)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_P((863 - 21)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_P((863 - 21)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_P((863 - 21)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_P((863 - 21)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_P((863 - 21)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_P((863 - 21)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_P((863 - 21)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_P((863 - 21)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_P((863 - 21)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_P((863 - 21)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_P((863 - 21)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_P((863 - 21)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_P((863 - 21)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_P((863 - 21)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_P((863 - 21)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_P((863 - 21)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_P((863 - 21)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_P((863 - 21)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_P((863 - 21)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_P((863 - 21)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_P((863 - 21)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_P((863 - 21)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_P((863 - 21)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_P((863 - 21)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_P((863 - 21)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_P((863 - 21)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_P((863 - 21)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_P((863 - 21)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_P((863 - 21)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_P((863 - 21)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_P((863 - 21)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_P((863 - 21)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_P((863 - 21)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_P((863 - 21)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_P((863 - 21)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_P((863 - 21)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_P((863 - 21)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_P((863 - 21)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_P((863 - 21)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 21)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 21)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 21)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 21)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 21)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 21)- 48*17), true),
			54 => (C_dly(26)'last_event, tpd_C_P((2303 - 21)- 48*21), true),
			55 => (C_dly(25)'last_event, tpd_C_P((2303 - 21)- 48*22), true),
			56 => (C_dly(24)'last_event, tpd_C_P((2303 - 21)- 48*23), true),
			57 => (C_dly(23)'last_event, tpd_C_P((2303 - 21)- 48*24), true),
			58 => (C_dly(22)'last_event, tpd_C_P((2303 - 21)- 48*25), true),
			59 => (C_dly(21)'last_event, tpd_C_P((2303 - 21)- 48*26), true),
			60 => (C_dly(20)'last_event, tpd_C_P((2303 - 21)- 48*27), true),
			61 => (C_dly(19)'last_event, tpd_C_P((2303 - 21)- 48*28), true),
			62 => (C_dly(18)'last_event, tpd_C_P((2303 - 21)- 48*29), true),
			63 => (C_dly(17)'last_event, tpd_C_P((2303 - 21)- 48*30), true),
			64 => (C_dly(16)'last_event, tpd_C_P((2303 - 21)- 48*31), true),
			65 => (C_dly(15)'last_event, tpd_C_P((2303 - 21)- 48*32), true),
			66 => (C_dly(14)'last_event, tpd_C_P((2303 - 21)- 48*33), true),
			67 => (C_dly(13)'last_event, tpd_C_P((2303 - 21)- 48*34), true),
			68 => (C_dly(12)'last_event, tpd_C_P((2303 - 21)- 48*35), true),
			69 => (C_dly(11)'last_event, tpd_C_P((2303 - 21)- 48*36), true),
			70 => (C_dly(10)'last_event, tpd_C_P((2303 - 21)- 48*37), true),
			71 => (C_dly(9)'last_event, tpd_C_P((2303 - 21)- 48*38), true),
			72 => (C_dly(8)'last_event, tpd_C_P((2303 - 21)- 48*39), true),
			73 => (C_dly(7)'last_event, tpd_C_P((2303 - 21)- 48*40), true),
			74 => (C_dly(6)'last_event, tpd_C_P((2303 - 21)- 48*41), true),
			75 => (C_dly(5)'last_event, tpd_C_P((2303 - 21)- 48*42), true),
			76 => (C_dly(4)'last_event, tpd_C_P((2303 - 21)- 48*43), true),
			77 => (C_dly(3)'last_event, tpd_C_P((2303 - 21)- 48*44), true),
			78 => (C_dly(2)'last_event, tpd_C_P((2303 - 21)- 48*45), true),
			79 => (C_dly(1)'last_event, tpd_C_P((2303 - 21)- 48*46), true),
			80 => (C_dly(0)'last_event, tpd_C_P((2303 - 21)- 48*47), true),
			81 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(26), true),
			82 => (D_dly(17)'last_event, tpd_D_P((863 - 21)- 48*0), true),
			83 => (D_dly(16)'last_event, tpd_D_P((863 - 21)- 48*1), true),
			84 => (D_dly(15)'last_event, tpd_D_P((863 - 21)- 48*2), true),
			85 => (D_dly(14)'last_event, tpd_D_P((863 - 21)- 48*3), true),
			86 => (D_dly(13)'last_event, tpd_D_P((863 - 21)- 48*4), true),
			87 => (D_dly(12)'last_event, tpd_D_P((863 - 21)- 48*5), true),
			88 => (D_dly(11)'last_event, tpd_D_P((863 - 21)- 48*6), true),
			89 => (D_dly(10)'last_event, tpd_D_P((863 - 21)- 48*7), true),
			90 => (D_dly(9)'last_event, tpd_D_P((863 - 21)- 48*8), true),
			91 => (D_dly(8)'last_event, tpd_D_P((863 - 21)- 48*9), true),
			92 => (D_dly(7)'last_event, tpd_D_P((863 - 21)- 48*10), true),
			93 => (D_dly(6)'last_event, tpd_D_P((863 - 21)- 48*11), true),
			94 => (D_dly(5)'last_event, tpd_D_P((863 - 21)- 48*12), true),
			95 => (D_dly(4)'last_event, tpd_D_P((863 - 21)- 48*13), true),
			96 => (D_dly(3)'last_event, tpd_D_P((863 - 21)- 48*14), true),
			97 => (D_dly(2)'last_event, tpd_D_P((863 - 21)- 48*15), true),
			98 => (D_dly(1)'last_event, tpd_D_P((863 - 21)- 48*16), true),
			99 => (D_dly(0)'last_event, tpd_D_P((863 - 21)- 48*17), true),
			100 => (OPMODE_dly(7)'last_event, tpd_OPMODE_P((383 - 21)- 48*0), true),
			101 => (OPMODE_dly(6)'last_event, tpd_OPMODE_P((383 - 21)- 48*1), true),
			102 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 21)- 48*2), true),
			103 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 21)- 48*3), true),
			104 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 21)- 48*4), true),
			105 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 21)- 48*5), true),
			106 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 21)- 48*6), true),
			107 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 21)- 48*7), true),
			108 => (PCIN_dly(26)'last_event, tpd_PCIN_P((2303 - 21)- 48*21), true),
			109 => (PCIN_dly(25)'last_event, tpd_PCIN_P((2303 - 21)- 48*22), true),
			110 => (PCIN_dly(24)'last_event, tpd_PCIN_P((2303 - 21)- 48*23), true),
			111 => (PCIN_dly(23)'last_event, tpd_PCIN_P((2303 - 21)- 48*24), true),
			112 => (PCIN_dly(22)'last_event, tpd_PCIN_P((2303 - 21)- 48*25), true),
			113 => (PCIN_dly(21)'last_event, tpd_PCIN_P((2303 - 21)- 48*26), true),
			114 => (PCIN_dly(20)'last_event, tpd_PCIN_P((2303 - 21)- 48*27), true),
			115 => (PCIN_dly(19)'last_event, tpd_PCIN_P((2303 - 21)- 48*28), true),
			116 => (PCIN_dly(18)'last_event, tpd_PCIN_P((2303 - 21)- 48*29), true),
			117 => (PCIN_dly(17)'last_event, tpd_PCIN_P((2303 - 21)- 48*30), true),
			118 => (PCIN_dly(16)'last_event, tpd_PCIN_P((2303 - 21)- 48*31), true),
			119 => (PCIN_dly(15)'last_event, tpd_PCIN_P((2303 - 21)- 48*32), true),
			120 => (PCIN_dly(14)'last_event, tpd_PCIN_P((2303 - 21)- 48*33), true),
			121 => (PCIN_dly(13)'last_event, tpd_PCIN_P((2303 - 21)- 48*34), true),
			122 => (PCIN_dly(12)'last_event, tpd_PCIN_P((2303 - 21)- 48*35), true),
			123 => (PCIN_dly(11)'last_event, tpd_PCIN_P((2303 - 21)- 48*36), true),
			124 => (PCIN_dly(10)'last_event, tpd_PCIN_P((2303 - 21)- 48*37), true),
			125 => (PCIN_dly(9)'last_event, tpd_PCIN_P((2303 - 21)- 48*38), true),
			126 => (PCIN_dly(8)'last_event, tpd_PCIN_P((2303 - 21)- 48*39), true),
			127 => (PCIN_dly(7)'last_event, tpd_PCIN_P((2303 - 21)- 48*40), true),
			128 => (PCIN_dly(6)'last_event, tpd_PCIN_P((2303 - 21)- 48*41), true),
			129 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 21)- 48*42), true),
			130 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 21)- 48*43), true),
			131 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 21)- 48*44), true),
			132 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 21)- 48*45), true),
			133 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 21)- 48*46), true),
			134 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 21)- 48*47), true),
			135 => (RSTA_dly'last_event, tpd_RSTA_P(26), true),
			136 => (RSTB_dly'last_event, tpd_RSTB_P(26), true),
			137 => (RSTC_dly'last_event, tpd_RSTC_P(26), true),
			138 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(26), true),
			139 => (RSTD_dly'last_event, tpd_RSTD_P(26), true),
			140 => (RSTM_dly'last_event, tpd_RSTM_P(26), true),
			141 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(26), true),
			142 => (RSTP_dly'last_event, tpd_RSTP_P(26), true),
			143 => (CLK_dly'last_event, tpd_CLK_P(26), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(25),
         GlitchData	=> P_GlitchData(25),
         OutSignalName	=> "P(25)",
         OutTemp	=> P_zd(25),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_P((863 - 22)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_P((863 - 22)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_P((863 - 22)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_P((863 - 22)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_P((863 - 22)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_P((863 - 22)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_P((863 - 22)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_P((863 - 22)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_P((863 - 22)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_P((863 - 22)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_P((863 - 22)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_P((863 - 22)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_P((863 - 22)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_P((863 - 22)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_P((863 - 22)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_P((863 - 22)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_P((863 - 22)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_P((863 - 22)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_P((863 - 22)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_P((863 - 22)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_P((863 - 22)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_P((863 - 22)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_P((863 - 22)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_P((863 - 22)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_P((863 - 22)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_P((863 - 22)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_P((863 - 22)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_P((863 - 22)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_P((863 - 22)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_P((863 - 22)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_P((863 - 22)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_P((863 - 22)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_P((863 - 22)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_P((863 - 22)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_P((863 - 22)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_P((863 - 22)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_P((863 - 22)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_P((863 - 22)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_P((863 - 22)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_P((863 - 22)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_P((863 - 22)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_P((863 - 22)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_P((863 - 22)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_P((863 - 22)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_P((863 - 22)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_P((863 - 22)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_P((863 - 22)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_P((863 - 22)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 22)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 22)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 22)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 22)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 22)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 22)- 48*17), true),
			54 => (C_dly(25)'last_event, tpd_C_P((2303 - 22)- 48*22), true),
			55 => (C_dly(24)'last_event, tpd_C_P((2303 - 22)- 48*23), true),
			56 => (C_dly(23)'last_event, tpd_C_P((2303 - 22)- 48*24), true),
			57 => (C_dly(22)'last_event, tpd_C_P((2303 - 22)- 48*25), true),
			58 => (C_dly(21)'last_event, tpd_C_P((2303 - 22)- 48*26), true),
			59 => (C_dly(20)'last_event, tpd_C_P((2303 - 22)- 48*27), true),
			60 => (C_dly(19)'last_event, tpd_C_P((2303 - 22)- 48*28), true),
			61 => (C_dly(18)'last_event, tpd_C_P((2303 - 22)- 48*29), true),
			62 => (C_dly(17)'last_event, tpd_C_P((2303 - 22)- 48*30), true),
			63 => (C_dly(16)'last_event, tpd_C_P((2303 - 22)- 48*31), true),
			64 => (C_dly(15)'last_event, tpd_C_P((2303 - 22)- 48*32), true),
			65 => (C_dly(14)'last_event, tpd_C_P((2303 - 22)- 48*33), true),
			66 => (C_dly(13)'last_event, tpd_C_P((2303 - 22)- 48*34), true),
			67 => (C_dly(12)'last_event, tpd_C_P((2303 - 22)- 48*35), true),
			68 => (C_dly(11)'last_event, tpd_C_P((2303 - 22)- 48*36), true),
			69 => (C_dly(10)'last_event, tpd_C_P((2303 - 22)- 48*37), true),
			70 => (C_dly(9)'last_event, tpd_C_P((2303 - 22)- 48*38), true),
			71 => (C_dly(8)'last_event, tpd_C_P((2303 - 22)- 48*39), true),
			72 => (C_dly(7)'last_event, tpd_C_P((2303 - 22)- 48*40), true),
			73 => (C_dly(6)'last_event, tpd_C_P((2303 - 22)- 48*41), true),
			74 => (C_dly(5)'last_event, tpd_C_P((2303 - 22)- 48*42), true),
			75 => (C_dly(4)'last_event, tpd_C_P((2303 - 22)- 48*43), true),
			76 => (C_dly(3)'last_event, tpd_C_P((2303 - 22)- 48*44), true),
			77 => (C_dly(2)'last_event, tpd_C_P((2303 - 22)- 48*45), true),
			78 => (C_dly(1)'last_event, tpd_C_P((2303 - 22)- 48*46), true),
			79 => (C_dly(0)'last_event, tpd_C_P((2303 - 22)- 48*47), true),
			80 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(25), true),
			81 => (D_dly(17)'last_event, tpd_D_P((863 - 22)- 48*0), true),
			82 => (D_dly(16)'last_event, tpd_D_P((863 - 22)- 48*1), true),
			83 => (D_dly(15)'last_event, tpd_D_P((863 - 22)- 48*2), true),
			84 => (D_dly(14)'last_event, tpd_D_P((863 - 22)- 48*3), true),
			85 => (D_dly(13)'last_event, tpd_D_P((863 - 22)- 48*4), true),
			86 => (D_dly(12)'last_event, tpd_D_P((863 - 22)- 48*5), true),
			87 => (D_dly(11)'last_event, tpd_D_P((863 - 22)- 48*6), true),
			88 => (D_dly(10)'last_event, tpd_D_P((863 - 22)- 48*7), true),
			89 => (D_dly(9)'last_event, tpd_D_P((863 - 22)- 48*8), true),
			90 => (D_dly(8)'last_event, tpd_D_P((863 - 22)- 48*9), true),
			91 => (D_dly(7)'last_event, tpd_D_P((863 - 22)- 48*10), true),
			92 => (D_dly(6)'last_event, tpd_D_P((863 - 22)- 48*11), true),
			93 => (D_dly(5)'last_event, tpd_D_P((863 - 22)- 48*12), true),
			94 => (D_dly(4)'last_event, tpd_D_P((863 - 22)- 48*13), true),
			95 => (D_dly(3)'last_event, tpd_D_P((863 - 22)- 48*14), true),
			96 => (D_dly(2)'last_event, tpd_D_P((863 - 22)- 48*15), true),
			97 => (D_dly(1)'last_event, tpd_D_P((863 - 22)- 48*16), true),
			98 => (D_dly(0)'last_event, tpd_D_P((863 - 22)- 48*17), true),
			99 => (OPMODE_dly(7)'last_event, tpd_OPMODE_P((383 - 22)- 48*0), true),
			100 => (OPMODE_dly(6)'last_event, tpd_OPMODE_P((383 - 22)- 48*1), true),
			101 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 22)- 48*2), true),
			102 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 22)- 48*3), true),
			103 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 22)- 48*4), true),
			104 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 22)- 48*5), true),
			105 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 22)- 48*6), true),
			106 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 22)- 48*7), true),
			107 => (PCIN_dly(25)'last_event, tpd_PCIN_P((2303 - 22)- 48*22), true),
			108 => (PCIN_dly(24)'last_event, tpd_PCIN_P((2303 - 22)- 48*23), true),
			109 => (PCIN_dly(23)'last_event, tpd_PCIN_P((2303 - 22)- 48*24), true),
			110 => (PCIN_dly(22)'last_event, tpd_PCIN_P((2303 - 22)- 48*25), true),
			111 => (PCIN_dly(21)'last_event, tpd_PCIN_P((2303 - 22)- 48*26), true),
			112 => (PCIN_dly(20)'last_event, tpd_PCIN_P((2303 - 22)- 48*27), true),
			113 => (PCIN_dly(19)'last_event, tpd_PCIN_P((2303 - 22)- 48*28), true),
			114 => (PCIN_dly(18)'last_event, tpd_PCIN_P((2303 - 22)- 48*29), true),
			115 => (PCIN_dly(17)'last_event, tpd_PCIN_P((2303 - 22)- 48*30), true),
			116 => (PCIN_dly(16)'last_event, tpd_PCIN_P((2303 - 22)- 48*31), true),
			117 => (PCIN_dly(15)'last_event, tpd_PCIN_P((2303 - 22)- 48*32), true),
			118 => (PCIN_dly(14)'last_event, tpd_PCIN_P((2303 - 22)- 48*33), true),
			119 => (PCIN_dly(13)'last_event, tpd_PCIN_P((2303 - 22)- 48*34), true),
			120 => (PCIN_dly(12)'last_event, tpd_PCIN_P((2303 - 22)- 48*35), true),
			121 => (PCIN_dly(11)'last_event, tpd_PCIN_P((2303 - 22)- 48*36), true),
			122 => (PCIN_dly(10)'last_event, tpd_PCIN_P((2303 - 22)- 48*37), true),
			123 => (PCIN_dly(9)'last_event, tpd_PCIN_P((2303 - 22)- 48*38), true),
			124 => (PCIN_dly(8)'last_event, tpd_PCIN_P((2303 - 22)- 48*39), true),
			125 => (PCIN_dly(7)'last_event, tpd_PCIN_P((2303 - 22)- 48*40), true),
			126 => (PCIN_dly(6)'last_event, tpd_PCIN_P((2303 - 22)- 48*41), true),
			127 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 22)- 48*42), true),
			128 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 22)- 48*43), true),
			129 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 22)- 48*44), true),
			130 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 22)- 48*45), true),
			131 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 22)- 48*46), true),
			132 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 22)- 48*47), true),
			133 => (RSTA_dly'last_event, tpd_RSTA_P(25), true),
			134 => (RSTB_dly'last_event, tpd_RSTB_P(25), true),
			135 => (RSTC_dly'last_event, tpd_RSTC_P(25), true),
			136 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(25), true),
			137 => (RSTD_dly'last_event, tpd_RSTD_P(25), true),
			138 => (RSTM_dly'last_event, tpd_RSTM_P(25), true),
			139 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(25), true),
			140 => (RSTP_dly'last_event, tpd_RSTP_P(25), true),
			141 => (CLK_dly'last_event, tpd_CLK_P(25), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(24),
         GlitchData	=> P_GlitchData(24),
         OutSignalName	=> "P(24)",
         OutTemp	=> P_zd(24),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_P((863 - 23)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_P((863 - 23)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_P((863 - 23)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_P((863 - 23)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_P((863 - 23)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_P((863 - 23)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_P((863 - 23)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_P((863 - 23)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_P((863 - 23)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_P((863 - 23)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_P((863 - 23)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_P((863 - 23)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_P((863 - 23)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_P((863 - 23)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_P((863 - 23)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_P((863 - 23)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_P((863 - 23)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_P((863 - 23)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_P((863 - 23)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_P((863 - 23)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_P((863 - 23)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_P((863 - 23)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_P((863 - 23)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_P((863 - 23)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_P((863 - 23)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_P((863 - 23)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_P((863 - 23)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_P((863 - 23)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_P((863 - 23)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_P((863 - 23)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_P((863 - 23)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_P((863 - 23)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_P((863 - 23)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_P((863 - 23)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_P((863 - 23)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_P((863 - 23)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_P((863 - 23)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_P((863 - 23)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_P((863 - 23)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_P((863 - 23)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_P((863 - 23)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_P((863 - 23)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_P((863 - 23)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_P((863 - 23)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_P((863 - 23)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_P((863 - 23)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_P((863 - 23)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_P((863 - 23)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 23)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 23)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 23)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 23)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 23)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 23)- 48*17), true),
			54 => (C_dly(24)'last_event, tpd_C_P((2303 - 23)- 48*23), true),
			55 => (C_dly(23)'last_event, tpd_C_P((2303 - 23)- 48*24), true),
			56 => (C_dly(22)'last_event, tpd_C_P((2303 - 23)- 48*25), true),
			57 => (C_dly(21)'last_event, tpd_C_P((2303 - 23)- 48*26), true),
			58 => (C_dly(20)'last_event, tpd_C_P((2303 - 23)- 48*27), true),
			59 => (C_dly(19)'last_event, tpd_C_P((2303 - 23)- 48*28), true),
			60 => (C_dly(18)'last_event, tpd_C_P((2303 - 23)- 48*29), true),
			61 => (C_dly(17)'last_event, tpd_C_P((2303 - 23)- 48*30), true),
			62 => (C_dly(16)'last_event, tpd_C_P((2303 - 23)- 48*31), true),
			63 => (C_dly(15)'last_event, tpd_C_P((2303 - 23)- 48*32), true),
			64 => (C_dly(14)'last_event, tpd_C_P((2303 - 23)- 48*33), true),
			65 => (C_dly(13)'last_event, tpd_C_P((2303 - 23)- 48*34), true),
			66 => (C_dly(12)'last_event, tpd_C_P((2303 - 23)- 48*35), true),
			67 => (C_dly(11)'last_event, tpd_C_P((2303 - 23)- 48*36), true),
			68 => (C_dly(10)'last_event, tpd_C_P((2303 - 23)- 48*37), true),
			69 => (C_dly(9)'last_event, tpd_C_P((2303 - 23)- 48*38), true),
			70 => (C_dly(8)'last_event, tpd_C_P((2303 - 23)- 48*39), true),
			71 => (C_dly(7)'last_event, tpd_C_P((2303 - 23)- 48*40), true),
			72 => (C_dly(6)'last_event, tpd_C_P((2303 - 23)- 48*41), true),
			73 => (C_dly(5)'last_event, tpd_C_P((2303 - 23)- 48*42), true),
			74 => (C_dly(4)'last_event, tpd_C_P((2303 - 23)- 48*43), true),
			75 => (C_dly(3)'last_event, tpd_C_P((2303 - 23)- 48*44), true),
			76 => (C_dly(2)'last_event, tpd_C_P((2303 - 23)- 48*45), true),
			77 => (C_dly(1)'last_event, tpd_C_P((2303 - 23)- 48*46), true),
			78 => (C_dly(0)'last_event, tpd_C_P((2303 - 23)- 48*47), true),
			79 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(24), true),
			80 => (D_dly(17)'last_event, tpd_D_P((863 - 23)- 48*0), true),
			81 => (D_dly(16)'last_event, tpd_D_P((863 - 23)- 48*1), true),
			82 => (D_dly(15)'last_event, tpd_D_P((863 - 23)- 48*2), true),
			83 => (D_dly(14)'last_event, tpd_D_P((863 - 23)- 48*3), true),
			84 => (D_dly(13)'last_event, tpd_D_P((863 - 23)- 48*4), true),
			85 => (D_dly(12)'last_event, tpd_D_P((863 - 23)- 48*5), true),
			86 => (D_dly(11)'last_event, tpd_D_P((863 - 23)- 48*6), true),
			87 => (D_dly(10)'last_event, tpd_D_P((863 - 23)- 48*7), true),
			88 => (D_dly(9)'last_event, tpd_D_P((863 - 23)- 48*8), true),
			89 => (D_dly(8)'last_event, tpd_D_P((863 - 23)- 48*9), true),
			90 => (D_dly(7)'last_event, tpd_D_P((863 - 23)- 48*10), true),
			91 => (D_dly(6)'last_event, tpd_D_P((863 - 23)- 48*11), true),
			92 => (D_dly(5)'last_event, tpd_D_P((863 - 23)- 48*12), true),
			93 => (D_dly(4)'last_event, tpd_D_P((863 - 23)- 48*13), true),
			94 => (D_dly(3)'last_event, tpd_D_P((863 - 23)- 48*14), true),
			95 => (D_dly(2)'last_event, tpd_D_P((863 - 23)- 48*15), true),
			96 => (D_dly(1)'last_event, tpd_D_P((863 - 23)- 48*16), true),
			97 => (D_dly(0)'last_event, tpd_D_P((863 - 23)- 48*17), true),
			98 => (OPMODE_dly(7)'last_event, tpd_OPMODE_P((383 - 23)- 48*0), true),
			99 => (OPMODE_dly(6)'last_event, tpd_OPMODE_P((383 - 23)- 48*1), true),
			100 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 23)- 48*2), true),
			101 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 23)- 48*3), true),
			102 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 23)- 48*4), true),
			103 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 23)- 48*5), true),
			104 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 23)- 48*6), true),
			105 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 23)- 48*7), true),
			106 => (PCIN_dly(24)'last_event, tpd_PCIN_P((2303 - 23)- 48*23), true),
			107 => (PCIN_dly(23)'last_event, tpd_PCIN_P((2303 - 23)- 48*24), true),
			108 => (PCIN_dly(22)'last_event, tpd_PCIN_P((2303 - 23)- 48*25), true),
			109 => (PCIN_dly(21)'last_event, tpd_PCIN_P((2303 - 23)- 48*26), true),
			110 => (PCIN_dly(20)'last_event, tpd_PCIN_P((2303 - 23)- 48*27), true),
			111 => (PCIN_dly(19)'last_event, tpd_PCIN_P((2303 - 23)- 48*28), true),
			112 => (PCIN_dly(18)'last_event, tpd_PCIN_P((2303 - 23)- 48*29), true),
			113 => (PCIN_dly(17)'last_event, tpd_PCIN_P((2303 - 23)- 48*30), true),
			114 => (PCIN_dly(16)'last_event, tpd_PCIN_P((2303 - 23)- 48*31), true),
			115 => (PCIN_dly(15)'last_event, tpd_PCIN_P((2303 - 23)- 48*32), true),
			116 => (PCIN_dly(14)'last_event, tpd_PCIN_P((2303 - 23)- 48*33), true),
			117 => (PCIN_dly(13)'last_event, tpd_PCIN_P((2303 - 23)- 48*34), true),
			118 => (PCIN_dly(12)'last_event, tpd_PCIN_P((2303 - 23)- 48*35), true),
			119 => (PCIN_dly(11)'last_event, tpd_PCIN_P((2303 - 23)- 48*36), true),
			120 => (PCIN_dly(10)'last_event, tpd_PCIN_P((2303 - 23)- 48*37), true),
			121 => (PCIN_dly(9)'last_event, tpd_PCIN_P((2303 - 23)- 48*38), true),
			122 => (PCIN_dly(8)'last_event, tpd_PCIN_P((2303 - 23)- 48*39), true),
			123 => (PCIN_dly(7)'last_event, tpd_PCIN_P((2303 - 23)- 48*40), true),
			124 => (PCIN_dly(6)'last_event, tpd_PCIN_P((2303 - 23)- 48*41), true),
			125 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 23)- 48*42), true),
			126 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 23)- 48*43), true),
			127 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 23)- 48*44), true),
			128 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 23)- 48*45), true),
			129 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 23)- 48*46), true),
			130 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 23)- 48*47), true),
			131 => (RSTA_dly'last_event, tpd_RSTA_P(24), true),
			132 => (RSTB_dly'last_event, tpd_RSTB_P(24), true),
			133 => (RSTC_dly'last_event, tpd_RSTC_P(24), true),
			134 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(24), true),
			135 => (RSTD_dly'last_event, tpd_RSTD_P(24), true),
			136 => (RSTM_dly'last_event, tpd_RSTM_P(24), true),
			137 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(24), true),
			138 => (RSTP_dly'last_event, tpd_RSTP_P(24), true),
			139 => (CLK_dly'last_event, tpd_CLK_P(24), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(23),
         GlitchData	=> P_GlitchData(23),
         OutSignalName	=> "P(23)",
         OutTemp	=> P_zd(23),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_P((863 - 24)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_P((863 - 24)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_P((863 - 24)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_P((863 - 24)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_P((863 - 24)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_P((863 - 24)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_P((863 - 24)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_P((863 - 24)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_P((863 - 24)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_P((863 - 24)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_P((863 - 24)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_P((863 - 24)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_P((863 - 24)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_P((863 - 24)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_P((863 - 24)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_P((863 - 24)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_P((863 - 24)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_P((863 - 24)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_P((863 - 24)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_P((863 - 24)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_P((863 - 24)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_P((863 - 24)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_P((863 - 24)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_P((863 - 24)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_P((863 - 24)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_P((863 - 24)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_P((863 - 24)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_P((863 - 24)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_P((863 - 24)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_P((863 - 24)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_P((863 - 24)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_P((863 - 24)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_P((863 - 24)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_P((863 - 24)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_P((863 - 24)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_P((863 - 24)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_P((863 - 24)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_P((863 - 24)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_P((863 - 24)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_P((863 - 24)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_P((863 - 24)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_P((863 - 24)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_P((863 - 24)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_P((863 - 24)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_P((863 - 24)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_P((863 - 24)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_P((863 - 24)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_P((863 - 24)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 24)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 24)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 24)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 24)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 24)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 24)- 48*17), true),
			54 => (C_dly(23)'last_event, tpd_C_P((2303 - 24)- 48*24), true),
			55 => (C_dly(22)'last_event, tpd_C_P((2303 - 24)- 48*25), true),
			56 => (C_dly(21)'last_event, tpd_C_P((2303 - 24)- 48*26), true),
			57 => (C_dly(20)'last_event, tpd_C_P((2303 - 24)- 48*27), true),
			58 => (C_dly(19)'last_event, tpd_C_P((2303 - 24)- 48*28), true),
			59 => (C_dly(18)'last_event, tpd_C_P((2303 - 24)- 48*29), true),
			60 => (C_dly(17)'last_event, tpd_C_P((2303 - 24)- 48*30), true),
			61 => (C_dly(16)'last_event, tpd_C_P((2303 - 24)- 48*31), true),
			62 => (C_dly(15)'last_event, tpd_C_P((2303 - 24)- 48*32), true),
			63 => (C_dly(14)'last_event, tpd_C_P((2303 - 24)- 48*33), true),
			64 => (C_dly(13)'last_event, tpd_C_P((2303 - 24)- 48*34), true),
			65 => (C_dly(12)'last_event, tpd_C_P((2303 - 24)- 48*35), true),
			66 => (C_dly(11)'last_event, tpd_C_P((2303 - 24)- 48*36), true),
			67 => (C_dly(10)'last_event, tpd_C_P((2303 - 24)- 48*37), true),
			68 => (C_dly(9)'last_event, tpd_C_P((2303 - 24)- 48*38), true),
			69 => (C_dly(8)'last_event, tpd_C_P((2303 - 24)- 48*39), true),
			70 => (C_dly(7)'last_event, tpd_C_P((2303 - 24)- 48*40), true),
			71 => (C_dly(6)'last_event, tpd_C_P((2303 - 24)- 48*41), true),
			72 => (C_dly(5)'last_event, tpd_C_P((2303 - 24)- 48*42), true),
			73 => (C_dly(4)'last_event, tpd_C_P((2303 - 24)- 48*43), true),
			74 => (C_dly(3)'last_event, tpd_C_P((2303 - 24)- 48*44), true),
			75 => (C_dly(2)'last_event, tpd_C_P((2303 - 24)- 48*45), true),
			76 => (C_dly(1)'last_event, tpd_C_P((2303 - 24)- 48*46), true),
			77 => (C_dly(0)'last_event, tpd_C_P((2303 - 24)- 48*47), true),
			78 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(23), true),
			79 => (D_dly(17)'last_event, tpd_D_P((863 - 24)- 48*0), true),
			80 => (D_dly(16)'last_event, tpd_D_P((863 - 24)- 48*1), true),
			81 => (D_dly(15)'last_event, tpd_D_P((863 - 24)- 48*2), true),
			82 => (D_dly(14)'last_event, tpd_D_P((863 - 24)- 48*3), true),
			83 => (D_dly(13)'last_event, tpd_D_P((863 - 24)- 48*4), true),
			84 => (D_dly(12)'last_event, tpd_D_P((863 - 24)- 48*5), true),
			85 => (D_dly(11)'last_event, tpd_D_P((863 - 24)- 48*6), true),
			86 => (D_dly(10)'last_event, tpd_D_P((863 - 24)- 48*7), true),
			87 => (D_dly(9)'last_event, tpd_D_P((863 - 24)- 48*8), true),
			88 => (D_dly(8)'last_event, tpd_D_P((863 - 24)- 48*9), true),
			89 => (D_dly(7)'last_event, tpd_D_P((863 - 24)- 48*10), true),
			90 => (D_dly(6)'last_event, tpd_D_P((863 - 24)- 48*11), true),
			91 => (D_dly(5)'last_event, tpd_D_P((863 - 24)- 48*12), true),
			92 => (D_dly(4)'last_event, tpd_D_P((863 - 24)- 48*13), true),
			93 => (D_dly(3)'last_event, tpd_D_P((863 - 24)- 48*14), true),
			94 => (D_dly(2)'last_event, tpd_D_P((863 - 24)- 48*15), true),
			95 => (D_dly(1)'last_event, tpd_D_P((863 - 24)- 48*16), true),
			96 => (D_dly(0)'last_event, tpd_D_P((863 - 24)- 48*17), true),
			97 => (OPMODE_dly(7)'last_event, tpd_OPMODE_P((383 - 24)- 48*0), true),
			98 => (OPMODE_dly(6)'last_event, tpd_OPMODE_P((383 - 24)- 48*1), true),
			99 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 24)- 48*2), true),
			100 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 24)- 48*3), true),
			101 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 24)- 48*4), true),
			102 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 24)- 48*5), true),
			103 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 24)- 48*6), true),
			104 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 24)- 48*7), true),
			105 => (PCIN_dly(23)'last_event, tpd_PCIN_P((2303 - 24)- 48*24), true),
			106 => (PCIN_dly(22)'last_event, tpd_PCIN_P((2303 - 24)- 48*25), true),
			107 => (PCIN_dly(21)'last_event, tpd_PCIN_P((2303 - 24)- 48*26), true),
			108 => (PCIN_dly(20)'last_event, tpd_PCIN_P((2303 - 24)- 48*27), true),
			109 => (PCIN_dly(19)'last_event, tpd_PCIN_P((2303 - 24)- 48*28), true),
			110 => (PCIN_dly(18)'last_event, tpd_PCIN_P((2303 - 24)- 48*29), true),
			111 => (PCIN_dly(17)'last_event, tpd_PCIN_P((2303 - 24)- 48*30), true),
			112 => (PCIN_dly(16)'last_event, tpd_PCIN_P((2303 - 24)- 48*31), true),
			113 => (PCIN_dly(15)'last_event, tpd_PCIN_P((2303 - 24)- 48*32), true),
			114 => (PCIN_dly(14)'last_event, tpd_PCIN_P((2303 - 24)- 48*33), true),
			115 => (PCIN_dly(13)'last_event, tpd_PCIN_P((2303 - 24)- 48*34), true),
			116 => (PCIN_dly(12)'last_event, tpd_PCIN_P((2303 - 24)- 48*35), true),
			117 => (PCIN_dly(11)'last_event, tpd_PCIN_P((2303 - 24)- 48*36), true),
			118 => (PCIN_dly(10)'last_event, tpd_PCIN_P((2303 - 24)- 48*37), true),
			119 => (PCIN_dly(9)'last_event, tpd_PCIN_P((2303 - 24)- 48*38), true),
			120 => (PCIN_dly(8)'last_event, tpd_PCIN_P((2303 - 24)- 48*39), true),
			121 => (PCIN_dly(7)'last_event, tpd_PCIN_P((2303 - 24)- 48*40), true),
			122 => (PCIN_dly(6)'last_event, tpd_PCIN_P((2303 - 24)- 48*41), true),
			123 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 24)- 48*42), true),
			124 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 24)- 48*43), true),
			125 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 24)- 48*44), true),
			126 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 24)- 48*45), true),
			127 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 24)- 48*46), true),
			128 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 24)- 48*47), true),
			129 => (RSTA_dly'last_event, tpd_RSTA_P(23), true),
			130 => (RSTB_dly'last_event, tpd_RSTB_P(23), true),
			131 => (RSTC_dly'last_event, tpd_RSTC_P(23), true),
			132 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(23), true),
			133 => (RSTD_dly'last_event, tpd_RSTD_P(23), true),
			134 => (RSTM_dly'last_event, tpd_RSTM_P(23), true),
			135 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(23), true),
			136 => (RSTP_dly'last_event, tpd_RSTP_P(23), true),
			137 => (CLK_dly'last_event, tpd_CLK_P(23), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(22),
         GlitchData	=> P_GlitchData(22),
         OutSignalName	=> "P(22)",
         OutTemp	=> P_zd(22),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_P((863 - 25)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_P((863 - 25)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_P((863 - 25)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_P((863 - 25)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_P((863 - 25)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_P((863 - 25)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_P((863 - 25)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_P((863 - 25)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_P((863 - 25)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_P((863 - 25)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_P((863 - 25)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_P((863 - 25)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_P((863 - 25)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_P((863 - 25)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_P((863 - 25)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_P((863 - 25)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_P((863 - 25)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_P((863 - 25)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_P((863 - 25)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_P((863 - 25)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_P((863 - 25)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_P((863 - 25)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_P((863 - 25)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_P((863 - 25)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_P((863 - 25)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_P((863 - 25)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_P((863 - 25)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_P((863 - 25)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_P((863 - 25)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_P((863 - 25)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_P((863 - 25)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_P((863 - 25)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_P((863 - 25)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_P((863 - 25)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_P((863 - 25)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_P((863 - 25)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_P((863 - 25)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_P((863 - 25)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_P((863 - 25)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_P((863 - 25)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_P((863 - 25)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_P((863 - 25)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_P((863 - 25)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_P((863 - 25)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_P((863 - 25)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_P((863 - 25)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_P((863 - 25)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_P((863 - 25)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 25)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 25)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 25)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 25)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 25)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 25)- 48*17), true),
			54 => (C_dly(22)'last_event, tpd_C_P((2303 - 25)- 48*25), true),
			55 => (C_dly(21)'last_event, tpd_C_P((2303 - 25)- 48*26), true),
			56 => (C_dly(20)'last_event, tpd_C_P((2303 - 25)- 48*27), true),
			57 => (C_dly(19)'last_event, tpd_C_P((2303 - 25)- 48*28), true),
			58 => (C_dly(18)'last_event, tpd_C_P((2303 - 25)- 48*29), true),
			59 => (C_dly(17)'last_event, tpd_C_P((2303 - 25)- 48*30), true),
			60 => (C_dly(16)'last_event, tpd_C_P((2303 - 25)- 48*31), true),
			61 => (C_dly(15)'last_event, tpd_C_P((2303 - 25)- 48*32), true),
			62 => (C_dly(14)'last_event, tpd_C_P((2303 - 25)- 48*33), true),
			63 => (C_dly(13)'last_event, tpd_C_P((2303 - 25)- 48*34), true),
			64 => (C_dly(12)'last_event, tpd_C_P((2303 - 25)- 48*35), true),
			65 => (C_dly(11)'last_event, tpd_C_P((2303 - 25)- 48*36), true),
			66 => (C_dly(10)'last_event, tpd_C_P((2303 - 25)- 48*37), true),
			67 => (C_dly(9)'last_event, tpd_C_P((2303 - 25)- 48*38), true),
			68 => (C_dly(8)'last_event, tpd_C_P((2303 - 25)- 48*39), true),
			69 => (C_dly(7)'last_event, tpd_C_P((2303 - 25)- 48*40), true),
			70 => (C_dly(6)'last_event, tpd_C_P((2303 - 25)- 48*41), true),
			71 => (C_dly(5)'last_event, tpd_C_P((2303 - 25)- 48*42), true),
			72 => (C_dly(4)'last_event, tpd_C_P((2303 - 25)- 48*43), true),
			73 => (C_dly(3)'last_event, tpd_C_P((2303 - 25)- 48*44), true),
			74 => (C_dly(2)'last_event, tpd_C_P((2303 - 25)- 48*45), true),
			75 => (C_dly(1)'last_event, tpd_C_P((2303 - 25)- 48*46), true),
			76 => (C_dly(0)'last_event, tpd_C_P((2303 - 25)- 48*47), true),
			77 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(22), true),
			78 => (D_dly(17)'last_event, tpd_D_P((863 - 25)- 48*0), true),
			79 => (D_dly(16)'last_event, tpd_D_P((863 - 25)- 48*1), true),
			80 => (D_dly(15)'last_event, tpd_D_P((863 - 25)- 48*2), true),
			81 => (D_dly(14)'last_event, tpd_D_P((863 - 25)- 48*3), true),
			82 => (D_dly(13)'last_event, tpd_D_P((863 - 25)- 48*4), true),
			83 => (D_dly(12)'last_event, tpd_D_P((863 - 25)- 48*5), true),
			84 => (D_dly(11)'last_event, tpd_D_P((863 - 25)- 48*6), true),
			85 => (D_dly(10)'last_event, tpd_D_P((863 - 25)- 48*7), true),
			86 => (D_dly(9)'last_event, tpd_D_P((863 - 25)- 48*8), true),
			87 => (D_dly(8)'last_event, tpd_D_P((863 - 25)- 48*9), true),
			88 => (D_dly(7)'last_event, tpd_D_P((863 - 25)- 48*10), true),
			89 => (D_dly(6)'last_event, tpd_D_P((863 - 25)- 48*11), true),
			90 => (D_dly(5)'last_event, tpd_D_P((863 - 25)- 48*12), true),
			91 => (D_dly(4)'last_event, tpd_D_P((863 - 25)- 48*13), true),
			92 => (D_dly(3)'last_event, tpd_D_P((863 - 25)- 48*14), true),
			93 => (D_dly(2)'last_event, tpd_D_P((863 - 25)- 48*15), true),
			94 => (D_dly(1)'last_event, tpd_D_P((863 - 25)- 48*16), true),
			95 => (D_dly(0)'last_event, tpd_D_P((863 - 25)- 48*17), true),
			96 => (OPMODE_dly(7)'last_event, tpd_OPMODE_P((383 - 25)- 48*0), true),
			97 => (OPMODE_dly(6)'last_event, tpd_OPMODE_P((383 - 25)- 48*1), true),
			98 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 25)- 48*2), true),
			99 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 25)- 48*3), true),
			100 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 25)- 48*4), true),
			101 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 25)- 48*5), true),
			102 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 25)- 48*6), true),
			103 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 25)- 48*7), true),
			104 => (PCIN_dly(22)'last_event, tpd_PCIN_P((2303 - 25)- 48*25), true),
			105 => (PCIN_dly(21)'last_event, tpd_PCIN_P((2303 - 25)- 48*26), true),
			106 => (PCIN_dly(20)'last_event, tpd_PCIN_P((2303 - 25)- 48*27), true),
			107 => (PCIN_dly(19)'last_event, tpd_PCIN_P((2303 - 25)- 48*28), true),
			108 => (PCIN_dly(18)'last_event, tpd_PCIN_P((2303 - 25)- 48*29), true),
			109 => (PCIN_dly(17)'last_event, tpd_PCIN_P((2303 - 25)- 48*30), true),
			110 => (PCIN_dly(16)'last_event, tpd_PCIN_P((2303 - 25)- 48*31), true),
			111 => (PCIN_dly(15)'last_event, tpd_PCIN_P((2303 - 25)- 48*32), true),
			112 => (PCIN_dly(14)'last_event, tpd_PCIN_P((2303 - 25)- 48*33), true),
			113 => (PCIN_dly(13)'last_event, tpd_PCIN_P((2303 - 25)- 48*34), true),
			114 => (PCIN_dly(12)'last_event, tpd_PCIN_P((2303 - 25)- 48*35), true),
			115 => (PCIN_dly(11)'last_event, tpd_PCIN_P((2303 - 25)- 48*36), true),
			116 => (PCIN_dly(10)'last_event, tpd_PCIN_P((2303 - 25)- 48*37), true),
			117 => (PCIN_dly(9)'last_event, tpd_PCIN_P((2303 - 25)- 48*38), true),
			118 => (PCIN_dly(8)'last_event, tpd_PCIN_P((2303 - 25)- 48*39), true),
			119 => (PCIN_dly(7)'last_event, tpd_PCIN_P((2303 - 25)- 48*40), true),
			120 => (PCIN_dly(6)'last_event, tpd_PCIN_P((2303 - 25)- 48*41), true),
			121 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 25)- 48*42), true),
			122 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 25)- 48*43), true),
			123 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 25)- 48*44), true),
			124 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 25)- 48*45), true),
			125 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 25)- 48*46), true),
			126 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 25)- 48*47), true),
			127 => (RSTA_dly'last_event, tpd_RSTA_P(22), true),
			128 => (RSTB_dly'last_event, tpd_RSTB_P(22), true),
			129 => (RSTC_dly'last_event, tpd_RSTC_P(22), true),
			130 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(22), true),
			131 => (RSTD_dly'last_event, tpd_RSTD_P(22), true),
			132 => (RSTM_dly'last_event, tpd_RSTM_P(22), true),
			133 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(22), true),
			134 => (RSTP_dly'last_event, tpd_RSTP_P(22), true),
			135 => (CLK_dly'last_event, tpd_CLK_P(22), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(21),
         GlitchData	=> P_GlitchData(21),
         OutSignalName	=> "P(21)",
         OutTemp	=> P_zd(21),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_P((863 - 26)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_P((863 - 26)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_P((863 - 26)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_P((863 - 26)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_P((863 - 26)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_P((863 - 26)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_P((863 - 26)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_P((863 - 26)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_P((863 - 26)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_P((863 - 26)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_P((863 - 26)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_P((863 - 26)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_P((863 - 26)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_P((863 - 26)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_P((863 - 26)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_P((863 - 26)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_P((863 - 26)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_P((863 - 26)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_P((863 - 26)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_P((863 - 26)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_P((863 - 26)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_P((863 - 26)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_P((863 - 26)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_P((863 - 26)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_P((863 - 26)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_P((863 - 26)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_P((863 - 26)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_P((863 - 26)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_P((863 - 26)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_P((863 - 26)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_P((863 - 26)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_P((863 - 26)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_P((863 - 26)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_P((863 - 26)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_P((863 - 26)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_P((863 - 26)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_P((863 - 26)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_P((863 - 26)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_P((863 - 26)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_P((863 - 26)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_P((863 - 26)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_P((863 - 26)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_P((863 - 26)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_P((863 - 26)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_P((863 - 26)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_P((863 - 26)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_P((863 - 26)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_P((863 - 26)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 26)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 26)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 26)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 26)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 26)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 26)- 48*17), true),
			54 => (C_dly(21)'last_event, tpd_C_P((2303 - 26)- 48*26), true),
			55 => (C_dly(20)'last_event, tpd_C_P((2303 - 26)- 48*27), true),
			56 => (C_dly(19)'last_event, tpd_C_P((2303 - 26)- 48*28), true),
			57 => (C_dly(18)'last_event, tpd_C_P((2303 - 26)- 48*29), true),
			58 => (C_dly(17)'last_event, tpd_C_P((2303 - 26)- 48*30), true),
			59 => (C_dly(16)'last_event, tpd_C_P((2303 - 26)- 48*31), true),
			60 => (C_dly(15)'last_event, tpd_C_P((2303 - 26)- 48*32), true),
			61 => (C_dly(14)'last_event, tpd_C_P((2303 - 26)- 48*33), true),
			62 => (C_dly(13)'last_event, tpd_C_P((2303 - 26)- 48*34), true),
			63 => (C_dly(12)'last_event, tpd_C_P((2303 - 26)- 48*35), true),
			64 => (C_dly(11)'last_event, tpd_C_P((2303 - 26)- 48*36), true),
			65 => (C_dly(10)'last_event, tpd_C_P((2303 - 26)- 48*37), true),
			66 => (C_dly(9)'last_event, tpd_C_P((2303 - 26)- 48*38), true),
			67 => (C_dly(8)'last_event, tpd_C_P((2303 - 26)- 48*39), true),
			68 => (C_dly(7)'last_event, tpd_C_P((2303 - 26)- 48*40), true),
			69 => (C_dly(6)'last_event, tpd_C_P((2303 - 26)- 48*41), true),
			70 => (C_dly(5)'last_event, tpd_C_P((2303 - 26)- 48*42), true),
			71 => (C_dly(4)'last_event, tpd_C_P((2303 - 26)- 48*43), true),
			72 => (C_dly(3)'last_event, tpd_C_P((2303 - 26)- 48*44), true),
			73 => (C_dly(2)'last_event, tpd_C_P((2303 - 26)- 48*45), true),
			74 => (C_dly(1)'last_event, tpd_C_P((2303 - 26)- 48*46), true),
			75 => (C_dly(0)'last_event, tpd_C_P((2303 - 26)- 48*47), true),
			76 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(21), true),
			77 => (D_dly(17)'last_event, tpd_D_P((863 - 26)- 48*0), true),
			78 => (D_dly(16)'last_event, tpd_D_P((863 - 26)- 48*1), true),
			79 => (D_dly(15)'last_event, tpd_D_P((863 - 26)- 48*2), true),
			80 => (D_dly(14)'last_event, tpd_D_P((863 - 26)- 48*3), true),
			81 => (D_dly(13)'last_event, tpd_D_P((863 - 26)- 48*4), true),
			82 => (D_dly(12)'last_event, tpd_D_P((863 - 26)- 48*5), true),
			83 => (D_dly(11)'last_event, tpd_D_P((863 - 26)- 48*6), true),
			84 => (D_dly(10)'last_event, tpd_D_P((863 - 26)- 48*7), true),
			85 => (D_dly(9)'last_event, tpd_D_P((863 - 26)- 48*8), true),
			86 => (D_dly(8)'last_event, tpd_D_P((863 - 26)- 48*9), true),
			87 => (D_dly(7)'last_event, tpd_D_P((863 - 26)- 48*10), true),
			88 => (D_dly(6)'last_event, tpd_D_P((863 - 26)- 48*11), true),
			89 => (D_dly(5)'last_event, tpd_D_P((863 - 26)- 48*12), true),
			90 => (D_dly(4)'last_event, tpd_D_P((863 - 26)- 48*13), true),
			91 => (D_dly(3)'last_event, tpd_D_P((863 - 26)- 48*14), true),
			92 => (D_dly(2)'last_event, tpd_D_P((863 - 26)- 48*15), true),
			93 => (D_dly(1)'last_event, tpd_D_P((863 - 26)- 48*16), true),
			94 => (D_dly(0)'last_event, tpd_D_P((863 - 26)- 48*17), true),
			95 => (OPMODE_dly(7)'last_event, tpd_OPMODE_P((383 - 26)- 48*0), true),
			96 => (OPMODE_dly(6)'last_event, tpd_OPMODE_P((383 - 26)- 48*1), true),
			97 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 26)- 48*2), true),
			98 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 26)- 48*3), true),
			99 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 26)- 48*4), true),
			100 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 26)- 48*5), true),
			101 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 26)- 48*6), true),
			102 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 26)- 48*7), true),
			103 => (PCIN_dly(21)'last_event, tpd_PCIN_P((2303 - 26)- 48*26), true),
			104 => (PCIN_dly(20)'last_event, tpd_PCIN_P((2303 - 26)- 48*27), true),
			105 => (PCIN_dly(19)'last_event, tpd_PCIN_P((2303 - 26)- 48*28), true),
			106 => (PCIN_dly(18)'last_event, tpd_PCIN_P((2303 - 26)- 48*29), true),
			107 => (PCIN_dly(17)'last_event, tpd_PCIN_P((2303 - 26)- 48*30), true),
			108 => (PCIN_dly(16)'last_event, tpd_PCIN_P((2303 - 26)- 48*31), true),
			109 => (PCIN_dly(15)'last_event, tpd_PCIN_P((2303 - 26)- 48*32), true),
			110 => (PCIN_dly(14)'last_event, tpd_PCIN_P((2303 - 26)- 48*33), true),
			111 => (PCIN_dly(13)'last_event, tpd_PCIN_P((2303 - 26)- 48*34), true),
			112 => (PCIN_dly(12)'last_event, tpd_PCIN_P((2303 - 26)- 48*35), true),
			113 => (PCIN_dly(11)'last_event, tpd_PCIN_P((2303 - 26)- 48*36), true),
			114 => (PCIN_dly(10)'last_event, tpd_PCIN_P((2303 - 26)- 48*37), true),
			115 => (PCIN_dly(9)'last_event, tpd_PCIN_P((2303 - 26)- 48*38), true),
			116 => (PCIN_dly(8)'last_event, tpd_PCIN_P((2303 - 26)- 48*39), true),
			117 => (PCIN_dly(7)'last_event, tpd_PCIN_P((2303 - 26)- 48*40), true),
			118 => (PCIN_dly(6)'last_event, tpd_PCIN_P((2303 - 26)- 48*41), true),
			119 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 26)- 48*42), true),
			120 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 26)- 48*43), true),
			121 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 26)- 48*44), true),
			122 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 26)- 48*45), true),
			123 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 26)- 48*46), true),
			124 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 26)- 48*47), true),
			125 => (RSTA_dly'last_event, tpd_RSTA_P(21), true),
			126 => (RSTB_dly'last_event, tpd_RSTB_P(21), true),
			127 => (RSTC_dly'last_event, tpd_RSTC_P(21), true),
			128 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(21), true),
			129 => (RSTD_dly'last_event, tpd_RSTD_P(21), true),
			130 => (RSTM_dly'last_event, tpd_RSTM_P(21), true),
			131 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(21), true),
			132 => (RSTP_dly'last_event, tpd_RSTP_P(21), true),
			133 => (CLK_dly'last_event, tpd_CLK_P(21), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(20),
         GlitchData	=> P_GlitchData(20),
         OutSignalName	=> "P(20)",
         OutTemp	=> P_zd(20),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_P((863 - 27)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_P((863 - 27)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_P((863 - 27)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_P((863 - 27)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_P((863 - 27)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_P((863 - 27)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_P((863 - 27)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_P((863 - 27)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_P((863 - 27)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_P((863 - 27)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_P((863 - 27)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_P((863 - 27)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_P((863 - 27)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_P((863 - 27)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_P((863 - 27)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_P((863 - 27)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_P((863 - 27)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_P((863 - 27)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_P((863 - 27)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_P((863 - 27)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_P((863 - 27)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_P((863 - 27)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_P((863 - 27)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_P((863 - 27)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_P((863 - 27)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_P((863 - 27)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_P((863 - 27)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_P((863 - 27)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_P((863 - 27)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_P((863 - 27)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_P((863 - 27)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_P((863 - 27)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_P((863 - 27)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_P((863 - 27)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_P((863 - 27)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_P((863 - 27)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_P((863 - 27)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_P((863 - 27)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_P((863 - 27)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_P((863 - 27)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_P((863 - 27)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_P((863 - 27)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_P((863 - 27)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_P((863 - 27)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_P((863 - 27)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_P((863 - 27)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_P((863 - 27)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_P((863 - 27)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 27)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 27)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 27)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 27)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 27)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 27)- 48*17), true),
			54 => (C_dly(20)'last_event, tpd_C_P((2303 - 27)- 48*27), true),
			55 => (C_dly(19)'last_event, tpd_C_P((2303 - 27)- 48*28), true),
			56 => (C_dly(18)'last_event, tpd_C_P((2303 - 27)- 48*29), true),
			57 => (C_dly(17)'last_event, tpd_C_P((2303 - 27)- 48*30), true),
			58 => (C_dly(16)'last_event, tpd_C_P((2303 - 27)- 48*31), true),
			59 => (C_dly(15)'last_event, tpd_C_P((2303 - 27)- 48*32), true),
			60 => (C_dly(14)'last_event, tpd_C_P((2303 - 27)- 48*33), true),
			61 => (C_dly(13)'last_event, tpd_C_P((2303 - 27)- 48*34), true),
			62 => (C_dly(12)'last_event, tpd_C_P((2303 - 27)- 48*35), true),
			63 => (C_dly(11)'last_event, tpd_C_P((2303 - 27)- 48*36), true),
			64 => (C_dly(10)'last_event, tpd_C_P((2303 - 27)- 48*37), true),
			65 => (C_dly(9)'last_event, tpd_C_P((2303 - 27)- 48*38), true),
			66 => (C_dly(8)'last_event, tpd_C_P((2303 - 27)- 48*39), true),
			67 => (C_dly(7)'last_event, tpd_C_P((2303 - 27)- 48*40), true),
			68 => (C_dly(6)'last_event, tpd_C_P((2303 - 27)- 48*41), true),
			69 => (C_dly(5)'last_event, tpd_C_P((2303 - 27)- 48*42), true),
			70 => (C_dly(4)'last_event, tpd_C_P((2303 - 27)- 48*43), true),
			71 => (C_dly(3)'last_event, tpd_C_P((2303 - 27)- 48*44), true),
			72 => (C_dly(2)'last_event, tpd_C_P((2303 - 27)- 48*45), true),
			73 => (C_dly(1)'last_event, tpd_C_P((2303 - 27)- 48*46), true),
			74 => (C_dly(0)'last_event, tpd_C_P((2303 - 27)- 48*47), true),
			75 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(20), true),
			76 => (D_dly(17)'last_event, tpd_D_P((863 - 27)- 48*0), true),
			77 => (D_dly(16)'last_event, tpd_D_P((863 - 27)- 48*1), true),
			78 => (D_dly(15)'last_event, tpd_D_P((863 - 27)- 48*2), true),
			79 => (D_dly(14)'last_event, tpd_D_P((863 - 27)- 48*3), true),
			80 => (D_dly(13)'last_event, tpd_D_P((863 - 27)- 48*4), true),
			81 => (D_dly(12)'last_event, tpd_D_P((863 - 27)- 48*5), true),
			82 => (D_dly(11)'last_event, tpd_D_P((863 - 27)- 48*6), true),
			83 => (D_dly(10)'last_event, tpd_D_P((863 - 27)- 48*7), true),
			84 => (D_dly(9)'last_event, tpd_D_P((863 - 27)- 48*8), true),
			85 => (D_dly(8)'last_event, tpd_D_P((863 - 27)- 48*9), true),
			86 => (D_dly(7)'last_event, tpd_D_P((863 - 27)- 48*10), true),
			87 => (D_dly(6)'last_event, tpd_D_P((863 - 27)- 48*11), true),
			88 => (D_dly(5)'last_event, tpd_D_P((863 - 27)- 48*12), true),
			89 => (D_dly(4)'last_event, tpd_D_P((863 - 27)- 48*13), true),
			90 => (D_dly(3)'last_event, tpd_D_P((863 - 27)- 48*14), true),
			91 => (D_dly(2)'last_event, tpd_D_P((863 - 27)- 48*15), true),
			92 => (D_dly(1)'last_event, tpd_D_P((863 - 27)- 48*16), true),
			93 => (D_dly(0)'last_event, tpd_D_P((863 - 27)- 48*17), true),
			94 => (OPMODE_dly(7)'last_event, tpd_OPMODE_P((383 - 27)- 48*0), true),
			95 => (OPMODE_dly(6)'last_event, tpd_OPMODE_P((383 - 27)- 48*1), true),
			96 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 27)- 48*2), true),
			97 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 27)- 48*3), true),
			98 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 27)- 48*4), true),
			99 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 27)- 48*5), true),
			100 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 27)- 48*6), true),
			101 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 27)- 48*7), true),
			102 => (PCIN_dly(20)'last_event, tpd_PCIN_P((2303 - 27)- 48*27), true),
			103 => (PCIN_dly(19)'last_event, tpd_PCIN_P((2303 - 27)- 48*28), true),
			104 => (PCIN_dly(18)'last_event, tpd_PCIN_P((2303 - 27)- 48*29), true),
			105 => (PCIN_dly(17)'last_event, tpd_PCIN_P((2303 - 27)- 48*30), true),
			106 => (PCIN_dly(16)'last_event, tpd_PCIN_P((2303 - 27)- 48*31), true),
			107 => (PCIN_dly(15)'last_event, tpd_PCIN_P((2303 - 27)- 48*32), true),
			108 => (PCIN_dly(14)'last_event, tpd_PCIN_P((2303 - 27)- 48*33), true),
			109 => (PCIN_dly(13)'last_event, tpd_PCIN_P((2303 - 27)- 48*34), true),
			110 => (PCIN_dly(12)'last_event, tpd_PCIN_P((2303 - 27)- 48*35), true),
			111 => (PCIN_dly(11)'last_event, tpd_PCIN_P((2303 - 27)- 48*36), true),
			112 => (PCIN_dly(10)'last_event, tpd_PCIN_P((2303 - 27)- 48*37), true),
			113 => (PCIN_dly(9)'last_event, tpd_PCIN_P((2303 - 27)- 48*38), true),
			114 => (PCIN_dly(8)'last_event, tpd_PCIN_P((2303 - 27)- 48*39), true),
			115 => (PCIN_dly(7)'last_event, tpd_PCIN_P((2303 - 27)- 48*40), true),
			116 => (PCIN_dly(6)'last_event, tpd_PCIN_P((2303 - 27)- 48*41), true),
			117 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 27)- 48*42), true),
			118 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 27)- 48*43), true),
			119 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 27)- 48*44), true),
			120 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 27)- 48*45), true),
			121 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 27)- 48*46), true),
			122 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 27)- 48*47), true),
			123 => (RSTA_dly'last_event, tpd_RSTA_P(20), true),
			124 => (RSTB_dly'last_event, tpd_RSTB_P(20), true),
			125 => (RSTC_dly'last_event, tpd_RSTC_P(20), true),
			126 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(20), true),
			127 => (RSTD_dly'last_event, tpd_RSTD_P(20), true),
			128 => (RSTM_dly'last_event, tpd_RSTM_P(20), true),
			129 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(20), true),
			130 => (RSTP_dly'last_event, tpd_RSTP_P(20), true),
			131 => (CLK_dly'last_event, tpd_CLK_P(20), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(19),
         GlitchData	=> P_GlitchData(19),
         OutSignalName	=> "P(19)",
         OutTemp	=> P_zd(19),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_P((863 - 28)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_P((863 - 28)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_P((863 - 28)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_P((863 - 28)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_P((863 - 28)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_P((863 - 28)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_P((863 - 28)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_P((863 - 28)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_P((863 - 28)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_P((863 - 28)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_P((863 - 28)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_P((863 - 28)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_P((863 - 28)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_P((863 - 28)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_P((863 - 28)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_P((863 - 28)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_P((863 - 28)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_P((863 - 28)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_P((863 - 28)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_P((863 - 28)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_P((863 - 28)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_P((863 - 28)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_P((863 - 28)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_P((863 - 28)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_P((863 - 28)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_P((863 - 28)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_P((863 - 28)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_P((863 - 28)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_P((863 - 28)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_P((863 - 28)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_P((863 - 28)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_P((863 - 28)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_P((863 - 28)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_P((863 - 28)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_P((863 - 28)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_P((863 - 28)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_P((863 - 28)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_P((863 - 28)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_P((863 - 28)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_P((863 - 28)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_P((863 - 28)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_P((863 - 28)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_P((863 - 28)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_P((863 - 28)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_P((863 - 28)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_P((863 - 28)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_P((863 - 28)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_P((863 - 28)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 28)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 28)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 28)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 28)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 28)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 28)- 48*17), true),
			54 => (C_dly(19)'last_event, tpd_C_P((2303 - 28)- 48*28), true),
			55 => (C_dly(18)'last_event, tpd_C_P((2303 - 28)- 48*29), true),
			56 => (C_dly(17)'last_event, tpd_C_P((2303 - 28)- 48*30), true),
			57 => (C_dly(16)'last_event, tpd_C_P((2303 - 28)- 48*31), true),
			58 => (C_dly(15)'last_event, tpd_C_P((2303 - 28)- 48*32), true),
			59 => (C_dly(14)'last_event, tpd_C_P((2303 - 28)- 48*33), true),
			60 => (C_dly(13)'last_event, tpd_C_P((2303 - 28)- 48*34), true),
			61 => (C_dly(12)'last_event, tpd_C_P((2303 - 28)- 48*35), true),
			62 => (C_dly(11)'last_event, tpd_C_P((2303 - 28)- 48*36), true),
			63 => (C_dly(10)'last_event, tpd_C_P((2303 - 28)- 48*37), true),
			64 => (C_dly(9)'last_event, tpd_C_P((2303 - 28)- 48*38), true),
			65 => (C_dly(8)'last_event, tpd_C_P((2303 - 28)- 48*39), true),
			66 => (C_dly(7)'last_event, tpd_C_P((2303 - 28)- 48*40), true),
			67 => (C_dly(6)'last_event, tpd_C_P((2303 - 28)- 48*41), true),
			68 => (C_dly(5)'last_event, tpd_C_P((2303 - 28)- 48*42), true),
			69 => (C_dly(4)'last_event, tpd_C_P((2303 - 28)- 48*43), true),
			70 => (C_dly(3)'last_event, tpd_C_P((2303 - 28)- 48*44), true),
			71 => (C_dly(2)'last_event, tpd_C_P((2303 - 28)- 48*45), true),
			72 => (C_dly(1)'last_event, tpd_C_P((2303 - 28)- 48*46), true),
			73 => (C_dly(0)'last_event, tpd_C_P((2303 - 28)- 48*47), true),
			74 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(19), true),
			75 => (D_dly(17)'last_event, tpd_D_P((863 - 28)- 48*0), true),
			76 => (D_dly(16)'last_event, tpd_D_P((863 - 28)- 48*1), true),
			77 => (D_dly(15)'last_event, tpd_D_P((863 - 28)- 48*2), true),
			78 => (D_dly(14)'last_event, tpd_D_P((863 - 28)- 48*3), true),
			79 => (D_dly(13)'last_event, tpd_D_P((863 - 28)- 48*4), true),
			80 => (D_dly(12)'last_event, tpd_D_P((863 - 28)- 48*5), true),
			81 => (D_dly(11)'last_event, tpd_D_P((863 - 28)- 48*6), true),
			82 => (D_dly(10)'last_event, tpd_D_P((863 - 28)- 48*7), true),
			83 => (D_dly(9)'last_event, tpd_D_P((863 - 28)- 48*8), true),
			84 => (D_dly(8)'last_event, tpd_D_P((863 - 28)- 48*9), true),
			85 => (D_dly(7)'last_event, tpd_D_P((863 - 28)- 48*10), true),
			86 => (D_dly(6)'last_event, tpd_D_P((863 - 28)- 48*11), true),
			87 => (D_dly(5)'last_event, tpd_D_P((863 - 28)- 48*12), true),
			88 => (D_dly(4)'last_event, tpd_D_P((863 - 28)- 48*13), true),
			89 => (D_dly(3)'last_event, tpd_D_P((863 - 28)- 48*14), true),
			90 => (D_dly(2)'last_event, tpd_D_P((863 - 28)- 48*15), true),
			91 => (D_dly(1)'last_event, tpd_D_P((863 - 28)- 48*16), true),
			92 => (D_dly(0)'last_event, tpd_D_P((863 - 28)- 48*17), true),
			93 => (OPMODE_dly(7)'last_event, tpd_OPMODE_P((383 - 28)- 48*0), true),
			94 => (OPMODE_dly(6)'last_event, tpd_OPMODE_P((383 - 28)- 48*1), true),
			95 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 28)- 48*2), true),
			96 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 28)- 48*3), true),
			97 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 28)- 48*4), true),
			98 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 28)- 48*5), true),
			99 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 28)- 48*6), true),
			100 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 28)- 48*7), true),
			101 => (PCIN_dly(19)'last_event, tpd_PCIN_P((2303 - 28)- 48*28), true),
			102 => (PCIN_dly(18)'last_event, tpd_PCIN_P((2303 - 28)- 48*29), true),
			103 => (PCIN_dly(17)'last_event, tpd_PCIN_P((2303 - 28)- 48*30), true),
			104 => (PCIN_dly(16)'last_event, tpd_PCIN_P((2303 - 28)- 48*31), true),
			105 => (PCIN_dly(15)'last_event, tpd_PCIN_P((2303 - 28)- 48*32), true),
			106 => (PCIN_dly(14)'last_event, tpd_PCIN_P((2303 - 28)- 48*33), true),
			107 => (PCIN_dly(13)'last_event, tpd_PCIN_P((2303 - 28)- 48*34), true),
			108 => (PCIN_dly(12)'last_event, tpd_PCIN_P((2303 - 28)- 48*35), true),
			109 => (PCIN_dly(11)'last_event, tpd_PCIN_P((2303 - 28)- 48*36), true),
			110 => (PCIN_dly(10)'last_event, tpd_PCIN_P((2303 - 28)- 48*37), true),
			111 => (PCIN_dly(9)'last_event, tpd_PCIN_P((2303 - 28)- 48*38), true),
			112 => (PCIN_dly(8)'last_event, tpd_PCIN_P((2303 - 28)- 48*39), true),
			113 => (PCIN_dly(7)'last_event, tpd_PCIN_P((2303 - 28)- 48*40), true),
			114 => (PCIN_dly(6)'last_event, tpd_PCIN_P((2303 - 28)- 48*41), true),
			115 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 28)- 48*42), true),
			116 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 28)- 48*43), true),
			117 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 28)- 48*44), true),
			118 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 28)- 48*45), true),
			119 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 28)- 48*46), true),
			120 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 28)- 48*47), true),
			121 => (RSTA_dly'last_event, tpd_RSTA_P(19), true),
			122 => (RSTB_dly'last_event, tpd_RSTB_P(19), true),
			123 => (RSTC_dly'last_event, tpd_RSTC_P(19), true),
			124 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(19), true),
			125 => (RSTD_dly'last_event, tpd_RSTD_P(19), true),
			126 => (RSTM_dly'last_event, tpd_RSTM_P(19), true),
			127 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(19), true),
			128 => (RSTP_dly'last_event, tpd_RSTP_P(19), true),
			129 => (CLK_dly'last_event, tpd_CLK_P(19), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(18),
         GlitchData	=> P_GlitchData(18),
         OutSignalName	=> "P(18)",
         OutTemp	=> P_zd(18),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_P((863 - 29)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_P((863 - 29)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_P((863 - 29)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_P((863 - 29)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_P((863 - 29)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_P((863 - 29)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_P((863 - 29)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_P((863 - 29)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_P((863 - 29)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_P((863 - 29)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_P((863 - 29)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_P((863 - 29)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_P((863 - 29)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_P((863 - 29)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_P((863 - 29)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_P((863 - 29)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_P((863 - 29)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_P((863 - 29)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_P((863 - 29)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_P((863 - 29)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_P((863 - 29)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_P((863 - 29)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_P((863 - 29)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_P((863 - 29)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_P((863 - 29)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_P((863 - 29)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_P((863 - 29)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_P((863 - 29)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_P((863 - 29)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_P((863 - 29)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_P((863 - 29)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_P((863 - 29)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_P((863 - 29)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_P((863 - 29)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_P((863 - 29)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_P((863 - 29)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_P((863 - 29)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_P((863 - 29)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_P((863 - 29)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_P((863 - 29)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_P((863 - 29)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_P((863 - 29)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_P((863 - 29)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_P((863 - 29)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_P((863 - 29)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_P((863 - 29)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_P((863 - 29)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_P((863 - 29)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 29)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 29)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 29)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 29)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 29)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 29)- 48*17), true),
			54 => (C_dly(18)'last_event, tpd_C_P((2303 - 29)- 48*29), true),
			55 => (C_dly(17)'last_event, tpd_C_P((2303 - 29)- 48*30), true),
			56 => (C_dly(16)'last_event, tpd_C_P((2303 - 29)- 48*31), true),
			57 => (C_dly(15)'last_event, tpd_C_P((2303 - 29)- 48*32), true),
			58 => (C_dly(14)'last_event, tpd_C_P((2303 - 29)- 48*33), true),
			59 => (C_dly(13)'last_event, tpd_C_P((2303 - 29)- 48*34), true),
			60 => (C_dly(12)'last_event, tpd_C_P((2303 - 29)- 48*35), true),
			61 => (C_dly(11)'last_event, tpd_C_P((2303 - 29)- 48*36), true),
			62 => (C_dly(10)'last_event, tpd_C_P((2303 - 29)- 48*37), true),
			63 => (C_dly(9)'last_event, tpd_C_P((2303 - 29)- 48*38), true),
			64 => (C_dly(8)'last_event, tpd_C_P((2303 - 29)- 48*39), true),
			65 => (C_dly(7)'last_event, tpd_C_P((2303 - 29)- 48*40), true),
			66 => (C_dly(6)'last_event, tpd_C_P((2303 - 29)- 48*41), true),
			67 => (C_dly(5)'last_event, tpd_C_P((2303 - 29)- 48*42), true),
			68 => (C_dly(4)'last_event, tpd_C_P((2303 - 29)- 48*43), true),
			69 => (C_dly(3)'last_event, tpd_C_P((2303 - 29)- 48*44), true),
			70 => (C_dly(2)'last_event, tpd_C_P((2303 - 29)- 48*45), true),
			71 => (C_dly(1)'last_event, tpd_C_P((2303 - 29)- 48*46), true),
			72 => (C_dly(0)'last_event, tpd_C_P((2303 - 29)- 48*47), true),
			73 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(18), true),
			74 => (D_dly(17)'last_event, tpd_D_P((863 - 29)- 48*0), true),
			75 => (D_dly(16)'last_event, tpd_D_P((863 - 29)- 48*1), true),
			76 => (D_dly(15)'last_event, tpd_D_P((863 - 29)- 48*2), true),
			77 => (D_dly(14)'last_event, tpd_D_P((863 - 29)- 48*3), true),
			78 => (D_dly(13)'last_event, tpd_D_P((863 - 29)- 48*4), true),
			79 => (D_dly(12)'last_event, tpd_D_P((863 - 29)- 48*5), true),
			80 => (D_dly(11)'last_event, tpd_D_P((863 - 29)- 48*6), true),
			81 => (D_dly(10)'last_event, tpd_D_P((863 - 29)- 48*7), true),
			82 => (D_dly(9)'last_event, tpd_D_P((863 - 29)- 48*8), true),
			83 => (D_dly(8)'last_event, tpd_D_P((863 - 29)- 48*9), true),
			84 => (D_dly(7)'last_event, tpd_D_P((863 - 29)- 48*10), true),
			85 => (D_dly(6)'last_event, tpd_D_P((863 - 29)- 48*11), true),
			86 => (D_dly(5)'last_event, tpd_D_P((863 - 29)- 48*12), true),
			87 => (D_dly(4)'last_event, tpd_D_P((863 - 29)- 48*13), true),
			88 => (D_dly(3)'last_event, tpd_D_P((863 - 29)- 48*14), true),
			89 => (D_dly(2)'last_event, tpd_D_P((863 - 29)- 48*15), true),
			90 => (D_dly(1)'last_event, tpd_D_P((863 - 29)- 48*16), true),
			91 => (D_dly(0)'last_event, tpd_D_P((863 - 29)- 48*17), true),
			92 => (OPMODE_dly(7)'last_event, tpd_OPMODE_P((383 - 29)- 48*0), true),
			93 => (OPMODE_dly(6)'last_event, tpd_OPMODE_P((383 - 29)- 48*1), true),
			94 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 29)- 48*2), true),
			95 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 29)- 48*3), true),
			96 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 29)- 48*4), true),
			97 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 29)- 48*5), true),
			98 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 29)- 48*6), true),
			99 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 29)- 48*7), true),
			100 => (PCIN_dly(18)'last_event, tpd_PCIN_P((2303 - 29)- 48*29), true),
			101 => (PCIN_dly(17)'last_event, tpd_PCIN_P((2303 - 29)- 48*30), true),
			102 => (PCIN_dly(16)'last_event, tpd_PCIN_P((2303 - 29)- 48*31), true),
			103 => (PCIN_dly(15)'last_event, tpd_PCIN_P((2303 - 29)- 48*32), true),
			104 => (PCIN_dly(14)'last_event, tpd_PCIN_P((2303 - 29)- 48*33), true),
			105 => (PCIN_dly(13)'last_event, tpd_PCIN_P((2303 - 29)- 48*34), true),
			106 => (PCIN_dly(12)'last_event, tpd_PCIN_P((2303 - 29)- 48*35), true),
			107 => (PCIN_dly(11)'last_event, tpd_PCIN_P((2303 - 29)- 48*36), true),
			108 => (PCIN_dly(10)'last_event, tpd_PCIN_P((2303 - 29)- 48*37), true),
			109 => (PCIN_dly(9)'last_event, tpd_PCIN_P((2303 - 29)- 48*38), true),
			110 => (PCIN_dly(8)'last_event, tpd_PCIN_P((2303 - 29)- 48*39), true),
			111 => (PCIN_dly(7)'last_event, tpd_PCIN_P((2303 - 29)- 48*40), true),
			112 => (PCIN_dly(6)'last_event, tpd_PCIN_P((2303 - 29)- 48*41), true),
			113 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 29)- 48*42), true),
			114 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 29)- 48*43), true),
			115 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 29)- 48*44), true),
			116 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 29)- 48*45), true),
			117 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 29)- 48*46), true),
			118 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 29)- 48*47), true),
			119 => (RSTA_dly'last_event, tpd_RSTA_P(18), true),
			120 => (RSTB_dly'last_event, tpd_RSTB_P(18), true),
			121 => (RSTC_dly'last_event, tpd_RSTC_P(18), true),
			122 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(18), true),
			123 => (RSTD_dly'last_event, tpd_RSTD_P(18), true),
			124 => (RSTM_dly'last_event, tpd_RSTM_P(18), true),
			125 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(18), true),
			126 => (RSTP_dly'last_event, tpd_RSTP_P(18), true),
			127 => (CLK_dly'last_event, tpd_CLK_P(18), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(17),
         GlitchData	=> P_GlitchData(17),
         OutSignalName	=> "P(17)",
         OutTemp	=> P_zd(17),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_P((863 - 30)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_P((863 - 30)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_P((863 - 30)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_P((863 - 30)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_P((863 - 30)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_P((863 - 30)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_P((863 - 30)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_P((863 - 30)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_P((863 - 30)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_P((863 - 30)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_P((863 - 30)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_P((863 - 30)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_P((863 - 30)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_P((863 - 30)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_P((863 - 30)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_P((863 - 30)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_P((863 - 30)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_P((863 - 30)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_P((863 - 30)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_P((863 - 30)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_P((863 - 30)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_P((863 - 30)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_P((863 - 30)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_P((863 - 30)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_P((863 - 30)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_P((863 - 30)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_P((863 - 30)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_P((863 - 30)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_P((863 - 30)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_P((863 - 30)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_P((863 - 30)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_P((863 - 30)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_P((863 - 30)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_P((863 - 30)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_P((863 - 30)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_P((863 - 30)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_P((863 - 30)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_P((863 - 30)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_P((863 - 30)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_P((863 - 30)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_P((863 - 30)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_P((863 - 30)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_P((863 - 30)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_P((863 - 30)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_P((863 - 30)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_P((863 - 30)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_P((863 - 30)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_P((863 - 30)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 30)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 30)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 30)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 30)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 30)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 30)- 48*17), true),
			54 => (C_dly(17)'last_event, tpd_C_P((2303 - 30)- 48*30), true),
			55 => (C_dly(16)'last_event, tpd_C_P((2303 - 30)- 48*31), true),
			56 => (C_dly(15)'last_event, tpd_C_P((2303 - 30)- 48*32), true),
			57 => (C_dly(14)'last_event, tpd_C_P((2303 - 30)- 48*33), true),
			58 => (C_dly(13)'last_event, tpd_C_P((2303 - 30)- 48*34), true),
			59 => (C_dly(12)'last_event, tpd_C_P((2303 - 30)- 48*35), true),
			60 => (C_dly(11)'last_event, tpd_C_P((2303 - 30)- 48*36), true),
			61 => (C_dly(10)'last_event, tpd_C_P((2303 - 30)- 48*37), true),
			62 => (C_dly(9)'last_event, tpd_C_P((2303 - 30)- 48*38), true),
			63 => (C_dly(8)'last_event, tpd_C_P((2303 - 30)- 48*39), true),
			64 => (C_dly(7)'last_event, tpd_C_P((2303 - 30)- 48*40), true),
			65 => (C_dly(6)'last_event, tpd_C_P((2303 - 30)- 48*41), true),
			66 => (C_dly(5)'last_event, tpd_C_P((2303 - 30)- 48*42), true),
			67 => (C_dly(4)'last_event, tpd_C_P((2303 - 30)- 48*43), true),
			68 => (C_dly(3)'last_event, tpd_C_P((2303 - 30)- 48*44), true),
			69 => (C_dly(2)'last_event, tpd_C_P((2303 - 30)- 48*45), true),
			70 => (C_dly(1)'last_event, tpd_C_P((2303 - 30)- 48*46), true),
			71 => (C_dly(0)'last_event, tpd_C_P((2303 - 30)- 48*47), true),
			72 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(17), true),
			73 => (D_dly(17)'last_event, tpd_D_P((863 - 30)- 48*0), true),
			74 => (D_dly(16)'last_event, tpd_D_P((863 - 30)- 48*1), true),
			75 => (D_dly(15)'last_event, tpd_D_P((863 - 30)- 48*2), true),
			76 => (D_dly(14)'last_event, tpd_D_P((863 - 30)- 48*3), true),
			77 => (D_dly(13)'last_event, tpd_D_P((863 - 30)- 48*4), true),
			78 => (D_dly(12)'last_event, tpd_D_P((863 - 30)- 48*5), true),
			79 => (D_dly(11)'last_event, tpd_D_P((863 - 30)- 48*6), true),
			80 => (D_dly(10)'last_event, tpd_D_P((863 - 30)- 48*7), true),
			81 => (D_dly(9)'last_event, tpd_D_P((863 - 30)- 48*8), true),
			82 => (D_dly(8)'last_event, tpd_D_P((863 - 30)- 48*9), true),
			83 => (D_dly(7)'last_event, tpd_D_P((863 - 30)- 48*10), true),
			84 => (D_dly(6)'last_event, tpd_D_P((863 - 30)- 48*11), true),
			85 => (D_dly(5)'last_event, tpd_D_P((863 - 30)- 48*12), true),
			86 => (D_dly(4)'last_event, tpd_D_P((863 - 30)- 48*13), true),
			87 => (D_dly(3)'last_event, tpd_D_P((863 - 30)- 48*14), true),
			88 => (D_dly(2)'last_event, tpd_D_P((863 - 30)- 48*15), true),
			89 => (D_dly(1)'last_event, tpd_D_P((863 - 30)- 48*16), true),
			90 => (D_dly(0)'last_event, tpd_D_P((863 - 30)- 48*17), true),
			91 => (OPMODE_dly(7)'last_event, tpd_OPMODE_P((383 - 30)- 48*0), true),
			92 => (OPMODE_dly(6)'last_event, tpd_OPMODE_P((383 - 30)- 48*1), true),
			93 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 30)- 48*2), true),
			94 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 30)- 48*3), true),
			95 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 30)- 48*4), true),
			96 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 30)- 48*5), true),
			97 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 30)- 48*6), true),
			98 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 30)- 48*7), true),
			99 => (PCIN_dly(17)'last_event, tpd_PCIN_P((2303 - 30)- 48*30), true),
			100 => (PCIN_dly(16)'last_event, tpd_PCIN_P((2303 - 30)- 48*31), true),
			101 => (PCIN_dly(15)'last_event, tpd_PCIN_P((2303 - 30)- 48*32), true),
			102 => (PCIN_dly(14)'last_event, tpd_PCIN_P((2303 - 30)- 48*33), true),
			103 => (PCIN_dly(13)'last_event, tpd_PCIN_P((2303 - 30)- 48*34), true),
			104 => (PCIN_dly(12)'last_event, tpd_PCIN_P((2303 - 30)- 48*35), true),
			105 => (PCIN_dly(11)'last_event, tpd_PCIN_P((2303 - 30)- 48*36), true),
			106 => (PCIN_dly(10)'last_event, tpd_PCIN_P((2303 - 30)- 48*37), true),
			107 => (PCIN_dly(9)'last_event, tpd_PCIN_P((2303 - 30)- 48*38), true),
			108 => (PCIN_dly(8)'last_event, tpd_PCIN_P((2303 - 30)- 48*39), true),
			109 => (PCIN_dly(7)'last_event, tpd_PCIN_P((2303 - 30)- 48*40), true),
			110 => (PCIN_dly(6)'last_event, tpd_PCIN_P((2303 - 30)- 48*41), true),
			111 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 30)- 48*42), true),
			112 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 30)- 48*43), true),
			113 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 30)- 48*44), true),
			114 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 30)- 48*45), true),
			115 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 30)- 48*46), true),
			116 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 30)- 48*47), true),
			117 => (RSTA_dly'last_event, tpd_RSTA_P(17), true),
			118 => (RSTB_dly'last_event, tpd_RSTB_P(17), true),
			119 => (RSTC_dly'last_event, tpd_RSTC_P(17), true),
			120 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(17), true),
			121 => (RSTD_dly'last_event, tpd_RSTD_P(17), true),
			122 => (RSTM_dly'last_event, tpd_RSTM_P(17), true),
			123 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(17), true),
			124 => (RSTP_dly'last_event, tpd_RSTP_P(17), true),
			125 => (CLK_dly'last_event, tpd_CLK_P(17), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(16),
         GlitchData	=> P_GlitchData(16),
         OutSignalName	=> "P(16)",
         OutTemp	=> P_zd(16),
         Paths		=> (
			0 => (A_dly(16)'last_event, tpd_A_P((863 - 31)- 48*1), true),
			1 => (A_dly(15)'last_event, tpd_A_P((863 - 31)- 48*2), true),
			2 => (A_dly(14)'last_event, tpd_A_P((863 - 31)- 48*3), true),
			3 => (A_dly(13)'last_event, tpd_A_P((863 - 31)- 48*4), true),
			4 => (A_dly(12)'last_event, tpd_A_P((863 - 31)- 48*5), true),
			5 => (A_dly(11)'last_event, tpd_A_P((863 - 31)- 48*6), true),
			6 => (A_dly(10)'last_event, tpd_A_P((863 - 31)- 48*7), true),
			7 => (A_dly(9)'last_event, tpd_A_P((863 - 31)- 48*8), true),
			8 => (A_dly(8)'last_event, tpd_A_P((863 - 31)- 48*9), true),
			9 => (A_dly(7)'last_event, tpd_A_P((863 - 31)- 48*10), true),
			10 => (A_dly(6)'last_event, tpd_A_P((863 - 31)- 48*11), true),
			11 => (A_dly(5)'last_event, tpd_A_P((863 - 31)- 48*12), true),
			12 => (A_dly(4)'last_event, tpd_A_P((863 - 31)- 48*13), true),
			13 => (A_dly(3)'last_event, tpd_A_P((863 - 31)- 48*14), true),
			14 => (A_dly(2)'last_event, tpd_A_P((863 - 31)- 48*15), true),
			15 => (A_dly(1)'last_event, tpd_A_P((863 - 31)- 48*16), true),
			16 => (A_dly(0)'last_event, tpd_A_P((863 - 31)- 48*17), true),
			17 => (B_dly(16)'last_event, tpd_B_P((863 - 31)- 48*1), true),
			18 => (B_dly(15)'last_event, tpd_B_P((863 - 31)- 48*2), true),
			19 => (B_dly(14)'last_event, tpd_B_P((863 - 31)- 48*3), true),
			20 => (B_dly(13)'last_event, tpd_B_P((863 - 31)- 48*4), true),
			21 => (B_dly(12)'last_event, tpd_B_P((863 - 31)- 48*5), true),
			22 => (B_dly(11)'last_event, tpd_B_P((863 - 31)- 48*6), true),
			23 => (B_dly(10)'last_event, tpd_B_P((863 - 31)- 48*7), true),
			24 => (B_dly(9)'last_event, tpd_B_P((863 - 31)- 48*8), true),
			25 => (B_dly(8)'last_event, tpd_B_P((863 - 31)- 48*9), true),
			26 => (B_dly(7)'last_event, tpd_B_P((863 - 31)- 48*10), true),
			27 => (B_dly(6)'last_event, tpd_B_P((863 - 31)- 48*11), true),
			28 => (B_dly(5)'last_event, tpd_B_P((863 - 31)- 48*12), true),
			29 => (B_dly(4)'last_event, tpd_B_P((863 - 31)- 48*13), true),
			30 => (B_dly(3)'last_event, tpd_B_P((863 - 31)- 48*14), true),
			31 => (B_dly(2)'last_event, tpd_B_P((863 - 31)- 48*15), true),
			32 => (B_dly(1)'last_event, tpd_B_P((863 - 31)- 48*16), true),
			33 => (B_dly(0)'last_event, tpd_B_P((863 - 31)- 48*17), true),
			34 => (BCIN_dly(16)'last_event, tpd_BCIN_P((863 - 31)- 48*1), true),
			35 => (BCIN_dly(15)'last_event, tpd_BCIN_P((863 - 31)- 48*2), true),
			36 => (BCIN_dly(14)'last_event, tpd_BCIN_P((863 - 31)- 48*3), true),
			37 => (BCIN_dly(13)'last_event, tpd_BCIN_P((863 - 31)- 48*4), true),
			38 => (BCIN_dly(12)'last_event, tpd_BCIN_P((863 - 31)- 48*5), true),
			39 => (BCIN_dly(11)'last_event, tpd_BCIN_P((863 - 31)- 48*6), true),
			40 => (BCIN_dly(10)'last_event, tpd_BCIN_P((863 - 31)- 48*7), true),
			41 => (BCIN_dly(9)'last_event, tpd_BCIN_P((863 - 31)- 48*8), true),
			42 => (BCIN_dly(8)'last_event, tpd_BCIN_P((863 - 31)- 48*9), true),
			43 => (BCIN_dly(7)'last_event, tpd_BCIN_P((863 - 31)- 48*10), true),
			44 => (BCIN_dly(6)'last_event, tpd_BCIN_P((863 - 31)- 48*11), true),
			45 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 31)- 48*12), true),
			46 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 31)- 48*13), true),
			47 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 31)- 48*14), true),
			48 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 31)- 48*15), true),
			49 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 31)- 48*16), true),
			50 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 31)- 48*17), true),
			51 => (C_dly(16)'last_event, tpd_C_P((2303 - 31)- 48*31), true),
			52 => (C_dly(15)'last_event, tpd_C_P((2303 - 31)- 48*32), true),
			53 => (C_dly(14)'last_event, tpd_C_P((2303 - 31)- 48*33), true),
			54 => (C_dly(13)'last_event, tpd_C_P((2303 - 31)- 48*34), true),
			55 => (C_dly(12)'last_event, tpd_C_P((2303 - 31)- 48*35), true),
			56 => (C_dly(11)'last_event, tpd_C_P((2303 - 31)- 48*36), true),
			57 => (C_dly(10)'last_event, tpd_C_P((2303 - 31)- 48*37), true),
			58 => (C_dly(9)'last_event, tpd_C_P((2303 - 31)- 48*38), true),
			59 => (C_dly(8)'last_event, tpd_C_P((2303 - 31)- 48*39), true),
			60 => (C_dly(7)'last_event, tpd_C_P((2303 - 31)- 48*40), true),
			61 => (C_dly(6)'last_event, tpd_C_P((2303 - 31)- 48*41), true),
			62 => (C_dly(5)'last_event, tpd_C_P((2303 - 31)- 48*42), true),
			63 => (C_dly(4)'last_event, tpd_C_P((2303 - 31)- 48*43), true),
			64 => (C_dly(3)'last_event, tpd_C_P((2303 - 31)- 48*44), true),
			65 => (C_dly(2)'last_event, tpd_C_P((2303 - 31)- 48*45), true),
			66 => (C_dly(1)'last_event, tpd_C_P((2303 - 31)- 48*46), true),
			67 => (C_dly(0)'last_event, tpd_C_P((2303 - 31)- 48*47), true),
			68 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(16), true),
			69 => (D_dly(16)'last_event, tpd_D_P((863 - 31)- 48*1), true),
			70 => (D_dly(15)'last_event, tpd_D_P((863 - 31)- 48*2), true),
			71 => (D_dly(14)'last_event, tpd_D_P((863 - 31)- 48*3), true),
			72 => (D_dly(13)'last_event, tpd_D_P((863 - 31)- 48*4), true),
			73 => (D_dly(12)'last_event, tpd_D_P((863 - 31)- 48*5), true),
			74 => (D_dly(11)'last_event, tpd_D_P((863 - 31)- 48*6), true),
			75 => (D_dly(10)'last_event, tpd_D_P((863 - 31)- 48*7), true),
			76 => (D_dly(9)'last_event, tpd_D_P((863 - 31)- 48*8), true),
			77 => (D_dly(8)'last_event, tpd_D_P((863 - 31)- 48*9), true),
			78 => (D_dly(7)'last_event, tpd_D_P((863 - 31)- 48*10), true),
			79 => (D_dly(6)'last_event, tpd_D_P((863 - 31)- 48*11), true),
			80 => (D_dly(5)'last_event, tpd_D_P((863 - 31)- 48*12), true),
			81 => (D_dly(4)'last_event, tpd_D_P((863 - 31)- 48*13), true),
			82 => (D_dly(3)'last_event, tpd_D_P((863 - 31)- 48*14), true),
			83 => (D_dly(2)'last_event, tpd_D_P((863 - 31)- 48*15), true),
			84 => (D_dly(1)'last_event, tpd_D_P((863 - 31)- 48*16), true),
			85 => (D_dly(0)'last_event, tpd_D_P((863 - 31)- 48*17), true),
			86 => (OPMODE_dly(7)'last_event, tpd_OPMODE_P((383 - 31)- 48*0), true),
			87 => (OPMODE_dly(6)'last_event, tpd_OPMODE_P((383 - 31)- 48*1), true),
			88 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 31)- 48*2), true),
			89 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 31)- 48*3), true),
			90 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 31)- 48*4), true),
			91 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 31)- 48*5), true),
			92 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 31)- 48*6), true),
			93 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 31)- 48*7), true),
			94 => (PCIN_dly(16)'last_event, tpd_PCIN_P((2303 - 31)- 48*31), true),
			95 => (PCIN_dly(15)'last_event, tpd_PCIN_P((2303 - 31)- 48*32), true),
			96 => (PCIN_dly(14)'last_event, tpd_PCIN_P((2303 - 31)- 48*33), true),
			97 => (PCIN_dly(13)'last_event, tpd_PCIN_P((2303 - 31)- 48*34), true),
			98 => (PCIN_dly(12)'last_event, tpd_PCIN_P((2303 - 31)- 48*35), true),
			99 => (PCIN_dly(11)'last_event, tpd_PCIN_P((2303 - 31)- 48*36), true),
			100 => (PCIN_dly(10)'last_event, tpd_PCIN_P((2303 - 31)- 48*37), true),
			101 => (PCIN_dly(9)'last_event, tpd_PCIN_P((2303 - 31)- 48*38), true),
			102 => (PCIN_dly(8)'last_event, tpd_PCIN_P((2303 - 31)- 48*39), true),
			103 => (PCIN_dly(7)'last_event, tpd_PCIN_P((2303 - 31)- 48*40), true),
			104 => (PCIN_dly(6)'last_event, tpd_PCIN_P((2303 - 31)- 48*41), true),
			105 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 31)- 48*42), true),
			106 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 31)- 48*43), true),
			107 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 31)- 48*44), true),
			108 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 31)- 48*45), true),
			109 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 31)- 48*46), true),
			110 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 31)- 48*47), true),
			111 => (RSTA_dly'last_event, tpd_RSTA_P(16), true),
			112 => (RSTB_dly'last_event, tpd_RSTB_P(16), true),
			113 => (RSTC_dly'last_event, tpd_RSTC_P(16), true),
			114 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(16), true),
			115 => (RSTD_dly'last_event, tpd_RSTD_P(16), true),
			116 => (RSTM_dly'last_event, tpd_RSTM_P(16), true),
			117 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(16), true),
			118 => (RSTP_dly'last_event, tpd_RSTP_P(16), true),
			119 => (CLK_dly'last_event, tpd_CLK_P(16), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(15),
         GlitchData	=> P_GlitchData(15),
         OutSignalName	=> "P(15)",
         OutTemp	=> P_zd(15),
         Paths		=> (
			0 => (A_dly(15)'last_event, tpd_A_P((863 - 32)- 48*2), true),
			1 => (A_dly(14)'last_event, tpd_A_P((863 - 32)- 48*3), true),
			2 => (A_dly(13)'last_event, tpd_A_P((863 - 32)- 48*4), true),
			3 => (A_dly(12)'last_event, tpd_A_P((863 - 32)- 48*5), true),
			4 => (A_dly(11)'last_event, tpd_A_P((863 - 32)- 48*6), true),
			5 => (A_dly(10)'last_event, tpd_A_P((863 - 32)- 48*7), true),
			6 => (A_dly(9)'last_event, tpd_A_P((863 - 32)- 48*8), true),
			7 => (A_dly(8)'last_event, tpd_A_P((863 - 32)- 48*9), true),
			8 => (A_dly(7)'last_event, tpd_A_P((863 - 32)- 48*10), true),
			9 => (A_dly(6)'last_event, tpd_A_P((863 - 32)- 48*11), true),
			10 => (A_dly(5)'last_event, tpd_A_P((863 - 32)- 48*12), true),
			11 => (A_dly(4)'last_event, tpd_A_P((863 - 32)- 48*13), true),
			12 => (A_dly(3)'last_event, tpd_A_P((863 - 32)- 48*14), true),
			13 => (A_dly(2)'last_event, tpd_A_P((863 - 32)- 48*15), true),
			14 => (A_dly(1)'last_event, tpd_A_P((863 - 32)- 48*16), true),
			15 => (A_dly(0)'last_event, tpd_A_P((863 - 32)- 48*17), true),
			16 => (B_dly(15)'last_event, tpd_B_P((863 - 32)- 48*2), true),
			17 => (B_dly(14)'last_event, tpd_B_P((863 - 32)- 48*3), true),
			18 => (B_dly(13)'last_event, tpd_B_P((863 - 32)- 48*4), true),
			19 => (B_dly(12)'last_event, tpd_B_P((863 - 32)- 48*5), true),
			20 => (B_dly(11)'last_event, tpd_B_P((863 - 32)- 48*6), true),
			21 => (B_dly(10)'last_event, tpd_B_P((863 - 32)- 48*7), true),
			22 => (B_dly(9)'last_event, tpd_B_P((863 - 32)- 48*8), true),
			23 => (B_dly(8)'last_event, tpd_B_P((863 - 32)- 48*9), true),
			24 => (B_dly(7)'last_event, tpd_B_P((863 - 32)- 48*10), true),
			25 => (B_dly(6)'last_event, tpd_B_P((863 - 32)- 48*11), true),
			26 => (B_dly(5)'last_event, tpd_B_P((863 - 32)- 48*12), true),
			27 => (B_dly(4)'last_event, tpd_B_P((863 - 32)- 48*13), true),
			28 => (B_dly(3)'last_event, tpd_B_P((863 - 32)- 48*14), true),
			29 => (B_dly(2)'last_event, tpd_B_P((863 - 32)- 48*15), true),
			30 => (B_dly(1)'last_event, tpd_B_P((863 - 32)- 48*16), true),
			31 => (B_dly(0)'last_event, tpd_B_P((863 - 32)- 48*17), true),
			32 => (BCIN_dly(15)'last_event, tpd_BCIN_P((863 - 32)- 48*2), true),
			33 => (BCIN_dly(14)'last_event, tpd_BCIN_P((863 - 32)- 48*3), true),
			34 => (BCIN_dly(13)'last_event, tpd_BCIN_P((863 - 32)- 48*4), true),
			35 => (BCIN_dly(12)'last_event, tpd_BCIN_P((863 - 32)- 48*5), true),
			36 => (BCIN_dly(11)'last_event, tpd_BCIN_P((863 - 32)- 48*6), true),
			37 => (BCIN_dly(10)'last_event, tpd_BCIN_P((863 - 32)- 48*7), true),
			38 => (BCIN_dly(9)'last_event, tpd_BCIN_P((863 - 32)- 48*8), true),
			39 => (BCIN_dly(8)'last_event, tpd_BCIN_P((863 - 32)- 48*9), true),
			40 => (BCIN_dly(7)'last_event, tpd_BCIN_P((863 - 32)- 48*10), true),
			41 => (BCIN_dly(6)'last_event, tpd_BCIN_P((863 - 32)- 48*11), true),
			42 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 32)- 48*12), true),
			43 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 32)- 48*13), true),
			44 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 32)- 48*14), true),
			45 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 32)- 48*15), true),
			46 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 32)- 48*16), true),
			47 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 32)- 48*17), true),
			48 => (C_dly(15)'last_event, tpd_C_P((2303 - 32)- 48*32), true),
			49 => (C_dly(14)'last_event, tpd_C_P((2303 - 32)- 48*33), true),
			50 => (C_dly(13)'last_event, tpd_C_P((2303 - 32)- 48*34), true),
			51 => (C_dly(12)'last_event, tpd_C_P((2303 - 32)- 48*35), true),
			52 => (C_dly(11)'last_event, tpd_C_P((2303 - 32)- 48*36), true),
			53 => (C_dly(10)'last_event, tpd_C_P((2303 - 32)- 48*37), true),
			54 => (C_dly(9)'last_event, tpd_C_P((2303 - 32)- 48*38), true),
			55 => (C_dly(8)'last_event, tpd_C_P((2303 - 32)- 48*39), true),
			56 => (C_dly(7)'last_event, tpd_C_P((2303 - 32)- 48*40), true),
			57 => (C_dly(6)'last_event, tpd_C_P((2303 - 32)- 48*41), true),
			58 => (C_dly(5)'last_event, tpd_C_P((2303 - 32)- 48*42), true),
			59 => (C_dly(4)'last_event, tpd_C_P((2303 - 32)- 48*43), true),
			60 => (C_dly(3)'last_event, tpd_C_P((2303 - 32)- 48*44), true),
			61 => (C_dly(2)'last_event, tpd_C_P((2303 - 32)- 48*45), true),
			62 => (C_dly(1)'last_event, tpd_C_P((2303 - 32)- 48*46), true),
			63 => (C_dly(0)'last_event, tpd_C_P((2303 - 32)- 48*47), true),
			64 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(15), true),
			65 => (D_dly(15)'last_event, tpd_D_P((863 - 32)- 48*2), true),
			66 => (D_dly(14)'last_event, tpd_D_P((863 - 32)- 48*3), true),
			67 => (D_dly(13)'last_event, tpd_D_P((863 - 32)- 48*4), true),
			68 => (D_dly(12)'last_event, tpd_D_P((863 - 32)- 48*5), true),
			69 => (D_dly(11)'last_event, tpd_D_P((863 - 32)- 48*6), true),
			70 => (D_dly(10)'last_event, tpd_D_P((863 - 32)- 48*7), true),
			71 => (D_dly(9)'last_event, tpd_D_P((863 - 32)- 48*8), true),
			72 => (D_dly(8)'last_event, tpd_D_P((863 - 32)- 48*9), true),
			73 => (D_dly(7)'last_event, tpd_D_P((863 - 32)- 48*10), true),
			74 => (D_dly(6)'last_event, tpd_D_P((863 - 32)- 48*11), true),
			75 => (D_dly(5)'last_event, tpd_D_P((863 - 32)- 48*12), true),
			76 => (D_dly(4)'last_event, tpd_D_P((863 - 32)- 48*13), true),
			77 => (D_dly(3)'last_event, tpd_D_P((863 - 32)- 48*14), true),
			78 => (D_dly(2)'last_event, tpd_D_P((863 - 32)- 48*15), true),
			79 => (D_dly(1)'last_event, tpd_D_P((863 - 32)- 48*16), true),
			80 => (D_dly(0)'last_event, tpd_D_P((863 - 32)- 48*17), true),
			81 => (OPMODE_dly(7)'last_event, tpd_OPMODE_P((383 - 32)- 48*0), true),
			82 => (OPMODE_dly(6)'last_event, tpd_OPMODE_P((383 - 32)- 48*1), true),
			83 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 32)- 48*2), true),
			84 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 32)- 48*3), true),
			85 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 32)- 48*4), true),
			86 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 32)- 48*5), true),
			87 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 32)- 48*6), true),
			88 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 32)- 48*7), true),
			89 => (PCIN_dly(15)'last_event, tpd_PCIN_P((2303 - 32)- 48*32), true),
			90 => (PCIN_dly(14)'last_event, tpd_PCIN_P((2303 - 32)- 48*33), true),
			91 => (PCIN_dly(13)'last_event, tpd_PCIN_P((2303 - 32)- 48*34), true),
			92 => (PCIN_dly(12)'last_event, tpd_PCIN_P((2303 - 32)- 48*35), true),
			93 => (PCIN_dly(11)'last_event, tpd_PCIN_P((2303 - 32)- 48*36), true),
			94 => (PCIN_dly(10)'last_event, tpd_PCIN_P((2303 - 32)- 48*37), true),
			95 => (PCIN_dly(9)'last_event, tpd_PCIN_P((2303 - 32)- 48*38), true),
			96 => (PCIN_dly(8)'last_event, tpd_PCIN_P((2303 - 32)- 48*39), true),
			97 => (PCIN_dly(7)'last_event, tpd_PCIN_P((2303 - 32)- 48*40), true),
			98 => (PCIN_dly(6)'last_event, tpd_PCIN_P((2303 - 32)- 48*41), true),
			99 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 32)- 48*42), true),
			100 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 32)- 48*43), true),
			101 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 32)- 48*44), true),
			102 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 32)- 48*45), true),
			103 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 32)- 48*46), true),
			104 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 32)- 48*47), true),
			105 => (RSTA_dly'last_event, tpd_RSTA_P(15), true),
			106 => (RSTB_dly'last_event, tpd_RSTB_P(15), true),
			107 => (RSTC_dly'last_event, tpd_RSTC_P(15), true),
			108 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(15), true),
			109 => (RSTD_dly'last_event, tpd_RSTD_P(15), true),
			110 => (RSTM_dly'last_event, tpd_RSTM_P(15), true),
			111 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(15), true),
			112 => (RSTP_dly'last_event, tpd_RSTP_P(15), true),
			113 => (CLK_dly'last_event, tpd_CLK_P(15), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(14),
         GlitchData	=> P_GlitchData(14),
         OutSignalName	=> "P(14)",
         OutTemp	=> P_zd(14),
         Paths		=> (
			0 => (A_dly(14)'last_event, tpd_A_P((863 - 33)- 48*3), true),
			1 => (A_dly(13)'last_event, tpd_A_P((863 - 33)- 48*4), true),
			2 => (A_dly(12)'last_event, tpd_A_P((863 - 33)- 48*5), true),
			3 => (A_dly(11)'last_event, tpd_A_P((863 - 33)- 48*6), true),
			4 => (A_dly(10)'last_event, tpd_A_P((863 - 33)- 48*7), true),
			5 => (A_dly(9)'last_event, tpd_A_P((863 - 33)- 48*8), true),
			6 => (A_dly(8)'last_event, tpd_A_P((863 - 33)- 48*9), true),
			7 => (A_dly(7)'last_event, tpd_A_P((863 - 33)- 48*10), true),
			8 => (A_dly(6)'last_event, tpd_A_P((863 - 33)- 48*11), true),
			9 => (A_dly(5)'last_event, tpd_A_P((863 - 33)- 48*12), true),
			10 => (A_dly(4)'last_event, tpd_A_P((863 - 33)- 48*13), true),
			11 => (A_dly(3)'last_event, tpd_A_P((863 - 33)- 48*14), true),
			12 => (A_dly(2)'last_event, tpd_A_P((863 - 33)- 48*15), true),
			13 => (A_dly(1)'last_event, tpd_A_P((863 - 33)- 48*16), true),
			14 => (A_dly(0)'last_event, tpd_A_P((863 - 33)- 48*17), true),
			15 => (B_dly(14)'last_event, tpd_B_P((863 - 33)- 48*3), true),
			16 => (B_dly(13)'last_event, tpd_B_P((863 - 33)- 48*4), true),
			17 => (B_dly(12)'last_event, tpd_B_P((863 - 33)- 48*5), true),
			18 => (B_dly(11)'last_event, tpd_B_P((863 - 33)- 48*6), true),
			19 => (B_dly(10)'last_event, tpd_B_P((863 - 33)- 48*7), true),
			20 => (B_dly(9)'last_event, tpd_B_P((863 - 33)- 48*8), true),
			21 => (B_dly(8)'last_event, tpd_B_P((863 - 33)- 48*9), true),
			22 => (B_dly(7)'last_event, tpd_B_P((863 - 33)- 48*10), true),
			23 => (B_dly(6)'last_event, tpd_B_P((863 - 33)- 48*11), true),
			24 => (B_dly(5)'last_event, tpd_B_P((863 - 33)- 48*12), true),
			25 => (B_dly(4)'last_event, tpd_B_P((863 - 33)- 48*13), true),
			26 => (B_dly(3)'last_event, tpd_B_P((863 - 33)- 48*14), true),
			27 => (B_dly(2)'last_event, tpd_B_P((863 - 33)- 48*15), true),
			28 => (B_dly(1)'last_event, tpd_B_P((863 - 33)- 48*16), true),
			29 => (B_dly(0)'last_event, tpd_B_P((863 - 33)- 48*17), true),
			30 => (BCIN_dly(14)'last_event, tpd_BCIN_P((863 - 33)- 48*3), true),
			31 => (BCIN_dly(13)'last_event, tpd_BCIN_P((863 - 33)- 48*4), true),
			32 => (BCIN_dly(12)'last_event, tpd_BCIN_P((863 - 33)- 48*5), true),
			33 => (BCIN_dly(11)'last_event, tpd_BCIN_P((863 - 33)- 48*6), true),
			34 => (BCIN_dly(10)'last_event, tpd_BCIN_P((863 - 33)- 48*7), true),
			35 => (BCIN_dly(9)'last_event, tpd_BCIN_P((863 - 33)- 48*8), true),
			36 => (BCIN_dly(8)'last_event, tpd_BCIN_P((863 - 33)- 48*9), true),
			37 => (BCIN_dly(7)'last_event, tpd_BCIN_P((863 - 33)- 48*10), true),
			38 => (BCIN_dly(6)'last_event, tpd_BCIN_P((863 - 33)- 48*11), true),
			39 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 33)- 48*12), true),
			40 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 33)- 48*13), true),
			41 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 33)- 48*14), true),
			42 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 33)- 48*15), true),
			43 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 33)- 48*16), true),
			44 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 33)- 48*17), true),
			45 => (C_dly(14)'last_event, tpd_C_P((2303 - 33)- 48*33), true),
			46 => (C_dly(13)'last_event, tpd_C_P((2303 - 33)- 48*34), true),
			47 => (C_dly(12)'last_event, tpd_C_P((2303 - 33)- 48*35), true),
			48 => (C_dly(11)'last_event, tpd_C_P((2303 - 33)- 48*36), true),
			49 => (C_dly(10)'last_event, tpd_C_P((2303 - 33)- 48*37), true),
			50 => (C_dly(9)'last_event, tpd_C_P((2303 - 33)- 48*38), true),
			51 => (C_dly(8)'last_event, tpd_C_P((2303 - 33)- 48*39), true),
			52 => (C_dly(7)'last_event, tpd_C_P((2303 - 33)- 48*40), true),
			53 => (C_dly(6)'last_event, tpd_C_P((2303 - 33)- 48*41), true),
			54 => (C_dly(5)'last_event, tpd_C_P((2303 - 33)- 48*42), true),
			55 => (C_dly(4)'last_event, tpd_C_P((2303 - 33)- 48*43), true),
			56 => (C_dly(3)'last_event, tpd_C_P((2303 - 33)- 48*44), true),
			57 => (C_dly(2)'last_event, tpd_C_P((2303 - 33)- 48*45), true),
			58 => (C_dly(1)'last_event, tpd_C_P((2303 - 33)- 48*46), true),
			59 => (C_dly(0)'last_event, tpd_C_P((2303 - 33)- 48*47), true),
			60 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(14), true),
			61 => (D_dly(14)'last_event, tpd_D_P((863 - 33)- 48*3), true),
			62 => (D_dly(13)'last_event, tpd_D_P((863 - 33)- 48*4), true),
			63 => (D_dly(12)'last_event, tpd_D_P((863 - 33)- 48*5), true),
			64 => (D_dly(11)'last_event, tpd_D_P((863 - 33)- 48*6), true),
			65 => (D_dly(10)'last_event, tpd_D_P((863 - 33)- 48*7), true),
			66 => (D_dly(9)'last_event, tpd_D_P((863 - 33)- 48*8), true),
			67 => (D_dly(8)'last_event, tpd_D_P((863 - 33)- 48*9), true),
			68 => (D_dly(7)'last_event, tpd_D_P((863 - 33)- 48*10), true),
			69 => (D_dly(6)'last_event, tpd_D_P((863 - 33)- 48*11), true),
			70 => (D_dly(5)'last_event, tpd_D_P((863 - 33)- 48*12), true),
			71 => (D_dly(4)'last_event, tpd_D_P((863 - 33)- 48*13), true),
			72 => (D_dly(3)'last_event, tpd_D_P((863 - 33)- 48*14), true),
			73 => (D_dly(2)'last_event, tpd_D_P((863 - 33)- 48*15), true),
			74 => (D_dly(1)'last_event, tpd_D_P((863 - 33)- 48*16), true),
			75 => (D_dly(0)'last_event, tpd_D_P((863 - 33)- 48*17), true),
			76 => (OPMODE_dly(7)'last_event, tpd_OPMODE_P((383 - 33)- 48*0), true),
			77 => (OPMODE_dly(6)'last_event, tpd_OPMODE_P((383 - 33)- 48*1), true),
			78 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 33)- 48*2), true),
			79 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 33)- 48*3), true),
			80 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 33)- 48*4), true),
			81 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 33)- 48*5), true),
			82 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 33)- 48*6), true),
			83 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 33)- 48*7), true),
			84 => (PCIN_dly(14)'last_event, tpd_PCIN_P((2303 - 33)- 48*33), true),
			85 => (PCIN_dly(13)'last_event, tpd_PCIN_P((2303 - 33)- 48*34), true),
			86 => (PCIN_dly(12)'last_event, tpd_PCIN_P((2303 - 33)- 48*35), true),
			87 => (PCIN_dly(11)'last_event, tpd_PCIN_P((2303 - 33)- 48*36), true),
			88 => (PCIN_dly(10)'last_event, tpd_PCIN_P((2303 - 33)- 48*37), true),
			89 => (PCIN_dly(9)'last_event, tpd_PCIN_P((2303 - 33)- 48*38), true),
			90 => (PCIN_dly(8)'last_event, tpd_PCIN_P((2303 - 33)- 48*39), true),
			91 => (PCIN_dly(7)'last_event, tpd_PCIN_P((2303 - 33)- 48*40), true),
			92 => (PCIN_dly(6)'last_event, tpd_PCIN_P((2303 - 33)- 48*41), true),
			93 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 33)- 48*42), true),
			94 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 33)- 48*43), true),
			95 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 33)- 48*44), true),
			96 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 33)- 48*45), true),
			97 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 33)- 48*46), true),
			98 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 33)- 48*47), true),
			99 => (RSTA_dly'last_event, tpd_RSTA_P(14), true),
			100 => (RSTB_dly'last_event, tpd_RSTB_P(14), true),
			101 => (RSTC_dly'last_event, tpd_RSTC_P(14), true),
			102 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(14), true),
			103 => (RSTD_dly'last_event, tpd_RSTD_P(14), true),
			104 => (RSTM_dly'last_event, tpd_RSTM_P(14), true),
			105 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(14), true),
			106 => (RSTP_dly'last_event, tpd_RSTP_P(14), true),
			107 => (CLK_dly'last_event, tpd_CLK_P(14), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(13),
         GlitchData	=> P_GlitchData(13),
         OutSignalName	=> "P(13)",
         OutTemp	=> P_zd(13),
         Paths		=> (
			0 => (A_dly(13)'last_event, tpd_A_P((863 - 34)- 48*4), true),
			1 => (A_dly(12)'last_event, tpd_A_P((863 - 34)- 48*5), true),
			2 => (A_dly(11)'last_event, tpd_A_P((863 - 34)- 48*6), true),
			3 => (A_dly(10)'last_event, tpd_A_P((863 - 34)- 48*7), true),
			4 => (A_dly(9)'last_event, tpd_A_P((863 - 34)- 48*8), true),
			5 => (A_dly(8)'last_event, tpd_A_P((863 - 34)- 48*9), true),
			6 => (A_dly(7)'last_event, tpd_A_P((863 - 34)- 48*10), true),
			7 => (A_dly(6)'last_event, tpd_A_P((863 - 34)- 48*11), true),
			8 => (A_dly(5)'last_event, tpd_A_P((863 - 34)- 48*12), true),
			9 => (A_dly(4)'last_event, tpd_A_P((863 - 34)- 48*13), true),
			10 => (A_dly(3)'last_event, tpd_A_P((863 - 34)- 48*14), true),
			11 => (A_dly(2)'last_event, tpd_A_P((863 - 34)- 48*15), true),
			12 => (A_dly(1)'last_event, tpd_A_P((863 - 34)- 48*16), true),
			13 => (A_dly(0)'last_event, tpd_A_P((863 - 34)- 48*17), true),
			14 => (B_dly(13)'last_event, tpd_B_P((863 - 34)- 48*4), true),
			15 => (B_dly(12)'last_event, tpd_B_P((863 - 34)- 48*5), true),
			16 => (B_dly(11)'last_event, tpd_B_P((863 - 34)- 48*6), true),
			17 => (B_dly(10)'last_event, tpd_B_P((863 - 34)- 48*7), true),
			18 => (B_dly(9)'last_event, tpd_B_P((863 - 34)- 48*8), true),
			19 => (B_dly(8)'last_event, tpd_B_P((863 - 34)- 48*9), true),
			20 => (B_dly(7)'last_event, tpd_B_P((863 - 34)- 48*10), true),
			21 => (B_dly(6)'last_event, tpd_B_P((863 - 34)- 48*11), true),
			22 => (B_dly(5)'last_event, tpd_B_P((863 - 34)- 48*12), true),
			23 => (B_dly(4)'last_event, tpd_B_P((863 - 34)- 48*13), true),
			24 => (B_dly(3)'last_event, tpd_B_P((863 - 34)- 48*14), true),
			25 => (B_dly(2)'last_event, tpd_B_P((863 - 34)- 48*15), true),
			26 => (B_dly(1)'last_event, tpd_B_P((863 - 34)- 48*16), true),
			27 => (B_dly(0)'last_event, tpd_B_P((863 - 34)- 48*17), true),
			28 => (BCIN_dly(13)'last_event, tpd_BCIN_P((863 - 34)- 48*4), true),
			29 => (BCIN_dly(12)'last_event, tpd_BCIN_P((863 - 34)- 48*5), true),
			30 => (BCIN_dly(11)'last_event, tpd_BCIN_P((863 - 34)- 48*6), true),
			31 => (BCIN_dly(10)'last_event, tpd_BCIN_P((863 - 34)- 48*7), true),
			32 => (BCIN_dly(9)'last_event, tpd_BCIN_P((863 - 34)- 48*8), true),
			33 => (BCIN_dly(8)'last_event, tpd_BCIN_P((863 - 34)- 48*9), true),
			34 => (BCIN_dly(7)'last_event, tpd_BCIN_P((863 - 34)- 48*10), true),
			35 => (BCIN_dly(6)'last_event, tpd_BCIN_P((863 - 34)- 48*11), true),
			36 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 34)- 48*12), true),
			37 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 34)- 48*13), true),
			38 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 34)- 48*14), true),
			39 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 34)- 48*15), true),
			40 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 34)- 48*16), true),
			41 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 34)- 48*17), true),
			42 => (C_dly(13)'last_event, tpd_C_P((2303 - 34)- 48*34), true),
			43 => (C_dly(12)'last_event, tpd_C_P((2303 - 34)- 48*35), true),
			44 => (C_dly(11)'last_event, tpd_C_P((2303 - 34)- 48*36), true),
			45 => (C_dly(10)'last_event, tpd_C_P((2303 - 34)- 48*37), true),
			46 => (C_dly(9)'last_event, tpd_C_P((2303 - 34)- 48*38), true),
			47 => (C_dly(8)'last_event, tpd_C_P((2303 - 34)- 48*39), true),
			48 => (C_dly(7)'last_event, tpd_C_P((2303 - 34)- 48*40), true),
			49 => (C_dly(6)'last_event, tpd_C_P((2303 - 34)- 48*41), true),
			50 => (C_dly(5)'last_event, tpd_C_P((2303 - 34)- 48*42), true),
			51 => (C_dly(4)'last_event, tpd_C_P((2303 - 34)- 48*43), true),
			52 => (C_dly(3)'last_event, tpd_C_P((2303 - 34)- 48*44), true),
			53 => (C_dly(2)'last_event, tpd_C_P((2303 - 34)- 48*45), true),
			54 => (C_dly(1)'last_event, tpd_C_P((2303 - 34)- 48*46), true),
			55 => (C_dly(0)'last_event, tpd_C_P((2303 - 34)- 48*47), true),
			56 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(13), true),
			57 => (D_dly(13)'last_event, tpd_D_P((863 - 34)- 48*4), true),
			58 => (D_dly(12)'last_event, tpd_D_P((863 - 34)- 48*5), true),
			59 => (D_dly(11)'last_event, tpd_D_P((863 - 34)- 48*6), true),
			60 => (D_dly(10)'last_event, tpd_D_P((863 - 34)- 48*7), true),
			61 => (D_dly(9)'last_event, tpd_D_P((863 - 34)- 48*8), true),
			62 => (D_dly(8)'last_event, tpd_D_P((863 - 34)- 48*9), true),
			63 => (D_dly(7)'last_event, tpd_D_P((863 - 34)- 48*10), true),
			64 => (D_dly(6)'last_event, tpd_D_P((863 - 34)- 48*11), true),
			65 => (D_dly(5)'last_event, tpd_D_P((863 - 34)- 48*12), true),
			66 => (D_dly(4)'last_event, tpd_D_P((863 - 34)- 48*13), true),
			67 => (D_dly(3)'last_event, tpd_D_P((863 - 34)- 48*14), true),
			68 => (D_dly(2)'last_event, tpd_D_P((863 - 34)- 48*15), true),
			69 => (D_dly(1)'last_event, tpd_D_P((863 - 34)- 48*16), true),
			70 => (D_dly(0)'last_event, tpd_D_P((863 - 34)- 48*17), true),
			71 => (OPMODE_dly(7)'last_event, tpd_OPMODE_P((383 - 34)- 48*0), true),
			72 => (OPMODE_dly(6)'last_event, tpd_OPMODE_P((383 - 34)- 48*1), true),
			73 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 34)- 48*2), true),
			74 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 34)- 48*3), true),
			75 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 34)- 48*4), true),
			76 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 34)- 48*5), true),
			77 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 34)- 48*6), true),
			78 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 34)- 48*7), true),
			79 => (PCIN_dly(13)'last_event, tpd_PCIN_P((2303 - 34)- 48*34), true),
			80 => (PCIN_dly(12)'last_event, tpd_PCIN_P((2303 - 34)- 48*35), true),
			81 => (PCIN_dly(11)'last_event, tpd_PCIN_P((2303 - 34)- 48*36), true),
			82 => (PCIN_dly(10)'last_event, tpd_PCIN_P((2303 - 34)- 48*37), true),
			83 => (PCIN_dly(9)'last_event, tpd_PCIN_P((2303 - 34)- 48*38), true),
			84 => (PCIN_dly(8)'last_event, tpd_PCIN_P((2303 - 34)- 48*39), true),
			85 => (PCIN_dly(7)'last_event, tpd_PCIN_P((2303 - 34)- 48*40), true),
			86 => (PCIN_dly(6)'last_event, tpd_PCIN_P((2303 - 34)- 48*41), true),
			87 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 34)- 48*42), true),
			88 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 34)- 48*43), true),
			89 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 34)- 48*44), true),
			90 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 34)- 48*45), true),
			91 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 34)- 48*46), true),
			92 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 34)- 48*47), true),
			93 => (RSTA_dly'last_event, tpd_RSTA_P(13), true),
			94 => (RSTB_dly'last_event, tpd_RSTB_P(13), true),
			95 => (RSTC_dly'last_event, tpd_RSTC_P(13), true),
			96 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(13), true),
			97 => (RSTD_dly'last_event, tpd_RSTD_P(13), true),
			98 => (RSTM_dly'last_event, tpd_RSTM_P(13), true),
			99 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(13), true),
			100 => (RSTP_dly'last_event, tpd_RSTP_P(13), true),
			101 => (CLK_dly'last_event, tpd_CLK_P(13), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(12),
         GlitchData	=> P_GlitchData(12),
         OutSignalName	=> "P(12)",
         OutTemp	=> P_zd(12),
         Paths		=> (
			0 => (A_dly(12)'last_event, tpd_A_P((863 - 35)- 48*5), true),
			1 => (A_dly(11)'last_event, tpd_A_P((863 - 35)- 48*6), true),
			2 => (A_dly(10)'last_event, tpd_A_P((863 - 35)- 48*7), true),
			3 => (A_dly(9)'last_event, tpd_A_P((863 - 35)- 48*8), true),
			4 => (A_dly(8)'last_event, tpd_A_P((863 - 35)- 48*9), true),
			5 => (A_dly(7)'last_event, tpd_A_P((863 - 35)- 48*10), true),
			6 => (A_dly(6)'last_event, tpd_A_P((863 - 35)- 48*11), true),
			7 => (A_dly(5)'last_event, tpd_A_P((863 - 35)- 48*12), true),
			8 => (A_dly(4)'last_event, tpd_A_P((863 - 35)- 48*13), true),
			9 => (A_dly(3)'last_event, tpd_A_P((863 - 35)- 48*14), true),
			10 => (A_dly(2)'last_event, tpd_A_P((863 - 35)- 48*15), true),
			11 => (A_dly(1)'last_event, tpd_A_P((863 - 35)- 48*16), true),
			12 => (A_dly(0)'last_event, tpd_A_P((863 - 35)- 48*17), true),
			13 => (B_dly(12)'last_event, tpd_B_P((863 - 35)- 48*5), true),
			14 => (B_dly(11)'last_event, tpd_B_P((863 - 35)- 48*6), true),
			15 => (B_dly(10)'last_event, tpd_B_P((863 - 35)- 48*7), true),
			16 => (B_dly(9)'last_event, tpd_B_P((863 - 35)- 48*8), true),
			17 => (B_dly(8)'last_event, tpd_B_P((863 - 35)- 48*9), true),
			18 => (B_dly(7)'last_event, tpd_B_P((863 - 35)- 48*10), true),
			19 => (B_dly(6)'last_event, tpd_B_P((863 - 35)- 48*11), true),
			20 => (B_dly(5)'last_event, tpd_B_P((863 - 35)- 48*12), true),
			21 => (B_dly(4)'last_event, tpd_B_P((863 - 35)- 48*13), true),
			22 => (B_dly(3)'last_event, tpd_B_P((863 - 35)- 48*14), true),
			23 => (B_dly(2)'last_event, tpd_B_P((863 - 35)- 48*15), true),
			24 => (B_dly(1)'last_event, tpd_B_P((863 - 35)- 48*16), true),
			25 => (B_dly(0)'last_event, tpd_B_P((863 - 35)- 48*17), true),
			26 => (BCIN_dly(12)'last_event, tpd_BCIN_P((863 - 35)- 48*5), true),
			27 => (BCIN_dly(11)'last_event, tpd_BCIN_P((863 - 35)- 48*6), true),
			28 => (BCIN_dly(10)'last_event, tpd_BCIN_P((863 - 35)- 48*7), true),
			29 => (BCIN_dly(9)'last_event, tpd_BCIN_P((863 - 35)- 48*8), true),
			30 => (BCIN_dly(8)'last_event, tpd_BCIN_P((863 - 35)- 48*9), true),
			31 => (BCIN_dly(7)'last_event, tpd_BCIN_P((863 - 35)- 48*10), true),
			32 => (BCIN_dly(6)'last_event, tpd_BCIN_P((863 - 35)- 48*11), true),
			33 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 35)- 48*12), true),
			34 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 35)- 48*13), true),
			35 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 35)- 48*14), true),
			36 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 35)- 48*15), true),
			37 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 35)- 48*16), true),
			38 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 35)- 48*17), true),
			39 => (C_dly(12)'last_event, tpd_C_P((2303 - 35)- 48*35), true),
			40 => (C_dly(11)'last_event, tpd_C_P((2303 - 35)- 48*36), true),
			41 => (C_dly(10)'last_event, tpd_C_P((2303 - 35)- 48*37), true),
			42 => (C_dly(9)'last_event, tpd_C_P((2303 - 35)- 48*38), true),
			43 => (C_dly(8)'last_event, tpd_C_P((2303 - 35)- 48*39), true),
			44 => (C_dly(7)'last_event, tpd_C_P((2303 - 35)- 48*40), true),
			45 => (C_dly(6)'last_event, tpd_C_P((2303 - 35)- 48*41), true),
			46 => (C_dly(5)'last_event, tpd_C_P((2303 - 35)- 48*42), true),
			47 => (C_dly(4)'last_event, tpd_C_P((2303 - 35)- 48*43), true),
			48 => (C_dly(3)'last_event, tpd_C_P((2303 - 35)- 48*44), true),
			49 => (C_dly(2)'last_event, tpd_C_P((2303 - 35)- 48*45), true),
			50 => (C_dly(1)'last_event, tpd_C_P((2303 - 35)- 48*46), true),
			51 => (C_dly(0)'last_event, tpd_C_P((2303 - 35)- 48*47), true),
			52 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(12), true),
			53 => (D_dly(12)'last_event, tpd_D_P((863 - 35)- 48*5), true),
			54 => (D_dly(11)'last_event, tpd_D_P((863 - 35)- 48*6), true),
			55 => (D_dly(10)'last_event, tpd_D_P((863 - 35)- 48*7), true),
			56 => (D_dly(9)'last_event, tpd_D_P((863 - 35)- 48*8), true),
			57 => (D_dly(8)'last_event, tpd_D_P((863 - 35)- 48*9), true),
			58 => (D_dly(7)'last_event, tpd_D_P((863 - 35)- 48*10), true),
			59 => (D_dly(6)'last_event, tpd_D_P((863 - 35)- 48*11), true),
			60 => (D_dly(5)'last_event, tpd_D_P((863 - 35)- 48*12), true),
			61 => (D_dly(4)'last_event, tpd_D_P((863 - 35)- 48*13), true),
			62 => (D_dly(3)'last_event, tpd_D_P((863 - 35)- 48*14), true),
			63 => (D_dly(2)'last_event, tpd_D_P((863 - 35)- 48*15), true),
			64 => (D_dly(1)'last_event, tpd_D_P((863 - 35)- 48*16), true),
			65 => (D_dly(0)'last_event, tpd_D_P((863 - 35)- 48*17), true),
			66 => (OPMODE_dly(7)'last_event, tpd_OPMODE_P((383 - 35)- 48*0), true),
			67 => (OPMODE_dly(6)'last_event, tpd_OPMODE_P((383 - 35)- 48*1), true),
			68 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 35)- 48*2), true),
			69 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 35)- 48*3), true),
			70 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 35)- 48*4), true),
			71 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 35)- 48*5), true),
			72 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 35)- 48*6), true),
			73 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 35)- 48*7), true),
			74 => (PCIN_dly(12)'last_event, tpd_PCIN_P((2303 - 35)- 48*35), true),
			75 => (PCIN_dly(11)'last_event, tpd_PCIN_P((2303 - 35)- 48*36), true),
			76 => (PCIN_dly(10)'last_event, tpd_PCIN_P((2303 - 35)- 48*37), true),
			77 => (PCIN_dly(9)'last_event, tpd_PCIN_P((2303 - 35)- 48*38), true),
			78 => (PCIN_dly(8)'last_event, tpd_PCIN_P((2303 - 35)- 48*39), true),
			79 => (PCIN_dly(7)'last_event, tpd_PCIN_P((2303 - 35)- 48*40), true),
			80 => (PCIN_dly(6)'last_event, tpd_PCIN_P((2303 - 35)- 48*41), true),
			81 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 35)- 48*42), true),
			82 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 35)- 48*43), true),
			83 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 35)- 48*44), true),
			84 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 35)- 48*45), true),
			85 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 35)- 48*46), true),
			86 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 35)- 48*47), true),
			87 => (RSTA_dly'last_event, tpd_RSTA_P(12), true),
			88 => (RSTB_dly'last_event, tpd_RSTB_P(12), true),
			89 => (RSTC_dly'last_event, tpd_RSTC_P(12), true),
			90 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(12), true),
			91 => (RSTD_dly'last_event, tpd_RSTD_P(12), true),
			92 => (RSTM_dly'last_event, tpd_RSTM_P(12), true),
			93 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(12), true),
			94 => (RSTP_dly'last_event, tpd_RSTP_P(12), true),
			95 => (CLK_dly'last_event, tpd_CLK_P(12), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(11),
         GlitchData	=> P_GlitchData(11),
         OutSignalName	=> "P(11)",
         OutTemp	=> P_zd(11),
         Paths		=> (
			0 => (A_dly(11)'last_event, tpd_A_P((863 - 36)- 48*6), true),
			1 => (A_dly(10)'last_event, tpd_A_P((863 - 36)- 48*7), true),
			2 => (A_dly(9)'last_event, tpd_A_P((863 - 36)- 48*8), true),
			3 => (A_dly(8)'last_event, tpd_A_P((863 - 36)- 48*9), true),
			4 => (A_dly(7)'last_event, tpd_A_P((863 - 36)- 48*10), true),
			5 => (A_dly(6)'last_event, tpd_A_P((863 - 36)- 48*11), true),
			6 => (A_dly(5)'last_event, tpd_A_P((863 - 36)- 48*12), true),
			7 => (A_dly(4)'last_event, tpd_A_P((863 - 36)- 48*13), true),
			8 => (A_dly(3)'last_event, tpd_A_P((863 - 36)- 48*14), true),
			9 => (A_dly(2)'last_event, tpd_A_P((863 - 36)- 48*15), true),
			10 => (A_dly(1)'last_event, tpd_A_P((863 - 36)- 48*16), true),
			11 => (A_dly(0)'last_event, tpd_A_P((863 - 36)- 48*17), true),
			12 => (B_dly(11)'last_event, tpd_B_P((863 - 36)- 48*6), true),
			13 => (B_dly(10)'last_event, tpd_B_P((863 - 36)- 48*7), true),
			14 => (B_dly(9)'last_event, tpd_B_P((863 - 36)- 48*8), true),
			15 => (B_dly(8)'last_event, tpd_B_P((863 - 36)- 48*9), true),
			16 => (B_dly(7)'last_event, tpd_B_P((863 - 36)- 48*10), true),
			17 => (B_dly(6)'last_event, tpd_B_P((863 - 36)- 48*11), true),
			18 => (B_dly(5)'last_event, tpd_B_P((863 - 36)- 48*12), true),
			19 => (B_dly(4)'last_event, tpd_B_P((863 - 36)- 48*13), true),
			20 => (B_dly(3)'last_event, tpd_B_P((863 - 36)- 48*14), true),
			21 => (B_dly(2)'last_event, tpd_B_P((863 - 36)- 48*15), true),
			22 => (B_dly(1)'last_event, tpd_B_P((863 - 36)- 48*16), true),
			23 => (B_dly(0)'last_event, tpd_B_P((863 - 36)- 48*17), true),
			24 => (BCIN_dly(11)'last_event, tpd_BCIN_P((863 - 36)- 48*6), true),
			25 => (BCIN_dly(10)'last_event, tpd_BCIN_P((863 - 36)- 48*7), true),
			26 => (BCIN_dly(9)'last_event, tpd_BCIN_P((863 - 36)- 48*8), true),
			27 => (BCIN_dly(8)'last_event, tpd_BCIN_P((863 - 36)- 48*9), true),
			28 => (BCIN_dly(7)'last_event, tpd_BCIN_P((863 - 36)- 48*10), true),
			29 => (BCIN_dly(6)'last_event, tpd_BCIN_P((863 - 36)- 48*11), true),
			30 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 36)- 48*12), true),
			31 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 36)- 48*13), true),
			32 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 36)- 48*14), true),
			33 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 36)- 48*15), true),
			34 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 36)- 48*16), true),
			35 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 36)- 48*17), true),
			36 => (C_dly(11)'last_event, tpd_C_P((2303 - 36)- 48*36), true),
			37 => (C_dly(10)'last_event, tpd_C_P((2303 - 36)- 48*37), true),
			38 => (C_dly(9)'last_event, tpd_C_P((2303 - 36)- 48*38), true),
			39 => (C_dly(8)'last_event, tpd_C_P((2303 - 36)- 48*39), true),
			40 => (C_dly(7)'last_event, tpd_C_P((2303 - 36)- 48*40), true),
			41 => (C_dly(6)'last_event, tpd_C_P((2303 - 36)- 48*41), true),
			42 => (C_dly(5)'last_event, tpd_C_P((2303 - 36)- 48*42), true),
			43 => (C_dly(4)'last_event, tpd_C_P((2303 - 36)- 48*43), true),
			44 => (C_dly(3)'last_event, tpd_C_P((2303 - 36)- 48*44), true),
			45 => (C_dly(2)'last_event, tpd_C_P((2303 - 36)- 48*45), true),
			46 => (C_dly(1)'last_event, tpd_C_P((2303 - 36)- 48*46), true),
			47 => (C_dly(0)'last_event, tpd_C_P((2303 - 36)- 48*47), true),
			48 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(11), true),
			49 => (D_dly(11)'last_event, tpd_D_P((863 - 36)- 48*6), true),
			50 => (D_dly(10)'last_event, tpd_D_P((863 - 36)- 48*7), true),
			51 => (D_dly(9)'last_event, tpd_D_P((863 - 36)- 48*8), true),
			52 => (D_dly(8)'last_event, tpd_D_P((863 - 36)- 48*9), true),
			53 => (D_dly(7)'last_event, tpd_D_P((863 - 36)- 48*10), true),
			54 => (D_dly(6)'last_event, tpd_D_P((863 - 36)- 48*11), true),
			55 => (D_dly(5)'last_event, tpd_D_P((863 - 36)- 48*12), true),
			56 => (D_dly(4)'last_event, tpd_D_P((863 - 36)- 48*13), true),
			57 => (D_dly(3)'last_event, tpd_D_P((863 - 36)- 48*14), true),
			58 => (D_dly(2)'last_event, tpd_D_P((863 - 36)- 48*15), true),
			59 => (D_dly(1)'last_event, tpd_D_P((863 - 36)- 48*16), true),
			60 => (D_dly(0)'last_event, tpd_D_P((863 - 36)- 48*17), true),
			61 => (OPMODE_dly(7)'last_event, tpd_OPMODE_P((383 - 36)- 48*0), true),
			62 => (OPMODE_dly(6)'last_event, tpd_OPMODE_P((383 - 36)- 48*1), true),
			63 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 36)- 48*2), true),
			64 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 36)- 48*3), true),
			65 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 36)- 48*4), true),
			66 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 36)- 48*5), true),
			67 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 36)- 48*6), true),
			68 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 36)- 48*7), true),
			69 => (PCIN_dly(11)'last_event, tpd_PCIN_P((2303 - 36)- 48*36), true),
			70 => (PCIN_dly(10)'last_event, tpd_PCIN_P((2303 - 36)- 48*37), true),
			71 => (PCIN_dly(9)'last_event, tpd_PCIN_P((2303 - 36)- 48*38), true),
			72 => (PCIN_dly(8)'last_event, tpd_PCIN_P((2303 - 36)- 48*39), true),
			73 => (PCIN_dly(7)'last_event, tpd_PCIN_P((2303 - 36)- 48*40), true),
			74 => (PCIN_dly(6)'last_event, tpd_PCIN_P((2303 - 36)- 48*41), true),
			75 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 36)- 48*42), true),
			76 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 36)- 48*43), true),
			77 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 36)- 48*44), true),
			78 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 36)- 48*45), true),
			79 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 36)- 48*46), true),
			80 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 36)- 48*47), true),
			81 => (RSTA_dly'last_event, tpd_RSTA_P(11), true),
			82 => (RSTB_dly'last_event, tpd_RSTB_P(11), true),
			83 => (RSTC_dly'last_event, tpd_RSTC_P(11), true),
			84 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(11), true),
			85 => (RSTD_dly'last_event, tpd_RSTD_P(11), true),
			86 => (RSTM_dly'last_event, tpd_RSTM_P(11), true),
			87 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(11), true),
			88 => (RSTP_dly'last_event, tpd_RSTP_P(11), true),
			89 => (CLK_dly'last_event, tpd_CLK_P(11), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(10),
         GlitchData	=> P_GlitchData(10),
         OutSignalName	=> "P(10)",
         OutTemp	=> P_zd(10),
         Paths		=> (
			0 => (A_dly(10)'last_event, tpd_A_P((863 - 37)- 48*7), true),
			1 => (A_dly(9)'last_event, tpd_A_P((863 - 37)- 48*8), true),
			2 => (A_dly(8)'last_event, tpd_A_P((863 - 37)- 48*9), true),
			3 => (A_dly(7)'last_event, tpd_A_P((863 - 37)- 48*10), true),
			4 => (A_dly(6)'last_event, tpd_A_P((863 - 37)- 48*11), true),
			5 => (A_dly(5)'last_event, tpd_A_P((863 - 37)- 48*12), true),
			6 => (A_dly(4)'last_event, tpd_A_P((863 - 37)- 48*13), true),
			7 => (A_dly(3)'last_event, tpd_A_P((863 - 37)- 48*14), true),
			8 => (A_dly(2)'last_event, tpd_A_P((863 - 37)- 48*15), true),
			9 => (A_dly(1)'last_event, tpd_A_P((863 - 37)- 48*16), true),
			10 => (A_dly(0)'last_event, tpd_A_P((863 - 37)- 48*17), true),
			11 => (B_dly(10)'last_event, tpd_B_P((863 - 37)- 48*7), true),
			12 => (B_dly(9)'last_event, tpd_B_P((863 - 37)- 48*8), true),
			13 => (B_dly(8)'last_event, tpd_B_P((863 - 37)- 48*9), true),
			14 => (B_dly(7)'last_event, tpd_B_P((863 - 37)- 48*10), true),
			15 => (B_dly(6)'last_event, tpd_B_P((863 - 37)- 48*11), true),
			16 => (B_dly(5)'last_event, tpd_B_P((863 - 37)- 48*12), true),
			17 => (B_dly(4)'last_event, tpd_B_P((863 - 37)- 48*13), true),
			18 => (B_dly(3)'last_event, tpd_B_P((863 - 37)- 48*14), true),
			19 => (B_dly(2)'last_event, tpd_B_P((863 - 37)- 48*15), true),
			20 => (B_dly(1)'last_event, tpd_B_P((863 - 37)- 48*16), true),
			21 => (B_dly(0)'last_event, tpd_B_P((863 - 37)- 48*17), true),
			22 => (BCIN_dly(10)'last_event, tpd_BCIN_P((863 - 37)- 48*7), true),
			23 => (BCIN_dly(9)'last_event, tpd_BCIN_P((863 - 37)- 48*8), true),
			24 => (BCIN_dly(8)'last_event, tpd_BCIN_P((863 - 37)- 48*9), true),
			25 => (BCIN_dly(7)'last_event, tpd_BCIN_P((863 - 37)- 48*10), true),
			26 => (BCIN_dly(6)'last_event, tpd_BCIN_P((863 - 37)- 48*11), true),
			27 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 37)- 48*12), true),
			28 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 37)- 48*13), true),
			29 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 37)- 48*14), true),
			30 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 37)- 48*15), true),
			31 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 37)- 48*16), true),
			32 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 37)- 48*17), true),
			33 => (C_dly(10)'last_event, tpd_C_P((2303 - 37)- 48*37), true),
			34 => (C_dly(9)'last_event, tpd_C_P((2303 - 37)- 48*38), true),
			35 => (C_dly(8)'last_event, tpd_C_P((2303 - 37)- 48*39), true),
			36 => (C_dly(7)'last_event, tpd_C_P((2303 - 37)- 48*40), true),
			37 => (C_dly(6)'last_event, tpd_C_P((2303 - 37)- 48*41), true),
			38 => (C_dly(5)'last_event, tpd_C_P((2303 - 37)- 48*42), true),
			39 => (C_dly(4)'last_event, tpd_C_P((2303 - 37)- 48*43), true),
			40 => (C_dly(3)'last_event, tpd_C_P((2303 - 37)- 48*44), true),
			41 => (C_dly(2)'last_event, tpd_C_P((2303 - 37)- 48*45), true),
			42 => (C_dly(1)'last_event, tpd_C_P((2303 - 37)- 48*46), true),
			43 => (C_dly(0)'last_event, tpd_C_P((2303 - 37)- 48*47), true),
			44 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(10), true),
			45 => (D_dly(10)'last_event, tpd_D_P((863 - 37)- 48*7), true),
			46 => (D_dly(9)'last_event, tpd_D_P((863 - 37)- 48*8), true),
			47 => (D_dly(8)'last_event, tpd_D_P((863 - 37)- 48*9), true),
			48 => (D_dly(7)'last_event, tpd_D_P((863 - 37)- 48*10), true),
			49 => (D_dly(6)'last_event, tpd_D_P((863 - 37)- 48*11), true),
			50 => (D_dly(5)'last_event, tpd_D_P((863 - 37)- 48*12), true),
			51 => (D_dly(4)'last_event, tpd_D_P((863 - 37)- 48*13), true),
			52 => (D_dly(3)'last_event, tpd_D_P((863 - 37)- 48*14), true),
			53 => (D_dly(2)'last_event, tpd_D_P((863 - 37)- 48*15), true),
			54 => (D_dly(1)'last_event, tpd_D_P((863 - 37)- 48*16), true),
			55 => (D_dly(0)'last_event, tpd_D_P((863 - 37)- 48*17), true),
			56 => (OPMODE_dly(7)'last_event, tpd_OPMODE_P((383 - 37)- 48*0), true),
			57 => (OPMODE_dly(6)'last_event, tpd_OPMODE_P((383 - 37)- 48*1), true),
			58 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 37)- 48*2), true),
			59 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 37)- 48*3), true),
			60 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 37)- 48*4), true),
			61 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 37)- 48*5), true),
			62 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 37)- 48*6), true),
			63 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 37)- 48*7), true),
			64 => (PCIN_dly(10)'last_event, tpd_PCIN_P((2303 - 37)- 48*37), true),
			65 => (PCIN_dly(9)'last_event, tpd_PCIN_P((2303 - 37)- 48*38), true),
			66 => (PCIN_dly(8)'last_event, tpd_PCIN_P((2303 - 37)- 48*39), true),
			67 => (PCIN_dly(7)'last_event, tpd_PCIN_P((2303 - 37)- 48*40), true),
			68 => (PCIN_dly(6)'last_event, tpd_PCIN_P((2303 - 37)- 48*41), true),
			69 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 37)- 48*42), true),
			70 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 37)- 48*43), true),
			71 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 37)- 48*44), true),
			72 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 37)- 48*45), true),
			73 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 37)- 48*46), true),
			74 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 37)- 48*47), true),
			75 => (RSTA_dly'last_event, tpd_RSTA_P(10), true),
			76 => (RSTB_dly'last_event, tpd_RSTB_P(10), true),
			77 => (RSTC_dly'last_event, tpd_RSTC_P(10), true),
			78 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(10), true),
			79 => (RSTD_dly'last_event, tpd_RSTD_P(10), true),
			80 => (RSTM_dly'last_event, tpd_RSTM_P(10), true),
			81 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(10), true),
			82 => (RSTP_dly'last_event, tpd_RSTP_P(10), true),
			83 => (CLK_dly'last_event, tpd_CLK_P(10), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(9),
         GlitchData	=> P_GlitchData(9),
         OutSignalName	=> "P(9)",
         OutTemp	=> P_zd(9),
         Paths		=> (
			0 => (A_dly(9)'last_event, tpd_A_P((863 - 38)- 48*8), true),
			1 => (A_dly(8)'last_event, tpd_A_P((863 - 38)- 48*9), true),
			2 => (A_dly(7)'last_event, tpd_A_P((863 - 38)- 48*10), true),
			3 => (A_dly(6)'last_event, tpd_A_P((863 - 38)- 48*11), true),
			4 => (A_dly(5)'last_event, tpd_A_P((863 - 38)- 48*12), true),
			5 => (A_dly(4)'last_event, tpd_A_P((863 - 38)- 48*13), true),
			6 => (A_dly(3)'last_event, tpd_A_P((863 - 38)- 48*14), true),
			7 => (A_dly(2)'last_event, tpd_A_P((863 - 38)- 48*15), true),
			8 => (A_dly(1)'last_event, tpd_A_P((863 - 38)- 48*16), true),
			9 => (A_dly(0)'last_event, tpd_A_P((863 - 38)- 48*17), true),
			10 => (B_dly(9)'last_event, tpd_B_P((863 - 38)- 48*8), true),
			11 => (B_dly(8)'last_event, tpd_B_P((863 - 38)- 48*9), true),
			12 => (B_dly(7)'last_event, tpd_B_P((863 - 38)- 48*10), true),
			13 => (B_dly(6)'last_event, tpd_B_P((863 - 38)- 48*11), true),
			14 => (B_dly(5)'last_event, tpd_B_P((863 - 38)- 48*12), true),
			15 => (B_dly(4)'last_event, tpd_B_P((863 - 38)- 48*13), true),
			16 => (B_dly(3)'last_event, tpd_B_P((863 - 38)- 48*14), true),
			17 => (B_dly(2)'last_event, tpd_B_P((863 - 38)- 48*15), true),
			18 => (B_dly(1)'last_event, tpd_B_P((863 - 38)- 48*16), true),
			19 => (B_dly(0)'last_event, tpd_B_P((863 - 38)- 48*17), true),
			20 => (BCIN_dly(9)'last_event, tpd_BCIN_P((863 - 38)- 48*8), true),
			21 => (BCIN_dly(8)'last_event, tpd_BCIN_P((863 - 38)- 48*9), true),
			22 => (BCIN_dly(7)'last_event, tpd_BCIN_P((863 - 38)- 48*10), true),
			23 => (BCIN_dly(6)'last_event, tpd_BCIN_P((863 - 38)- 48*11), true),
			24 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 38)- 48*12), true),
			25 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 38)- 48*13), true),
			26 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 38)- 48*14), true),
			27 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 38)- 48*15), true),
			28 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 38)- 48*16), true),
			29 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 38)- 48*17), true),
			30 => (C_dly(9)'last_event, tpd_C_P((2303 - 38)- 48*38), true),
			31 => (C_dly(8)'last_event, tpd_C_P((2303 - 38)- 48*39), true),
			32 => (C_dly(7)'last_event, tpd_C_P((2303 - 38)- 48*40), true),
			33 => (C_dly(6)'last_event, tpd_C_P((2303 - 38)- 48*41), true),
			34 => (C_dly(5)'last_event, tpd_C_P((2303 - 38)- 48*42), true),
			35 => (C_dly(4)'last_event, tpd_C_P((2303 - 38)- 48*43), true),
			36 => (C_dly(3)'last_event, tpd_C_P((2303 - 38)- 48*44), true),
			37 => (C_dly(2)'last_event, tpd_C_P((2303 - 38)- 48*45), true),
			38 => (C_dly(1)'last_event, tpd_C_P((2303 - 38)- 48*46), true),
			39 => (C_dly(0)'last_event, tpd_C_P((2303 - 38)- 48*47), true),
			40 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(9), true),
			41 => (D_dly(9)'last_event, tpd_D_P((863 - 38)- 48*8), true),
			42 => (D_dly(8)'last_event, tpd_D_P((863 - 38)- 48*9), true),
			43 => (D_dly(7)'last_event, tpd_D_P((863 - 38)- 48*10), true),
			44 => (D_dly(6)'last_event, tpd_D_P((863 - 38)- 48*11), true),
			45 => (D_dly(5)'last_event, tpd_D_P((863 - 38)- 48*12), true),
			46 => (D_dly(4)'last_event, tpd_D_P((863 - 38)- 48*13), true),
			47 => (D_dly(3)'last_event, tpd_D_P((863 - 38)- 48*14), true),
			48 => (D_dly(2)'last_event, tpd_D_P((863 - 38)- 48*15), true),
			49 => (D_dly(1)'last_event, tpd_D_P((863 - 38)- 48*16), true),
			50 => (D_dly(0)'last_event, tpd_D_P((863 - 38)- 48*17), true),
			51 => (OPMODE_dly(7)'last_event, tpd_OPMODE_P((383 - 38)- 48*0), true),
			52 => (OPMODE_dly(6)'last_event, tpd_OPMODE_P((383 - 38)- 48*1), true),
			53 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 38)- 48*2), true),
			54 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 38)- 48*3), true),
			55 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 38)- 48*4), true),
			56 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 38)- 48*5), true),
			57 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 38)- 48*6), true),
			58 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 38)- 48*7), true),
			59 => (PCIN_dly(9)'last_event, tpd_PCIN_P((2303 - 38)- 48*38), true),
			60 => (PCIN_dly(8)'last_event, tpd_PCIN_P((2303 - 38)- 48*39), true),
			61 => (PCIN_dly(7)'last_event, tpd_PCIN_P((2303 - 38)- 48*40), true),
			62 => (PCIN_dly(6)'last_event, tpd_PCIN_P((2303 - 38)- 48*41), true),
			63 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 38)- 48*42), true),
			64 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 38)- 48*43), true),
			65 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 38)- 48*44), true),
			66 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 38)- 48*45), true),
			67 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 38)- 48*46), true),
			68 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 38)- 48*47), true),
			69 => (RSTA_dly'last_event, tpd_RSTA_P(9), true),
			70 => (RSTB_dly'last_event, tpd_RSTB_P(9), true),
			71 => (RSTC_dly'last_event, tpd_RSTC_P(9), true),
			72 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(9), true),
			73 => (RSTD_dly'last_event, tpd_RSTD_P(9), true),
			74 => (RSTM_dly'last_event, tpd_RSTM_P(9), true),
			75 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(9), true),
			76 => (RSTP_dly'last_event, tpd_RSTP_P(9), true),
			77 => (CLK_dly'last_event, tpd_CLK_P(9), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(8),
         GlitchData	=> P_GlitchData(8),
         OutSignalName	=> "P(8)",
         OutTemp	=> P_zd(8),
         Paths		=> (
			0 => (A_dly(8)'last_event, tpd_A_P((863 - 39)- 48*9), true),
			1 => (A_dly(7)'last_event, tpd_A_P((863 - 39)- 48*10), true),
			2 => (A_dly(6)'last_event, tpd_A_P((863 - 39)- 48*11), true),
			3 => (A_dly(5)'last_event, tpd_A_P((863 - 39)- 48*12), true),
			4 => (A_dly(4)'last_event, tpd_A_P((863 - 39)- 48*13), true),
			5 => (A_dly(3)'last_event, tpd_A_P((863 - 39)- 48*14), true),
			6 => (A_dly(2)'last_event, tpd_A_P((863 - 39)- 48*15), true),
			7 => (A_dly(1)'last_event, tpd_A_P((863 - 39)- 48*16), true),
			8 => (A_dly(0)'last_event, tpd_A_P((863 - 39)- 48*17), true),
			9 => (B_dly(8)'last_event, tpd_B_P((863 - 39)- 48*9), true),
			10 => (B_dly(7)'last_event, tpd_B_P((863 - 39)- 48*10), true),
			11 => (B_dly(6)'last_event, tpd_B_P((863 - 39)- 48*11), true),
			12 => (B_dly(5)'last_event, tpd_B_P((863 - 39)- 48*12), true),
			13 => (B_dly(4)'last_event, tpd_B_P((863 - 39)- 48*13), true),
			14 => (B_dly(3)'last_event, tpd_B_P((863 - 39)- 48*14), true),
			15 => (B_dly(2)'last_event, tpd_B_P((863 - 39)- 48*15), true),
			16 => (B_dly(1)'last_event, tpd_B_P((863 - 39)- 48*16), true),
			17 => (B_dly(0)'last_event, tpd_B_P((863 - 39)- 48*17), true),
			18 => (BCIN_dly(8)'last_event, tpd_BCIN_P((863 - 39)- 48*9), true),
			19 => (BCIN_dly(7)'last_event, tpd_BCIN_P((863 - 39)- 48*10), true),
			20 => (BCIN_dly(6)'last_event, tpd_BCIN_P((863 - 39)- 48*11), true),
			21 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 39)- 48*12), true),
			22 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 39)- 48*13), true),
			23 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 39)- 48*14), true),
			24 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 39)- 48*15), true),
			25 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 39)- 48*16), true),
			26 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 39)- 48*17), true),
			27 => (C_dly(8)'last_event, tpd_C_P((2303 - 39)- 48*39), true),
			28 => (C_dly(7)'last_event, tpd_C_P((2303 - 39)- 48*40), true),
			29 => (C_dly(6)'last_event, tpd_C_P((2303 - 39)- 48*41), true),
			30 => (C_dly(5)'last_event, tpd_C_P((2303 - 39)- 48*42), true),
			31 => (C_dly(4)'last_event, tpd_C_P((2303 - 39)- 48*43), true),
			32 => (C_dly(3)'last_event, tpd_C_P((2303 - 39)- 48*44), true),
			33 => (C_dly(2)'last_event, tpd_C_P((2303 - 39)- 48*45), true),
			34 => (C_dly(1)'last_event, tpd_C_P((2303 - 39)- 48*46), true),
			35 => (C_dly(0)'last_event, tpd_C_P((2303 - 39)- 48*47), true),
			36 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(8), true),
			37 => (D_dly(8)'last_event, tpd_D_P((863 - 39)- 48*9), true),
			38 => (D_dly(7)'last_event, tpd_D_P((863 - 39)- 48*10), true),
			39 => (D_dly(6)'last_event, tpd_D_P((863 - 39)- 48*11), true),
			40 => (D_dly(5)'last_event, tpd_D_P((863 - 39)- 48*12), true),
			41 => (D_dly(4)'last_event, tpd_D_P((863 - 39)- 48*13), true),
			42 => (D_dly(3)'last_event, tpd_D_P((863 - 39)- 48*14), true),
			43 => (D_dly(2)'last_event, tpd_D_P((863 - 39)- 48*15), true),
			44 => (D_dly(1)'last_event, tpd_D_P((863 - 39)- 48*16), true),
			45 => (D_dly(0)'last_event, tpd_D_P((863 - 39)- 48*17), true),
			46 => (OPMODE_dly(7)'last_event, tpd_OPMODE_P((383 - 39)- 48*0), true),
			47 => (OPMODE_dly(6)'last_event, tpd_OPMODE_P((383 - 39)- 48*1), true),
			48 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 39)- 48*2), true),
			49 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 39)- 48*3), true),
			50 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 39)- 48*4), true),
			51 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 39)- 48*5), true),
			52 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 39)- 48*6), true),
			53 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 39)- 48*7), true),
			54 => (PCIN_dly(8)'last_event, tpd_PCIN_P((2303 - 39)- 48*39), true),
			55 => (PCIN_dly(7)'last_event, tpd_PCIN_P((2303 - 39)- 48*40), true),
			56 => (PCIN_dly(6)'last_event, tpd_PCIN_P((2303 - 39)- 48*41), true),
			57 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 39)- 48*42), true),
			58 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 39)- 48*43), true),
			59 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 39)- 48*44), true),
			60 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 39)- 48*45), true),
			61 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 39)- 48*46), true),
			62 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 39)- 48*47), true),
			63 => (RSTA_dly'last_event, tpd_RSTA_P(8), true),
			64 => (RSTB_dly'last_event, tpd_RSTB_P(8), true),
			65 => (RSTC_dly'last_event, tpd_RSTC_P(8), true),
			66 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(8), true),
			67 => (RSTD_dly'last_event, tpd_RSTD_P(8), true),
			68 => (RSTM_dly'last_event, tpd_RSTM_P(8), true),
			69 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(8), true),
			70 => (RSTP_dly'last_event, tpd_RSTP_P(8), true),
			71 => (CLK_dly'last_event, tpd_CLK_P(8), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(7),
         GlitchData	=> P_GlitchData(7),
         OutSignalName	=> "P(7)",
         OutTemp	=> P_zd(7),
         Paths		=> (
			0 => (A_dly(7)'last_event, tpd_A_P((863 - 40)- 48*10), true),
			1 => (A_dly(6)'last_event, tpd_A_P((863 - 40)- 48*11), true),
			2 => (A_dly(5)'last_event, tpd_A_P((863 - 40)- 48*12), true),
			3 => (A_dly(4)'last_event, tpd_A_P((863 - 40)- 48*13), true),
			4 => (A_dly(3)'last_event, tpd_A_P((863 - 40)- 48*14), true),
			5 => (A_dly(2)'last_event, tpd_A_P((863 - 40)- 48*15), true),
			6 => (A_dly(1)'last_event, tpd_A_P((863 - 40)- 48*16), true),
			7 => (A_dly(0)'last_event, tpd_A_P((863 - 40)- 48*17), true),
			8 => (B_dly(7)'last_event, tpd_B_P((863 - 40)- 48*10), true),
			9 => (B_dly(6)'last_event, tpd_B_P((863 - 40)- 48*11), true),
			10 => (B_dly(5)'last_event, tpd_B_P((863 - 40)- 48*12), true),
			11 => (B_dly(4)'last_event, tpd_B_P((863 - 40)- 48*13), true),
			12 => (B_dly(3)'last_event, tpd_B_P((863 - 40)- 48*14), true),
			13 => (B_dly(2)'last_event, tpd_B_P((863 - 40)- 48*15), true),
			14 => (B_dly(1)'last_event, tpd_B_P((863 - 40)- 48*16), true),
			15 => (B_dly(0)'last_event, tpd_B_P((863 - 40)- 48*17), true),
			16 => (BCIN_dly(7)'last_event, tpd_BCIN_P((863 - 40)- 48*10), true),
			17 => (BCIN_dly(6)'last_event, tpd_BCIN_P((863 - 40)- 48*11), true),
			18 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 40)- 48*12), true),
			19 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 40)- 48*13), true),
			20 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 40)- 48*14), true),
			21 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 40)- 48*15), true),
			22 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 40)- 48*16), true),
			23 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 40)- 48*17), true),
			24 => (C_dly(7)'last_event, tpd_C_P((2303 - 40)- 48*40), true),
			25 => (C_dly(6)'last_event, tpd_C_P((2303 - 40)- 48*41), true),
			26 => (C_dly(5)'last_event, tpd_C_P((2303 - 40)- 48*42), true),
			27 => (C_dly(4)'last_event, tpd_C_P((2303 - 40)- 48*43), true),
			28 => (C_dly(3)'last_event, tpd_C_P((2303 - 40)- 48*44), true),
			29 => (C_dly(2)'last_event, tpd_C_P((2303 - 40)- 48*45), true),
			30 => (C_dly(1)'last_event, tpd_C_P((2303 - 40)- 48*46), true),
			31 => (C_dly(0)'last_event, tpd_C_P((2303 - 40)- 48*47), true),
			32 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(7), true),
			33 => (D_dly(7)'last_event, tpd_D_P((863 - 40)- 48*10), true),
			34 => (D_dly(6)'last_event, tpd_D_P((863 - 40)- 48*11), true),
			35 => (D_dly(5)'last_event, tpd_D_P((863 - 40)- 48*12), true),
			36 => (D_dly(4)'last_event, tpd_D_P((863 - 40)- 48*13), true),
			37 => (D_dly(3)'last_event, tpd_D_P((863 - 40)- 48*14), true),
			38 => (D_dly(2)'last_event, tpd_D_P((863 - 40)- 48*15), true),
			39 => (D_dly(1)'last_event, tpd_D_P((863 - 40)- 48*16), true),
			40 => (D_dly(0)'last_event, tpd_D_P((863 - 40)- 48*17), true),
			41 => (OPMODE_dly(7)'last_event, tpd_OPMODE_P((383 - 40)- 48*0), true),
			42 => (OPMODE_dly(6)'last_event, tpd_OPMODE_P((383 - 40)- 48*1), true),
			43 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 40)- 48*2), true),
			44 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 40)- 48*3), true),
			45 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 40)- 48*4), true),
			46 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 40)- 48*5), true),
			47 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 40)- 48*6), true),
			48 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 40)- 48*7), true),
			49 => (PCIN_dly(7)'last_event, tpd_PCIN_P((2303 - 40)- 48*40), true),
			50 => (PCIN_dly(6)'last_event, tpd_PCIN_P((2303 - 40)- 48*41), true),
			51 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 40)- 48*42), true),
			52 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 40)- 48*43), true),
			53 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 40)- 48*44), true),
			54 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 40)- 48*45), true),
			55 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 40)- 48*46), true),
			56 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 40)- 48*47), true),
			57 => (RSTA_dly'last_event, tpd_RSTA_P(7), true),
			58 => (RSTB_dly'last_event, tpd_RSTB_P(7), true),
			59 => (RSTC_dly'last_event, tpd_RSTC_P(7), true),
			60 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(7), true),
			61 => (RSTD_dly'last_event, tpd_RSTD_P(7), true),
			62 => (RSTM_dly'last_event, tpd_RSTM_P(7), true),
			63 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(7), true),
			64 => (RSTP_dly'last_event, tpd_RSTP_P(7), true),
			65 => (CLK_dly'last_event, tpd_CLK_P(7), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(6),
         GlitchData	=> P_GlitchData(6),
         OutSignalName	=> "P(6)",
         OutTemp	=> P_zd(6),
         Paths		=> (
			0 => (A_dly(6)'last_event, tpd_A_P((863 - 41)- 48*11), true),
			1 => (A_dly(5)'last_event, tpd_A_P((863 - 41)- 48*12), true),
			2 => (A_dly(4)'last_event, tpd_A_P((863 - 41)- 48*13), true),
			3 => (A_dly(3)'last_event, tpd_A_P((863 - 41)- 48*14), true),
			4 => (A_dly(2)'last_event, tpd_A_P((863 - 41)- 48*15), true),
			5 => (A_dly(1)'last_event, tpd_A_P((863 - 41)- 48*16), true),
			6 => (A_dly(0)'last_event, tpd_A_P((863 - 41)- 48*17), true),
			7 => (B_dly(6)'last_event, tpd_B_P((863 - 41)- 48*11), true),
			8 => (B_dly(5)'last_event, tpd_B_P((863 - 41)- 48*12), true),
			9 => (B_dly(4)'last_event, tpd_B_P((863 - 41)- 48*13), true),
			10 => (B_dly(3)'last_event, tpd_B_P((863 - 41)- 48*14), true),
			11 => (B_dly(2)'last_event, tpd_B_P((863 - 41)- 48*15), true),
			12 => (B_dly(1)'last_event, tpd_B_P((863 - 41)- 48*16), true),
			13 => (B_dly(0)'last_event, tpd_B_P((863 - 41)- 48*17), true),
			14 => (BCIN_dly(6)'last_event, tpd_BCIN_P((863 - 41)- 48*11), true),
			15 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 41)- 48*12), true),
			16 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 41)- 48*13), true),
			17 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 41)- 48*14), true),
			18 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 41)- 48*15), true),
			19 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 41)- 48*16), true),
			20 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 41)- 48*17), true),
			21 => (C_dly(6)'last_event, tpd_C_P((2303 - 41)- 48*41), true),
			22 => (C_dly(5)'last_event, tpd_C_P((2303 - 41)- 48*42), true),
			23 => (C_dly(4)'last_event, tpd_C_P((2303 - 41)- 48*43), true),
			24 => (C_dly(3)'last_event, tpd_C_P((2303 - 41)- 48*44), true),
			25 => (C_dly(2)'last_event, tpd_C_P((2303 - 41)- 48*45), true),
			26 => (C_dly(1)'last_event, tpd_C_P((2303 - 41)- 48*46), true),
			27 => (C_dly(0)'last_event, tpd_C_P((2303 - 41)- 48*47), true),
			28 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(6), true),
			29 => (D_dly(6)'last_event, tpd_D_P((863 - 41)- 48*11), true),
			30 => (D_dly(5)'last_event, tpd_D_P((863 - 41)- 48*12), true),
			31 => (D_dly(4)'last_event, tpd_D_P((863 - 41)- 48*13), true),
			32 => (D_dly(3)'last_event, tpd_D_P((863 - 41)- 48*14), true),
			33 => (D_dly(2)'last_event, tpd_D_P((863 - 41)- 48*15), true),
			34 => (D_dly(1)'last_event, tpd_D_P((863 - 41)- 48*16), true),
			35 => (D_dly(0)'last_event, tpd_D_P((863 - 41)- 48*17), true),
			36 => (OPMODE_dly(6)'last_event, tpd_OPMODE_P((383 - 41)- 48*1), true),
			37 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 41)- 48*2), true),
			38 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 41)- 48*3), true),
			39 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 41)- 48*4), true),
			40 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 41)- 48*5), true),
			41 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 41)- 48*6), true),
			42 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 41)- 48*7), true),
			43 => (PCIN_dly(6)'last_event, tpd_PCIN_P((2303 - 41)- 48*41), true),
			44 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 41)- 48*42), true),
			45 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 41)- 48*43), true),
			46 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 41)- 48*44), true),
			47 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 41)- 48*45), true),
			48 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 41)- 48*46), true),
			49 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 41)- 48*47), true),
			50 => (RSTA_dly'last_event, tpd_RSTA_P(6), true),
			51 => (RSTB_dly'last_event, tpd_RSTB_P(6), true),
			52 => (RSTC_dly'last_event, tpd_RSTC_P(6), true),
			53 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(6), true),
			54 => (RSTD_dly'last_event, tpd_RSTD_P(6), true),
			55 => (RSTM_dly'last_event, tpd_RSTM_P(6), true),
			56 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(6), true),
			57 => (RSTP_dly'last_event, tpd_RSTP_P(6), true),
			58 => (CLK_dly'last_event, tpd_CLK_P(6), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(5),
         GlitchData	=> P_GlitchData(5),
         OutSignalName	=> "P(5)",
         OutTemp	=> P_zd(5),
         Paths		=> (
			0 => (A_dly(5)'last_event, tpd_A_P((863 - 42)- 48*12), true),
			1 => (A_dly(4)'last_event, tpd_A_P((863 - 42)- 48*13), true),
			2 => (A_dly(3)'last_event, tpd_A_P((863 - 42)- 48*14), true),
			3 => (A_dly(2)'last_event, tpd_A_P((863 - 42)- 48*15), true),
			4 => (A_dly(1)'last_event, tpd_A_P((863 - 42)- 48*16), true),
			5 => (A_dly(0)'last_event, tpd_A_P((863 - 42)- 48*17), true),
			6 => (B_dly(5)'last_event, tpd_B_P((863 - 42)- 48*12), true),
			7 => (B_dly(4)'last_event, tpd_B_P((863 - 42)- 48*13), true),
			8 => (B_dly(3)'last_event, tpd_B_P((863 - 42)- 48*14), true),
			9 => (B_dly(2)'last_event, tpd_B_P((863 - 42)- 48*15), true),
			10 => (B_dly(1)'last_event, tpd_B_P((863 - 42)- 48*16), true),
			11 => (B_dly(0)'last_event, tpd_B_P((863 - 42)- 48*17), true),
			12 => (BCIN_dly(5)'last_event, tpd_BCIN_P((863 - 42)- 48*12), true),
			13 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 42)- 48*13), true),
			14 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 42)- 48*14), true),
			15 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 42)- 48*15), true),
			16 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 42)- 48*16), true),
			17 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 42)- 48*17), true),
			18 => (C_dly(5)'last_event, tpd_C_P((2303 - 42)- 48*42), true),
			19 => (C_dly(4)'last_event, tpd_C_P((2303 - 42)- 48*43), true),
			20 => (C_dly(3)'last_event, tpd_C_P((2303 - 42)- 48*44), true),
			21 => (C_dly(2)'last_event, tpd_C_P((2303 - 42)- 48*45), true),
			22 => (C_dly(1)'last_event, tpd_C_P((2303 - 42)- 48*46), true),
			23 => (C_dly(0)'last_event, tpd_C_P((2303 - 42)- 48*47), true),
			24 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(5), true),
			25 => (D_dly(5)'last_event, tpd_D_P((863 - 42)- 48*12), true),
			26 => (D_dly(4)'last_event, tpd_D_P((863 - 42)- 48*13), true),
			27 => (D_dly(3)'last_event, tpd_D_P((863 - 42)- 48*14), true),
			28 => (D_dly(2)'last_event, tpd_D_P((863 - 42)- 48*15), true),
			29 => (D_dly(1)'last_event, tpd_D_P((863 - 42)- 48*16), true),
			30 => (D_dly(0)'last_event, tpd_D_P((863 - 42)- 48*17), true),
			31 => (OPMODE_dly(5)'last_event, tpd_OPMODE_P((383 - 42)- 48*2), true),
			32 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 42)- 48*3), true),
			33 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 42)- 48*4), true),
			34 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 42)- 48*5), true),
			35 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 42)- 48*6), true),
			36 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 42)- 48*7), true),
			37 => (PCIN_dly(5)'last_event, tpd_PCIN_P((2303 - 42)- 48*42), true),
			38 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 42)- 48*43), true),
			39 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 42)- 48*44), true),
			40 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 42)- 48*45), true),
			41 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 42)- 48*46), true),
			42 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 42)- 48*47), true),
			43 => (RSTA_dly'last_event, tpd_RSTA_P(5), true),
			44 => (RSTB_dly'last_event, tpd_RSTB_P(5), true),
			45 => (RSTC_dly'last_event, tpd_RSTC_P(5), true),
			46 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(5), true),
			47 => (RSTD_dly'last_event, tpd_RSTD_P(5), true),
			48 => (RSTM_dly'last_event, tpd_RSTM_P(5), true),
			49 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(5), true),
			50 => (RSTP_dly'last_event, tpd_RSTP_P(5), true),
			51 => (CLK_dly'last_event, tpd_CLK_P(5), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(4),
         GlitchData	=> P_GlitchData(4),
         OutSignalName	=> "P(4)",
         OutTemp	=> P_zd(4),
         Paths		=> (
			0 => (A_dly(4)'last_event, tpd_A_P((863 - 43)- 48*13), true),
			1 => (A_dly(3)'last_event, tpd_A_P((863 - 43)- 48*14), true),
			2 => (A_dly(2)'last_event, tpd_A_P((863 - 43)- 48*15), true),
			3 => (A_dly(1)'last_event, tpd_A_P((863 - 43)- 48*16), true),
			4 => (A_dly(0)'last_event, tpd_A_P((863 - 43)- 48*17), true),
			5 => (B_dly(4)'last_event, tpd_B_P((863 - 43)- 48*13), true),
			6 => (B_dly(3)'last_event, tpd_B_P((863 - 43)- 48*14), true),
			7 => (B_dly(2)'last_event, tpd_B_P((863 - 43)- 48*15), true),
			8 => (B_dly(1)'last_event, tpd_B_P((863 - 43)- 48*16), true),
			9 => (B_dly(0)'last_event, tpd_B_P((863 - 43)- 48*17), true),
			10 => (BCIN_dly(4)'last_event, tpd_BCIN_P((863 - 43)- 48*13), true),
			11 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 43)- 48*14), true),
			12 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 43)- 48*15), true),
			13 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 43)- 48*16), true),
			14 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 43)- 48*17), true),
			15 => (C_dly(4)'last_event, tpd_C_P((2303 - 43)- 48*43), true),
			16 => (C_dly(3)'last_event, tpd_C_P((2303 - 43)- 48*44), true),
			17 => (C_dly(2)'last_event, tpd_C_P((2303 - 43)- 48*45), true),
			18 => (C_dly(1)'last_event, tpd_C_P((2303 - 43)- 48*46), true),
			19 => (C_dly(0)'last_event, tpd_C_P((2303 - 43)- 48*47), true),
			20 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(4), true),
			21 => (D_dly(4)'last_event, tpd_D_P((863 - 43)- 48*13), true),
			22 => (D_dly(3)'last_event, tpd_D_P((863 - 43)- 48*14), true),
			23 => (D_dly(2)'last_event, tpd_D_P((863 - 43)- 48*15), true),
			24 => (D_dly(1)'last_event, tpd_D_P((863 - 43)- 48*16), true),
			25 => (D_dly(0)'last_event, tpd_D_P((863 - 43)- 48*17), true),
			26 => (OPMODE_dly(4)'last_event, tpd_OPMODE_P((383 - 43)- 48*3), true),
			27 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 43)- 48*4), true),
			28 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 43)- 48*5), true),
			29 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 43)- 48*6), true),
			30 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 43)- 48*7), true),
			31 => (PCIN_dly(4)'last_event, tpd_PCIN_P((2303 - 43)- 48*43), true),
			32 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 43)- 48*44), true),
			33 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 43)- 48*45), true),
			34 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 43)- 48*46), true),
			35 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 43)- 48*47), true),
			36 => (RSTA_dly'last_event, tpd_RSTA_P(4), true),
			37 => (RSTB_dly'last_event, tpd_RSTB_P(4), true),
			38 => (RSTC_dly'last_event, tpd_RSTC_P(4), true),
			39 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(4), true),
			40 => (RSTD_dly'last_event, tpd_RSTD_P(4), true),
			41 => (RSTM_dly'last_event, tpd_RSTM_P(4), true),
			42 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(4), true),
			43 => (RSTP_dly'last_event, tpd_RSTP_P(4), true),
			44 => (CLK_dly'last_event, tpd_CLK_P(4), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(3),
         GlitchData	=> P_GlitchData(3),
         OutSignalName	=> "P(3)",
         OutTemp	=> P_zd(3),
         Paths		=> (
			0 => (A_dly(3)'last_event, tpd_A_P((863 - 44)- 48*14), true),
			1 => (A_dly(2)'last_event, tpd_A_P((863 - 44)- 48*15), true),
			2 => (A_dly(1)'last_event, tpd_A_P((863 - 44)- 48*16), true),
			3 => (A_dly(0)'last_event, tpd_A_P((863 - 44)- 48*17), true),
			4 => (B_dly(3)'last_event, tpd_B_P((863 - 44)- 48*14), true),
			5 => (B_dly(2)'last_event, tpd_B_P((863 - 44)- 48*15), true),
			6 => (B_dly(1)'last_event, tpd_B_P((863 - 44)- 48*16), true),
			7 => (B_dly(0)'last_event, tpd_B_P((863 - 44)- 48*17), true),
			8 => (BCIN_dly(3)'last_event, tpd_BCIN_P((863 - 44)- 48*14), true),
			9 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 44)- 48*15), true),
			10 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 44)- 48*16), true),
			11 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 44)- 48*17), true),
			12 => (C_dly(3)'last_event, tpd_C_P((2303 - 44)- 48*44), true),
			13 => (C_dly(2)'last_event, tpd_C_P((2303 - 44)- 48*45), true),
			14 => (C_dly(1)'last_event, tpd_C_P((2303 - 44)- 48*46), true),
			15 => (C_dly(0)'last_event, tpd_C_P((2303 - 44)- 48*47), true),
			16 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(3), true),
			17 => (D_dly(3)'last_event, tpd_D_P((863 - 44)- 48*14), true),
			18 => (D_dly(2)'last_event, tpd_D_P((863 - 44)- 48*15), true),
			19 => (D_dly(1)'last_event, tpd_D_P((863 - 44)- 48*16), true),
			20 => (D_dly(0)'last_event, tpd_D_P((863 - 44)- 48*17), true),
			21 => (OPMODE_dly(3)'last_event, tpd_OPMODE_P((383 - 44)- 48*4), true),
			22 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 44)- 48*5), true),
			23 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 44)- 48*6), true),
			24 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 44)- 48*7), true),
			25 => (PCIN_dly(3)'last_event, tpd_PCIN_P((2303 - 44)- 48*44), true),
			26 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 44)- 48*45), true),
			27 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 44)- 48*46), true),
			28 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 44)- 48*47), true),
			29 => (RSTA_dly'last_event, tpd_RSTA_P(3), true),
			30 => (RSTB_dly'last_event, tpd_RSTB_P(3), true),
			31 => (RSTC_dly'last_event, tpd_RSTC_P(3), true),
			32 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(3), true),
			33 => (RSTD_dly'last_event, tpd_RSTD_P(3), true),
			34 => (RSTM_dly'last_event, tpd_RSTM_P(3), true),
			35 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(3), true),
			36 => (RSTP_dly'last_event, tpd_RSTP_P(3), true),
			37 => (CLK_dly'last_event, tpd_CLK_P(3), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(2),
         GlitchData	=> P_GlitchData(2),
         OutSignalName	=> "P(2)",
         OutTemp	=> P_zd(2),
         Paths		=> (
			0 => (A_dly(2)'last_event, tpd_A_P((863 - 45)- 48*15), true),
			1 => (A_dly(1)'last_event, tpd_A_P((863 - 45)- 48*16), true),
			2 => (A_dly(0)'last_event, tpd_A_P((863 - 45)- 48*17), true),
			3 => (B_dly(2)'last_event, tpd_B_P((863 - 45)- 48*15), true),
			4 => (B_dly(1)'last_event, tpd_B_P((863 - 45)- 48*16), true),
			5 => (B_dly(0)'last_event, tpd_B_P((863 - 45)- 48*17), true),
			6 => (BCIN_dly(2)'last_event, tpd_BCIN_P((863 - 45)- 48*15), true),
			7 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 45)- 48*16), true),
			8 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 45)- 48*17), true),
			9 => (C_dly(2)'last_event, tpd_C_P((2303 - 45)- 48*45), true),
			10 => (C_dly(1)'last_event, tpd_C_P((2303 - 45)- 48*46), true),
			11 => (C_dly(0)'last_event, tpd_C_P((2303 - 45)- 48*47), true),
			12 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(2), true),
			13 => (D_dly(2)'last_event, tpd_D_P((863 - 45)- 48*15), true),
			14 => (D_dly(1)'last_event, tpd_D_P((863 - 45)- 48*16), true),
			15 => (D_dly(0)'last_event, tpd_D_P((863 - 45)- 48*17), true),
			16 => (OPMODE_dly(2)'last_event, tpd_OPMODE_P((383 - 45)- 48*5), true),
			17 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 45)- 48*6), true),
			18 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 45)- 48*7), true),
			19 => (PCIN_dly(2)'last_event, tpd_PCIN_P((2303 - 45)- 48*45), true),
			20 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 45)- 48*46), true),
			21 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 45)- 48*47), true),
			22 => (RSTA_dly'last_event, tpd_RSTA_P(2), true),
			23 => (RSTB_dly'last_event, tpd_RSTB_P(2), true),
			24 => (RSTC_dly'last_event, tpd_RSTC_P(2), true),
			25 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(2), true),
			26 => (RSTD_dly'last_event, tpd_RSTD_P(2), true),
			27 => (RSTM_dly'last_event, tpd_RSTM_P(2), true),
			28 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(2), true),
			29 => (RSTP_dly'last_event, tpd_RSTP_P(2), true),
			30 => (CLK_dly'last_event, tpd_CLK_P(2), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(1),
         GlitchData	=> P_GlitchData(1),
         OutSignalName	=> "P(1)",
         OutTemp	=> P_zd(1),
         Paths		=> (
			0 => (A_dly(1)'last_event, tpd_A_P((863 - 46)- 48*16), true),
			1 => (A_dly(0)'last_event, tpd_A_P((863 - 46)- 48*17), true),
			2 => (B_dly(1)'last_event, tpd_B_P((863 - 46)- 48*16), true),
			3 => (B_dly(0)'last_event, tpd_B_P((863 - 46)- 48*17), true),
			4 => (BCIN_dly(1)'last_event, tpd_BCIN_P((863 - 46)- 48*16), true),
			5 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 46)- 48*17), true),
			6 => (C_dly(1)'last_event, tpd_C_P((2303 - 46)- 48*46), true),
			7 => (C_dly(0)'last_event, tpd_C_P((2303 - 46)- 48*47), true),
			8 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(1), true),
			9 => (D_dly(1)'last_event, tpd_D_P((863 - 46)- 48*16), true),
			10 => (D_dly(0)'last_event, tpd_D_P((863 - 46)- 48*17), true),
			11 => (OPMODE_dly(1)'last_event, tpd_OPMODE_P((383 - 46)- 48*6), true),
			12 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 46)- 48*7), true),
			13 => (PCIN_dly(1)'last_event, tpd_PCIN_P((2303 - 46)- 48*46), true),
			14 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 46)- 48*47), true),
			15 => (RSTA_dly'last_event, tpd_RSTA_P(1), true),
			16 => (RSTB_dly'last_event, tpd_RSTB_P(1), true),
			17 => (RSTC_dly'last_event, tpd_RSTC_P(1), true),
			18 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(1), true),
			19 => (RSTD_dly'last_event, tpd_RSTD_P(1), true),
			20 => (RSTM_dly'last_event, tpd_RSTM_P(1), true),
			21 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(1), true),
			22 => (RSTP_dly'last_event, tpd_RSTP_P(1), true),
			23 => (CLK_dly'last_event, tpd_CLK_P(1), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> P(0),
         GlitchData	=> P_GlitchData(0),
         OutSignalName	=> "P(0)",
         OutTemp	=> P_zd(0),
         Paths		=> (
			0 => (A_dly(0)'last_event, tpd_A_P((863 - 47)- 48*17), true),
			1 => (B_dly(0)'last_event, tpd_B_P((863 - 47)- 48*17), true),
			2 => (BCIN_dly(0)'last_event, tpd_BCIN_P((863 - 47)- 48*17), true),
			3 => (C_dly(0)'last_event, tpd_C_P((2303 - 47)- 48*47), true),
			4 => (CARRYIN_dly'last_event, tpd_CARRYIN_P(0), true),
			5 => (D_dly(0)'last_event, tpd_D_P((863 - 47)- 48*17), true),
			6 => (OPMODE_dly(0)'last_event, tpd_OPMODE_P((383 - 47)- 48*7), true),
			7 => (PCIN_dly(0)'last_event, tpd_PCIN_P((2303 - 47)- 48*47), true),
			8 => (RSTA_dly'last_event, tpd_RSTA_P(0), true),
			9 => (RSTB_dly'last_event, tpd_RSTB_P(0), true),
			10 => (RSTC_dly'last_event, tpd_RSTC_P(0), true),
			11 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_P(0), true),
			12 => (RSTD_dly'last_event, tpd_RSTD_P(0), true),
			13 => (RSTM_dly'last_event, tpd_RSTM_P(0), true),
			14 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_P(0), true),
			15 => (RSTP_dly'last_event, tpd_RSTP_P(0), true),
			16 => (CLK_dly'last_event, tpd_CLK_P(0), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(47),
         GlitchData	=> PCOUT_GlitchData(47),
         OutSignalName	=> "PCOUT(47)",
         OutTemp	=> PCOUT_zd(47),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_PCOUT((863 - 0)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_PCOUT((863 - 0)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_PCOUT((863 - 0)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_PCOUT((863 - 0)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_PCOUT((863 - 0)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_PCOUT((863 - 0)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_PCOUT((863 - 0)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_PCOUT((863 - 0)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_PCOUT((863 - 0)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_PCOUT((863 - 0)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_PCOUT((863 - 0)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_PCOUT((863 - 0)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 0)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 0)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 0)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 0)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 0)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 0)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_PCOUT((863 - 0)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_PCOUT((863 - 0)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_PCOUT((863 - 0)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_PCOUT((863 - 0)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_PCOUT((863 - 0)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_PCOUT((863 - 0)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_PCOUT((863 - 0)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_PCOUT((863 - 0)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_PCOUT((863 - 0)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_PCOUT((863 - 0)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_PCOUT((863 - 0)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_PCOUT((863 - 0)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 0)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 0)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 0)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 0)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 0)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 0)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_PCOUT((863 - 0)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_PCOUT((863 - 0)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_PCOUT((863 - 0)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_PCOUT((863 - 0)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_PCOUT((863 - 0)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_PCOUT((863 - 0)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_PCOUT((863 - 0)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_PCOUT((863 - 0)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_PCOUT((863 - 0)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_PCOUT((863 - 0)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_PCOUT((863 - 0)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_PCOUT((863 - 0)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 0)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 0)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 0)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 0)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 0)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 0)- 48*17), true),
			54 => (C_dly(47)'last_event, tpd_C_PCOUT((2303 - 0)- 48*0), true),
			55 => (C_dly(46)'last_event, tpd_C_PCOUT((2303 - 0)- 48*1), true),
			56 => (C_dly(45)'last_event, tpd_C_PCOUT((2303 - 0)- 48*2), true),
			57 => (C_dly(44)'last_event, tpd_C_PCOUT((2303 - 0)- 48*3), true),
			58 => (C_dly(43)'last_event, tpd_C_PCOUT((2303 - 0)- 48*4), true),
			59 => (C_dly(42)'last_event, tpd_C_PCOUT((2303 - 0)- 48*5), true),
			60 => (C_dly(41)'last_event, tpd_C_PCOUT((2303 - 0)- 48*6), true),
			61 => (C_dly(40)'last_event, tpd_C_PCOUT((2303 - 0)- 48*7), true),
			62 => (C_dly(39)'last_event, tpd_C_PCOUT((2303 - 0)- 48*8), true),
			63 => (C_dly(38)'last_event, tpd_C_PCOUT((2303 - 0)- 48*9), true),
			64 => (C_dly(37)'last_event, tpd_C_PCOUT((2303 - 0)- 48*10), true),
			65 => (C_dly(36)'last_event, tpd_C_PCOUT((2303 - 0)- 48*11), true),
			66 => (C_dly(35)'last_event, tpd_C_PCOUT((2303 - 0)- 48*12), true),
			67 => (C_dly(34)'last_event, tpd_C_PCOUT((2303 - 0)- 48*13), true),
			68 => (C_dly(33)'last_event, tpd_C_PCOUT((2303 - 0)- 48*14), true),
			69 => (C_dly(32)'last_event, tpd_C_PCOUT((2303 - 0)- 48*15), true),
			70 => (C_dly(31)'last_event, tpd_C_PCOUT((2303 - 0)- 48*16), true),
			71 => (C_dly(30)'last_event, tpd_C_PCOUT((2303 - 0)- 48*17), true),
			72 => (C_dly(29)'last_event, tpd_C_PCOUT((2303 - 0)- 48*18), true),
			73 => (C_dly(28)'last_event, tpd_C_PCOUT((2303 - 0)- 48*19), true),
			74 => (C_dly(27)'last_event, tpd_C_PCOUT((2303 - 0)- 48*20), true),
			75 => (C_dly(26)'last_event, tpd_C_PCOUT((2303 - 0)- 48*21), true),
			76 => (C_dly(25)'last_event, tpd_C_PCOUT((2303 - 0)- 48*22), true),
			77 => (C_dly(24)'last_event, tpd_C_PCOUT((2303 - 0)- 48*23), true),
			78 => (C_dly(23)'last_event, tpd_C_PCOUT((2303 - 0)- 48*24), true),
			79 => (C_dly(22)'last_event, tpd_C_PCOUT((2303 - 0)- 48*25), true),
			80 => (C_dly(21)'last_event, tpd_C_PCOUT((2303 - 0)- 48*26), true),
			81 => (C_dly(20)'last_event, tpd_C_PCOUT((2303 - 0)- 48*27), true),
			82 => (C_dly(19)'last_event, tpd_C_PCOUT((2303 - 0)- 48*28), true),
			83 => (C_dly(18)'last_event, tpd_C_PCOUT((2303 - 0)- 48*29), true),
			84 => (C_dly(17)'last_event, tpd_C_PCOUT((2303 - 0)- 48*30), true),
			85 => (C_dly(16)'last_event, tpd_C_PCOUT((2303 - 0)- 48*31), true),
			86 => (C_dly(15)'last_event, tpd_C_PCOUT((2303 - 0)- 48*32), true),
			87 => (C_dly(14)'last_event, tpd_C_PCOUT((2303 - 0)- 48*33), true),
			88 => (C_dly(13)'last_event, tpd_C_PCOUT((2303 - 0)- 48*34), true),
			89 => (C_dly(12)'last_event, tpd_C_PCOUT((2303 - 0)- 48*35), true),
			90 => (C_dly(11)'last_event, tpd_C_PCOUT((2303 - 0)- 48*36), true),
			91 => (C_dly(10)'last_event, tpd_C_PCOUT((2303 - 0)- 48*37), true),
			92 => (C_dly(9)'last_event, tpd_C_PCOUT((2303 - 0)- 48*38), true),
			93 => (C_dly(8)'last_event, tpd_C_PCOUT((2303 - 0)- 48*39), true),
			94 => (C_dly(7)'last_event, tpd_C_PCOUT((2303 - 0)- 48*40), true),
			95 => (C_dly(6)'last_event, tpd_C_PCOUT((2303 - 0)- 48*41), true),
			96 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 0)- 48*42), true),
			97 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 0)- 48*43), true),
			98 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 0)- 48*44), true),
			99 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 0)- 48*45), true),
			100 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 0)- 48*46), true),
			101 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 0)- 48*47), true),
			102 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(47), true),
			103 => (D_dly(17)'last_event, tpd_D_PCOUT((863 - 0)- 48*0), true),
			104 => (D_dly(16)'last_event, tpd_D_PCOUT((863 - 0)- 48*1), true),
			105 => (D_dly(15)'last_event, tpd_D_PCOUT((863 - 0)- 48*2), true),
			106 => (D_dly(14)'last_event, tpd_D_PCOUT((863 - 0)- 48*3), true),
			107 => (D_dly(13)'last_event, tpd_D_PCOUT((863 - 0)- 48*4), true),
			108 => (D_dly(12)'last_event, tpd_D_PCOUT((863 - 0)- 48*5), true),
			109 => (D_dly(11)'last_event, tpd_D_PCOUT((863 - 0)- 48*6), true),
			110 => (D_dly(10)'last_event, tpd_D_PCOUT((863 - 0)- 48*7), true),
			111 => (D_dly(9)'last_event, tpd_D_PCOUT((863 - 0)- 48*8), true),
			112 => (D_dly(8)'last_event, tpd_D_PCOUT((863 - 0)- 48*9), true),
			113 => (D_dly(7)'last_event, tpd_D_PCOUT((863 - 0)- 48*10), true),
			114 => (D_dly(6)'last_event, tpd_D_PCOUT((863 - 0)- 48*11), true),
			115 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 0)- 48*12), true),
			116 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 0)- 48*13), true),
			117 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 0)- 48*14), true),
			118 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 0)- 48*15), true),
			119 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 0)- 48*16), true),
			120 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 0)- 48*17), true),
			121 => (OPMODE_dly(7)'last_event, tpd_OPMODE_PCOUT((383 - 0)- 48*0), true),
			122 => (OPMODE_dly(6)'last_event, tpd_OPMODE_PCOUT((383 - 0)- 48*1), true),
			123 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 0)- 48*2), true),
			124 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 0)- 48*3), true),
			125 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 0)- 48*4), true),
			126 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 0)- 48*5), true),
			127 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 0)- 48*6), true),
			128 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 0)- 48*7), true),
			129 => (PCIN_dly(47)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*0), true),
			130 => (PCIN_dly(46)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*1), true),
			131 => (PCIN_dly(45)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*2), true),
			132 => (PCIN_dly(44)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*3), true),
			133 => (PCIN_dly(43)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*4), true),
			134 => (PCIN_dly(42)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*5), true),
			135 => (PCIN_dly(41)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*6), true),
			136 => (PCIN_dly(40)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*7), true),
			137 => (PCIN_dly(39)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*8), true),
			138 => (PCIN_dly(38)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*9), true),
			139 => (PCIN_dly(37)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*10), true),
			140 => (PCIN_dly(36)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*11), true),
			141 => (PCIN_dly(35)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*12), true),
			142 => (PCIN_dly(34)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*13), true),
			143 => (PCIN_dly(33)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*14), true),
			144 => (PCIN_dly(32)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*15), true),
			145 => (PCIN_dly(31)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*16), true),
			146 => (PCIN_dly(30)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*17), true),
			147 => (PCIN_dly(29)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*18), true),
			148 => (PCIN_dly(28)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*19), true),
			149 => (PCIN_dly(27)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*20), true),
			150 => (PCIN_dly(26)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*21), true),
			151 => (PCIN_dly(25)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*22), true),
			152 => (PCIN_dly(24)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*23), true),
			153 => (PCIN_dly(23)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*24), true),
			154 => (PCIN_dly(22)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*25), true),
			155 => (PCIN_dly(21)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*26), true),
			156 => (PCIN_dly(20)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*27), true),
			157 => (PCIN_dly(19)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*28), true),
			158 => (PCIN_dly(18)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*29), true),
			159 => (PCIN_dly(17)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*30), true),
			160 => (PCIN_dly(16)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*31), true),
			161 => (PCIN_dly(15)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*32), true),
			162 => (PCIN_dly(14)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*33), true),
			163 => (PCIN_dly(13)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*34), true),
			164 => (PCIN_dly(12)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*35), true),
			165 => (PCIN_dly(11)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*36), true),
			166 => (PCIN_dly(10)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*37), true),
			167 => (PCIN_dly(9)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*38), true),
			168 => (PCIN_dly(8)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*39), true),
			169 => (PCIN_dly(7)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*40), true),
			170 => (PCIN_dly(6)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*41), true),
			171 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*42), true),
			172 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*43), true),
			173 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*44), true),
			174 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*45), true),
			175 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*46), true),
			176 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 0)- 48*47), true),
			177 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(47), true),
			178 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(47), true),
			179 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(47), true),
			180 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(47), true),
			181 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(47), true),
			182 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(47), true),
			183 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(47), true),
			184 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(47), true),
			185 => (CLK_dly'last_event, tpd_CLK_PCOUT(47), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(46),
         GlitchData	=> PCOUT_GlitchData(46),
         OutSignalName	=> "PCOUT(46)",
         OutTemp	=> PCOUT_zd(46),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_PCOUT((863 - 1)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_PCOUT((863 - 1)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_PCOUT((863 - 1)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_PCOUT((863 - 1)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_PCOUT((863 - 1)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_PCOUT((863 - 1)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_PCOUT((863 - 1)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_PCOUT((863 - 1)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_PCOUT((863 - 1)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_PCOUT((863 - 1)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_PCOUT((863 - 1)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_PCOUT((863 - 1)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 1)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 1)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 1)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 1)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 1)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 1)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_PCOUT((863 - 1)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_PCOUT((863 - 1)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_PCOUT((863 - 1)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_PCOUT((863 - 1)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_PCOUT((863 - 1)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_PCOUT((863 - 1)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_PCOUT((863 - 1)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_PCOUT((863 - 1)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_PCOUT((863 - 1)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_PCOUT((863 - 1)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_PCOUT((863 - 1)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_PCOUT((863 - 1)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 1)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 1)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 1)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 1)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 1)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 1)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_PCOUT((863 - 1)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_PCOUT((863 - 1)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_PCOUT((863 - 1)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_PCOUT((863 - 1)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_PCOUT((863 - 1)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_PCOUT((863 - 1)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_PCOUT((863 - 1)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_PCOUT((863 - 1)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_PCOUT((863 - 1)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_PCOUT((863 - 1)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_PCOUT((863 - 1)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_PCOUT((863 - 1)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 1)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 1)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 1)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 1)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 1)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 1)- 48*17), true),
			54 => (C_dly(46)'last_event, tpd_C_PCOUT((2303 - 1)- 48*1), true),
			55 => (C_dly(45)'last_event, tpd_C_PCOUT((2303 - 1)- 48*2), true),
			56 => (C_dly(44)'last_event, tpd_C_PCOUT((2303 - 1)- 48*3), true),
			57 => (C_dly(43)'last_event, tpd_C_PCOUT((2303 - 1)- 48*4), true),
			58 => (C_dly(42)'last_event, tpd_C_PCOUT((2303 - 1)- 48*5), true),
			59 => (C_dly(41)'last_event, tpd_C_PCOUT((2303 - 1)- 48*6), true),
			60 => (C_dly(40)'last_event, tpd_C_PCOUT((2303 - 1)- 48*7), true),
			61 => (C_dly(39)'last_event, tpd_C_PCOUT((2303 - 1)- 48*8), true),
			62 => (C_dly(38)'last_event, tpd_C_PCOUT((2303 - 1)- 48*9), true),
			63 => (C_dly(37)'last_event, tpd_C_PCOUT((2303 - 1)- 48*10), true),
			64 => (C_dly(36)'last_event, tpd_C_PCOUT((2303 - 1)- 48*11), true),
			65 => (C_dly(35)'last_event, tpd_C_PCOUT((2303 - 1)- 48*12), true),
			66 => (C_dly(34)'last_event, tpd_C_PCOUT((2303 - 1)- 48*13), true),
			67 => (C_dly(33)'last_event, tpd_C_PCOUT((2303 - 1)- 48*14), true),
			68 => (C_dly(32)'last_event, tpd_C_PCOUT((2303 - 1)- 48*15), true),
			69 => (C_dly(31)'last_event, tpd_C_PCOUT((2303 - 1)- 48*16), true),
			70 => (C_dly(30)'last_event, tpd_C_PCOUT((2303 - 1)- 48*17), true),
			71 => (C_dly(29)'last_event, tpd_C_PCOUT((2303 - 1)- 48*18), true),
			72 => (C_dly(28)'last_event, tpd_C_PCOUT((2303 - 1)- 48*19), true),
			73 => (C_dly(27)'last_event, tpd_C_PCOUT((2303 - 1)- 48*20), true),
			74 => (C_dly(26)'last_event, tpd_C_PCOUT((2303 - 1)- 48*21), true),
			75 => (C_dly(25)'last_event, tpd_C_PCOUT((2303 - 1)- 48*22), true),
			76 => (C_dly(24)'last_event, tpd_C_PCOUT((2303 - 1)- 48*23), true),
			77 => (C_dly(23)'last_event, tpd_C_PCOUT((2303 - 1)- 48*24), true),
			78 => (C_dly(22)'last_event, tpd_C_PCOUT((2303 - 1)- 48*25), true),
			79 => (C_dly(21)'last_event, tpd_C_PCOUT((2303 - 1)- 48*26), true),
			80 => (C_dly(20)'last_event, tpd_C_PCOUT((2303 - 1)- 48*27), true),
			81 => (C_dly(19)'last_event, tpd_C_PCOUT((2303 - 1)- 48*28), true),
			82 => (C_dly(18)'last_event, tpd_C_PCOUT((2303 - 1)- 48*29), true),
			83 => (C_dly(17)'last_event, tpd_C_PCOUT((2303 - 1)- 48*30), true),
			84 => (C_dly(16)'last_event, tpd_C_PCOUT((2303 - 1)- 48*31), true),
			85 => (C_dly(15)'last_event, tpd_C_PCOUT((2303 - 1)- 48*32), true),
			86 => (C_dly(14)'last_event, tpd_C_PCOUT((2303 - 1)- 48*33), true),
			87 => (C_dly(13)'last_event, tpd_C_PCOUT((2303 - 1)- 48*34), true),
			88 => (C_dly(12)'last_event, tpd_C_PCOUT((2303 - 1)- 48*35), true),
			89 => (C_dly(11)'last_event, tpd_C_PCOUT((2303 - 1)- 48*36), true),
			90 => (C_dly(10)'last_event, tpd_C_PCOUT((2303 - 1)- 48*37), true),
			91 => (C_dly(9)'last_event, tpd_C_PCOUT((2303 - 1)- 48*38), true),
			92 => (C_dly(8)'last_event, tpd_C_PCOUT((2303 - 1)- 48*39), true),
			93 => (C_dly(7)'last_event, tpd_C_PCOUT((2303 - 1)- 48*40), true),
			94 => (C_dly(6)'last_event, tpd_C_PCOUT((2303 - 1)- 48*41), true),
			95 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 1)- 48*42), true),
			96 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 1)- 48*43), true),
			97 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 1)- 48*44), true),
			98 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 1)- 48*45), true),
			99 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 1)- 48*46), true),
			100 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 1)- 48*47), true),
			101 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(46), true),
			102 => (D_dly(17)'last_event, tpd_D_PCOUT((863 - 1)- 48*0), true),
			103 => (D_dly(16)'last_event, tpd_D_PCOUT((863 - 1)- 48*1), true),
			104 => (D_dly(15)'last_event, tpd_D_PCOUT((863 - 1)- 48*2), true),
			105 => (D_dly(14)'last_event, tpd_D_PCOUT((863 - 1)- 48*3), true),
			106 => (D_dly(13)'last_event, tpd_D_PCOUT((863 - 1)- 48*4), true),
			107 => (D_dly(12)'last_event, tpd_D_PCOUT((863 - 1)- 48*5), true),
			108 => (D_dly(11)'last_event, tpd_D_PCOUT((863 - 1)- 48*6), true),
			109 => (D_dly(10)'last_event, tpd_D_PCOUT((863 - 1)- 48*7), true),
			110 => (D_dly(9)'last_event, tpd_D_PCOUT((863 - 1)- 48*8), true),
			111 => (D_dly(8)'last_event, tpd_D_PCOUT((863 - 1)- 48*9), true),
			112 => (D_dly(7)'last_event, tpd_D_PCOUT((863 - 1)- 48*10), true),
			113 => (D_dly(6)'last_event, tpd_D_PCOUT((863 - 1)- 48*11), true),
			114 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 1)- 48*12), true),
			115 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 1)- 48*13), true),
			116 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 1)- 48*14), true),
			117 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 1)- 48*15), true),
			118 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 1)- 48*16), true),
			119 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 1)- 48*17), true),
			120 => (OPMODE_dly(7)'last_event, tpd_OPMODE_PCOUT((383 - 1)- 48*0), true),
			121 => (OPMODE_dly(6)'last_event, tpd_OPMODE_PCOUT((383 - 1)- 48*1), true),
			122 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 1)- 48*2), true),
			123 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 1)- 48*3), true),
			124 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 1)- 48*4), true),
			125 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 1)- 48*5), true),
			126 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 1)- 48*6), true),
			127 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 1)- 48*7), true),
			128 => (PCIN_dly(46)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*1), true),
			129 => (PCIN_dly(45)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*2), true),
			130 => (PCIN_dly(44)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*3), true),
			131 => (PCIN_dly(43)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*4), true),
			132 => (PCIN_dly(42)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*5), true),
			133 => (PCIN_dly(41)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*6), true),
			134 => (PCIN_dly(40)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*7), true),
			135 => (PCIN_dly(39)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*8), true),
			136 => (PCIN_dly(38)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*9), true),
			137 => (PCIN_dly(37)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*10), true),
			138 => (PCIN_dly(36)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*11), true),
			139 => (PCIN_dly(35)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*12), true),
			140 => (PCIN_dly(34)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*13), true),
			141 => (PCIN_dly(33)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*14), true),
			142 => (PCIN_dly(32)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*15), true),
			143 => (PCIN_dly(31)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*16), true),
			144 => (PCIN_dly(30)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*17), true),
			145 => (PCIN_dly(29)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*18), true),
			146 => (PCIN_dly(28)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*19), true),
			147 => (PCIN_dly(27)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*20), true),
			148 => (PCIN_dly(26)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*21), true),
			149 => (PCIN_dly(25)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*22), true),
			150 => (PCIN_dly(24)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*23), true),
			151 => (PCIN_dly(23)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*24), true),
			152 => (PCIN_dly(22)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*25), true),
			153 => (PCIN_dly(21)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*26), true),
			154 => (PCIN_dly(20)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*27), true),
			155 => (PCIN_dly(19)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*28), true),
			156 => (PCIN_dly(18)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*29), true),
			157 => (PCIN_dly(17)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*30), true),
			158 => (PCIN_dly(16)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*31), true),
			159 => (PCIN_dly(15)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*32), true),
			160 => (PCIN_dly(14)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*33), true),
			161 => (PCIN_dly(13)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*34), true),
			162 => (PCIN_dly(12)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*35), true),
			163 => (PCIN_dly(11)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*36), true),
			164 => (PCIN_dly(10)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*37), true),
			165 => (PCIN_dly(9)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*38), true),
			166 => (PCIN_dly(8)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*39), true),
			167 => (PCIN_dly(7)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*40), true),
			168 => (PCIN_dly(6)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*41), true),
			169 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*42), true),
			170 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*43), true),
			171 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*44), true),
			172 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*45), true),
			173 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*46), true),
			174 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 1)- 48*47), true),
			175 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(46), true),
			176 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(46), true),
			177 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(46), true),
			178 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(46), true),
			179 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(46), true),
			180 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(46), true),
			181 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(46), true),
			182 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(46), true),
			183 => (CLK_dly'last_event, tpd_CLK_PCOUT(46), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(45),
         GlitchData	=> PCOUT_GlitchData(45),
         OutSignalName	=> "PCOUT(45)",
         OutTemp	=> PCOUT_zd(45),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_PCOUT((863 - 2)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_PCOUT((863 - 2)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_PCOUT((863 - 2)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_PCOUT((863 - 2)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_PCOUT((863 - 2)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_PCOUT((863 - 2)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_PCOUT((863 - 2)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_PCOUT((863 - 2)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_PCOUT((863 - 2)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_PCOUT((863 - 2)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_PCOUT((863 - 2)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_PCOUT((863 - 2)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 2)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 2)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 2)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 2)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 2)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 2)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_PCOUT((863 - 2)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_PCOUT((863 - 2)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_PCOUT((863 - 2)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_PCOUT((863 - 2)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_PCOUT((863 - 2)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_PCOUT((863 - 2)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_PCOUT((863 - 2)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_PCOUT((863 - 2)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_PCOUT((863 - 2)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_PCOUT((863 - 2)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_PCOUT((863 - 2)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_PCOUT((863 - 2)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 2)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 2)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 2)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 2)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 2)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 2)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_PCOUT((863 - 2)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_PCOUT((863 - 2)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_PCOUT((863 - 2)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_PCOUT((863 - 2)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_PCOUT((863 - 2)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_PCOUT((863 - 2)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_PCOUT((863 - 2)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_PCOUT((863 - 2)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_PCOUT((863 - 2)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_PCOUT((863 - 2)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_PCOUT((863 - 2)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_PCOUT((863 - 2)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 2)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 2)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 2)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 2)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 2)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 2)- 48*17), true),
			54 => (C_dly(45)'last_event, tpd_C_PCOUT((2303 - 2)- 48*2), true),
			55 => (C_dly(44)'last_event, tpd_C_PCOUT((2303 - 2)- 48*3), true),
			56 => (C_dly(43)'last_event, tpd_C_PCOUT((2303 - 2)- 48*4), true),
			57 => (C_dly(42)'last_event, tpd_C_PCOUT((2303 - 2)- 48*5), true),
			58 => (C_dly(41)'last_event, tpd_C_PCOUT((2303 - 2)- 48*6), true),
			59 => (C_dly(40)'last_event, tpd_C_PCOUT((2303 - 2)- 48*7), true),
			60 => (C_dly(39)'last_event, tpd_C_PCOUT((2303 - 2)- 48*8), true),
			61 => (C_dly(38)'last_event, tpd_C_PCOUT((2303 - 2)- 48*9), true),
			62 => (C_dly(37)'last_event, tpd_C_PCOUT((2303 - 2)- 48*10), true),
			63 => (C_dly(36)'last_event, tpd_C_PCOUT((2303 - 2)- 48*11), true),
			64 => (C_dly(35)'last_event, tpd_C_PCOUT((2303 - 2)- 48*12), true),
			65 => (C_dly(34)'last_event, tpd_C_PCOUT((2303 - 2)- 48*13), true),
			66 => (C_dly(33)'last_event, tpd_C_PCOUT((2303 - 2)- 48*14), true),
			67 => (C_dly(32)'last_event, tpd_C_PCOUT((2303 - 2)- 48*15), true),
			68 => (C_dly(31)'last_event, tpd_C_PCOUT((2303 - 2)- 48*16), true),
			69 => (C_dly(30)'last_event, tpd_C_PCOUT((2303 - 2)- 48*17), true),
			70 => (C_dly(29)'last_event, tpd_C_PCOUT((2303 - 2)- 48*18), true),
			71 => (C_dly(28)'last_event, tpd_C_PCOUT((2303 - 2)- 48*19), true),
			72 => (C_dly(27)'last_event, tpd_C_PCOUT((2303 - 2)- 48*20), true),
			73 => (C_dly(26)'last_event, tpd_C_PCOUT((2303 - 2)- 48*21), true),
			74 => (C_dly(25)'last_event, tpd_C_PCOUT((2303 - 2)- 48*22), true),
			75 => (C_dly(24)'last_event, tpd_C_PCOUT((2303 - 2)- 48*23), true),
			76 => (C_dly(23)'last_event, tpd_C_PCOUT((2303 - 2)- 48*24), true),
			77 => (C_dly(22)'last_event, tpd_C_PCOUT((2303 - 2)- 48*25), true),
			78 => (C_dly(21)'last_event, tpd_C_PCOUT((2303 - 2)- 48*26), true),
			79 => (C_dly(20)'last_event, tpd_C_PCOUT((2303 - 2)- 48*27), true),
			80 => (C_dly(19)'last_event, tpd_C_PCOUT((2303 - 2)- 48*28), true),
			81 => (C_dly(18)'last_event, tpd_C_PCOUT((2303 - 2)- 48*29), true),
			82 => (C_dly(17)'last_event, tpd_C_PCOUT((2303 - 2)- 48*30), true),
			83 => (C_dly(16)'last_event, tpd_C_PCOUT((2303 - 2)- 48*31), true),
			84 => (C_dly(15)'last_event, tpd_C_PCOUT((2303 - 2)- 48*32), true),
			85 => (C_dly(14)'last_event, tpd_C_PCOUT((2303 - 2)- 48*33), true),
			86 => (C_dly(13)'last_event, tpd_C_PCOUT((2303 - 2)- 48*34), true),
			87 => (C_dly(12)'last_event, tpd_C_PCOUT((2303 - 2)- 48*35), true),
			88 => (C_dly(11)'last_event, tpd_C_PCOUT((2303 - 2)- 48*36), true),
			89 => (C_dly(10)'last_event, tpd_C_PCOUT((2303 - 2)- 48*37), true),
			90 => (C_dly(9)'last_event, tpd_C_PCOUT((2303 - 2)- 48*38), true),
			91 => (C_dly(8)'last_event, tpd_C_PCOUT((2303 - 2)- 48*39), true),
			92 => (C_dly(7)'last_event, tpd_C_PCOUT((2303 - 2)- 48*40), true),
			93 => (C_dly(6)'last_event, tpd_C_PCOUT((2303 - 2)- 48*41), true),
			94 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 2)- 48*42), true),
			95 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 2)- 48*43), true),
			96 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 2)- 48*44), true),
			97 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 2)- 48*45), true),
			98 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 2)- 48*46), true),
			99 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 2)- 48*47), true),
			100 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(45), true),
			101 => (D_dly(17)'last_event, tpd_D_PCOUT((863 - 2)- 48*0), true),
			102 => (D_dly(16)'last_event, tpd_D_PCOUT((863 - 2)- 48*1), true),
			103 => (D_dly(15)'last_event, tpd_D_PCOUT((863 - 2)- 48*2), true),
			104 => (D_dly(14)'last_event, tpd_D_PCOUT((863 - 2)- 48*3), true),
			105 => (D_dly(13)'last_event, tpd_D_PCOUT((863 - 2)- 48*4), true),
			106 => (D_dly(12)'last_event, tpd_D_PCOUT((863 - 2)- 48*5), true),
			107 => (D_dly(11)'last_event, tpd_D_PCOUT((863 - 2)- 48*6), true),
			108 => (D_dly(10)'last_event, tpd_D_PCOUT((863 - 2)- 48*7), true),
			109 => (D_dly(9)'last_event, tpd_D_PCOUT((863 - 2)- 48*8), true),
			110 => (D_dly(8)'last_event, tpd_D_PCOUT((863 - 2)- 48*9), true),
			111 => (D_dly(7)'last_event, tpd_D_PCOUT((863 - 2)- 48*10), true),
			112 => (D_dly(6)'last_event, tpd_D_PCOUT((863 - 2)- 48*11), true),
			113 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 2)- 48*12), true),
			114 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 2)- 48*13), true),
			115 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 2)- 48*14), true),
			116 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 2)- 48*15), true),
			117 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 2)- 48*16), true),
			118 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 2)- 48*17), true),
			119 => (OPMODE_dly(7)'last_event, tpd_OPMODE_PCOUT((383 - 2)- 48*0), true),
			120 => (OPMODE_dly(6)'last_event, tpd_OPMODE_PCOUT((383 - 2)- 48*1), true),
			121 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 2)- 48*2), true),
			122 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 2)- 48*3), true),
			123 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 2)- 48*4), true),
			124 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 2)- 48*5), true),
			125 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 2)- 48*6), true),
			126 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 2)- 48*7), true),
			127 => (PCIN_dly(45)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*2), true),
			128 => (PCIN_dly(44)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*3), true),
			129 => (PCIN_dly(43)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*4), true),
			130 => (PCIN_dly(42)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*5), true),
			131 => (PCIN_dly(41)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*6), true),
			132 => (PCIN_dly(40)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*7), true),
			133 => (PCIN_dly(39)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*8), true),
			134 => (PCIN_dly(38)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*9), true),
			135 => (PCIN_dly(37)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*10), true),
			136 => (PCIN_dly(36)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*11), true),
			137 => (PCIN_dly(35)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*12), true),
			138 => (PCIN_dly(34)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*13), true),
			139 => (PCIN_dly(33)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*14), true),
			140 => (PCIN_dly(32)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*15), true),
			141 => (PCIN_dly(31)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*16), true),
			142 => (PCIN_dly(30)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*17), true),
			143 => (PCIN_dly(29)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*18), true),
			144 => (PCIN_dly(28)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*19), true),
			145 => (PCIN_dly(27)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*20), true),
			146 => (PCIN_dly(26)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*21), true),
			147 => (PCIN_dly(25)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*22), true),
			148 => (PCIN_dly(24)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*23), true),
			149 => (PCIN_dly(23)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*24), true),
			150 => (PCIN_dly(22)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*25), true),
			151 => (PCIN_dly(21)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*26), true),
			152 => (PCIN_dly(20)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*27), true),
			153 => (PCIN_dly(19)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*28), true),
			154 => (PCIN_dly(18)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*29), true),
			155 => (PCIN_dly(17)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*30), true),
			156 => (PCIN_dly(16)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*31), true),
			157 => (PCIN_dly(15)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*32), true),
			158 => (PCIN_dly(14)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*33), true),
			159 => (PCIN_dly(13)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*34), true),
			160 => (PCIN_dly(12)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*35), true),
			161 => (PCIN_dly(11)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*36), true),
			162 => (PCIN_dly(10)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*37), true),
			163 => (PCIN_dly(9)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*38), true),
			164 => (PCIN_dly(8)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*39), true),
			165 => (PCIN_dly(7)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*40), true),
			166 => (PCIN_dly(6)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*41), true),
			167 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*42), true),
			168 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*43), true),
			169 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*44), true),
			170 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*45), true),
			171 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*46), true),
			172 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 2)- 48*47), true),
			173 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(45), true),
			174 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(45), true),
			175 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(45), true),
			176 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(45), true),
			177 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(45), true),
			178 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(45), true),
			179 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(45), true),
			180 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(45), true),
			181 => (CLK_dly'last_event, tpd_CLK_PCOUT(45), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(44),
         GlitchData	=> PCOUT_GlitchData(44),
         OutSignalName	=> "PCOUT(44)",
         OutTemp	=> PCOUT_zd(44),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_PCOUT((863 - 3)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_PCOUT((863 - 3)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_PCOUT((863 - 3)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_PCOUT((863 - 3)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_PCOUT((863 - 3)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_PCOUT((863 - 3)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_PCOUT((863 - 3)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_PCOUT((863 - 3)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_PCOUT((863 - 3)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_PCOUT((863 - 3)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_PCOUT((863 - 3)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_PCOUT((863 - 3)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 3)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 3)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 3)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 3)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 3)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 3)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_PCOUT((863 - 3)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_PCOUT((863 - 3)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_PCOUT((863 - 3)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_PCOUT((863 - 3)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_PCOUT((863 - 3)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_PCOUT((863 - 3)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_PCOUT((863 - 3)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_PCOUT((863 - 3)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_PCOUT((863 - 3)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_PCOUT((863 - 3)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_PCOUT((863 - 3)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_PCOUT((863 - 3)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 3)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 3)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 3)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 3)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 3)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 3)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_PCOUT((863 - 3)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_PCOUT((863 - 3)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_PCOUT((863 - 3)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_PCOUT((863 - 3)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_PCOUT((863 - 3)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_PCOUT((863 - 3)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_PCOUT((863 - 3)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_PCOUT((863 - 3)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_PCOUT((863 - 3)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_PCOUT((863 - 3)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_PCOUT((863 - 3)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_PCOUT((863 - 3)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 3)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 3)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 3)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 3)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 3)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 3)- 48*17), true),
			54 => (C_dly(44)'last_event, tpd_C_PCOUT((2303 - 3)- 48*3), true),
			55 => (C_dly(43)'last_event, tpd_C_PCOUT((2303 - 3)- 48*4), true),
			56 => (C_dly(42)'last_event, tpd_C_PCOUT((2303 - 3)- 48*5), true),
			57 => (C_dly(41)'last_event, tpd_C_PCOUT((2303 - 3)- 48*6), true),
			58 => (C_dly(40)'last_event, tpd_C_PCOUT((2303 - 3)- 48*7), true),
			59 => (C_dly(39)'last_event, tpd_C_PCOUT((2303 - 3)- 48*8), true),
			60 => (C_dly(38)'last_event, tpd_C_PCOUT((2303 - 3)- 48*9), true),
			61 => (C_dly(37)'last_event, tpd_C_PCOUT((2303 - 3)- 48*10), true),
			62 => (C_dly(36)'last_event, tpd_C_PCOUT((2303 - 3)- 48*11), true),
			63 => (C_dly(35)'last_event, tpd_C_PCOUT((2303 - 3)- 48*12), true),
			64 => (C_dly(34)'last_event, tpd_C_PCOUT((2303 - 3)- 48*13), true),
			65 => (C_dly(33)'last_event, tpd_C_PCOUT((2303 - 3)- 48*14), true),
			66 => (C_dly(32)'last_event, tpd_C_PCOUT((2303 - 3)- 48*15), true),
			67 => (C_dly(31)'last_event, tpd_C_PCOUT((2303 - 3)- 48*16), true),
			68 => (C_dly(30)'last_event, tpd_C_PCOUT((2303 - 3)- 48*17), true),
			69 => (C_dly(29)'last_event, tpd_C_PCOUT((2303 - 3)- 48*18), true),
			70 => (C_dly(28)'last_event, tpd_C_PCOUT((2303 - 3)- 48*19), true),
			71 => (C_dly(27)'last_event, tpd_C_PCOUT((2303 - 3)- 48*20), true),
			72 => (C_dly(26)'last_event, tpd_C_PCOUT((2303 - 3)- 48*21), true),
			73 => (C_dly(25)'last_event, tpd_C_PCOUT((2303 - 3)- 48*22), true),
			74 => (C_dly(24)'last_event, tpd_C_PCOUT((2303 - 3)- 48*23), true),
			75 => (C_dly(23)'last_event, tpd_C_PCOUT((2303 - 3)- 48*24), true),
			76 => (C_dly(22)'last_event, tpd_C_PCOUT((2303 - 3)- 48*25), true),
			77 => (C_dly(21)'last_event, tpd_C_PCOUT((2303 - 3)- 48*26), true),
			78 => (C_dly(20)'last_event, tpd_C_PCOUT((2303 - 3)- 48*27), true),
			79 => (C_dly(19)'last_event, tpd_C_PCOUT((2303 - 3)- 48*28), true),
			80 => (C_dly(18)'last_event, tpd_C_PCOUT((2303 - 3)- 48*29), true),
			81 => (C_dly(17)'last_event, tpd_C_PCOUT((2303 - 3)- 48*30), true),
			82 => (C_dly(16)'last_event, tpd_C_PCOUT((2303 - 3)- 48*31), true),
			83 => (C_dly(15)'last_event, tpd_C_PCOUT((2303 - 3)- 48*32), true),
			84 => (C_dly(14)'last_event, tpd_C_PCOUT((2303 - 3)- 48*33), true),
			85 => (C_dly(13)'last_event, tpd_C_PCOUT((2303 - 3)- 48*34), true),
			86 => (C_dly(12)'last_event, tpd_C_PCOUT((2303 - 3)- 48*35), true),
			87 => (C_dly(11)'last_event, tpd_C_PCOUT((2303 - 3)- 48*36), true),
			88 => (C_dly(10)'last_event, tpd_C_PCOUT((2303 - 3)- 48*37), true),
			89 => (C_dly(9)'last_event, tpd_C_PCOUT((2303 - 3)- 48*38), true),
			90 => (C_dly(8)'last_event, tpd_C_PCOUT((2303 - 3)- 48*39), true),
			91 => (C_dly(7)'last_event, tpd_C_PCOUT((2303 - 3)- 48*40), true),
			92 => (C_dly(6)'last_event, tpd_C_PCOUT((2303 - 3)- 48*41), true),
			93 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 3)- 48*42), true),
			94 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 3)- 48*43), true),
			95 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 3)- 48*44), true),
			96 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 3)- 48*45), true),
			97 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 3)- 48*46), true),
			98 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 3)- 48*47), true),
			99 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(44), true),
			100 => (D_dly(17)'last_event, tpd_D_PCOUT((863 - 3)- 48*0), true),
			101 => (D_dly(16)'last_event, tpd_D_PCOUT((863 - 3)- 48*1), true),
			102 => (D_dly(15)'last_event, tpd_D_PCOUT((863 - 3)- 48*2), true),
			103 => (D_dly(14)'last_event, tpd_D_PCOUT((863 - 3)- 48*3), true),
			104 => (D_dly(13)'last_event, tpd_D_PCOUT((863 - 3)- 48*4), true),
			105 => (D_dly(12)'last_event, tpd_D_PCOUT((863 - 3)- 48*5), true),
			106 => (D_dly(11)'last_event, tpd_D_PCOUT((863 - 3)- 48*6), true),
			107 => (D_dly(10)'last_event, tpd_D_PCOUT((863 - 3)- 48*7), true),
			108 => (D_dly(9)'last_event, tpd_D_PCOUT((863 - 3)- 48*8), true),
			109 => (D_dly(8)'last_event, tpd_D_PCOUT((863 - 3)- 48*9), true),
			110 => (D_dly(7)'last_event, tpd_D_PCOUT((863 - 3)- 48*10), true),
			111 => (D_dly(6)'last_event, tpd_D_PCOUT((863 - 3)- 48*11), true),
			112 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 3)- 48*12), true),
			113 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 3)- 48*13), true),
			114 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 3)- 48*14), true),
			115 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 3)- 48*15), true),
			116 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 3)- 48*16), true),
			117 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 3)- 48*17), true),
			118 => (OPMODE_dly(7)'last_event, tpd_OPMODE_PCOUT((383 - 3)- 48*0), true),
			119 => (OPMODE_dly(6)'last_event, tpd_OPMODE_PCOUT((383 - 3)- 48*1), true),
			120 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 3)- 48*2), true),
			121 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 3)- 48*3), true),
			122 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 3)- 48*4), true),
			123 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 3)- 48*5), true),
			124 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 3)- 48*6), true),
			125 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 3)- 48*7), true),
			126 => (PCIN_dly(44)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*3), true),
			127 => (PCIN_dly(43)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*4), true),
			128 => (PCIN_dly(42)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*5), true),
			129 => (PCIN_dly(41)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*6), true),
			130 => (PCIN_dly(40)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*7), true),
			131 => (PCIN_dly(39)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*8), true),
			132 => (PCIN_dly(38)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*9), true),
			133 => (PCIN_dly(37)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*10), true),
			134 => (PCIN_dly(36)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*11), true),
			135 => (PCIN_dly(35)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*12), true),
			136 => (PCIN_dly(34)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*13), true),
			137 => (PCIN_dly(33)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*14), true),
			138 => (PCIN_dly(32)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*15), true),
			139 => (PCIN_dly(31)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*16), true),
			140 => (PCIN_dly(30)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*17), true),
			141 => (PCIN_dly(29)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*18), true),
			142 => (PCIN_dly(28)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*19), true),
			143 => (PCIN_dly(27)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*20), true),
			144 => (PCIN_dly(26)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*21), true),
			145 => (PCIN_dly(25)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*22), true),
			146 => (PCIN_dly(24)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*23), true),
			147 => (PCIN_dly(23)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*24), true),
			148 => (PCIN_dly(22)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*25), true),
			149 => (PCIN_dly(21)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*26), true),
			150 => (PCIN_dly(20)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*27), true),
			151 => (PCIN_dly(19)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*28), true),
			152 => (PCIN_dly(18)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*29), true),
			153 => (PCIN_dly(17)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*30), true),
			154 => (PCIN_dly(16)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*31), true),
			155 => (PCIN_dly(15)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*32), true),
			156 => (PCIN_dly(14)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*33), true),
			157 => (PCIN_dly(13)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*34), true),
			158 => (PCIN_dly(12)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*35), true),
			159 => (PCIN_dly(11)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*36), true),
			160 => (PCIN_dly(10)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*37), true),
			161 => (PCIN_dly(9)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*38), true),
			162 => (PCIN_dly(8)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*39), true),
			163 => (PCIN_dly(7)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*40), true),
			164 => (PCIN_dly(6)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*41), true),
			165 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*42), true),
			166 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*43), true),
			167 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*44), true),
			168 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*45), true),
			169 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*46), true),
			170 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 3)- 48*47), true),
			171 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(44), true),
			172 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(44), true),
			173 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(44), true),
			174 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(44), true),
			175 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(44), true),
			176 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(44), true),
			177 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(44), true),
			178 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(44), true),
			179 => (CLK_dly'last_event, tpd_CLK_PCOUT(44), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(43),
         GlitchData	=> PCOUT_GlitchData(43),
         OutSignalName	=> "PCOUT(43)",
         OutTemp	=> PCOUT_zd(43),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_PCOUT((863 - 4)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_PCOUT((863 - 4)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_PCOUT((863 - 4)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_PCOUT((863 - 4)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_PCOUT((863 - 4)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_PCOUT((863 - 4)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_PCOUT((863 - 4)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_PCOUT((863 - 4)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_PCOUT((863 - 4)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_PCOUT((863 - 4)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_PCOUT((863 - 4)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_PCOUT((863 - 4)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 4)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 4)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 4)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 4)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 4)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 4)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_PCOUT((863 - 4)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_PCOUT((863 - 4)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_PCOUT((863 - 4)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_PCOUT((863 - 4)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_PCOUT((863 - 4)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_PCOUT((863 - 4)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_PCOUT((863 - 4)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_PCOUT((863 - 4)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_PCOUT((863 - 4)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_PCOUT((863 - 4)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_PCOUT((863 - 4)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_PCOUT((863 - 4)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 4)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 4)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 4)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 4)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 4)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 4)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_PCOUT((863 - 4)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_PCOUT((863 - 4)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_PCOUT((863 - 4)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_PCOUT((863 - 4)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_PCOUT((863 - 4)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_PCOUT((863 - 4)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_PCOUT((863 - 4)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_PCOUT((863 - 4)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_PCOUT((863 - 4)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_PCOUT((863 - 4)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_PCOUT((863 - 4)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_PCOUT((863 - 4)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 4)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 4)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 4)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 4)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 4)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 4)- 48*17), true),
			54 => (C_dly(43)'last_event, tpd_C_PCOUT((2303 - 4)- 48*4), true),
			55 => (C_dly(42)'last_event, tpd_C_PCOUT((2303 - 4)- 48*5), true),
			56 => (C_dly(41)'last_event, tpd_C_PCOUT((2303 - 4)- 48*6), true),
			57 => (C_dly(40)'last_event, tpd_C_PCOUT((2303 - 4)- 48*7), true),
			58 => (C_dly(39)'last_event, tpd_C_PCOUT((2303 - 4)- 48*8), true),
			59 => (C_dly(38)'last_event, tpd_C_PCOUT((2303 - 4)- 48*9), true),
			60 => (C_dly(37)'last_event, tpd_C_PCOUT((2303 - 4)- 48*10), true),
			61 => (C_dly(36)'last_event, tpd_C_PCOUT((2303 - 4)- 48*11), true),
			62 => (C_dly(35)'last_event, tpd_C_PCOUT((2303 - 4)- 48*12), true),
			63 => (C_dly(34)'last_event, tpd_C_PCOUT((2303 - 4)- 48*13), true),
			64 => (C_dly(33)'last_event, tpd_C_PCOUT((2303 - 4)- 48*14), true),
			65 => (C_dly(32)'last_event, tpd_C_PCOUT((2303 - 4)- 48*15), true),
			66 => (C_dly(31)'last_event, tpd_C_PCOUT((2303 - 4)- 48*16), true),
			67 => (C_dly(30)'last_event, tpd_C_PCOUT((2303 - 4)- 48*17), true),
			68 => (C_dly(29)'last_event, tpd_C_PCOUT((2303 - 4)- 48*18), true),
			69 => (C_dly(28)'last_event, tpd_C_PCOUT((2303 - 4)- 48*19), true),
			70 => (C_dly(27)'last_event, tpd_C_PCOUT((2303 - 4)- 48*20), true),
			71 => (C_dly(26)'last_event, tpd_C_PCOUT((2303 - 4)- 48*21), true),
			72 => (C_dly(25)'last_event, tpd_C_PCOUT((2303 - 4)- 48*22), true),
			73 => (C_dly(24)'last_event, tpd_C_PCOUT((2303 - 4)- 48*23), true),
			74 => (C_dly(23)'last_event, tpd_C_PCOUT((2303 - 4)- 48*24), true),
			75 => (C_dly(22)'last_event, tpd_C_PCOUT((2303 - 4)- 48*25), true),
			76 => (C_dly(21)'last_event, tpd_C_PCOUT((2303 - 4)- 48*26), true),
			77 => (C_dly(20)'last_event, tpd_C_PCOUT((2303 - 4)- 48*27), true),
			78 => (C_dly(19)'last_event, tpd_C_PCOUT((2303 - 4)- 48*28), true),
			79 => (C_dly(18)'last_event, tpd_C_PCOUT((2303 - 4)- 48*29), true),
			80 => (C_dly(17)'last_event, tpd_C_PCOUT((2303 - 4)- 48*30), true),
			81 => (C_dly(16)'last_event, tpd_C_PCOUT((2303 - 4)- 48*31), true),
			82 => (C_dly(15)'last_event, tpd_C_PCOUT((2303 - 4)- 48*32), true),
			83 => (C_dly(14)'last_event, tpd_C_PCOUT((2303 - 4)- 48*33), true),
			84 => (C_dly(13)'last_event, tpd_C_PCOUT((2303 - 4)- 48*34), true),
			85 => (C_dly(12)'last_event, tpd_C_PCOUT((2303 - 4)- 48*35), true),
			86 => (C_dly(11)'last_event, tpd_C_PCOUT((2303 - 4)- 48*36), true),
			87 => (C_dly(10)'last_event, tpd_C_PCOUT((2303 - 4)- 48*37), true),
			88 => (C_dly(9)'last_event, tpd_C_PCOUT((2303 - 4)- 48*38), true),
			89 => (C_dly(8)'last_event, tpd_C_PCOUT((2303 - 4)- 48*39), true),
			90 => (C_dly(7)'last_event, tpd_C_PCOUT((2303 - 4)- 48*40), true),
			91 => (C_dly(6)'last_event, tpd_C_PCOUT((2303 - 4)- 48*41), true),
			92 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 4)- 48*42), true),
			93 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 4)- 48*43), true),
			94 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 4)- 48*44), true),
			95 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 4)- 48*45), true),
			96 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 4)- 48*46), true),
			97 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 4)- 48*47), true),
			98 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(43), true),
			99 => (D_dly(17)'last_event, tpd_D_PCOUT((863 - 4)- 48*0), true),
			100 => (D_dly(16)'last_event, tpd_D_PCOUT((863 - 4)- 48*1), true),
			101 => (D_dly(15)'last_event, tpd_D_PCOUT((863 - 4)- 48*2), true),
			102 => (D_dly(14)'last_event, tpd_D_PCOUT((863 - 4)- 48*3), true),
			103 => (D_dly(13)'last_event, tpd_D_PCOUT((863 - 4)- 48*4), true),
			104 => (D_dly(12)'last_event, tpd_D_PCOUT((863 - 4)- 48*5), true),
			105 => (D_dly(11)'last_event, tpd_D_PCOUT((863 - 4)- 48*6), true),
			106 => (D_dly(10)'last_event, tpd_D_PCOUT((863 - 4)- 48*7), true),
			107 => (D_dly(9)'last_event, tpd_D_PCOUT((863 - 4)- 48*8), true),
			108 => (D_dly(8)'last_event, tpd_D_PCOUT((863 - 4)- 48*9), true),
			109 => (D_dly(7)'last_event, tpd_D_PCOUT((863 - 4)- 48*10), true),
			110 => (D_dly(6)'last_event, tpd_D_PCOUT((863 - 4)- 48*11), true),
			111 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 4)- 48*12), true),
			112 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 4)- 48*13), true),
			113 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 4)- 48*14), true),
			114 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 4)- 48*15), true),
			115 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 4)- 48*16), true),
			116 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 4)- 48*17), true),
			117 => (OPMODE_dly(7)'last_event, tpd_OPMODE_PCOUT((383 - 4)- 48*0), true),
			118 => (OPMODE_dly(6)'last_event, tpd_OPMODE_PCOUT((383 - 4)- 48*1), true),
			119 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 4)- 48*2), true),
			120 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 4)- 48*3), true),
			121 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 4)- 48*4), true),
			122 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 4)- 48*5), true),
			123 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 4)- 48*6), true),
			124 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 4)- 48*7), true),
			125 => (PCIN_dly(43)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*4), true),
			126 => (PCIN_dly(42)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*5), true),
			127 => (PCIN_dly(41)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*6), true),
			128 => (PCIN_dly(40)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*7), true),
			129 => (PCIN_dly(39)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*8), true),
			130 => (PCIN_dly(38)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*9), true),
			131 => (PCIN_dly(37)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*10), true),
			132 => (PCIN_dly(36)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*11), true),
			133 => (PCIN_dly(35)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*12), true),
			134 => (PCIN_dly(34)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*13), true),
			135 => (PCIN_dly(33)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*14), true),
			136 => (PCIN_dly(32)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*15), true),
			137 => (PCIN_dly(31)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*16), true),
			138 => (PCIN_dly(30)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*17), true),
			139 => (PCIN_dly(29)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*18), true),
			140 => (PCIN_dly(28)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*19), true),
			141 => (PCIN_dly(27)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*20), true),
			142 => (PCIN_dly(26)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*21), true),
			143 => (PCIN_dly(25)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*22), true),
			144 => (PCIN_dly(24)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*23), true),
			145 => (PCIN_dly(23)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*24), true),
			146 => (PCIN_dly(22)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*25), true),
			147 => (PCIN_dly(21)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*26), true),
			148 => (PCIN_dly(20)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*27), true),
			149 => (PCIN_dly(19)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*28), true),
			150 => (PCIN_dly(18)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*29), true),
			151 => (PCIN_dly(17)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*30), true),
			152 => (PCIN_dly(16)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*31), true),
			153 => (PCIN_dly(15)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*32), true),
			154 => (PCIN_dly(14)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*33), true),
			155 => (PCIN_dly(13)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*34), true),
			156 => (PCIN_dly(12)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*35), true),
			157 => (PCIN_dly(11)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*36), true),
			158 => (PCIN_dly(10)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*37), true),
			159 => (PCIN_dly(9)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*38), true),
			160 => (PCIN_dly(8)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*39), true),
			161 => (PCIN_dly(7)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*40), true),
			162 => (PCIN_dly(6)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*41), true),
			163 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*42), true),
			164 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*43), true),
			165 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*44), true),
			166 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*45), true),
			167 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*46), true),
			168 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 4)- 48*47), true),
			169 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(43), true),
			170 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(43), true),
			171 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(43), true),
			172 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(43), true),
			173 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(43), true),
			174 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(43), true),
			175 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(43), true),
			176 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(43), true),
			177 => (CLK_dly'last_event, tpd_CLK_PCOUT(43), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(42),
         GlitchData	=> PCOUT_GlitchData(42),
         OutSignalName	=> "PCOUT(42)",
         OutTemp	=> PCOUT_zd(42),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_PCOUT((863 - 5)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_PCOUT((863 - 5)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_PCOUT((863 - 5)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_PCOUT((863 - 5)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_PCOUT((863 - 5)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_PCOUT((863 - 5)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_PCOUT((863 - 5)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_PCOUT((863 - 5)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_PCOUT((863 - 5)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_PCOUT((863 - 5)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_PCOUT((863 - 5)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_PCOUT((863 - 5)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 5)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 5)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 5)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 5)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 5)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 5)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_PCOUT((863 - 5)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_PCOUT((863 - 5)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_PCOUT((863 - 5)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_PCOUT((863 - 5)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_PCOUT((863 - 5)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_PCOUT((863 - 5)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_PCOUT((863 - 5)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_PCOUT((863 - 5)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_PCOUT((863 - 5)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_PCOUT((863 - 5)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_PCOUT((863 - 5)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_PCOUT((863 - 5)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 5)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 5)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 5)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 5)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 5)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 5)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_PCOUT((863 - 5)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_PCOUT((863 - 5)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_PCOUT((863 - 5)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_PCOUT((863 - 5)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_PCOUT((863 - 5)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_PCOUT((863 - 5)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_PCOUT((863 - 5)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_PCOUT((863 - 5)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_PCOUT((863 - 5)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_PCOUT((863 - 5)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_PCOUT((863 - 5)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_PCOUT((863 - 5)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 5)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 5)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 5)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 5)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 5)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 5)- 48*17), true),
			54 => (C_dly(42)'last_event, tpd_C_PCOUT((2303 - 5)- 48*5), true),
			55 => (C_dly(41)'last_event, tpd_C_PCOUT((2303 - 5)- 48*6), true),
			56 => (C_dly(40)'last_event, tpd_C_PCOUT((2303 - 5)- 48*7), true),
			57 => (C_dly(39)'last_event, tpd_C_PCOUT((2303 - 5)- 48*8), true),
			58 => (C_dly(38)'last_event, tpd_C_PCOUT((2303 - 5)- 48*9), true),
			59 => (C_dly(37)'last_event, tpd_C_PCOUT((2303 - 5)- 48*10), true),
			60 => (C_dly(36)'last_event, tpd_C_PCOUT((2303 - 5)- 48*11), true),
			61 => (C_dly(35)'last_event, tpd_C_PCOUT((2303 - 5)- 48*12), true),
			62 => (C_dly(34)'last_event, tpd_C_PCOUT((2303 - 5)- 48*13), true),
			63 => (C_dly(33)'last_event, tpd_C_PCOUT((2303 - 5)- 48*14), true),
			64 => (C_dly(32)'last_event, tpd_C_PCOUT((2303 - 5)- 48*15), true),
			65 => (C_dly(31)'last_event, tpd_C_PCOUT((2303 - 5)- 48*16), true),
			66 => (C_dly(30)'last_event, tpd_C_PCOUT((2303 - 5)- 48*17), true),
			67 => (C_dly(29)'last_event, tpd_C_PCOUT((2303 - 5)- 48*18), true),
			68 => (C_dly(28)'last_event, tpd_C_PCOUT((2303 - 5)- 48*19), true),
			69 => (C_dly(27)'last_event, tpd_C_PCOUT((2303 - 5)- 48*20), true),
			70 => (C_dly(26)'last_event, tpd_C_PCOUT((2303 - 5)- 48*21), true),
			71 => (C_dly(25)'last_event, tpd_C_PCOUT((2303 - 5)- 48*22), true),
			72 => (C_dly(24)'last_event, tpd_C_PCOUT((2303 - 5)- 48*23), true),
			73 => (C_dly(23)'last_event, tpd_C_PCOUT((2303 - 5)- 48*24), true),
			74 => (C_dly(22)'last_event, tpd_C_PCOUT((2303 - 5)- 48*25), true),
			75 => (C_dly(21)'last_event, tpd_C_PCOUT((2303 - 5)- 48*26), true),
			76 => (C_dly(20)'last_event, tpd_C_PCOUT((2303 - 5)- 48*27), true),
			77 => (C_dly(19)'last_event, tpd_C_PCOUT((2303 - 5)- 48*28), true),
			78 => (C_dly(18)'last_event, tpd_C_PCOUT((2303 - 5)- 48*29), true),
			79 => (C_dly(17)'last_event, tpd_C_PCOUT((2303 - 5)- 48*30), true),
			80 => (C_dly(16)'last_event, tpd_C_PCOUT((2303 - 5)- 48*31), true),
			81 => (C_dly(15)'last_event, tpd_C_PCOUT((2303 - 5)- 48*32), true),
			82 => (C_dly(14)'last_event, tpd_C_PCOUT((2303 - 5)- 48*33), true),
			83 => (C_dly(13)'last_event, tpd_C_PCOUT((2303 - 5)- 48*34), true),
			84 => (C_dly(12)'last_event, tpd_C_PCOUT((2303 - 5)- 48*35), true),
			85 => (C_dly(11)'last_event, tpd_C_PCOUT((2303 - 5)- 48*36), true),
			86 => (C_dly(10)'last_event, tpd_C_PCOUT((2303 - 5)- 48*37), true),
			87 => (C_dly(9)'last_event, tpd_C_PCOUT((2303 - 5)- 48*38), true),
			88 => (C_dly(8)'last_event, tpd_C_PCOUT((2303 - 5)- 48*39), true),
			89 => (C_dly(7)'last_event, tpd_C_PCOUT((2303 - 5)- 48*40), true),
			90 => (C_dly(6)'last_event, tpd_C_PCOUT((2303 - 5)- 48*41), true),
			91 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 5)- 48*42), true),
			92 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 5)- 48*43), true),
			93 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 5)- 48*44), true),
			94 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 5)- 48*45), true),
			95 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 5)- 48*46), true),
			96 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 5)- 48*47), true),
			97 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(42), true),
			98 => (D_dly(17)'last_event, tpd_D_PCOUT((863 - 5)- 48*0), true),
			99 => (D_dly(16)'last_event, tpd_D_PCOUT((863 - 5)- 48*1), true),
			100 => (D_dly(15)'last_event, tpd_D_PCOUT((863 - 5)- 48*2), true),
			101 => (D_dly(14)'last_event, tpd_D_PCOUT((863 - 5)- 48*3), true),
			102 => (D_dly(13)'last_event, tpd_D_PCOUT((863 - 5)- 48*4), true),
			103 => (D_dly(12)'last_event, tpd_D_PCOUT((863 - 5)- 48*5), true),
			104 => (D_dly(11)'last_event, tpd_D_PCOUT((863 - 5)- 48*6), true),
			105 => (D_dly(10)'last_event, tpd_D_PCOUT((863 - 5)- 48*7), true),
			106 => (D_dly(9)'last_event, tpd_D_PCOUT((863 - 5)- 48*8), true),
			107 => (D_dly(8)'last_event, tpd_D_PCOUT((863 - 5)- 48*9), true),
			108 => (D_dly(7)'last_event, tpd_D_PCOUT((863 - 5)- 48*10), true),
			109 => (D_dly(6)'last_event, tpd_D_PCOUT((863 - 5)- 48*11), true),
			110 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 5)- 48*12), true),
			111 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 5)- 48*13), true),
			112 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 5)- 48*14), true),
			113 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 5)- 48*15), true),
			114 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 5)- 48*16), true),
			115 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 5)- 48*17), true),
			116 => (OPMODE_dly(7)'last_event, tpd_OPMODE_PCOUT((383 - 5)- 48*0), true),
			117 => (OPMODE_dly(6)'last_event, tpd_OPMODE_PCOUT((383 - 5)- 48*1), true),
			118 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 5)- 48*2), true),
			119 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 5)- 48*3), true),
			120 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 5)- 48*4), true),
			121 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 5)- 48*5), true),
			122 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 5)- 48*6), true),
			123 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 5)- 48*7), true),
			124 => (PCIN_dly(42)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*5), true),
			125 => (PCIN_dly(41)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*6), true),
			126 => (PCIN_dly(40)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*7), true),
			127 => (PCIN_dly(39)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*8), true),
			128 => (PCIN_dly(38)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*9), true),
			129 => (PCIN_dly(37)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*10), true),
			130 => (PCIN_dly(36)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*11), true),
			131 => (PCIN_dly(35)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*12), true),
			132 => (PCIN_dly(34)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*13), true),
			133 => (PCIN_dly(33)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*14), true),
			134 => (PCIN_dly(32)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*15), true),
			135 => (PCIN_dly(31)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*16), true),
			136 => (PCIN_dly(30)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*17), true),
			137 => (PCIN_dly(29)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*18), true),
			138 => (PCIN_dly(28)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*19), true),
			139 => (PCIN_dly(27)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*20), true),
			140 => (PCIN_dly(26)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*21), true),
			141 => (PCIN_dly(25)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*22), true),
			142 => (PCIN_dly(24)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*23), true),
			143 => (PCIN_dly(23)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*24), true),
			144 => (PCIN_dly(22)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*25), true),
			145 => (PCIN_dly(21)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*26), true),
			146 => (PCIN_dly(20)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*27), true),
			147 => (PCIN_dly(19)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*28), true),
			148 => (PCIN_dly(18)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*29), true),
			149 => (PCIN_dly(17)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*30), true),
			150 => (PCIN_dly(16)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*31), true),
			151 => (PCIN_dly(15)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*32), true),
			152 => (PCIN_dly(14)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*33), true),
			153 => (PCIN_dly(13)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*34), true),
			154 => (PCIN_dly(12)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*35), true),
			155 => (PCIN_dly(11)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*36), true),
			156 => (PCIN_dly(10)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*37), true),
			157 => (PCIN_dly(9)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*38), true),
			158 => (PCIN_dly(8)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*39), true),
			159 => (PCIN_dly(7)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*40), true),
			160 => (PCIN_dly(6)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*41), true),
			161 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*42), true),
			162 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*43), true),
			163 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*44), true),
			164 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*45), true),
			165 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*46), true),
			166 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 5)- 48*47), true),
			167 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(42), true),
			168 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(42), true),
			169 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(42), true),
			170 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(42), true),
			171 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(42), true),
			172 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(42), true),
			173 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(42), true),
			174 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(42), true),
			175 => (CLK_dly'last_event, tpd_CLK_PCOUT(42), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(41),
         GlitchData	=> PCOUT_GlitchData(41),
         OutSignalName	=> "PCOUT(41)",
         OutTemp	=> PCOUT_zd(41),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_PCOUT((863 - 6)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_PCOUT((863 - 6)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_PCOUT((863 - 6)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_PCOUT((863 - 6)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_PCOUT((863 - 6)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_PCOUT((863 - 6)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_PCOUT((863 - 6)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_PCOUT((863 - 6)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_PCOUT((863 - 6)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_PCOUT((863 - 6)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_PCOUT((863 - 6)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_PCOUT((863 - 6)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 6)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 6)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 6)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 6)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 6)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 6)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_PCOUT((863 - 6)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_PCOUT((863 - 6)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_PCOUT((863 - 6)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_PCOUT((863 - 6)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_PCOUT((863 - 6)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_PCOUT((863 - 6)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_PCOUT((863 - 6)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_PCOUT((863 - 6)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_PCOUT((863 - 6)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_PCOUT((863 - 6)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_PCOUT((863 - 6)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_PCOUT((863 - 6)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 6)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 6)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 6)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 6)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 6)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 6)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_PCOUT((863 - 6)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_PCOUT((863 - 6)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_PCOUT((863 - 6)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_PCOUT((863 - 6)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_PCOUT((863 - 6)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_PCOUT((863 - 6)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_PCOUT((863 - 6)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_PCOUT((863 - 6)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_PCOUT((863 - 6)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_PCOUT((863 - 6)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_PCOUT((863 - 6)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_PCOUT((863 - 6)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 6)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 6)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 6)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 6)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 6)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 6)- 48*17), true),
			54 => (C_dly(41)'last_event, tpd_C_PCOUT((2303 - 6)- 48*6), true),
			55 => (C_dly(40)'last_event, tpd_C_PCOUT((2303 - 6)- 48*7), true),
			56 => (C_dly(39)'last_event, tpd_C_PCOUT((2303 - 6)- 48*8), true),
			57 => (C_dly(38)'last_event, tpd_C_PCOUT((2303 - 6)- 48*9), true),
			58 => (C_dly(37)'last_event, tpd_C_PCOUT((2303 - 6)- 48*10), true),
			59 => (C_dly(36)'last_event, tpd_C_PCOUT((2303 - 6)- 48*11), true),
			60 => (C_dly(35)'last_event, tpd_C_PCOUT((2303 - 6)- 48*12), true),
			61 => (C_dly(34)'last_event, tpd_C_PCOUT((2303 - 6)- 48*13), true),
			62 => (C_dly(33)'last_event, tpd_C_PCOUT((2303 - 6)- 48*14), true),
			63 => (C_dly(32)'last_event, tpd_C_PCOUT((2303 - 6)- 48*15), true),
			64 => (C_dly(31)'last_event, tpd_C_PCOUT((2303 - 6)- 48*16), true),
			65 => (C_dly(30)'last_event, tpd_C_PCOUT((2303 - 6)- 48*17), true),
			66 => (C_dly(29)'last_event, tpd_C_PCOUT((2303 - 6)- 48*18), true),
			67 => (C_dly(28)'last_event, tpd_C_PCOUT((2303 - 6)- 48*19), true),
			68 => (C_dly(27)'last_event, tpd_C_PCOUT((2303 - 6)- 48*20), true),
			69 => (C_dly(26)'last_event, tpd_C_PCOUT((2303 - 6)- 48*21), true),
			70 => (C_dly(25)'last_event, tpd_C_PCOUT((2303 - 6)- 48*22), true),
			71 => (C_dly(24)'last_event, tpd_C_PCOUT((2303 - 6)- 48*23), true),
			72 => (C_dly(23)'last_event, tpd_C_PCOUT((2303 - 6)- 48*24), true),
			73 => (C_dly(22)'last_event, tpd_C_PCOUT((2303 - 6)- 48*25), true),
			74 => (C_dly(21)'last_event, tpd_C_PCOUT((2303 - 6)- 48*26), true),
			75 => (C_dly(20)'last_event, tpd_C_PCOUT((2303 - 6)- 48*27), true),
			76 => (C_dly(19)'last_event, tpd_C_PCOUT((2303 - 6)- 48*28), true),
			77 => (C_dly(18)'last_event, tpd_C_PCOUT((2303 - 6)- 48*29), true),
			78 => (C_dly(17)'last_event, tpd_C_PCOUT((2303 - 6)- 48*30), true),
			79 => (C_dly(16)'last_event, tpd_C_PCOUT((2303 - 6)- 48*31), true),
			80 => (C_dly(15)'last_event, tpd_C_PCOUT((2303 - 6)- 48*32), true),
			81 => (C_dly(14)'last_event, tpd_C_PCOUT((2303 - 6)- 48*33), true),
			82 => (C_dly(13)'last_event, tpd_C_PCOUT((2303 - 6)- 48*34), true),
			83 => (C_dly(12)'last_event, tpd_C_PCOUT((2303 - 6)- 48*35), true),
			84 => (C_dly(11)'last_event, tpd_C_PCOUT((2303 - 6)- 48*36), true),
			85 => (C_dly(10)'last_event, tpd_C_PCOUT((2303 - 6)- 48*37), true),
			86 => (C_dly(9)'last_event, tpd_C_PCOUT((2303 - 6)- 48*38), true),
			87 => (C_dly(8)'last_event, tpd_C_PCOUT((2303 - 6)- 48*39), true),
			88 => (C_dly(7)'last_event, tpd_C_PCOUT((2303 - 6)- 48*40), true),
			89 => (C_dly(6)'last_event, tpd_C_PCOUT((2303 - 6)- 48*41), true),
			90 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 6)- 48*42), true),
			91 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 6)- 48*43), true),
			92 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 6)- 48*44), true),
			93 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 6)- 48*45), true),
			94 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 6)- 48*46), true),
			95 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 6)- 48*47), true),
			96 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(41), true),
			97 => (D_dly(17)'last_event, tpd_D_PCOUT((863 - 6)- 48*0), true),
			98 => (D_dly(16)'last_event, tpd_D_PCOUT((863 - 6)- 48*1), true),
			99 => (D_dly(15)'last_event, tpd_D_PCOUT((863 - 6)- 48*2), true),
			100 => (D_dly(14)'last_event, tpd_D_PCOUT((863 - 6)- 48*3), true),
			101 => (D_dly(13)'last_event, tpd_D_PCOUT((863 - 6)- 48*4), true),
			102 => (D_dly(12)'last_event, tpd_D_PCOUT((863 - 6)- 48*5), true),
			103 => (D_dly(11)'last_event, tpd_D_PCOUT((863 - 6)- 48*6), true),
			104 => (D_dly(10)'last_event, tpd_D_PCOUT((863 - 6)- 48*7), true),
			105 => (D_dly(9)'last_event, tpd_D_PCOUT((863 - 6)- 48*8), true),
			106 => (D_dly(8)'last_event, tpd_D_PCOUT((863 - 6)- 48*9), true),
			107 => (D_dly(7)'last_event, tpd_D_PCOUT((863 - 6)- 48*10), true),
			108 => (D_dly(6)'last_event, tpd_D_PCOUT((863 - 6)- 48*11), true),
			109 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 6)- 48*12), true),
			110 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 6)- 48*13), true),
			111 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 6)- 48*14), true),
			112 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 6)- 48*15), true),
			113 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 6)- 48*16), true),
			114 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 6)- 48*17), true),
			115 => (OPMODE_dly(7)'last_event, tpd_OPMODE_PCOUT((383 - 6)- 48*0), true),
			116 => (OPMODE_dly(6)'last_event, tpd_OPMODE_PCOUT((383 - 6)- 48*1), true),
			117 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 6)- 48*2), true),
			118 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 6)- 48*3), true),
			119 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 6)- 48*4), true),
			120 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 6)- 48*5), true),
			121 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 6)- 48*6), true),
			122 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 6)- 48*7), true),
			123 => (PCIN_dly(41)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*6), true),
			124 => (PCIN_dly(40)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*7), true),
			125 => (PCIN_dly(39)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*8), true),
			126 => (PCIN_dly(38)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*9), true),
			127 => (PCIN_dly(37)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*10), true),
			128 => (PCIN_dly(36)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*11), true),
			129 => (PCIN_dly(35)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*12), true),
			130 => (PCIN_dly(34)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*13), true),
			131 => (PCIN_dly(33)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*14), true),
			132 => (PCIN_dly(32)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*15), true),
			133 => (PCIN_dly(31)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*16), true),
			134 => (PCIN_dly(30)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*17), true),
			135 => (PCIN_dly(29)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*18), true),
			136 => (PCIN_dly(28)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*19), true),
			137 => (PCIN_dly(27)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*20), true),
			138 => (PCIN_dly(26)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*21), true),
			139 => (PCIN_dly(25)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*22), true),
			140 => (PCIN_dly(24)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*23), true),
			141 => (PCIN_dly(23)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*24), true),
			142 => (PCIN_dly(22)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*25), true),
			143 => (PCIN_dly(21)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*26), true),
			144 => (PCIN_dly(20)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*27), true),
			145 => (PCIN_dly(19)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*28), true),
			146 => (PCIN_dly(18)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*29), true),
			147 => (PCIN_dly(17)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*30), true),
			148 => (PCIN_dly(16)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*31), true),
			149 => (PCIN_dly(15)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*32), true),
			150 => (PCIN_dly(14)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*33), true),
			151 => (PCIN_dly(13)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*34), true),
			152 => (PCIN_dly(12)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*35), true),
			153 => (PCIN_dly(11)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*36), true),
			154 => (PCIN_dly(10)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*37), true),
			155 => (PCIN_dly(9)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*38), true),
			156 => (PCIN_dly(8)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*39), true),
			157 => (PCIN_dly(7)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*40), true),
			158 => (PCIN_dly(6)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*41), true),
			159 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*42), true),
			160 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*43), true),
			161 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*44), true),
			162 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*45), true),
			163 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*46), true),
			164 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 6)- 48*47), true),
			165 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(41), true),
			166 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(41), true),
			167 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(41), true),
			168 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(41), true),
			169 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(41), true),
			170 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(41), true),
			171 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(41), true),
			172 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(41), true),
			173 => (CLK_dly'last_event, tpd_CLK_PCOUT(41), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(40),
         GlitchData	=> PCOUT_GlitchData(40),
         OutSignalName	=> "PCOUT(40)",
         OutTemp	=> PCOUT_zd(40),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_PCOUT((863 - 7)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_PCOUT((863 - 7)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_PCOUT((863 - 7)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_PCOUT((863 - 7)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_PCOUT((863 - 7)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_PCOUT((863 - 7)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_PCOUT((863 - 7)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_PCOUT((863 - 7)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_PCOUT((863 - 7)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_PCOUT((863 - 7)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_PCOUT((863 - 7)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_PCOUT((863 - 7)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 7)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 7)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 7)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 7)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 7)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 7)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_PCOUT((863 - 7)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_PCOUT((863 - 7)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_PCOUT((863 - 7)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_PCOUT((863 - 7)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_PCOUT((863 - 7)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_PCOUT((863 - 7)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_PCOUT((863 - 7)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_PCOUT((863 - 7)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_PCOUT((863 - 7)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_PCOUT((863 - 7)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_PCOUT((863 - 7)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_PCOUT((863 - 7)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 7)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 7)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 7)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 7)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 7)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 7)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_PCOUT((863 - 7)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_PCOUT((863 - 7)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_PCOUT((863 - 7)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_PCOUT((863 - 7)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_PCOUT((863 - 7)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_PCOUT((863 - 7)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_PCOUT((863 - 7)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_PCOUT((863 - 7)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_PCOUT((863 - 7)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_PCOUT((863 - 7)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_PCOUT((863 - 7)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_PCOUT((863 - 7)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 7)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 7)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 7)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 7)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 7)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 7)- 48*17), true),
			54 => (C_dly(40)'last_event, tpd_C_PCOUT((2303 - 7)- 48*7), true),
			55 => (C_dly(39)'last_event, tpd_C_PCOUT((2303 - 7)- 48*8), true),
			56 => (C_dly(38)'last_event, tpd_C_PCOUT((2303 - 7)- 48*9), true),
			57 => (C_dly(37)'last_event, tpd_C_PCOUT((2303 - 7)- 48*10), true),
			58 => (C_dly(36)'last_event, tpd_C_PCOUT((2303 - 7)- 48*11), true),
			59 => (C_dly(35)'last_event, tpd_C_PCOUT((2303 - 7)- 48*12), true),
			60 => (C_dly(34)'last_event, tpd_C_PCOUT((2303 - 7)- 48*13), true),
			61 => (C_dly(33)'last_event, tpd_C_PCOUT((2303 - 7)- 48*14), true),
			62 => (C_dly(32)'last_event, tpd_C_PCOUT((2303 - 7)- 48*15), true),
			63 => (C_dly(31)'last_event, tpd_C_PCOUT((2303 - 7)- 48*16), true),
			64 => (C_dly(30)'last_event, tpd_C_PCOUT((2303 - 7)- 48*17), true),
			65 => (C_dly(29)'last_event, tpd_C_PCOUT((2303 - 7)- 48*18), true),
			66 => (C_dly(28)'last_event, tpd_C_PCOUT((2303 - 7)- 48*19), true),
			67 => (C_dly(27)'last_event, tpd_C_PCOUT((2303 - 7)- 48*20), true),
			68 => (C_dly(26)'last_event, tpd_C_PCOUT((2303 - 7)- 48*21), true),
			69 => (C_dly(25)'last_event, tpd_C_PCOUT((2303 - 7)- 48*22), true),
			70 => (C_dly(24)'last_event, tpd_C_PCOUT((2303 - 7)- 48*23), true),
			71 => (C_dly(23)'last_event, tpd_C_PCOUT((2303 - 7)- 48*24), true),
			72 => (C_dly(22)'last_event, tpd_C_PCOUT((2303 - 7)- 48*25), true),
			73 => (C_dly(21)'last_event, tpd_C_PCOUT((2303 - 7)- 48*26), true),
			74 => (C_dly(20)'last_event, tpd_C_PCOUT((2303 - 7)- 48*27), true),
			75 => (C_dly(19)'last_event, tpd_C_PCOUT((2303 - 7)- 48*28), true),
			76 => (C_dly(18)'last_event, tpd_C_PCOUT((2303 - 7)- 48*29), true),
			77 => (C_dly(17)'last_event, tpd_C_PCOUT((2303 - 7)- 48*30), true),
			78 => (C_dly(16)'last_event, tpd_C_PCOUT((2303 - 7)- 48*31), true),
			79 => (C_dly(15)'last_event, tpd_C_PCOUT((2303 - 7)- 48*32), true),
			80 => (C_dly(14)'last_event, tpd_C_PCOUT((2303 - 7)- 48*33), true),
			81 => (C_dly(13)'last_event, tpd_C_PCOUT((2303 - 7)- 48*34), true),
			82 => (C_dly(12)'last_event, tpd_C_PCOUT((2303 - 7)- 48*35), true),
			83 => (C_dly(11)'last_event, tpd_C_PCOUT((2303 - 7)- 48*36), true),
			84 => (C_dly(10)'last_event, tpd_C_PCOUT((2303 - 7)- 48*37), true),
			85 => (C_dly(9)'last_event, tpd_C_PCOUT((2303 - 7)- 48*38), true),
			86 => (C_dly(8)'last_event, tpd_C_PCOUT((2303 - 7)- 48*39), true),
			87 => (C_dly(7)'last_event, tpd_C_PCOUT((2303 - 7)- 48*40), true),
			88 => (C_dly(6)'last_event, tpd_C_PCOUT((2303 - 7)- 48*41), true),
			89 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 7)- 48*42), true),
			90 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 7)- 48*43), true),
			91 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 7)- 48*44), true),
			92 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 7)- 48*45), true),
			93 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 7)- 48*46), true),
			94 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 7)- 48*47), true),
			95 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(40), true),
			96 => (D_dly(17)'last_event, tpd_D_PCOUT((863 - 7)- 48*0), true),
			97 => (D_dly(16)'last_event, tpd_D_PCOUT((863 - 7)- 48*1), true),
			98 => (D_dly(15)'last_event, tpd_D_PCOUT((863 - 7)- 48*2), true),
			99 => (D_dly(14)'last_event, tpd_D_PCOUT((863 - 7)- 48*3), true),
			100 => (D_dly(13)'last_event, tpd_D_PCOUT((863 - 7)- 48*4), true),
			101 => (D_dly(12)'last_event, tpd_D_PCOUT((863 - 7)- 48*5), true),
			102 => (D_dly(11)'last_event, tpd_D_PCOUT((863 - 7)- 48*6), true),
			103 => (D_dly(10)'last_event, tpd_D_PCOUT((863 - 7)- 48*7), true),
			104 => (D_dly(9)'last_event, tpd_D_PCOUT((863 - 7)- 48*8), true),
			105 => (D_dly(8)'last_event, tpd_D_PCOUT((863 - 7)- 48*9), true),
			106 => (D_dly(7)'last_event, tpd_D_PCOUT((863 - 7)- 48*10), true),
			107 => (D_dly(6)'last_event, tpd_D_PCOUT((863 - 7)- 48*11), true),
			108 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 7)- 48*12), true),
			109 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 7)- 48*13), true),
			110 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 7)- 48*14), true),
			111 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 7)- 48*15), true),
			112 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 7)- 48*16), true),
			113 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 7)- 48*17), true),
			114 => (OPMODE_dly(7)'last_event, tpd_OPMODE_PCOUT((383 - 7)- 48*0), true),
			115 => (OPMODE_dly(6)'last_event, tpd_OPMODE_PCOUT((383 - 7)- 48*1), true),
			116 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 7)- 48*2), true),
			117 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 7)- 48*3), true),
			118 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 7)- 48*4), true),
			119 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 7)- 48*5), true),
			120 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 7)- 48*6), true),
			121 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 7)- 48*7), true),
			122 => (PCIN_dly(40)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*7), true),
			123 => (PCIN_dly(39)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*8), true),
			124 => (PCIN_dly(38)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*9), true),
			125 => (PCIN_dly(37)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*10), true),
			126 => (PCIN_dly(36)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*11), true),
			127 => (PCIN_dly(35)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*12), true),
			128 => (PCIN_dly(34)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*13), true),
			129 => (PCIN_dly(33)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*14), true),
			130 => (PCIN_dly(32)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*15), true),
			131 => (PCIN_dly(31)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*16), true),
			132 => (PCIN_dly(30)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*17), true),
			133 => (PCIN_dly(29)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*18), true),
			134 => (PCIN_dly(28)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*19), true),
			135 => (PCIN_dly(27)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*20), true),
			136 => (PCIN_dly(26)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*21), true),
			137 => (PCIN_dly(25)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*22), true),
			138 => (PCIN_dly(24)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*23), true),
			139 => (PCIN_dly(23)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*24), true),
			140 => (PCIN_dly(22)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*25), true),
			141 => (PCIN_dly(21)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*26), true),
			142 => (PCIN_dly(20)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*27), true),
			143 => (PCIN_dly(19)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*28), true),
			144 => (PCIN_dly(18)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*29), true),
			145 => (PCIN_dly(17)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*30), true),
			146 => (PCIN_dly(16)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*31), true),
			147 => (PCIN_dly(15)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*32), true),
			148 => (PCIN_dly(14)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*33), true),
			149 => (PCIN_dly(13)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*34), true),
			150 => (PCIN_dly(12)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*35), true),
			151 => (PCIN_dly(11)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*36), true),
			152 => (PCIN_dly(10)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*37), true),
			153 => (PCIN_dly(9)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*38), true),
			154 => (PCIN_dly(8)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*39), true),
			155 => (PCIN_dly(7)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*40), true),
			156 => (PCIN_dly(6)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*41), true),
			157 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*42), true),
			158 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*43), true),
			159 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*44), true),
			160 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*45), true),
			161 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*46), true),
			162 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 7)- 48*47), true),
			163 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(40), true),
			164 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(40), true),
			165 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(40), true),
			166 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(40), true),
			167 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(40), true),
			168 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(40), true),
			169 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(40), true),
			170 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(40), true),
			171 => (CLK_dly'last_event, tpd_CLK_PCOUT(40), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(39),
         GlitchData	=> PCOUT_GlitchData(39),
         OutSignalName	=> "PCOUT(39)",
         OutTemp	=> PCOUT_zd(39),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_PCOUT((863 - 8)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_PCOUT((863 - 8)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_PCOUT((863 - 8)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_PCOUT((863 - 8)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_PCOUT((863 - 8)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_PCOUT((863 - 8)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_PCOUT((863 - 8)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_PCOUT((863 - 8)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_PCOUT((863 - 8)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_PCOUT((863 - 8)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_PCOUT((863 - 8)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_PCOUT((863 - 8)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 8)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 8)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 8)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 8)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 8)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 8)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_PCOUT((863 - 8)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_PCOUT((863 - 8)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_PCOUT((863 - 8)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_PCOUT((863 - 8)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_PCOUT((863 - 8)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_PCOUT((863 - 8)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_PCOUT((863 - 8)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_PCOUT((863 - 8)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_PCOUT((863 - 8)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_PCOUT((863 - 8)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_PCOUT((863 - 8)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_PCOUT((863 - 8)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 8)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 8)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 8)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 8)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 8)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 8)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_PCOUT((863 - 8)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_PCOUT((863 - 8)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_PCOUT((863 - 8)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_PCOUT((863 - 8)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_PCOUT((863 - 8)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_PCOUT((863 - 8)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_PCOUT((863 - 8)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_PCOUT((863 - 8)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_PCOUT((863 - 8)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_PCOUT((863 - 8)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_PCOUT((863 - 8)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_PCOUT((863 - 8)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 8)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 8)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 8)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 8)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 8)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 8)- 48*17), true),
			54 => (C_dly(39)'last_event, tpd_C_PCOUT((2303 - 8)- 48*8), true),
			55 => (C_dly(38)'last_event, tpd_C_PCOUT((2303 - 8)- 48*9), true),
			56 => (C_dly(37)'last_event, tpd_C_PCOUT((2303 - 8)- 48*10), true),
			57 => (C_dly(36)'last_event, tpd_C_PCOUT((2303 - 8)- 48*11), true),
			58 => (C_dly(35)'last_event, tpd_C_PCOUT((2303 - 8)- 48*12), true),
			59 => (C_dly(34)'last_event, tpd_C_PCOUT((2303 - 8)- 48*13), true),
			60 => (C_dly(33)'last_event, tpd_C_PCOUT((2303 - 8)- 48*14), true),
			61 => (C_dly(32)'last_event, tpd_C_PCOUT((2303 - 8)- 48*15), true),
			62 => (C_dly(31)'last_event, tpd_C_PCOUT((2303 - 8)- 48*16), true),
			63 => (C_dly(30)'last_event, tpd_C_PCOUT((2303 - 8)- 48*17), true),
			64 => (C_dly(29)'last_event, tpd_C_PCOUT((2303 - 8)- 48*18), true),
			65 => (C_dly(28)'last_event, tpd_C_PCOUT((2303 - 8)- 48*19), true),
			66 => (C_dly(27)'last_event, tpd_C_PCOUT((2303 - 8)- 48*20), true),
			67 => (C_dly(26)'last_event, tpd_C_PCOUT((2303 - 8)- 48*21), true),
			68 => (C_dly(25)'last_event, tpd_C_PCOUT((2303 - 8)- 48*22), true),
			69 => (C_dly(24)'last_event, tpd_C_PCOUT((2303 - 8)- 48*23), true),
			70 => (C_dly(23)'last_event, tpd_C_PCOUT((2303 - 8)- 48*24), true),
			71 => (C_dly(22)'last_event, tpd_C_PCOUT((2303 - 8)- 48*25), true),
			72 => (C_dly(21)'last_event, tpd_C_PCOUT((2303 - 8)- 48*26), true),
			73 => (C_dly(20)'last_event, tpd_C_PCOUT((2303 - 8)- 48*27), true),
			74 => (C_dly(19)'last_event, tpd_C_PCOUT((2303 - 8)- 48*28), true),
			75 => (C_dly(18)'last_event, tpd_C_PCOUT((2303 - 8)- 48*29), true),
			76 => (C_dly(17)'last_event, tpd_C_PCOUT((2303 - 8)- 48*30), true),
			77 => (C_dly(16)'last_event, tpd_C_PCOUT((2303 - 8)- 48*31), true),
			78 => (C_dly(15)'last_event, tpd_C_PCOUT((2303 - 8)- 48*32), true),
			79 => (C_dly(14)'last_event, tpd_C_PCOUT((2303 - 8)- 48*33), true),
			80 => (C_dly(13)'last_event, tpd_C_PCOUT((2303 - 8)- 48*34), true),
			81 => (C_dly(12)'last_event, tpd_C_PCOUT((2303 - 8)- 48*35), true),
			82 => (C_dly(11)'last_event, tpd_C_PCOUT((2303 - 8)- 48*36), true),
			83 => (C_dly(10)'last_event, tpd_C_PCOUT((2303 - 8)- 48*37), true),
			84 => (C_dly(9)'last_event, tpd_C_PCOUT((2303 - 8)- 48*38), true),
			85 => (C_dly(8)'last_event, tpd_C_PCOUT((2303 - 8)- 48*39), true),
			86 => (C_dly(7)'last_event, tpd_C_PCOUT((2303 - 8)- 48*40), true),
			87 => (C_dly(6)'last_event, tpd_C_PCOUT((2303 - 8)- 48*41), true),
			88 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 8)- 48*42), true),
			89 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 8)- 48*43), true),
			90 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 8)- 48*44), true),
			91 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 8)- 48*45), true),
			92 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 8)- 48*46), true),
			93 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 8)- 48*47), true),
			94 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(39), true),
			95 => (D_dly(17)'last_event, tpd_D_PCOUT((863 - 8)- 48*0), true),
			96 => (D_dly(16)'last_event, tpd_D_PCOUT((863 - 8)- 48*1), true),
			97 => (D_dly(15)'last_event, tpd_D_PCOUT((863 - 8)- 48*2), true),
			98 => (D_dly(14)'last_event, tpd_D_PCOUT((863 - 8)- 48*3), true),
			99 => (D_dly(13)'last_event, tpd_D_PCOUT((863 - 8)- 48*4), true),
			100 => (D_dly(12)'last_event, tpd_D_PCOUT((863 - 8)- 48*5), true),
			101 => (D_dly(11)'last_event, tpd_D_PCOUT((863 - 8)- 48*6), true),
			102 => (D_dly(10)'last_event, tpd_D_PCOUT((863 - 8)- 48*7), true),
			103 => (D_dly(9)'last_event, tpd_D_PCOUT((863 - 8)- 48*8), true),
			104 => (D_dly(8)'last_event, tpd_D_PCOUT((863 - 8)- 48*9), true),
			105 => (D_dly(7)'last_event, tpd_D_PCOUT((863 - 8)- 48*10), true),
			106 => (D_dly(6)'last_event, tpd_D_PCOUT((863 - 8)- 48*11), true),
			107 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 8)- 48*12), true),
			108 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 8)- 48*13), true),
			109 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 8)- 48*14), true),
			110 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 8)- 48*15), true),
			111 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 8)- 48*16), true),
			112 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 8)- 48*17), true),
			113 => (OPMODE_dly(7)'last_event, tpd_OPMODE_PCOUT((383 - 8)- 48*0), true),
			114 => (OPMODE_dly(6)'last_event, tpd_OPMODE_PCOUT((383 - 8)- 48*1), true),
			115 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 8)- 48*2), true),
			116 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 8)- 48*3), true),
			117 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 8)- 48*4), true),
			118 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 8)- 48*5), true),
			119 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 8)- 48*6), true),
			120 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 8)- 48*7), true),
			121 => (PCIN_dly(39)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*8), true),
			122 => (PCIN_dly(38)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*9), true),
			123 => (PCIN_dly(37)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*10), true),
			124 => (PCIN_dly(36)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*11), true),
			125 => (PCIN_dly(35)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*12), true),
			126 => (PCIN_dly(34)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*13), true),
			127 => (PCIN_dly(33)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*14), true),
			128 => (PCIN_dly(32)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*15), true),
			129 => (PCIN_dly(31)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*16), true),
			130 => (PCIN_dly(30)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*17), true),
			131 => (PCIN_dly(29)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*18), true),
			132 => (PCIN_dly(28)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*19), true),
			133 => (PCIN_dly(27)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*20), true),
			134 => (PCIN_dly(26)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*21), true),
			135 => (PCIN_dly(25)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*22), true),
			136 => (PCIN_dly(24)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*23), true),
			137 => (PCIN_dly(23)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*24), true),
			138 => (PCIN_dly(22)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*25), true),
			139 => (PCIN_dly(21)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*26), true),
			140 => (PCIN_dly(20)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*27), true),
			141 => (PCIN_dly(19)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*28), true),
			142 => (PCIN_dly(18)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*29), true),
			143 => (PCIN_dly(17)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*30), true),
			144 => (PCIN_dly(16)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*31), true),
			145 => (PCIN_dly(15)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*32), true),
			146 => (PCIN_dly(14)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*33), true),
			147 => (PCIN_dly(13)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*34), true),
			148 => (PCIN_dly(12)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*35), true),
			149 => (PCIN_dly(11)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*36), true),
			150 => (PCIN_dly(10)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*37), true),
			151 => (PCIN_dly(9)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*38), true),
			152 => (PCIN_dly(8)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*39), true),
			153 => (PCIN_dly(7)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*40), true),
			154 => (PCIN_dly(6)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*41), true),
			155 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*42), true),
			156 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*43), true),
			157 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*44), true),
			158 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*45), true),
			159 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*46), true),
			160 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 8)- 48*47), true),
			161 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(39), true),
			162 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(39), true),
			163 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(39), true),
			164 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(39), true),
			165 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(39), true),
			166 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(39), true),
			167 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(39), true),
			168 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(39), true),
			169 => (CLK_dly'last_event, tpd_CLK_PCOUT(39), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(38),
         GlitchData	=> PCOUT_GlitchData(38),
         OutSignalName	=> "PCOUT(38)",
         OutTemp	=> PCOUT_zd(38),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_PCOUT((863 - 9)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_PCOUT((863 - 9)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_PCOUT((863 - 9)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_PCOUT((863 - 9)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_PCOUT((863 - 9)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_PCOUT((863 - 9)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_PCOUT((863 - 9)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_PCOUT((863 - 9)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_PCOUT((863 - 9)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_PCOUT((863 - 9)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_PCOUT((863 - 9)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_PCOUT((863 - 9)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 9)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 9)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 9)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 9)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 9)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 9)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_PCOUT((863 - 9)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_PCOUT((863 - 9)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_PCOUT((863 - 9)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_PCOUT((863 - 9)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_PCOUT((863 - 9)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_PCOUT((863 - 9)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_PCOUT((863 - 9)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_PCOUT((863 - 9)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_PCOUT((863 - 9)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_PCOUT((863 - 9)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_PCOUT((863 - 9)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_PCOUT((863 - 9)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 9)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 9)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 9)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 9)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 9)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 9)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_PCOUT((863 - 9)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_PCOUT((863 - 9)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_PCOUT((863 - 9)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_PCOUT((863 - 9)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_PCOUT((863 - 9)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_PCOUT((863 - 9)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_PCOUT((863 - 9)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_PCOUT((863 - 9)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_PCOUT((863 - 9)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_PCOUT((863 - 9)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_PCOUT((863 - 9)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_PCOUT((863 - 9)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 9)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 9)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 9)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 9)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 9)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 9)- 48*17), true),
			54 => (C_dly(38)'last_event, tpd_C_PCOUT((2303 - 9)- 48*9), true),
			55 => (C_dly(37)'last_event, tpd_C_PCOUT((2303 - 9)- 48*10), true),
			56 => (C_dly(36)'last_event, tpd_C_PCOUT((2303 - 9)- 48*11), true),
			57 => (C_dly(35)'last_event, tpd_C_PCOUT((2303 - 9)- 48*12), true),
			58 => (C_dly(34)'last_event, tpd_C_PCOUT((2303 - 9)- 48*13), true),
			59 => (C_dly(33)'last_event, tpd_C_PCOUT((2303 - 9)- 48*14), true),
			60 => (C_dly(32)'last_event, tpd_C_PCOUT((2303 - 9)- 48*15), true),
			61 => (C_dly(31)'last_event, tpd_C_PCOUT((2303 - 9)- 48*16), true),
			62 => (C_dly(30)'last_event, tpd_C_PCOUT((2303 - 9)- 48*17), true),
			63 => (C_dly(29)'last_event, tpd_C_PCOUT((2303 - 9)- 48*18), true),
			64 => (C_dly(28)'last_event, tpd_C_PCOUT((2303 - 9)- 48*19), true),
			65 => (C_dly(27)'last_event, tpd_C_PCOUT((2303 - 9)- 48*20), true),
			66 => (C_dly(26)'last_event, tpd_C_PCOUT((2303 - 9)- 48*21), true),
			67 => (C_dly(25)'last_event, tpd_C_PCOUT((2303 - 9)- 48*22), true),
			68 => (C_dly(24)'last_event, tpd_C_PCOUT((2303 - 9)- 48*23), true),
			69 => (C_dly(23)'last_event, tpd_C_PCOUT((2303 - 9)- 48*24), true),
			70 => (C_dly(22)'last_event, tpd_C_PCOUT((2303 - 9)- 48*25), true),
			71 => (C_dly(21)'last_event, tpd_C_PCOUT((2303 - 9)- 48*26), true),
			72 => (C_dly(20)'last_event, tpd_C_PCOUT((2303 - 9)- 48*27), true),
			73 => (C_dly(19)'last_event, tpd_C_PCOUT((2303 - 9)- 48*28), true),
			74 => (C_dly(18)'last_event, tpd_C_PCOUT((2303 - 9)- 48*29), true),
			75 => (C_dly(17)'last_event, tpd_C_PCOUT((2303 - 9)- 48*30), true),
			76 => (C_dly(16)'last_event, tpd_C_PCOUT((2303 - 9)- 48*31), true),
			77 => (C_dly(15)'last_event, tpd_C_PCOUT((2303 - 9)- 48*32), true),
			78 => (C_dly(14)'last_event, tpd_C_PCOUT((2303 - 9)- 48*33), true),
			79 => (C_dly(13)'last_event, tpd_C_PCOUT((2303 - 9)- 48*34), true),
			80 => (C_dly(12)'last_event, tpd_C_PCOUT((2303 - 9)- 48*35), true),
			81 => (C_dly(11)'last_event, tpd_C_PCOUT((2303 - 9)- 48*36), true),
			82 => (C_dly(10)'last_event, tpd_C_PCOUT((2303 - 9)- 48*37), true),
			83 => (C_dly(9)'last_event, tpd_C_PCOUT((2303 - 9)- 48*38), true),
			84 => (C_dly(8)'last_event, tpd_C_PCOUT((2303 - 9)- 48*39), true),
			85 => (C_dly(7)'last_event, tpd_C_PCOUT((2303 - 9)- 48*40), true),
			86 => (C_dly(6)'last_event, tpd_C_PCOUT((2303 - 9)- 48*41), true),
			87 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 9)- 48*42), true),
			88 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 9)- 48*43), true),
			89 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 9)- 48*44), true),
			90 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 9)- 48*45), true),
			91 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 9)- 48*46), true),
			92 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 9)- 48*47), true),
			93 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(38), true),
			94 => (D_dly(17)'last_event, tpd_D_PCOUT((863 - 9)- 48*0), true),
			95 => (D_dly(16)'last_event, tpd_D_PCOUT((863 - 9)- 48*1), true),
			96 => (D_dly(15)'last_event, tpd_D_PCOUT((863 - 9)- 48*2), true),
			97 => (D_dly(14)'last_event, tpd_D_PCOUT((863 - 9)- 48*3), true),
			98 => (D_dly(13)'last_event, tpd_D_PCOUT((863 - 9)- 48*4), true),
			99 => (D_dly(12)'last_event, tpd_D_PCOUT((863 - 9)- 48*5), true),
			100 => (D_dly(11)'last_event, tpd_D_PCOUT((863 - 9)- 48*6), true),
			101 => (D_dly(10)'last_event, tpd_D_PCOUT((863 - 9)- 48*7), true),
			102 => (D_dly(9)'last_event, tpd_D_PCOUT((863 - 9)- 48*8), true),
			103 => (D_dly(8)'last_event, tpd_D_PCOUT((863 - 9)- 48*9), true),
			104 => (D_dly(7)'last_event, tpd_D_PCOUT((863 - 9)- 48*10), true),
			105 => (D_dly(6)'last_event, tpd_D_PCOUT((863 - 9)- 48*11), true),
			106 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 9)- 48*12), true),
			107 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 9)- 48*13), true),
			108 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 9)- 48*14), true),
			109 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 9)- 48*15), true),
			110 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 9)- 48*16), true),
			111 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 9)- 48*17), true),
			112 => (OPMODE_dly(7)'last_event, tpd_OPMODE_PCOUT((383 - 9)- 48*0), true),
			113 => (OPMODE_dly(6)'last_event, tpd_OPMODE_PCOUT((383 - 9)- 48*1), true),
			114 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 9)- 48*2), true),
			115 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 9)- 48*3), true),
			116 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 9)- 48*4), true),
			117 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 9)- 48*5), true),
			118 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 9)- 48*6), true),
			119 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 9)- 48*7), true),
			120 => (PCIN_dly(38)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*9), true),
			121 => (PCIN_dly(37)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*10), true),
			122 => (PCIN_dly(36)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*11), true),
			123 => (PCIN_dly(35)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*12), true),
			124 => (PCIN_dly(34)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*13), true),
			125 => (PCIN_dly(33)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*14), true),
			126 => (PCIN_dly(32)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*15), true),
			127 => (PCIN_dly(31)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*16), true),
			128 => (PCIN_dly(30)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*17), true),
			129 => (PCIN_dly(29)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*18), true),
			130 => (PCIN_dly(28)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*19), true),
			131 => (PCIN_dly(27)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*20), true),
			132 => (PCIN_dly(26)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*21), true),
			133 => (PCIN_dly(25)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*22), true),
			134 => (PCIN_dly(24)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*23), true),
			135 => (PCIN_dly(23)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*24), true),
			136 => (PCIN_dly(22)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*25), true),
			137 => (PCIN_dly(21)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*26), true),
			138 => (PCIN_dly(20)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*27), true),
			139 => (PCIN_dly(19)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*28), true),
			140 => (PCIN_dly(18)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*29), true),
			141 => (PCIN_dly(17)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*30), true),
			142 => (PCIN_dly(16)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*31), true),
			143 => (PCIN_dly(15)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*32), true),
			144 => (PCIN_dly(14)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*33), true),
			145 => (PCIN_dly(13)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*34), true),
			146 => (PCIN_dly(12)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*35), true),
			147 => (PCIN_dly(11)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*36), true),
			148 => (PCIN_dly(10)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*37), true),
			149 => (PCIN_dly(9)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*38), true),
			150 => (PCIN_dly(8)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*39), true),
			151 => (PCIN_dly(7)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*40), true),
			152 => (PCIN_dly(6)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*41), true),
			153 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*42), true),
			154 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*43), true),
			155 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*44), true),
			156 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*45), true),
			157 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*46), true),
			158 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 9)- 48*47), true),
			159 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(38), true),
			160 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(38), true),
			161 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(38), true),
			162 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(38), true),
			163 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(38), true),
			164 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(38), true),
			165 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(38), true),
			166 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(38), true),
			167 => (CLK_dly'last_event, tpd_CLK_PCOUT(38), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(37),
         GlitchData	=> PCOUT_GlitchData(37),
         OutSignalName	=> "PCOUT(37)",
         OutTemp	=> PCOUT_zd(37),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_PCOUT((863 - 10)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_PCOUT((863 - 10)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_PCOUT((863 - 10)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_PCOUT((863 - 10)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_PCOUT((863 - 10)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_PCOUT((863 - 10)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_PCOUT((863 - 10)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_PCOUT((863 - 10)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_PCOUT((863 - 10)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_PCOUT((863 - 10)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_PCOUT((863 - 10)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_PCOUT((863 - 10)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 10)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 10)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 10)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 10)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 10)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 10)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_PCOUT((863 - 10)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_PCOUT((863 - 10)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_PCOUT((863 - 10)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_PCOUT((863 - 10)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_PCOUT((863 - 10)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_PCOUT((863 - 10)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_PCOUT((863 - 10)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_PCOUT((863 - 10)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_PCOUT((863 - 10)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_PCOUT((863 - 10)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_PCOUT((863 - 10)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_PCOUT((863 - 10)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 10)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 10)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 10)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 10)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 10)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 10)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_PCOUT((863 - 10)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_PCOUT((863 - 10)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_PCOUT((863 - 10)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_PCOUT((863 - 10)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_PCOUT((863 - 10)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_PCOUT((863 - 10)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_PCOUT((863 - 10)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_PCOUT((863 - 10)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_PCOUT((863 - 10)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_PCOUT((863 - 10)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_PCOUT((863 - 10)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_PCOUT((863 - 10)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 10)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 10)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 10)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 10)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 10)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 10)- 48*17), true),
			54 => (C_dly(37)'last_event, tpd_C_PCOUT((2303 - 10)- 48*10), true),
			55 => (C_dly(36)'last_event, tpd_C_PCOUT((2303 - 10)- 48*11), true),
			56 => (C_dly(35)'last_event, tpd_C_PCOUT((2303 - 10)- 48*12), true),
			57 => (C_dly(34)'last_event, tpd_C_PCOUT((2303 - 10)- 48*13), true),
			58 => (C_dly(33)'last_event, tpd_C_PCOUT((2303 - 10)- 48*14), true),
			59 => (C_dly(32)'last_event, tpd_C_PCOUT((2303 - 10)- 48*15), true),
			60 => (C_dly(31)'last_event, tpd_C_PCOUT((2303 - 10)- 48*16), true),
			61 => (C_dly(30)'last_event, tpd_C_PCOUT((2303 - 10)- 48*17), true),
			62 => (C_dly(29)'last_event, tpd_C_PCOUT((2303 - 10)- 48*18), true),
			63 => (C_dly(28)'last_event, tpd_C_PCOUT((2303 - 10)- 48*19), true),
			64 => (C_dly(27)'last_event, tpd_C_PCOUT((2303 - 10)- 48*20), true),
			65 => (C_dly(26)'last_event, tpd_C_PCOUT((2303 - 10)- 48*21), true),
			66 => (C_dly(25)'last_event, tpd_C_PCOUT((2303 - 10)- 48*22), true),
			67 => (C_dly(24)'last_event, tpd_C_PCOUT((2303 - 10)- 48*23), true),
			68 => (C_dly(23)'last_event, tpd_C_PCOUT((2303 - 10)- 48*24), true),
			69 => (C_dly(22)'last_event, tpd_C_PCOUT((2303 - 10)- 48*25), true),
			70 => (C_dly(21)'last_event, tpd_C_PCOUT((2303 - 10)- 48*26), true),
			71 => (C_dly(20)'last_event, tpd_C_PCOUT((2303 - 10)- 48*27), true),
			72 => (C_dly(19)'last_event, tpd_C_PCOUT((2303 - 10)- 48*28), true),
			73 => (C_dly(18)'last_event, tpd_C_PCOUT((2303 - 10)- 48*29), true),
			74 => (C_dly(17)'last_event, tpd_C_PCOUT((2303 - 10)- 48*30), true),
			75 => (C_dly(16)'last_event, tpd_C_PCOUT((2303 - 10)- 48*31), true),
			76 => (C_dly(15)'last_event, tpd_C_PCOUT((2303 - 10)- 48*32), true),
			77 => (C_dly(14)'last_event, tpd_C_PCOUT((2303 - 10)- 48*33), true),
			78 => (C_dly(13)'last_event, tpd_C_PCOUT((2303 - 10)- 48*34), true),
			79 => (C_dly(12)'last_event, tpd_C_PCOUT((2303 - 10)- 48*35), true),
			80 => (C_dly(11)'last_event, tpd_C_PCOUT((2303 - 10)- 48*36), true),
			81 => (C_dly(10)'last_event, tpd_C_PCOUT((2303 - 10)- 48*37), true),
			82 => (C_dly(9)'last_event, tpd_C_PCOUT((2303 - 10)- 48*38), true),
			83 => (C_dly(8)'last_event, tpd_C_PCOUT((2303 - 10)- 48*39), true),
			84 => (C_dly(7)'last_event, tpd_C_PCOUT((2303 - 10)- 48*40), true),
			85 => (C_dly(6)'last_event, tpd_C_PCOUT((2303 - 10)- 48*41), true),
			86 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 10)- 48*42), true),
			87 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 10)- 48*43), true),
			88 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 10)- 48*44), true),
			89 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 10)- 48*45), true),
			90 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 10)- 48*46), true),
			91 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 10)- 48*47), true),
			92 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(37), true),
			93 => (D_dly(17)'last_event, tpd_D_PCOUT((863 - 10)- 48*0), true),
			94 => (D_dly(16)'last_event, tpd_D_PCOUT((863 - 10)- 48*1), true),
			95 => (D_dly(15)'last_event, tpd_D_PCOUT((863 - 10)- 48*2), true),
			96 => (D_dly(14)'last_event, tpd_D_PCOUT((863 - 10)- 48*3), true),
			97 => (D_dly(13)'last_event, tpd_D_PCOUT((863 - 10)- 48*4), true),
			98 => (D_dly(12)'last_event, tpd_D_PCOUT((863 - 10)- 48*5), true),
			99 => (D_dly(11)'last_event, tpd_D_PCOUT((863 - 10)- 48*6), true),
			100 => (D_dly(10)'last_event, tpd_D_PCOUT((863 - 10)- 48*7), true),
			101 => (D_dly(9)'last_event, tpd_D_PCOUT((863 - 10)- 48*8), true),
			102 => (D_dly(8)'last_event, tpd_D_PCOUT((863 - 10)- 48*9), true),
			103 => (D_dly(7)'last_event, tpd_D_PCOUT((863 - 10)- 48*10), true),
			104 => (D_dly(6)'last_event, tpd_D_PCOUT((863 - 10)- 48*11), true),
			105 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 10)- 48*12), true),
			106 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 10)- 48*13), true),
			107 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 10)- 48*14), true),
			108 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 10)- 48*15), true),
			109 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 10)- 48*16), true),
			110 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 10)- 48*17), true),
			111 => (OPMODE_dly(7)'last_event, tpd_OPMODE_PCOUT((383 - 10)- 48*0), true),
			112 => (OPMODE_dly(6)'last_event, tpd_OPMODE_PCOUT((383 - 10)- 48*1), true),
			113 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 10)- 48*2), true),
			114 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 10)- 48*3), true),
			115 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 10)- 48*4), true),
			116 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 10)- 48*5), true),
			117 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 10)- 48*6), true),
			118 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 10)- 48*7), true),
			119 => (PCIN_dly(37)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*10), true),
			120 => (PCIN_dly(36)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*11), true),
			121 => (PCIN_dly(35)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*12), true),
			122 => (PCIN_dly(34)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*13), true),
			123 => (PCIN_dly(33)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*14), true),
			124 => (PCIN_dly(32)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*15), true),
			125 => (PCIN_dly(31)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*16), true),
			126 => (PCIN_dly(30)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*17), true),
			127 => (PCIN_dly(29)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*18), true),
			128 => (PCIN_dly(28)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*19), true),
			129 => (PCIN_dly(27)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*20), true),
			130 => (PCIN_dly(26)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*21), true),
			131 => (PCIN_dly(25)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*22), true),
			132 => (PCIN_dly(24)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*23), true),
			133 => (PCIN_dly(23)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*24), true),
			134 => (PCIN_dly(22)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*25), true),
			135 => (PCIN_dly(21)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*26), true),
			136 => (PCIN_dly(20)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*27), true),
			137 => (PCIN_dly(19)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*28), true),
			138 => (PCIN_dly(18)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*29), true),
			139 => (PCIN_dly(17)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*30), true),
			140 => (PCIN_dly(16)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*31), true),
			141 => (PCIN_dly(15)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*32), true),
			142 => (PCIN_dly(14)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*33), true),
			143 => (PCIN_dly(13)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*34), true),
			144 => (PCIN_dly(12)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*35), true),
			145 => (PCIN_dly(11)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*36), true),
			146 => (PCIN_dly(10)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*37), true),
			147 => (PCIN_dly(9)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*38), true),
			148 => (PCIN_dly(8)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*39), true),
			149 => (PCIN_dly(7)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*40), true),
			150 => (PCIN_dly(6)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*41), true),
			151 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*42), true),
			152 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*43), true),
			153 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*44), true),
			154 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*45), true),
			155 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*46), true),
			156 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 10)- 48*47), true),
			157 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(37), true),
			158 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(37), true),
			159 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(37), true),
			160 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(37), true),
			161 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(37), true),
			162 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(37), true),
			163 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(37), true),
			164 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(37), true),
			165 => (CLK_dly'last_event, tpd_CLK_PCOUT(37), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(36),
         GlitchData	=> PCOUT_GlitchData(36),
         OutSignalName	=> "PCOUT(36)",
         OutTemp	=> PCOUT_zd(36),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_PCOUT((863 - 11)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_PCOUT((863 - 11)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_PCOUT((863 - 11)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_PCOUT((863 - 11)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_PCOUT((863 - 11)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_PCOUT((863 - 11)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_PCOUT((863 - 11)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_PCOUT((863 - 11)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_PCOUT((863 - 11)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_PCOUT((863 - 11)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_PCOUT((863 - 11)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_PCOUT((863 - 11)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 11)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 11)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 11)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 11)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 11)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 11)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_PCOUT((863 - 11)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_PCOUT((863 - 11)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_PCOUT((863 - 11)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_PCOUT((863 - 11)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_PCOUT((863 - 11)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_PCOUT((863 - 11)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_PCOUT((863 - 11)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_PCOUT((863 - 11)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_PCOUT((863 - 11)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_PCOUT((863 - 11)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_PCOUT((863 - 11)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_PCOUT((863 - 11)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 11)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 11)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 11)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 11)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 11)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 11)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_PCOUT((863 - 11)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_PCOUT((863 - 11)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_PCOUT((863 - 11)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_PCOUT((863 - 11)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_PCOUT((863 - 11)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_PCOUT((863 - 11)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_PCOUT((863 - 11)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_PCOUT((863 - 11)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_PCOUT((863 - 11)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_PCOUT((863 - 11)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_PCOUT((863 - 11)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_PCOUT((863 - 11)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 11)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 11)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 11)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 11)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 11)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 11)- 48*17), true),
			54 => (C_dly(36)'last_event, tpd_C_PCOUT((2303 - 11)- 48*11), true),
			55 => (C_dly(35)'last_event, tpd_C_PCOUT((2303 - 11)- 48*12), true),
			56 => (C_dly(34)'last_event, tpd_C_PCOUT((2303 - 11)- 48*13), true),
			57 => (C_dly(33)'last_event, tpd_C_PCOUT((2303 - 11)- 48*14), true),
			58 => (C_dly(32)'last_event, tpd_C_PCOUT((2303 - 11)- 48*15), true),
			59 => (C_dly(31)'last_event, tpd_C_PCOUT((2303 - 11)- 48*16), true),
			60 => (C_dly(30)'last_event, tpd_C_PCOUT((2303 - 11)- 48*17), true),
			61 => (C_dly(29)'last_event, tpd_C_PCOUT((2303 - 11)- 48*18), true),
			62 => (C_dly(28)'last_event, tpd_C_PCOUT((2303 - 11)- 48*19), true),
			63 => (C_dly(27)'last_event, tpd_C_PCOUT((2303 - 11)- 48*20), true),
			64 => (C_dly(26)'last_event, tpd_C_PCOUT((2303 - 11)- 48*21), true),
			65 => (C_dly(25)'last_event, tpd_C_PCOUT((2303 - 11)- 48*22), true),
			66 => (C_dly(24)'last_event, tpd_C_PCOUT((2303 - 11)- 48*23), true),
			67 => (C_dly(23)'last_event, tpd_C_PCOUT((2303 - 11)- 48*24), true),
			68 => (C_dly(22)'last_event, tpd_C_PCOUT((2303 - 11)- 48*25), true),
			69 => (C_dly(21)'last_event, tpd_C_PCOUT((2303 - 11)- 48*26), true),
			70 => (C_dly(20)'last_event, tpd_C_PCOUT((2303 - 11)- 48*27), true),
			71 => (C_dly(19)'last_event, tpd_C_PCOUT((2303 - 11)- 48*28), true),
			72 => (C_dly(18)'last_event, tpd_C_PCOUT((2303 - 11)- 48*29), true),
			73 => (C_dly(17)'last_event, tpd_C_PCOUT((2303 - 11)- 48*30), true),
			74 => (C_dly(16)'last_event, tpd_C_PCOUT((2303 - 11)- 48*31), true),
			75 => (C_dly(15)'last_event, tpd_C_PCOUT((2303 - 11)- 48*32), true),
			76 => (C_dly(14)'last_event, tpd_C_PCOUT((2303 - 11)- 48*33), true),
			77 => (C_dly(13)'last_event, tpd_C_PCOUT((2303 - 11)- 48*34), true),
			78 => (C_dly(12)'last_event, tpd_C_PCOUT((2303 - 11)- 48*35), true),
			79 => (C_dly(11)'last_event, tpd_C_PCOUT((2303 - 11)- 48*36), true),
			80 => (C_dly(10)'last_event, tpd_C_PCOUT((2303 - 11)- 48*37), true),
			81 => (C_dly(9)'last_event, tpd_C_PCOUT((2303 - 11)- 48*38), true),
			82 => (C_dly(8)'last_event, tpd_C_PCOUT((2303 - 11)- 48*39), true),
			83 => (C_dly(7)'last_event, tpd_C_PCOUT((2303 - 11)- 48*40), true),
			84 => (C_dly(6)'last_event, tpd_C_PCOUT((2303 - 11)- 48*41), true),
			85 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 11)- 48*42), true),
			86 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 11)- 48*43), true),
			87 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 11)- 48*44), true),
			88 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 11)- 48*45), true),
			89 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 11)- 48*46), true),
			90 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 11)- 48*47), true),
			91 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(36), true),
			92 => (D_dly(17)'last_event, tpd_D_PCOUT((863 - 11)- 48*0), true),
			93 => (D_dly(16)'last_event, tpd_D_PCOUT((863 - 11)- 48*1), true),
			94 => (D_dly(15)'last_event, tpd_D_PCOUT((863 - 11)- 48*2), true),
			95 => (D_dly(14)'last_event, tpd_D_PCOUT((863 - 11)- 48*3), true),
			96 => (D_dly(13)'last_event, tpd_D_PCOUT((863 - 11)- 48*4), true),
			97 => (D_dly(12)'last_event, tpd_D_PCOUT((863 - 11)- 48*5), true),
			98 => (D_dly(11)'last_event, tpd_D_PCOUT((863 - 11)- 48*6), true),
			99 => (D_dly(10)'last_event, tpd_D_PCOUT((863 - 11)- 48*7), true),
			100 => (D_dly(9)'last_event, tpd_D_PCOUT((863 - 11)- 48*8), true),
			101 => (D_dly(8)'last_event, tpd_D_PCOUT((863 - 11)- 48*9), true),
			102 => (D_dly(7)'last_event, tpd_D_PCOUT((863 - 11)- 48*10), true),
			103 => (D_dly(6)'last_event, tpd_D_PCOUT((863 - 11)- 48*11), true),
			104 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 11)- 48*12), true),
			105 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 11)- 48*13), true),
			106 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 11)- 48*14), true),
			107 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 11)- 48*15), true),
			108 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 11)- 48*16), true),
			109 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 11)- 48*17), true),
			110 => (OPMODE_dly(7)'last_event, tpd_OPMODE_PCOUT((383 - 11)- 48*0), true),
			111 => (OPMODE_dly(6)'last_event, tpd_OPMODE_PCOUT((383 - 11)- 48*1), true),
			112 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 11)- 48*2), true),
			113 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 11)- 48*3), true),
			114 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 11)- 48*4), true),
			115 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 11)- 48*5), true),
			116 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 11)- 48*6), true),
			117 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 11)- 48*7), true),
			118 => (PCIN_dly(36)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*11), true),
			119 => (PCIN_dly(35)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*12), true),
			120 => (PCIN_dly(34)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*13), true),
			121 => (PCIN_dly(33)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*14), true),
			122 => (PCIN_dly(32)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*15), true),
			123 => (PCIN_dly(31)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*16), true),
			124 => (PCIN_dly(30)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*17), true),
			125 => (PCIN_dly(29)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*18), true),
			126 => (PCIN_dly(28)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*19), true),
			127 => (PCIN_dly(27)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*20), true),
			128 => (PCIN_dly(26)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*21), true),
			129 => (PCIN_dly(25)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*22), true),
			130 => (PCIN_dly(24)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*23), true),
			131 => (PCIN_dly(23)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*24), true),
			132 => (PCIN_dly(22)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*25), true),
			133 => (PCIN_dly(21)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*26), true),
			134 => (PCIN_dly(20)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*27), true),
			135 => (PCIN_dly(19)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*28), true),
			136 => (PCIN_dly(18)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*29), true),
			137 => (PCIN_dly(17)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*30), true),
			138 => (PCIN_dly(16)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*31), true),
			139 => (PCIN_dly(15)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*32), true),
			140 => (PCIN_dly(14)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*33), true),
			141 => (PCIN_dly(13)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*34), true),
			142 => (PCIN_dly(12)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*35), true),
			143 => (PCIN_dly(11)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*36), true),
			144 => (PCIN_dly(10)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*37), true),
			145 => (PCIN_dly(9)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*38), true),
			146 => (PCIN_dly(8)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*39), true),
			147 => (PCIN_dly(7)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*40), true),
			148 => (PCIN_dly(6)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*41), true),
			149 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*42), true),
			150 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*43), true),
			151 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*44), true),
			152 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*45), true),
			153 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*46), true),
			154 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 11)- 48*47), true),
			155 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(36), true),
			156 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(36), true),
			157 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(36), true),
			158 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(36), true),
			159 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(36), true),
			160 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(36), true),
			161 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(36), true),
			162 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(36), true),
			163 => (CLK_dly'last_event, tpd_CLK_PCOUT(36), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(35),
         GlitchData	=> PCOUT_GlitchData(35),
         OutSignalName	=> "PCOUT(35)",
         OutTemp	=> PCOUT_zd(35),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_PCOUT((863 - 12)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_PCOUT((863 - 12)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_PCOUT((863 - 12)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_PCOUT((863 - 12)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_PCOUT((863 - 12)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_PCOUT((863 - 12)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_PCOUT((863 - 12)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_PCOUT((863 - 12)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_PCOUT((863 - 12)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_PCOUT((863 - 12)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_PCOUT((863 - 12)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_PCOUT((863 - 12)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 12)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 12)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 12)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 12)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 12)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 12)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_PCOUT((863 - 12)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_PCOUT((863 - 12)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_PCOUT((863 - 12)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_PCOUT((863 - 12)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_PCOUT((863 - 12)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_PCOUT((863 - 12)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_PCOUT((863 - 12)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_PCOUT((863 - 12)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_PCOUT((863 - 12)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_PCOUT((863 - 12)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_PCOUT((863 - 12)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_PCOUT((863 - 12)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 12)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 12)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 12)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 12)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 12)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 12)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_PCOUT((863 - 12)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_PCOUT((863 - 12)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_PCOUT((863 - 12)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_PCOUT((863 - 12)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_PCOUT((863 - 12)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_PCOUT((863 - 12)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_PCOUT((863 - 12)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_PCOUT((863 - 12)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_PCOUT((863 - 12)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_PCOUT((863 - 12)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_PCOUT((863 - 12)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_PCOUT((863 - 12)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 12)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 12)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 12)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 12)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 12)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 12)- 48*17), true),
			54 => (C_dly(35)'last_event, tpd_C_PCOUT((2303 - 12)- 48*12), true),
			55 => (C_dly(34)'last_event, tpd_C_PCOUT((2303 - 12)- 48*13), true),
			56 => (C_dly(33)'last_event, tpd_C_PCOUT((2303 - 12)- 48*14), true),
			57 => (C_dly(32)'last_event, tpd_C_PCOUT((2303 - 12)- 48*15), true),
			58 => (C_dly(31)'last_event, tpd_C_PCOUT((2303 - 12)- 48*16), true),
			59 => (C_dly(30)'last_event, tpd_C_PCOUT((2303 - 12)- 48*17), true),
			60 => (C_dly(29)'last_event, tpd_C_PCOUT((2303 - 12)- 48*18), true),
			61 => (C_dly(28)'last_event, tpd_C_PCOUT((2303 - 12)- 48*19), true),
			62 => (C_dly(27)'last_event, tpd_C_PCOUT((2303 - 12)- 48*20), true),
			63 => (C_dly(26)'last_event, tpd_C_PCOUT((2303 - 12)- 48*21), true),
			64 => (C_dly(25)'last_event, tpd_C_PCOUT((2303 - 12)- 48*22), true),
			65 => (C_dly(24)'last_event, tpd_C_PCOUT((2303 - 12)- 48*23), true),
			66 => (C_dly(23)'last_event, tpd_C_PCOUT((2303 - 12)- 48*24), true),
			67 => (C_dly(22)'last_event, tpd_C_PCOUT((2303 - 12)- 48*25), true),
			68 => (C_dly(21)'last_event, tpd_C_PCOUT((2303 - 12)- 48*26), true),
			69 => (C_dly(20)'last_event, tpd_C_PCOUT((2303 - 12)- 48*27), true),
			70 => (C_dly(19)'last_event, tpd_C_PCOUT((2303 - 12)- 48*28), true),
			71 => (C_dly(18)'last_event, tpd_C_PCOUT((2303 - 12)- 48*29), true),
			72 => (C_dly(17)'last_event, tpd_C_PCOUT((2303 - 12)- 48*30), true),
			73 => (C_dly(16)'last_event, tpd_C_PCOUT((2303 - 12)- 48*31), true),
			74 => (C_dly(15)'last_event, tpd_C_PCOUT((2303 - 12)- 48*32), true),
			75 => (C_dly(14)'last_event, tpd_C_PCOUT((2303 - 12)- 48*33), true),
			76 => (C_dly(13)'last_event, tpd_C_PCOUT((2303 - 12)- 48*34), true),
			77 => (C_dly(12)'last_event, tpd_C_PCOUT((2303 - 12)- 48*35), true),
			78 => (C_dly(11)'last_event, tpd_C_PCOUT((2303 - 12)- 48*36), true),
			79 => (C_dly(10)'last_event, tpd_C_PCOUT((2303 - 12)- 48*37), true),
			80 => (C_dly(9)'last_event, tpd_C_PCOUT((2303 - 12)- 48*38), true),
			81 => (C_dly(8)'last_event, tpd_C_PCOUT((2303 - 12)- 48*39), true),
			82 => (C_dly(7)'last_event, tpd_C_PCOUT((2303 - 12)- 48*40), true),
			83 => (C_dly(6)'last_event, tpd_C_PCOUT((2303 - 12)- 48*41), true),
			84 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 12)- 48*42), true),
			85 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 12)- 48*43), true),
			86 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 12)- 48*44), true),
			87 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 12)- 48*45), true),
			88 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 12)- 48*46), true),
			89 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 12)- 48*47), true),
			90 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(35), true),
			91 => (D_dly(17)'last_event, tpd_D_PCOUT((863 - 12)- 48*0), true),
			92 => (D_dly(16)'last_event, tpd_D_PCOUT((863 - 12)- 48*1), true),
			93 => (D_dly(15)'last_event, tpd_D_PCOUT((863 - 12)- 48*2), true),
			94 => (D_dly(14)'last_event, tpd_D_PCOUT((863 - 12)- 48*3), true),
			95 => (D_dly(13)'last_event, tpd_D_PCOUT((863 - 12)- 48*4), true),
			96 => (D_dly(12)'last_event, tpd_D_PCOUT((863 - 12)- 48*5), true),
			97 => (D_dly(11)'last_event, tpd_D_PCOUT((863 - 12)- 48*6), true),
			98 => (D_dly(10)'last_event, tpd_D_PCOUT((863 - 12)- 48*7), true),
			99 => (D_dly(9)'last_event, tpd_D_PCOUT((863 - 12)- 48*8), true),
			100 => (D_dly(8)'last_event, tpd_D_PCOUT((863 - 12)- 48*9), true),
			101 => (D_dly(7)'last_event, tpd_D_PCOUT((863 - 12)- 48*10), true),
			102 => (D_dly(6)'last_event, tpd_D_PCOUT((863 - 12)- 48*11), true),
			103 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 12)- 48*12), true),
			104 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 12)- 48*13), true),
			105 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 12)- 48*14), true),
			106 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 12)- 48*15), true),
			107 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 12)- 48*16), true),
			108 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 12)- 48*17), true),
			109 => (OPMODE_dly(7)'last_event, tpd_OPMODE_PCOUT((383 - 12)- 48*0), true),
			110 => (OPMODE_dly(6)'last_event, tpd_OPMODE_PCOUT((383 - 12)- 48*1), true),
			111 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 12)- 48*2), true),
			112 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 12)- 48*3), true),
			113 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 12)- 48*4), true),
			114 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 12)- 48*5), true),
			115 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 12)- 48*6), true),
			116 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 12)- 48*7), true),
			117 => (PCIN_dly(35)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*12), true),
			118 => (PCIN_dly(34)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*13), true),
			119 => (PCIN_dly(33)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*14), true),
			120 => (PCIN_dly(32)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*15), true),
			121 => (PCIN_dly(31)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*16), true),
			122 => (PCIN_dly(30)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*17), true),
			123 => (PCIN_dly(29)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*18), true),
			124 => (PCIN_dly(28)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*19), true),
			125 => (PCIN_dly(27)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*20), true),
			126 => (PCIN_dly(26)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*21), true),
			127 => (PCIN_dly(25)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*22), true),
			128 => (PCIN_dly(24)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*23), true),
			129 => (PCIN_dly(23)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*24), true),
			130 => (PCIN_dly(22)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*25), true),
			131 => (PCIN_dly(21)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*26), true),
			132 => (PCIN_dly(20)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*27), true),
			133 => (PCIN_dly(19)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*28), true),
			134 => (PCIN_dly(18)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*29), true),
			135 => (PCIN_dly(17)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*30), true),
			136 => (PCIN_dly(16)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*31), true),
			137 => (PCIN_dly(15)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*32), true),
			138 => (PCIN_dly(14)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*33), true),
			139 => (PCIN_dly(13)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*34), true),
			140 => (PCIN_dly(12)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*35), true),
			141 => (PCIN_dly(11)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*36), true),
			142 => (PCIN_dly(10)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*37), true),
			143 => (PCIN_dly(9)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*38), true),
			144 => (PCIN_dly(8)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*39), true),
			145 => (PCIN_dly(7)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*40), true),
			146 => (PCIN_dly(6)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*41), true),
			147 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*42), true),
			148 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*43), true),
			149 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*44), true),
			150 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*45), true),
			151 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*46), true),
			152 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 12)- 48*47), true),
			153 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(35), true),
			154 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(35), true),
			155 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(35), true),
			156 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(35), true),
			157 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(35), true),
			158 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(35), true),
			159 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(35), true),
			160 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(35), true),
			161 => (CLK_dly'last_event, tpd_CLK_PCOUT(35), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(34),
         GlitchData	=> PCOUT_GlitchData(34),
         OutSignalName	=> "PCOUT(34)",
         OutTemp	=> PCOUT_zd(34),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_PCOUT((863 - 13)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_PCOUT((863 - 13)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_PCOUT((863 - 13)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_PCOUT((863 - 13)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_PCOUT((863 - 13)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_PCOUT((863 - 13)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_PCOUT((863 - 13)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_PCOUT((863 - 13)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_PCOUT((863 - 13)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_PCOUT((863 - 13)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_PCOUT((863 - 13)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_PCOUT((863 - 13)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 13)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 13)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 13)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 13)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 13)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 13)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_PCOUT((863 - 13)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_PCOUT((863 - 13)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_PCOUT((863 - 13)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_PCOUT((863 - 13)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_PCOUT((863 - 13)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_PCOUT((863 - 13)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_PCOUT((863 - 13)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_PCOUT((863 - 13)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_PCOUT((863 - 13)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_PCOUT((863 - 13)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_PCOUT((863 - 13)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_PCOUT((863 - 13)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 13)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 13)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 13)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 13)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 13)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 13)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_PCOUT((863 - 13)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_PCOUT((863 - 13)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_PCOUT((863 - 13)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_PCOUT((863 - 13)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_PCOUT((863 - 13)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_PCOUT((863 - 13)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_PCOUT((863 - 13)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_PCOUT((863 - 13)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_PCOUT((863 - 13)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_PCOUT((863 - 13)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_PCOUT((863 - 13)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_PCOUT((863 - 13)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 13)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 13)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 13)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 13)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 13)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 13)- 48*17), true),
			54 => (C_dly(34)'last_event, tpd_C_PCOUT((2303 - 13)- 48*13), true),
			55 => (C_dly(33)'last_event, tpd_C_PCOUT((2303 - 13)- 48*14), true),
			56 => (C_dly(32)'last_event, tpd_C_PCOUT((2303 - 13)- 48*15), true),
			57 => (C_dly(31)'last_event, tpd_C_PCOUT((2303 - 13)- 48*16), true),
			58 => (C_dly(30)'last_event, tpd_C_PCOUT((2303 - 13)- 48*17), true),
			59 => (C_dly(29)'last_event, tpd_C_PCOUT((2303 - 13)- 48*18), true),
			60 => (C_dly(28)'last_event, tpd_C_PCOUT((2303 - 13)- 48*19), true),
			61 => (C_dly(27)'last_event, tpd_C_PCOUT((2303 - 13)- 48*20), true),
			62 => (C_dly(26)'last_event, tpd_C_PCOUT((2303 - 13)- 48*21), true),
			63 => (C_dly(25)'last_event, tpd_C_PCOUT((2303 - 13)- 48*22), true),
			64 => (C_dly(24)'last_event, tpd_C_PCOUT((2303 - 13)- 48*23), true),
			65 => (C_dly(23)'last_event, tpd_C_PCOUT((2303 - 13)- 48*24), true),
			66 => (C_dly(22)'last_event, tpd_C_PCOUT((2303 - 13)- 48*25), true),
			67 => (C_dly(21)'last_event, tpd_C_PCOUT((2303 - 13)- 48*26), true),
			68 => (C_dly(20)'last_event, tpd_C_PCOUT((2303 - 13)- 48*27), true),
			69 => (C_dly(19)'last_event, tpd_C_PCOUT((2303 - 13)- 48*28), true),
			70 => (C_dly(18)'last_event, tpd_C_PCOUT((2303 - 13)- 48*29), true),
			71 => (C_dly(17)'last_event, tpd_C_PCOUT((2303 - 13)- 48*30), true),
			72 => (C_dly(16)'last_event, tpd_C_PCOUT((2303 - 13)- 48*31), true),
			73 => (C_dly(15)'last_event, tpd_C_PCOUT((2303 - 13)- 48*32), true),
			74 => (C_dly(14)'last_event, tpd_C_PCOUT((2303 - 13)- 48*33), true),
			75 => (C_dly(13)'last_event, tpd_C_PCOUT((2303 - 13)- 48*34), true),
			76 => (C_dly(12)'last_event, tpd_C_PCOUT((2303 - 13)- 48*35), true),
			77 => (C_dly(11)'last_event, tpd_C_PCOUT((2303 - 13)- 48*36), true),
			78 => (C_dly(10)'last_event, tpd_C_PCOUT((2303 - 13)- 48*37), true),
			79 => (C_dly(9)'last_event, tpd_C_PCOUT((2303 - 13)- 48*38), true),
			80 => (C_dly(8)'last_event, tpd_C_PCOUT((2303 - 13)- 48*39), true),
			81 => (C_dly(7)'last_event, tpd_C_PCOUT((2303 - 13)- 48*40), true),
			82 => (C_dly(6)'last_event, tpd_C_PCOUT((2303 - 13)- 48*41), true),
			83 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 13)- 48*42), true),
			84 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 13)- 48*43), true),
			85 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 13)- 48*44), true),
			86 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 13)- 48*45), true),
			87 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 13)- 48*46), true),
			88 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 13)- 48*47), true),
			89 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(34), true),
			90 => (D_dly(17)'last_event, tpd_D_PCOUT((863 - 13)- 48*0), true),
			91 => (D_dly(16)'last_event, tpd_D_PCOUT((863 - 13)- 48*1), true),
			92 => (D_dly(15)'last_event, tpd_D_PCOUT((863 - 13)- 48*2), true),
			93 => (D_dly(14)'last_event, tpd_D_PCOUT((863 - 13)- 48*3), true),
			94 => (D_dly(13)'last_event, tpd_D_PCOUT((863 - 13)- 48*4), true),
			95 => (D_dly(12)'last_event, tpd_D_PCOUT((863 - 13)- 48*5), true),
			96 => (D_dly(11)'last_event, tpd_D_PCOUT((863 - 13)- 48*6), true),
			97 => (D_dly(10)'last_event, tpd_D_PCOUT((863 - 13)- 48*7), true),
			98 => (D_dly(9)'last_event, tpd_D_PCOUT((863 - 13)- 48*8), true),
			99 => (D_dly(8)'last_event, tpd_D_PCOUT((863 - 13)- 48*9), true),
			100 => (D_dly(7)'last_event, tpd_D_PCOUT((863 - 13)- 48*10), true),
			101 => (D_dly(6)'last_event, tpd_D_PCOUT((863 - 13)- 48*11), true),
			102 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 13)- 48*12), true),
			103 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 13)- 48*13), true),
			104 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 13)- 48*14), true),
			105 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 13)- 48*15), true),
			106 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 13)- 48*16), true),
			107 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 13)- 48*17), true),
			108 => (OPMODE_dly(7)'last_event, tpd_OPMODE_PCOUT((383 - 13)- 48*0), true),
			109 => (OPMODE_dly(6)'last_event, tpd_OPMODE_PCOUT((383 - 13)- 48*1), true),
			110 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 13)- 48*2), true),
			111 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 13)- 48*3), true),
			112 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 13)- 48*4), true),
			113 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 13)- 48*5), true),
			114 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 13)- 48*6), true),
			115 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 13)- 48*7), true),
			116 => (PCIN_dly(34)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*13), true),
			117 => (PCIN_dly(33)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*14), true),
			118 => (PCIN_dly(32)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*15), true),
			119 => (PCIN_dly(31)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*16), true),
			120 => (PCIN_dly(30)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*17), true),
			121 => (PCIN_dly(29)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*18), true),
			122 => (PCIN_dly(28)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*19), true),
			123 => (PCIN_dly(27)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*20), true),
			124 => (PCIN_dly(26)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*21), true),
			125 => (PCIN_dly(25)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*22), true),
			126 => (PCIN_dly(24)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*23), true),
			127 => (PCIN_dly(23)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*24), true),
			128 => (PCIN_dly(22)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*25), true),
			129 => (PCIN_dly(21)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*26), true),
			130 => (PCIN_dly(20)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*27), true),
			131 => (PCIN_dly(19)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*28), true),
			132 => (PCIN_dly(18)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*29), true),
			133 => (PCIN_dly(17)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*30), true),
			134 => (PCIN_dly(16)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*31), true),
			135 => (PCIN_dly(15)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*32), true),
			136 => (PCIN_dly(14)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*33), true),
			137 => (PCIN_dly(13)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*34), true),
			138 => (PCIN_dly(12)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*35), true),
			139 => (PCIN_dly(11)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*36), true),
			140 => (PCIN_dly(10)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*37), true),
			141 => (PCIN_dly(9)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*38), true),
			142 => (PCIN_dly(8)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*39), true),
			143 => (PCIN_dly(7)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*40), true),
			144 => (PCIN_dly(6)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*41), true),
			145 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*42), true),
			146 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*43), true),
			147 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*44), true),
			148 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*45), true),
			149 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*46), true),
			150 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 13)- 48*47), true),
			151 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(34), true),
			152 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(34), true),
			153 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(34), true),
			154 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(34), true),
			155 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(34), true),
			156 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(34), true),
			157 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(34), true),
			158 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(34), true),
			159 => (CLK_dly'last_event, tpd_CLK_PCOUT(34), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(33),
         GlitchData	=> PCOUT_GlitchData(33),
         OutSignalName	=> "PCOUT(33)",
         OutTemp	=> PCOUT_zd(33),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_PCOUT((863 - 14)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_PCOUT((863 - 14)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_PCOUT((863 - 14)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_PCOUT((863 - 14)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_PCOUT((863 - 14)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_PCOUT((863 - 14)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_PCOUT((863 - 14)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_PCOUT((863 - 14)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_PCOUT((863 - 14)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_PCOUT((863 - 14)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_PCOUT((863 - 14)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_PCOUT((863 - 14)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 14)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 14)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 14)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 14)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 14)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 14)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_PCOUT((863 - 14)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_PCOUT((863 - 14)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_PCOUT((863 - 14)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_PCOUT((863 - 14)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_PCOUT((863 - 14)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_PCOUT((863 - 14)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_PCOUT((863 - 14)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_PCOUT((863 - 14)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_PCOUT((863 - 14)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_PCOUT((863 - 14)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_PCOUT((863 - 14)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_PCOUT((863 - 14)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 14)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 14)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 14)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 14)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 14)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 14)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_PCOUT((863 - 14)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_PCOUT((863 - 14)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_PCOUT((863 - 14)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_PCOUT((863 - 14)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_PCOUT((863 - 14)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_PCOUT((863 - 14)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_PCOUT((863 - 14)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_PCOUT((863 - 14)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_PCOUT((863 - 14)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_PCOUT((863 - 14)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_PCOUT((863 - 14)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_PCOUT((863 - 14)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 14)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 14)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 14)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 14)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 14)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 14)- 48*17), true),
			54 => (C_dly(33)'last_event, tpd_C_PCOUT((2303 - 14)- 48*14), true),
			55 => (C_dly(32)'last_event, tpd_C_PCOUT((2303 - 14)- 48*15), true),
			56 => (C_dly(31)'last_event, tpd_C_PCOUT((2303 - 14)- 48*16), true),
			57 => (C_dly(30)'last_event, tpd_C_PCOUT((2303 - 14)- 48*17), true),
			58 => (C_dly(29)'last_event, tpd_C_PCOUT((2303 - 14)- 48*18), true),
			59 => (C_dly(28)'last_event, tpd_C_PCOUT((2303 - 14)- 48*19), true),
			60 => (C_dly(27)'last_event, tpd_C_PCOUT((2303 - 14)- 48*20), true),
			61 => (C_dly(26)'last_event, tpd_C_PCOUT((2303 - 14)- 48*21), true),
			62 => (C_dly(25)'last_event, tpd_C_PCOUT((2303 - 14)- 48*22), true),
			63 => (C_dly(24)'last_event, tpd_C_PCOUT((2303 - 14)- 48*23), true),
			64 => (C_dly(23)'last_event, tpd_C_PCOUT((2303 - 14)- 48*24), true),
			65 => (C_dly(22)'last_event, tpd_C_PCOUT((2303 - 14)- 48*25), true),
			66 => (C_dly(21)'last_event, tpd_C_PCOUT((2303 - 14)- 48*26), true),
			67 => (C_dly(20)'last_event, tpd_C_PCOUT((2303 - 14)- 48*27), true),
			68 => (C_dly(19)'last_event, tpd_C_PCOUT((2303 - 14)- 48*28), true),
			69 => (C_dly(18)'last_event, tpd_C_PCOUT((2303 - 14)- 48*29), true),
			70 => (C_dly(17)'last_event, tpd_C_PCOUT((2303 - 14)- 48*30), true),
			71 => (C_dly(16)'last_event, tpd_C_PCOUT((2303 - 14)- 48*31), true),
			72 => (C_dly(15)'last_event, tpd_C_PCOUT((2303 - 14)- 48*32), true),
			73 => (C_dly(14)'last_event, tpd_C_PCOUT((2303 - 14)- 48*33), true),
			74 => (C_dly(13)'last_event, tpd_C_PCOUT((2303 - 14)- 48*34), true),
			75 => (C_dly(12)'last_event, tpd_C_PCOUT((2303 - 14)- 48*35), true),
			76 => (C_dly(11)'last_event, tpd_C_PCOUT((2303 - 14)- 48*36), true),
			77 => (C_dly(10)'last_event, tpd_C_PCOUT((2303 - 14)- 48*37), true),
			78 => (C_dly(9)'last_event, tpd_C_PCOUT((2303 - 14)- 48*38), true),
			79 => (C_dly(8)'last_event, tpd_C_PCOUT((2303 - 14)- 48*39), true),
			80 => (C_dly(7)'last_event, tpd_C_PCOUT((2303 - 14)- 48*40), true),
			81 => (C_dly(6)'last_event, tpd_C_PCOUT((2303 - 14)- 48*41), true),
			82 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 14)- 48*42), true),
			83 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 14)- 48*43), true),
			84 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 14)- 48*44), true),
			85 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 14)- 48*45), true),
			86 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 14)- 48*46), true),
			87 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 14)- 48*47), true),
			88 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(33), true),
			89 => (D_dly(17)'last_event, tpd_D_PCOUT((863 - 14)- 48*0), true),
			90 => (D_dly(16)'last_event, tpd_D_PCOUT((863 - 14)- 48*1), true),
			91 => (D_dly(15)'last_event, tpd_D_PCOUT((863 - 14)- 48*2), true),
			92 => (D_dly(14)'last_event, tpd_D_PCOUT((863 - 14)- 48*3), true),
			93 => (D_dly(13)'last_event, tpd_D_PCOUT((863 - 14)- 48*4), true),
			94 => (D_dly(12)'last_event, tpd_D_PCOUT((863 - 14)- 48*5), true),
			95 => (D_dly(11)'last_event, tpd_D_PCOUT((863 - 14)- 48*6), true),
			96 => (D_dly(10)'last_event, tpd_D_PCOUT((863 - 14)- 48*7), true),
			97 => (D_dly(9)'last_event, tpd_D_PCOUT((863 - 14)- 48*8), true),
			98 => (D_dly(8)'last_event, tpd_D_PCOUT((863 - 14)- 48*9), true),
			99 => (D_dly(7)'last_event, tpd_D_PCOUT((863 - 14)- 48*10), true),
			100 => (D_dly(6)'last_event, tpd_D_PCOUT((863 - 14)- 48*11), true),
			101 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 14)- 48*12), true),
			102 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 14)- 48*13), true),
			103 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 14)- 48*14), true),
			104 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 14)- 48*15), true),
			105 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 14)- 48*16), true),
			106 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 14)- 48*17), true),
			107 => (OPMODE_dly(7)'last_event, tpd_OPMODE_PCOUT((383 - 14)- 48*0), true),
			108 => (OPMODE_dly(6)'last_event, tpd_OPMODE_PCOUT((383 - 14)- 48*1), true),
			109 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 14)- 48*2), true),
			110 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 14)- 48*3), true),
			111 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 14)- 48*4), true),
			112 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 14)- 48*5), true),
			113 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 14)- 48*6), true),
			114 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 14)- 48*7), true),
			115 => (PCIN_dly(33)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*14), true),
			116 => (PCIN_dly(32)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*15), true),
			117 => (PCIN_dly(31)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*16), true),
			118 => (PCIN_dly(30)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*17), true),
			119 => (PCIN_dly(29)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*18), true),
			120 => (PCIN_dly(28)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*19), true),
			121 => (PCIN_dly(27)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*20), true),
			122 => (PCIN_dly(26)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*21), true),
			123 => (PCIN_dly(25)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*22), true),
			124 => (PCIN_dly(24)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*23), true),
			125 => (PCIN_dly(23)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*24), true),
			126 => (PCIN_dly(22)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*25), true),
			127 => (PCIN_dly(21)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*26), true),
			128 => (PCIN_dly(20)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*27), true),
			129 => (PCIN_dly(19)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*28), true),
			130 => (PCIN_dly(18)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*29), true),
			131 => (PCIN_dly(17)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*30), true),
			132 => (PCIN_dly(16)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*31), true),
			133 => (PCIN_dly(15)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*32), true),
			134 => (PCIN_dly(14)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*33), true),
			135 => (PCIN_dly(13)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*34), true),
			136 => (PCIN_dly(12)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*35), true),
			137 => (PCIN_dly(11)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*36), true),
			138 => (PCIN_dly(10)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*37), true),
			139 => (PCIN_dly(9)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*38), true),
			140 => (PCIN_dly(8)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*39), true),
			141 => (PCIN_dly(7)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*40), true),
			142 => (PCIN_dly(6)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*41), true),
			143 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*42), true),
			144 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*43), true),
			145 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*44), true),
			146 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*45), true),
			147 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*46), true),
			148 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 14)- 48*47), true),
			149 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(33), true),
			150 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(33), true),
			151 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(33), true),
			152 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(33), true),
			153 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(33), true),
			154 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(33), true),
			155 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(33), true),
			156 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(33), true),
			157 => (CLK_dly'last_event, tpd_CLK_PCOUT(33), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(32),
         GlitchData	=> PCOUT_GlitchData(32),
         OutSignalName	=> "PCOUT(32)",
         OutTemp	=> PCOUT_zd(32),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_PCOUT((863 - 15)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_PCOUT((863 - 15)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_PCOUT((863 - 15)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_PCOUT((863 - 15)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_PCOUT((863 - 15)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_PCOUT((863 - 15)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_PCOUT((863 - 15)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_PCOUT((863 - 15)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_PCOUT((863 - 15)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_PCOUT((863 - 15)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_PCOUT((863 - 15)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_PCOUT((863 - 15)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 15)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 15)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 15)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 15)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 15)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 15)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_PCOUT((863 - 15)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_PCOUT((863 - 15)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_PCOUT((863 - 15)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_PCOUT((863 - 15)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_PCOUT((863 - 15)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_PCOUT((863 - 15)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_PCOUT((863 - 15)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_PCOUT((863 - 15)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_PCOUT((863 - 15)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_PCOUT((863 - 15)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_PCOUT((863 - 15)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_PCOUT((863 - 15)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 15)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 15)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 15)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 15)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 15)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 15)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_PCOUT((863 - 15)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_PCOUT((863 - 15)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_PCOUT((863 - 15)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_PCOUT((863 - 15)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_PCOUT((863 - 15)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_PCOUT((863 - 15)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_PCOUT((863 - 15)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_PCOUT((863 - 15)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_PCOUT((863 - 15)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_PCOUT((863 - 15)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_PCOUT((863 - 15)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_PCOUT((863 - 15)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 15)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 15)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 15)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 15)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 15)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 15)- 48*17), true),
			54 => (C_dly(32)'last_event, tpd_C_PCOUT((2303 - 15)- 48*15), true),
			55 => (C_dly(31)'last_event, tpd_C_PCOUT((2303 - 15)- 48*16), true),
			56 => (C_dly(30)'last_event, tpd_C_PCOUT((2303 - 15)- 48*17), true),
			57 => (C_dly(29)'last_event, tpd_C_PCOUT((2303 - 15)- 48*18), true),
			58 => (C_dly(28)'last_event, tpd_C_PCOUT((2303 - 15)- 48*19), true),
			59 => (C_dly(27)'last_event, tpd_C_PCOUT((2303 - 15)- 48*20), true),
			60 => (C_dly(26)'last_event, tpd_C_PCOUT((2303 - 15)- 48*21), true),
			61 => (C_dly(25)'last_event, tpd_C_PCOUT((2303 - 15)- 48*22), true),
			62 => (C_dly(24)'last_event, tpd_C_PCOUT((2303 - 15)- 48*23), true),
			63 => (C_dly(23)'last_event, tpd_C_PCOUT((2303 - 15)- 48*24), true),
			64 => (C_dly(22)'last_event, tpd_C_PCOUT((2303 - 15)- 48*25), true),
			65 => (C_dly(21)'last_event, tpd_C_PCOUT((2303 - 15)- 48*26), true),
			66 => (C_dly(20)'last_event, tpd_C_PCOUT((2303 - 15)- 48*27), true),
			67 => (C_dly(19)'last_event, tpd_C_PCOUT((2303 - 15)- 48*28), true),
			68 => (C_dly(18)'last_event, tpd_C_PCOUT((2303 - 15)- 48*29), true),
			69 => (C_dly(17)'last_event, tpd_C_PCOUT((2303 - 15)- 48*30), true),
			70 => (C_dly(16)'last_event, tpd_C_PCOUT((2303 - 15)- 48*31), true),
			71 => (C_dly(15)'last_event, tpd_C_PCOUT((2303 - 15)- 48*32), true),
			72 => (C_dly(14)'last_event, tpd_C_PCOUT((2303 - 15)- 48*33), true),
			73 => (C_dly(13)'last_event, tpd_C_PCOUT((2303 - 15)- 48*34), true),
			74 => (C_dly(12)'last_event, tpd_C_PCOUT((2303 - 15)- 48*35), true),
			75 => (C_dly(11)'last_event, tpd_C_PCOUT((2303 - 15)- 48*36), true),
			76 => (C_dly(10)'last_event, tpd_C_PCOUT((2303 - 15)- 48*37), true),
			77 => (C_dly(9)'last_event, tpd_C_PCOUT((2303 - 15)- 48*38), true),
			78 => (C_dly(8)'last_event, tpd_C_PCOUT((2303 - 15)- 48*39), true),
			79 => (C_dly(7)'last_event, tpd_C_PCOUT((2303 - 15)- 48*40), true),
			80 => (C_dly(6)'last_event, tpd_C_PCOUT((2303 - 15)- 48*41), true),
			81 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 15)- 48*42), true),
			82 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 15)- 48*43), true),
			83 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 15)- 48*44), true),
			84 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 15)- 48*45), true),
			85 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 15)- 48*46), true),
			86 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 15)- 48*47), true),
			87 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(32), true),
			88 => (D_dly(17)'last_event, tpd_D_PCOUT((863 - 15)- 48*0), true),
			89 => (D_dly(16)'last_event, tpd_D_PCOUT((863 - 15)- 48*1), true),
			90 => (D_dly(15)'last_event, tpd_D_PCOUT((863 - 15)- 48*2), true),
			91 => (D_dly(14)'last_event, tpd_D_PCOUT((863 - 15)- 48*3), true),
			92 => (D_dly(13)'last_event, tpd_D_PCOUT((863 - 15)- 48*4), true),
			93 => (D_dly(12)'last_event, tpd_D_PCOUT((863 - 15)- 48*5), true),
			94 => (D_dly(11)'last_event, tpd_D_PCOUT((863 - 15)- 48*6), true),
			95 => (D_dly(10)'last_event, tpd_D_PCOUT((863 - 15)- 48*7), true),
			96 => (D_dly(9)'last_event, tpd_D_PCOUT((863 - 15)- 48*8), true),
			97 => (D_dly(8)'last_event, tpd_D_PCOUT((863 - 15)- 48*9), true),
			98 => (D_dly(7)'last_event, tpd_D_PCOUT((863 - 15)- 48*10), true),
			99 => (D_dly(6)'last_event, tpd_D_PCOUT((863 - 15)- 48*11), true),
			100 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 15)- 48*12), true),
			101 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 15)- 48*13), true),
			102 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 15)- 48*14), true),
			103 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 15)- 48*15), true),
			104 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 15)- 48*16), true),
			105 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 15)- 48*17), true),
			106 => (OPMODE_dly(7)'last_event, tpd_OPMODE_PCOUT((383 - 15)- 48*0), true),
			107 => (OPMODE_dly(6)'last_event, tpd_OPMODE_PCOUT((383 - 15)- 48*1), true),
			108 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 15)- 48*2), true),
			109 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 15)- 48*3), true),
			110 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 15)- 48*4), true),
			111 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 15)- 48*5), true),
			112 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 15)- 48*6), true),
			113 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 15)- 48*7), true),
			114 => (PCIN_dly(32)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*15), true),
			115 => (PCIN_dly(31)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*16), true),
			116 => (PCIN_dly(30)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*17), true),
			117 => (PCIN_dly(29)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*18), true),
			118 => (PCIN_dly(28)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*19), true),
			119 => (PCIN_dly(27)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*20), true),
			120 => (PCIN_dly(26)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*21), true),
			121 => (PCIN_dly(25)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*22), true),
			122 => (PCIN_dly(24)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*23), true),
			123 => (PCIN_dly(23)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*24), true),
			124 => (PCIN_dly(22)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*25), true),
			125 => (PCIN_dly(21)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*26), true),
			126 => (PCIN_dly(20)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*27), true),
			127 => (PCIN_dly(19)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*28), true),
			128 => (PCIN_dly(18)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*29), true),
			129 => (PCIN_dly(17)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*30), true),
			130 => (PCIN_dly(16)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*31), true),
			131 => (PCIN_dly(15)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*32), true),
			132 => (PCIN_dly(14)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*33), true),
			133 => (PCIN_dly(13)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*34), true),
			134 => (PCIN_dly(12)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*35), true),
			135 => (PCIN_dly(11)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*36), true),
			136 => (PCIN_dly(10)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*37), true),
			137 => (PCIN_dly(9)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*38), true),
			138 => (PCIN_dly(8)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*39), true),
			139 => (PCIN_dly(7)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*40), true),
			140 => (PCIN_dly(6)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*41), true),
			141 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*42), true),
			142 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*43), true),
			143 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*44), true),
			144 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*45), true),
			145 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*46), true),
			146 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 15)- 48*47), true),
			147 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(32), true),
			148 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(32), true),
			149 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(32), true),
			150 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(32), true),
			151 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(32), true),
			152 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(32), true),
			153 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(32), true),
			154 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(32), true),
			155 => (CLK_dly'last_event, tpd_CLK_PCOUT(32), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(31),
         GlitchData	=> PCOUT_GlitchData(31),
         OutSignalName	=> "PCOUT(31)",
         OutTemp	=> PCOUT_zd(31),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_PCOUT((863 - 16)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_PCOUT((863 - 16)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_PCOUT((863 - 16)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_PCOUT((863 - 16)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_PCOUT((863 - 16)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_PCOUT((863 - 16)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_PCOUT((863 - 16)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_PCOUT((863 - 16)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_PCOUT((863 - 16)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_PCOUT((863 - 16)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_PCOUT((863 - 16)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_PCOUT((863 - 16)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 16)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 16)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 16)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 16)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 16)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 16)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_PCOUT((863 - 16)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_PCOUT((863 - 16)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_PCOUT((863 - 16)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_PCOUT((863 - 16)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_PCOUT((863 - 16)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_PCOUT((863 - 16)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_PCOUT((863 - 16)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_PCOUT((863 - 16)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_PCOUT((863 - 16)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_PCOUT((863 - 16)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_PCOUT((863 - 16)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_PCOUT((863 - 16)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 16)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 16)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 16)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 16)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 16)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 16)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_PCOUT((863 - 16)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_PCOUT((863 - 16)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_PCOUT((863 - 16)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_PCOUT((863 - 16)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_PCOUT((863 - 16)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_PCOUT((863 - 16)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_PCOUT((863 - 16)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_PCOUT((863 - 16)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_PCOUT((863 - 16)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_PCOUT((863 - 16)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_PCOUT((863 - 16)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_PCOUT((863 - 16)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 16)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 16)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 16)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 16)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 16)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 16)- 48*17), true),
			54 => (C_dly(31)'last_event, tpd_C_PCOUT((2303 - 16)- 48*16), true),
			55 => (C_dly(30)'last_event, tpd_C_PCOUT((2303 - 16)- 48*17), true),
			56 => (C_dly(29)'last_event, tpd_C_PCOUT((2303 - 16)- 48*18), true),
			57 => (C_dly(28)'last_event, tpd_C_PCOUT((2303 - 16)- 48*19), true),
			58 => (C_dly(27)'last_event, tpd_C_PCOUT((2303 - 16)- 48*20), true),
			59 => (C_dly(26)'last_event, tpd_C_PCOUT((2303 - 16)- 48*21), true),
			60 => (C_dly(25)'last_event, tpd_C_PCOUT((2303 - 16)- 48*22), true),
			61 => (C_dly(24)'last_event, tpd_C_PCOUT((2303 - 16)- 48*23), true),
			62 => (C_dly(23)'last_event, tpd_C_PCOUT((2303 - 16)- 48*24), true),
			63 => (C_dly(22)'last_event, tpd_C_PCOUT((2303 - 16)- 48*25), true),
			64 => (C_dly(21)'last_event, tpd_C_PCOUT((2303 - 16)- 48*26), true),
			65 => (C_dly(20)'last_event, tpd_C_PCOUT((2303 - 16)- 48*27), true),
			66 => (C_dly(19)'last_event, tpd_C_PCOUT((2303 - 16)- 48*28), true),
			67 => (C_dly(18)'last_event, tpd_C_PCOUT((2303 - 16)- 48*29), true),
			68 => (C_dly(17)'last_event, tpd_C_PCOUT((2303 - 16)- 48*30), true),
			69 => (C_dly(16)'last_event, tpd_C_PCOUT((2303 - 16)- 48*31), true),
			70 => (C_dly(15)'last_event, tpd_C_PCOUT((2303 - 16)- 48*32), true),
			71 => (C_dly(14)'last_event, tpd_C_PCOUT((2303 - 16)- 48*33), true),
			72 => (C_dly(13)'last_event, tpd_C_PCOUT((2303 - 16)- 48*34), true),
			73 => (C_dly(12)'last_event, tpd_C_PCOUT((2303 - 16)- 48*35), true),
			74 => (C_dly(11)'last_event, tpd_C_PCOUT((2303 - 16)- 48*36), true),
			75 => (C_dly(10)'last_event, tpd_C_PCOUT((2303 - 16)- 48*37), true),
			76 => (C_dly(9)'last_event, tpd_C_PCOUT((2303 - 16)- 48*38), true),
			77 => (C_dly(8)'last_event, tpd_C_PCOUT((2303 - 16)- 48*39), true),
			78 => (C_dly(7)'last_event, tpd_C_PCOUT((2303 - 16)- 48*40), true),
			79 => (C_dly(6)'last_event, tpd_C_PCOUT((2303 - 16)- 48*41), true),
			80 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 16)- 48*42), true),
			81 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 16)- 48*43), true),
			82 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 16)- 48*44), true),
			83 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 16)- 48*45), true),
			84 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 16)- 48*46), true),
			85 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 16)- 48*47), true),
			86 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(31), true),
			87 => (D_dly(17)'last_event, tpd_D_PCOUT((863 - 16)- 48*0), true),
			88 => (D_dly(16)'last_event, tpd_D_PCOUT((863 - 16)- 48*1), true),
			89 => (D_dly(15)'last_event, tpd_D_PCOUT((863 - 16)- 48*2), true),
			90 => (D_dly(14)'last_event, tpd_D_PCOUT((863 - 16)- 48*3), true),
			91 => (D_dly(13)'last_event, tpd_D_PCOUT((863 - 16)- 48*4), true),
			92 => (D_dly(12)'last_event, tpd_D_PCOUT((863 - 16)- 48*5), true),
			93 => (D_dly(11)'last_event, tpd_D_PCOUT((863 - 16)- 48*6), true),
			94 => (D_dly(10)'last_event, tpd_D_PCOUT((863 - 16)- 48*7), true),
			95 => (D_dly(9)'last_event, tpd_D_PCOUT((863 - 16)- 48*8), true),
			96 => (D_dly(8)'last_event, tpd_D_PCOUT((863 - 16)- 48*9), true),
			97 => (D_dly(7)'last_event, tpd_D_PCOUT((863 - 16)- 48*10), true),
			98 => (D_dly(6)'last_event, tpd_D_PCOUT((863 - 16)- 48*11), true),
			99 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 16)- 48*12), true),
			100 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 16)- 48*13), true),
			101 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 16)- 48*14), true),
			102 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 16)- 48*15), true),
			103 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 16)- 48*16), true),
			104 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 16)- 48*17), true),
			105 => (OPMODE_dly(7)'last_event, tpd_OPMODE_PCOUT((383 - 16)- 48*0), true),
			106 => (OPMODE_dly(6)'last_event, tpd_OPMODE_PCOUT((383 - 16)- 48*1), true),
			107 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 16)- 48*2), true),
			108 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 16)- 48*3), true),
			109 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 16)- 48*4), true),
			110 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 16)- 48*5), true),
			111 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 16)- 48*6), true),
			112 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 16)- 48*7), true),
			113 => (PCIN_dly(31)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*16), true),
			114 => (PCIN_dly(30)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*17), true),
			115 => (PCIN_dly(29)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*18), true),
			116 => (PCIN_dly(28)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*19), true),
			117 => (PCIN_dly(27)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*20), true),
			118 => (PCIN_dly(26)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*21), true),
			119 => (PCIN_dly(25)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*22), true),
			120 => (PCIN_dly(24)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*23), true),
			121 => (PCIN_dly(23)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*24), true),
			122 => (PCIN_dly(22)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*25), true),
			123 => (PCIN_dly(21)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*26), true),
			124 => (PCIN_dly(20)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*27), true),
			125 => (PCIN_dly(19)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*28), true),
			126 => (PCIN_dly(18)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*29), true),
			127 => (PCIN_dly(17)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*30), true),
			128 => (PCIN_dly(16)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*31), true),
			129 => (PCIN_dly(15)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*32), true),
			130 => (PCIN_dly(14)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*33), true),
			131 => (PCIN_dly(13)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*34), true),
			132 => (PCIN_dly(12)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*35), true),
			133 => (PCIN_dly(11)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*36), true),
			134 => (PCIN_dly(10)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*37), true),
			135 => (PCIN_dly(9)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*38), true),
			136 => (PCIN_dly(8)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*39), true),
			137 => (PCIN_dly(7)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*40), true),
			138 => (PCIN_dly(6)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*41), true),
			139 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*42), true),
			140 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*43), true),
			141 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*44), true),
			142 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*45), true),
			143 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*46), true),
			144 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 16)- 48*47), true),
			145 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(31), true),
			146 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(31), true),
			147 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(31), true),
			148 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(31), true),
			149 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(31), true),
			150 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(31), true),
			151 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(31), true),
			152 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(31), true),
			153 => (CLK_dly'last_event, tpd_CLK_PCOUT(31), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(30),
         GlitchData	=> PCOUT_GlitchData(30),
         OutSignalName	=> "PCOUT(30)",
         OutTemp	=> PCOUT_zd(30),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_PCOUT((863 - 17)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_PCOUT((863 - 17)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_PCOUT((863 - 17)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_PCOUT((863 - 17)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_PCOUT((863 - 17)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_PCOUT((863 - 17)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_PCOUT((863 - 17)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_PCOUT((863 - 17)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_PCOUT((863 - 17)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_PCOUT((863 - 17)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_PCOUT((863 - 17)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_PCOUT((863 - 17)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 17)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 17)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 17)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 17)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 17)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 17)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_PCOUT((863 - 17)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_PCOUT((863 - 17)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_PCOUT((863 - 17)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_PCOUT((863 - 17)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_PCOUT((863 - 17)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_PCOUT((863 - 17)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_PCOUT((863 - 17)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_PCOUT((863 - 17)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_PCOUT((863 - 17)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_PCOUT((863 - 17)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_PCOUT((863 - 17)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_PCOUT((863 - 17)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 17)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 17)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 17)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 17)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 17)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 17)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_PCOUT((863 - 17)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_PCOUT((863 - 17)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_PCOUT((863 - 17)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_PCOUT((863 - 17)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_PCOUT((863 - 17)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_PCOUT((863 - 17)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_PCOUT((863 - 17)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_PCOUT((863 - 17)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_PCOUT((863 - 17)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_PCOUT((863 - 17)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_PCOUT((863 - 17)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_PCOUT((863 - 17)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 17)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 17)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 17)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 17)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 17)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 17)- 48*17), true),
			54 => (C_dly(30)'last_event, tpd_C_PCOUT((2303 - 17)- 48*17), true),
			55 => (C_dly(29)'last_event, tpd_C_PCOUT((2303 - 17)- 48*18), true),
			56 => (C_dly(28)'last_event, tpd_C_PCOUT((2303 - 17)- 48*19), true),
			57 => (C_dly(27)'last_event, tpd_C_PCOUT((2303 - 17)- 48*20), true),
			58 => (C_dly(26)'last_event, tpd_C_PCOUT((2303 - 17)- 48*21), true),
			59 => (C_dly(25)'last_event, tpd_C_PCOUT((2303 - 17)- 48*22), true),
			60 => (C_dly(24)'last_event, tpd_C_PCOUT((2303 - 17)- 48*23), true),
			61 => (C_dly(23)'last_event, tpd_C_PCOUT((2303 - 17)- 48*24), true),
			62 => (C_dly(22)'last_event, tpd_C_PCOUT((2303 - 17)- 48*25), true),
			63 => (C_dly(21)'last_event, tpd_C_PCOUT((2303 - 17)- 48*26), true),
			64 => (C_dly(20)'last_event, tpd_C_PCOUT((2303 - 17)- 48*27), true),
			65 => (C_dly(19)'last_event, tpd_C_PCOUT((2303 - 17)- 48*28), true),
			66 => (C_dly(18)'last_event, tpd_C_PCOUT((2303 - 17)- 48*29), true),
			67 => (C_dly(17)'last_event, tpd_C_PCOUT((2303 - 17)- 48*30), true),
			68 => (C_dly(16)'last_event, tpd_C_PCOUT((2303 - 17)- 48*31), true),
			69 => (C_dly(15)'last_event, tpd_C_PCOUT((2303 - 17)- 48*32), true),
			70 => (C_dly(14)'last_event, tpd_C_PCOUT((2303 - 17)- 48*33), true),
			71 => (C_dly(13)'last_event, tpd_C_PCOUT((2303 - 17)- 48*34), true),
			72 => (C_dly(12)'last_event, tpd_C_PCOUT((2303 - 17)- 48*35), true),
			73 => (C_dly(11)'last_event, tpd_C_PCOUT((2303 - 17)- 48*36), true),
			74 => (C_dly(10)'last_event, tpd_C_PCOUT((2303 - 17)- 48*37), true),
			75 => (C_dly(9)'last_event, tpd_C_PCOUT((2303 - 17)- 48*38), true),
			76 => (C_dly(8)'last_event, tpd_C_PCOUT((2303 - 17)- 48*39), true),
			77 => (C_dly(7)'last_event, tpd_C_PCOUT((2303 - 17)- 48*40), true),
			78 => (C_dly(6)'last_event, tpd_C_PCOUT((2303 - 17)- 48*41), true),
			79 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 17)- 48*42), true),
			80 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 17)- 48*43), true),
			81 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 17)- 48*44), true),
			82 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 17)- 48*45), true),
			83 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 17)- 48*46), true),
			84 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 17)- 48*47), true),
			85 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(30), true),
			86 => (D_dly(17)'last_event, tpd_D_PCOUT((863 - 17)- 48*0), true),
			87 => (D_dly(16)'last_event, tpd_D_PCOUT((863 - 17)- 48*1), true),
			88 => (D_dly(15)'last_event, tpd_D_PCOUT((863 - 17)- 48*2), true),
			89 => (D_dly(14)'last_event, tpd_D_PCOUT((863 - 17)- 48*3), true),
			90 => (D_dly(13)'last_event, tpd_D_PCOUT((863 - 17)- 48*4), true),
			91 => (D_dly(12)'last_event, tpd_D_PCOUT((863 - 17)- 48*5), true),
			92 => (D_dly(11)'last_event, tpd_D_PCOUT((863 - 17)- 48*6), true),
			93 => (D_dly(10)'last_event, tpd_D_PCOUT((863 - 17)- 48*7), true),
			94 => (D_dly(9)'last_event, tpd_D_PCOUT((863 - 17)- 48*8), true),
			95 => (D_dly(8)'last_event, tpd_D_PCOUT((863 - 17)- 48*9), true),
			96 => (D_dly(7)'last_event, tpd_D_PCOUT((863 - 17)- 48*10), true),
			97 => (D_dly(6)'last_event, tpd_D_PCOUT((863 - 17)- 48*11), true),
			98 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 17)- 48*12), true),
			99 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 17)- 48*13), true),
			100 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 17)- 48*14), true),
			101 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 17)- 48*15), true),
			102 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 17)- 48*16), true),
			103 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 17)- 48*17), true),
			104 => (OPMODE_dly(7)'last_event, tpd_OPMODE_PCOUT((383 - 17)- 48*0), true),
			105 => (OPMODE_dly(6)'last_event, tpd_OPMODE_PCOUT((383 - 17)- 48*1), true),
			106 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 17)- 48*2), true),
			107 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 17)- 48*3), true),
			108 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 17)- 48*4), true),
			109 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 17)- 48*5), true),
			110 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 17)- 48*6), true),
			111 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 17)- 48*7), true),
			112 => (PCIN_dly(30)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*17), true),
			113 => (PCIN_dly(29)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*18), true),
			114 => (PCIN_dly(28)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*19), true),
			115 => (PCIN_dly(27)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*20), true),
			116 => (PCIN_dly(26)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*21), true),
			117 => (PCIN_dly(25)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*22), true),
			118 => (PCIN_dly(24)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*23), true),
			119 => (PCIN_dly(23)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*24), true),
			120 => (PCIN_dly(22)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*25), true),
			121 => (PCIN_dly(21)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*26), true),
			122 => (PCIN_dly(20)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*27), true),
			123 => (PCIN_dly(19)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*28), true),
			124 => (PCIN_dly(18)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*29), true),
			125 => (PCIN_dly(17)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*30), true),
			126 => (PCIN_dly(16)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*31), true),
			127 => (PCIN_dly(15)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*32), true),
			128 => (PCIN_dly(14)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*33), true),
			129 => (PCIN_dly(13)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*34), true),
			130 => (PCIN_dly(12)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*35), true),
			131 => (PCIN_dly(11)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*36), true),
			132 => (PCIN_dly(10)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*37), true),
			133 => (PCIN_dly(9)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*38), true),
			134 => (PCIN_dly(8)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*39), true),
			135 => (PCIN_dly(7)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*40), true),
			136 => (PCIN_dly(6)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*41), true),
			137 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*42), true),
			138 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*43), true),
			139 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*44), true),
			140 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*45), true),
			141 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*46), true),
			142 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 17)- 48*47), true),
			143 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(30), true),
			144 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(30), true),
			145 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(30), true),
			146 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(30), true),
			147 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(30), true),
			148 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(30), true),
			149 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(30), true),
			150 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(30), true),
			151 => (CLK_dly'last_event, tpd_CLK_PCOUT(30), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(29),
         GlitchData	=> PCOUT_GlitchData(29),
         OutSignalName	=> "PCOUT(29)",
         OutTemp	=> PCOUT_zd(29),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_PCOUT((863 - 18)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_PCOUT((863 - 18)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_PCOUT((863 - 18)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_PCOUT((863 - 18)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_PCOUT((863 - 18)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_PCOUT((863 - 18)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_PCOUT((863 - 18)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_PCOUT((863 - 18)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_PCOUT((863 - 18)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_PCOUT((863 - 18)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_PCOUT((863 - 18)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_PCOUT((863 - 18)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 18)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 18)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 18)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 18)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 18)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 18)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_PCOUT((863 - 18)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_PCOUT((863 - 18)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_PCOUT((863 - 18)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_PCOUT((863 - 18)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_PCOUT((863 - 18)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_PCOUT((863 - 18)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_PCOUT((863 - 18)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_PCOUT((863 - 18)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_PCOUT((863 - 18)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_PCOUT((863 - 18)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_PCOUT((863 - 18)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_PCOUT((863 - 18)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 18)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 18)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 18)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 18)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 18)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 18)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_PCOUT((863 - 18)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_PCOUT((863 - 18)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_PCOUT((863 - 18)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_PCOUT((863 - 18)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_PCOUT((863 - 18)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_PCOUT((863 - 18)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_PCOUT((863 - 18)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_PCOUT((863 - 18)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_PCOUT((863 - 18)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_PCOUT((863 - 18)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_PCOUT((863 - 18)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_PCOUT((863 - 18)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 18)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 18)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 18)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 18)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 18)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 18)- 48*17), true),
			54 => (C_dly(29)'last_event, tpd_C_PCOUT((2303 - 18)- 48*18), true),
			55 => (C_dly(28)'last_event, tpd_C_PCOUT((2303 - 18)- 48*19), true),
			56 => (C_dly(27)'last_event, tpd_C_PCOUT((2303 - 18)- 48*20), true),
			57 => (C_dly(26)'last_event, tpd_C_PCOUT((2303 - 18)- 48*21), true),
			58 => (C_dly(25)'last_event, tpd_C_PCOUT((2303 - 18)- 48*22), true),
			59 => (C_dly(24)'last_event, tpd_C_PCOUT((2303 - 18)- 48*23), true),
			60 => (C_dly(23)'last_event, tpd_C_PCOUT((2303 - 18)- 48*24), true),
			61 => (C_dly(22)'last_event, tpd_C_PCOUT((2303 - 18)- 48*25), true),
			62 => (C_dly(21)'last_event, tpd_C_PCOUT((2303 - 18)- 48*26), true),
			63 => (C_dly(20)'last_event, tpd_C_PCOUT((2303 - 18)- 48*27), true),
			64 => (C_dly(19)'last_event, tpd_C_PCOUT((2303 - 18)- 48*28), true),
			65 => (C_dly(18)'last_event, tpd_C_PCOUT((2303 - 18)- 48*29), true),
			66 => (C_dly(17)'last_event, tpd_C_PCOUT((2303 - 18)- 48*30), true),
			67 => (C_dly(16)'last_event, tpd_C_PCOUT((2303 - 18)- 48*31), true),
			68 => (C_dly(15)'last_event, tpd_C_PCOUT((2303 - 18)- 48*32), true),
			69 => (C_dly(14)'last_event, tpd_C_PCOUT((2303 - 18)- 48*33), true),
			70 => (C_dly(13)'last_event, tpd_C_PCOUT((2303 - 18)- 48*34), true),
			71 => (C_dly(12)'last_event, tpd_C_PCOUT((2303 - 18)- 48*35), true),
			72 => (C_dly(11)'last_event, tpd_C_PCOUT((2303 - 18)- 48*36), true),
			73 => (C_dly(10)'last_event, tpd_C_PCOUT((2303 - 18)- 48*37), true),
			74 => (C_dly(9)'last_event, tpd_C_PCOUT((2303 - 18)- 48*38), true),
			75 => (C_dly(8)'last_event, tpd_C_PCOUT((2303 - 18)- 48*39), true),
			76 => (C_dly(7)'last_event, tpd_C_PCOUT((2303 - 18)- 48*40), true),
			77 => (C_dly(6)'last_event, tpd_C_PCOUT((2303 - 18)- 48*41), true),
			78 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 18)- 48*42), true),
			79 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 18)- 48*43), true),
			80 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 18)- 48*44), true),
			81 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 18)- 48*45), true),
			82 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 18)- 48*46), true),
			83 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 18)- 48*47), true),
			84 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(29), true),
			85 => (D_dly(17)'last_event, tpd_D_PCOUT((863 - 18)- 48*0), true),
			86 => (D_dly(16)'last_event, tpd_D_PCOUT((863 - 18)- 48*1), true),
			87 => (D_dly(15)'last_event, tpd_D_PCOUT((863 - 18)- 48*2), true),
			88 => (D_dly(14)'last_event, tpd_D_PCOUT((863 - 18)- 48*3), true),
			89 => (D_dly(13)'last_event, tpd_D_PCOUT((863 - 18)- 48*4), true),
			90 => (D_dly(12)'last_event, tpd_D_PCOUT((863 - 18)- 48*5), true),
			91 => (D_dly(11)'last_event, tpd_D_PCOUT((863 - 18)- 48*6), true),
			92 => (D_dly(10)'last_event, tpd_D_PCOUT((863 - 18)- 48*7), true),
			93 => (D_dly(9)'last_event, tpd_D_PCOUT((863 - 18)- 48*8), true),
			94 => (D_dly(8)'last_event, tpd_D_PCOUT((863 - 18)- 48*9), true),
			95 => (D_dly(7)'last_event, tpd_D_PCOUT((863 - 18)- 48*10), true),
			96 => (D_dly(6)'last_event, tpd_D_PCOUT((863 - 18)- 48*11), true),
			97 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 18)- 48*12), true),
			98 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 18)- 48*13), true),
			99 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 18)- 48*14), true),
			100 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 18)- 48*15), true),
			101 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 18)- 48*16), true),
			102 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 18)- 48*17), true),
			103 => (OPMODE_dly(7)'last_event, tpd_OPMODE_PCOUT((383 - 18)- 48*0), true),
			104 => (OPMODE_dly(6)'last_event, tpd_OPMODE_PCOUT((383 - 18)- 48*1), true),
			105 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 18)- 48*2), true),
			106 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 18)- 48*3), true),
			107 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 18)- 48*4), true),
			108 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 18)- 48*5), true),
			109 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 18)- 48*6), true),
			110 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 18)- 48*7), true),
			111 => (PCIN_dly(29)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*18), true),
			112 => (PCIN_dly(28)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*19), true),
			113 => (PCIN_dly(27)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*20), true),
			114 => (PCIN_dly(26)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*21), true),
			115 => (PCIN_dly(25)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*22), true),
			116 => (PCIN_dly(24)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*23), true),
			117 => (PCIN_dly(23)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*24), true),
			118 => (PCIN_dly(22)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*25), true),
			119 => (PCIN_dly(21)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*26), true),
			120 => (PCIN_dly(20)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*27), true),
			121 => (PCIN_dly(19)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*28), true),
			122 => (PCIN_dly(18)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*29), true),
			123 => (PCIN_dly(17)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*30), true),
			124 => (PCIN_dly(16)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*31), true),
			125 => (PCIN_dly(15)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*32), true),
			126 => (PCIN_dly(14)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*33), true),
			127 => (PCIN_dly(13)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*34), true),
			128 => (PCIN_dly(12)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*35), true),
			129 => (PCIN_dly(11)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*36), true),
			130 => (PCIN_dly(10)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*37), true),
			131 => (PCIN_dly(9)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*38), true),
			132 => (PCIN_dly(8)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*39), true),
			133 => (PCIN_dly(7)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*40), true),
			134 => (PCIN_dly(6)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*41), true),
			135 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*42), true),
			136 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*43), true),
			137 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*44), true),
			138 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*45), true),
			139 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*46), true),
			140 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 18)- 48*47), true),
			141 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(29), true),
			142 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(29), true),
			143 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(29), true),
			144 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(29), true),
			145 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(29), true),
			146 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(29), true),
			147 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(29), true),
			148 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(29), true),
			149 => (CLK_dly'last_event, tpd_CLK_PCOUT(29), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(28),
         GlitchData	=> PCOUT_GlitchData(28),
         OutSignalName	=> "PCOUT(28)",
         OutTemp	=> PCOUT_zd(28),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_PCOUT((863 - 19)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_PCOUT((863 - 19)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_PCOUT((863 - 19)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_PCOUT((863 - 19)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_PCOUT((863 - 19)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_PCOUT((863 - 19)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_PCOUT((863 - 19)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_PCOUT((863 - 19)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_PCOUT((863 - 19)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_PCOUT((863 - 19)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_PCOUT((863 - 19)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_PCOUT((863 - 19)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 19)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 19)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 19)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 19)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 19)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 19)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_PCOUT((863 - 19)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_PCOUT((863 - 19)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_PCOUT((863 - 19)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_PCOUT((863 - 19)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_PCOUT((863 - 19)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_PCOUT((863 - 19)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_PCOUT((863 - 19)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_PCOUT((863 - 19)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_PCOUT((863 - 19)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_PCOUT((863 - 19)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_PCOUT((863 - 19)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_PCOUT((863 - 19)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 19)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 19)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 19)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 19)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 19)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 19)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_PCOUT((863 - 19)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_PCOUT((863 - 19)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_PCOUT((863 - 19)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_PCOUT((863 - 19)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_PCOUT((863 - 19)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_PCOUT((863 - 19)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_PCOUT((863 - 19)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_PCOUT((863 - 19)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_PCOUT((863 - 19)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_PCOUT((863 - 19)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_PCOUT((863 - 19)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_PCOUT((863 - 19)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 19)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 19)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 19)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 19)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 19)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 19)- 48*17), true),
			54 => (C_dly(28)'last_event, tpd_C_PCOUT((2303 - 19)- 48*19), true),
			55 => (C_dly(27)'last_event, tpd_C_PCOUT((2303 - 19)- 48*20), true),
			56 => (C_dly(26)'last_event, tpd_C_PCOUT((2303 - 19)- 48*21), true),
			57 => (C_dly(25)'last_event, tpd_C_PCOUT((2303 - 19)- 48*22), true),
			58 => (C_dly(24)'last_event, tpd_C_PCOUT((2303 - 19)- 48*23), true),
			59 => (C_dly(23)'last_event, tpd_C_PCOUT((2303 - 19)- 48*24), true),
			60 => (C_dly(22)'last_event, tpd_C_PCOUT((2303 - 19)- 48*25), true),
			61 => (C_dly(21)'last_event, tpd_C_PCOUT((2303 - 19)- 48*26), true),
			62 => (C_dly(20)'last_event, tpd_C_PCOUT((2303 - 19)- 48*27), true),
			63 => (C_dly(19)'last_event, tpd_C_PCOUT((2303 - 19)- 48*28), true),
			64 => (C_dly(18)'last_event, tpd_C_PCOUT((2303 - 19)- 48*29), true),
			65 => (C_dly(17)'last_event, tpd_C_PCOUT((2303 - 19)- 48*30), true),
			66 => (C_dly(16)'last_event, tpd_C_PCOUT((2303 - 19)- 48*31), true),
			67 => (C_dly(15)'last_event, tpd_C_PCOUT((2303 - 19)- 48*32), true),
			68 => (C_dly(14)'last_event, tpd_C_PCOUT((2303 - 19)- 48*33), true),
			69 => (C_dly(13)'last_event, tpd_C_PCOUT((2303 - 19)- 48*34), true),
			70 => (C_dly(12)'last_event, tpd_C_PCOUT((2303 - 19)- 48*35), true),
			71 => (C_dly(11)'last_event, tpd_C_PCOUT((2303 - 19)- 48*36), true),
			72 => (C_dly(10)'last_event, tpd_C_PCOUT((2303 - 19)- 48*37), true),
			73 => (C_dly(9)'last_event, tpd_C_PCOUT((2303 - 19)- 48*38), true),
			74 => (C_dly(8)'last_event, tpd_C_PCOUT((2303 - 19)- 48*39), true),
			75 => (C_dly(7)'last_event, tpd_C_PCOUT((2303 - 19)- 48*40), true),
			76 => (C_dly(6)'last_event, tpd_C_PCOUT((2303 - 19)- 48*41), true),
			77 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 19)- 48*42), true),
			78 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 19)- 48*43), true),
			79 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 19)- 48*44), true),
			80 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 19)- 48*45), true),
			81 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 19)- 48*46), true),
			82 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 19)- 48*47), true),
			83 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(28), true),
			84 => (D_dly(17)'last_event, tpd_D_PCOUT((863 - 19)- 48*0), true),
			85 => (D_dly(16)'last_event, tpd_D_PCOUT((863 - 19)- 48*1), true),
			86 => (D_dly(15)'last_event, tpd_D_PCOUT((863 - 19)- 48*2), true),
			87 => (D_dly(14)'last_event, tpd_D_PCOUT((863 - 19)- 48*3), true),
			88 => (D_dly(13)'last_event, tpd_D_PCOUT((863 - 19)- 48*4), true),
			89 => (D_dly(12)'last_event, tpd_D_PCOUT((863 - 19)- 48*5), true),
			90 => (D_dly(11)'last_event, tpd_D_PCOUT((863 - 19)- 48*6), true),
			91 => (D_dly(10)'last_event, tpd_D_PCOUT((863 - 19)- 48*7), true),
			92 => (D_dly(9)'last_event, tpd_D_PCOUT((863 - 19)- 48*8), true),
			93 => (D_dly(8)'last_event, tpd_D_PCOUT((863 - 19)- 48*9), true),
			94 => (D_dly(7)'last_event, tpd_D_PCOUT((863 - 19)- 48*10), true),
			95 => (D_dly(6)'last_event, tpd_D_PCOUT((863 - 19)- 48*11), true),
			96 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 19)- 48*12), true),
			97 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 19)- 48*13), true),
			98 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 19)- 48*14), true),
			99 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 19)- 48*15), true),
			100 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 19)- 48*16), true),
			101 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 19)- 48*17), true),
			102 => (OPMODE_dly(7)'last_event, tpd_OPMODE_PCOUT((383 - 19)- 48*0), true),
			103 => (OPMODE_dly(6)'last_event, tpd_OPMODE_PCOUT((383 - 19)- 48*1), true),
			104 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 19)- 48*2), true),
			105 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 19)- 48*3), true),
			106 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 19)- 48*4), true),
			107 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 19)- 48*5), true),
			108 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 19)- 48*6), true),
			109 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 19)- 48*7), true),
			110 => (PCIN_dly(28)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*19), true),
			111 => (PCIN_dly(27)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*20), true),
			112 => (PCIN_dly(26)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*21), true),
			113 => (PCIN_dly(25)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*22), true),
			114 => (PCIN_dly(24)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*23), true),
			115 => (PCIN_dly(23)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*24), true),
			116 => (PCIN_dly(22)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*25), true),
			117 => (PCIN_dly(21)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*26), true),
			118 => (PCIN_dly(20)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*27), true),
			119 => (PCIN_dly(19)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*28), true),
			120 => (PCIN_dly(18)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*29), true),
			121 => (PCIN_dly(17)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*30), true),
			122 => (PCIN_dly(16)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*31), true),
			123 => (PCIN_dly(15)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*32), true),
			124 => (PCIN_dly(14)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*33), true),
			125 => (PCIN_dly(13)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*34), true),
			126 => (PCIN_dly(12)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*35), true),
			127 => (PCIN_dly(11)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*36), true),
			128 => (PCIN_dly(10)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*37), true),
			129 => (PCIN_dly(9)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*38), true),
			130 => (PCIN_dly(8)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*39), true),
			131 => (PCIN_dly(7)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*40), true),
			132 => (PCIN_dly(6)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*41), true),
			133 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*42), true),
			134 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*43), true),
			135 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*44), true),
			136 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*45), true),
			137 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*46), true),
			138 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 19)- 48*47), true),
			139 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(28), true),
			140 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(28), true),
			141 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(28), true),
			142 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(28), true),
			143 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(28), true),
			144 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(28), true),
			145 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(28), true),
			146 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(28), true),
			147 => (CLK_dly'last_event, tpd_CLK_PCOUT(28), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(27),
         GlitchData	=> PCOUT_GlitchData(27),
         OutSignalName	=> "PCOUT(27)",
         OutTemp	=> PCOUT_zd(27),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_PCOUT((863 - 20)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_PCOUT((863 - 20)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_PCOUT((863 - 20)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_PCOUT((863 - 20)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_PCOUT((863 - 20)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_PCOUT((863 - 20)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_PCOUT((863 - 20)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_PCOUT((863 - 20)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_PCOUT((863 - 20)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_PCOUT((863 - 20)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_PCOUT((863 - 20)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_PCOUT((863 - 20)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 20)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 20)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 20)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 20)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 20)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 20)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_PCOUT((863 - 20)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_PCOUT((863 - 20)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_PCOUT((863 - 20)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_PCOUT((863 - 20)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_PCOUT((863 - 20)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_PCOUT((863 - 20)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_PCOUT((863 - 20)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_PCOUT((863 - 20)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_PCOUT((863 - 20)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_PCOUT((863 - 20)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_PCOUT((863 - 20)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_PCOUT((863 - 20)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 20)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 20)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 20)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 20)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 20)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 20)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_PCOUT((863 - 20)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_PCOUT((863 - 20)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_PCOUT((863 - 20)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_PCOUT((863 - 20)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_PCOUT((863 - 20)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_PCOUT((863 - 20)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_PCOUT((863 - 20)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_PCOUT((863 - 20)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_PCOUT((863 - 20)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_PCOUT((863 - 20)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_PCOUT((863 - 20)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_PCOUT((863 - 20)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 20)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 20)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 20)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 20)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 20)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 20)- 48*17), true),
			54 => (C_dly(27)'last_event, tpd_C_PCOUT((2303 - 20)- 48*20), true),
			55 => (C_dly(26)'last_event, tpd_C_PCOUT((2303 - 20)- 48*21), true),
			56 => (C_dly(25)'last_event, tpd_C_PCOUT((2303 - 20)- 48*22), true),
			57 => (C_dly(24)'last_event, tpd_C_PCOUT((2303 - 20)- 48*23), true),
			58 => (C_dly(23)'last_event, tpd_C_PCOUT((2303 - 20)- 48*24), true),
			59 => (C_dly(22)'last_event, tpd_C_PCOUT((2303 - 20)- 48*25), true),
			60 => (C_dly(21)'last_event, tpd_C_PCOUT((2303 - 20)- 48*26), true),
			61 => (C_dly(20)'last_event, tpd_C_PCOUT((2303 - 20)- 48*27), true),
			62 => (C_dly(19)'last_event, tpd_C_PCOUT((2303 - 20)- 48*28), true),
			63 => (C_dly(18)'last_event, tpd_C_PCOUT((2303 - 20)- 48*29), true),
			64 => (C_dly(17)'last_event, tpd_C_PCOUT((2303 - 20)- 48*30), true),
			65 => (C_dly(16)'last_event, tpd_C_PCOUT((2303 - 20)- 48*31), true),
			66 => (C_dly(15)'last_event, tpd_C_PCOUT((2303 - 20)- 48*32), true),
			67 => (C_dly(14)'last_event, tpd_C_PCOUT((2303 - 20)- 48*33), true),
			68 => (C_dly(13)'last_event, tpd_C_PCOUT((2303 - 20)- 48*34), true),
			69 => (C_dly(12)'last_event, tpd_C_PCOUT((2303 - 20)- 48*35), true),
			70 => (C_dly(11)'last_event, tpd_C_PCOUT((2303 - 20)- 48*36), true),
			71 => (C_dly(10)'last_event, tpd_C_PCOUT((2303 - 20)- 48*37), true),
			72 => (C_dly(9)'last_event, tpd_C_PCOUT((2303 - 20)- 48*38), true),
			73 => (C_dly(8)'last_event, tpd_C_PCOUT((2303 - 20)- 48*39), true),
			74 => (C_dly(7)'last_event, tpd_C_PCOUT((2303 - 20)- 48*40), true),
			75 => (C_dly(6)'last_event, tpd_C_PCOUT((2303 - 20)- 48*41), true),
			76 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 20)- 48*42), true),
			77 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 20)- 48*43), true),
			78 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 20)- 48*44), true),
			79 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 20)- 48*45), true),
			80 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 20)- 48*46), true),
			81 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 20)- 48*47), true),
			82 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(27), true),
			83 => (D_dly(17)'last_event, tpd_D_PCOUT((863 - 20)- 48*0), true),
			84 => (D_dly(16)'last_event, tpd_D_PCOUT((863 - 20)- 48*1), true),
			85 => (D_dly(15)'last_event, tpd_D_PCOUT((863 - 20)- 48*2), true),
			86 => (D_dly(14)'last_event, tpd_D_PCOUT((863 - 20)- 48*3), true),
			87 => (D_dly(13)'last_event, tpd_D_PCOUT((863 - 20)- 48*4), true),
			88 => (D_dly(12)'last_event, tpd_D_PCOUT((863 - 20)- 48*5), true),
			89 => (D_dly(11)'last_event, tpd_D_PCOUT((863 - 20)- 48*6), true),
			90 => (D_dly(10)'last_event, tpd_D_PCOUT((863 - 20)- 48*7), true),
			91 => (D_dly(9)'last_event, tpd_D_PCOUT((863 - 20)- 48*8), true),
			92 => (D_dly(8)'last_event, tpd_D_PCOUT((863 - 20)- 48*9), true),
			93 => (D_dly(7)'last_event, tpd_D_PCOUT((863 - 20)- 48*10), true),
			94 => (D_dly(6)'last_event, tpd_D_PCOUT((863 - 20)- 48*11), true),
			95 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 20)- 48*12), true),
			96 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 20)- 48*13), true),
			97 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 20)- 48*14), true),
			98 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 20)- 48*15), true),
			99 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 20)- 48*16), true),
			100 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 20)- 48*17), true),
			101 => (OPMODE_dly(7)'last_event, tpd_OPMODE_PCOUT((383 - 20)- 48*0), true),
			102 => (OPMODE_dly(6)'last_event, tpd_OPMODE_PCOUT((383 - 20)- 48*1), true),
			103 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 20)- 48*2), true),
			104 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 20)- 48*3), true),
			105 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 20)- 48*4), true),
			106 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 20)- 48*5), true),
			107 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 20)- 48*6), true),
			108 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 20)- 48*7), true),
			109 => (PCIN_dly(27)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*20), true),
			110 => (PCIN_dly(26)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*21), true),
			111 => (PCIN_dly(25)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*22), true),
			112 => (PCIN_dly(24)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*23), true),
			113 => (PCIN_dly(23)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*24), true),
			114 => (PCIN_dly(22)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*25), true),
			115 => (PCIN_dly(21)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*26), true),
			116 => (PCIN_dly(20)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*27), true),
			117 => (PCIN_dly(19)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*28), true),
			118 => (PCIN_dly(18)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*29), true),
			119 => (PCIN_dly(17)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*30), true),
			120 => (PCIN_dly(16)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*31), true),
			121 => (PCIN_dly(15)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*32), true),
			122 => (PCIN_dly(14)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*33), true),
			123 => (PCIN_dly(13)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*34), true),
			124 => (PCIN_dly(12)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*35), true),
			125 => (PCIN_dly(11)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*36), true),
			126 => (PCIN_dly(10)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*37), true),
			127 => (PCIN_dly(9)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*38), true),
			128 => (PCIN_dly(8)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*39), true),
			129 => (PCIN_dly(7)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*40), true),
			130 => (PCIN_dly(6)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*41), true),
			131 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*42), true),
			132 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*43), true),
			133 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*44), true),
			134 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*45), true),
			135 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*46), true),
			136 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 20)- 48*47), true),
			137 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(27), true),
			138 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(27), true),
			139 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(27), true),
			140 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(27), true),
			141 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(27), true),
			142 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(27), true),
			143 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(27), true),
			144 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(27), true),
			145 => (CLK_dly'last_event, tpd_CLK_PCOUT(27), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(26),
         GlitchData	=> PCOUT_GlitchData(26),
         OutSignalName	=> "PCOUT(26)",
         OutTemp	=> PCOUT_zd(26),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_PCOUT((863 - 21)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_PCOUT((863 - 21)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_PCOUT((863 - 21)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_PCOUT((863 - 21)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_PCOUT((863 - 21)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_PCOUT((863 - 21)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_PCOUT((863 - 21)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_PCOUT((863 - 21)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_PCOUT((863 - 21)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_PCOUT((863 - 21)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_PCOUT((863 - 21)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_PCOUT((863 - 21)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 21)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 21)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 21)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 21)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 21)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 21)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_PCOUT((863 - 21)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_PCOUT((863 - 21)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_PCOUT((863 - 21)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_PCOUT((863 - 21)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_PCOUT((863 - 21)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_PCOUT((863 - 21)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_PCOUT((863 - 21)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_PCOUT((863 - 21)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_PCOUT((863 - 21)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_PCOUT((863 - 21)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_PCOUT((863 - 21)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_PCOUT((863 - 21)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 21)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 21)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 21)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 21)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 21)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 21)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_PCOUT((863 - 21)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_PCOUT((863 - 21)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_PCOUT((863 - 21)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_PCOUT((863 - 21)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_PCOUT((863 - 21)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_PCOUT((863 - 21)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_PCOUT((863 - 21)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_PCOUT((863 - 21)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_PCOUT((863 - 21)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_PCOUT((863 - 21)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_PCOUT((863 - 21)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_PCOUT((863 - 21)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 21)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 21)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 21)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 21)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 21)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 21)- 48*17), true),
			54 => (C_dly(26)'last_event, tpd_C_PCOUT((2303 - 21)- 48*21), true),
			55 => (C_dly(25)'last_event, tpd_C_PCOUT((2303 - 21)- 48*22), true),
			56 => (C_dly(24)'last_event, tpd_C_PCOUT((2303 - 21)- 48*23), true),
			57 => (C_dly(23)'last_event, tpd_C_PCOUT((2303 - 21)- 48*24), true),
			58 => (C_dly(22)'last_event, tpd_C_PCOUT((2303 - 21)- 48*25), true),
			59 => (C_dly(21)'last_event, tpd_C_PCOUT((2303 - 21)- 48*26), true),
			60 => (C_dly(20)'last_event, tpd_C_PCOUT((2303 - 21)- 48*27), true),
			61 => (C_dly(19)'last_event, tpd_C_PCOUT((2303 - 21)- 48*28), true),
			62 => (C_dly(18)'last_event, tpd_C_PCOUT((2303 - 21)- 48*29), true),
			63 => (C_dly(17)'last_event, tpd_C_PCOUT((2303 - 21)- 48*30), true),
			64 => (C_dly(16)'last_event, tpd_C_PCOUT((2303 - 21)- 48*31), true),
			65 => (C_dly(15)'last_event, tpd_C_PCOUT((2303 - 21)- 48*32), true),
			66 => (C_dly(14)'last_event, tpd_C_PCOUT((2303 - 21)- 48*33), true),
			67 => (C_dly(13)'last_event, tpd_C_PCOUT((2303 - 21)- 48*34), true),
			68 => (C_dly(12)'last_event, tpd_C_PCOUT((2303 - 21)- 48*35), true),
			69 => (C_dly(11)'last_event, tpd_C_PCOUT((2303 - 21)- 48*36), true),
			70 => (C_dly(10)'last_event, tpd_C_PCOUT((2303 - 21)- 48*37), true),
			71 => (C_dly(9)'last_event, tpd_C_PCOUT((2303 - 21)- 48*38), true),
			72 => (C_dly(8)'last_event, tpd_C_PCOUT((2303 - 21)- 48*39), true),
			73 => (C_dly(7)'last_event, tpd_C_PCOUT((2303 - 21)- 48*40), true),
			74 => (C_dly(6)'last_event, tpd_C_PCOUT((2303 - 21)- 48*41), true),
			75 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 21)- 48*42), true),
			76 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 21)- 48*43), true),
			77 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 21)- 48*44), true),
			78 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 21)- 48*45), true),
			79 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 21)- 48*46), true),
			80 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 21)- 48*47), true),
			81 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(26), true),
			82 => (D_dly(17)'last_event, tpd_D_PCOUT((863 - 21)- 48*0), true),
			83 => (D_dly(16)'last_event, tpd_D_PCOUT((863 - 21)- 48*1), true),
			84 => (D_dly(15)'last_event, tpd_D_PCOUT((863 - 21)- 48*2), true),
			85 => (D_dly(14)'last_event, tpd_D_PCOUT((863 - 21)- 48*3), true),
			86 => (D_dly(13)'last_event, tpd_D_PCOUT((863 - 21)- 48*4), true),
			87 => (D_dly(12)'last_event, tpd_D_PCOUT((863 - 21)- 48*5), true),
			88 => (D_dly(11)'last_event, tpd_D_PCOUT((863 - 21)- 48*6), true),
			89 => (D_dly(10)'last_event, tpd_D_PCOUT((863 - 21)- 48*7), true),
			90 => (D_dly(9)'last_event, tpd_D_PCOUT((863 - 21)- 48*8), true),
			91 => (D_dly(8)'last_event, tpd_D_PCOUT((863 - 21)- 48*9), true),
			92 => (D_dly(7)'last_event, tpd_D_PCOUT((863 - 21)- 48*10), true),
			93 => (D_dly(6)'last_event, tpd_D_PCOUT((863 - 21)- 48*11), true),
			94 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 21)- 48*12), true),
			95 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 21)- 48*13), true),
			96 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 21)- 48*14), true),
			97 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 21)- 48*15), true),
			98 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 21)- 48*16), true),
			99 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 21)- 48*17), true),
			100 => (OPMODE_dly(7)'last_event, tpd_OPMODE_PCOUT((383 - 21)- 48*0), true),
			101 => (OPMODE_dly(6)'last_event, tpd_OPMODE_PCOUT((383 - 21)- 48*1), true),
			102 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 21)- 48*2), true),
			103 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 21)- 48*3), true),
			104 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 21)- 48*4), true),
			105 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 21)- 48*5), true),
			106 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 21)- 48*6), true),
			107 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 21)- 48*7), true),
			108 => (PCIN_dly(26)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*21), true),
			109 => (PCIN_dly(25)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*22), true),
			110 => (PCIN_dly(24)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*23), true),
			111 => (PCIN_dly(23)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*24), true),
			112 => (PCIN_dly(22)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*25), true),
			113 => (PCIN_dly(21)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*26), true),
			114 => (PCIN_dly(20)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*27), true),
			115 => (PCIN_dly(19)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*28), true),
			116 => (PCIN_dly(18)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*29), true),
			117 => (PCIN_dly(17)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*30), true),
			118 => (PCIN_dly(16)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*31), true),
			119 => (PCIN_dly(15)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*32), true),
			120 => (PCIN_dly(14)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*33), true),
			121 => (PCIN_dly(13)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*34), true),
			122 => (PCIN_dly(12)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*35), true),
			123 => (PCIN_dly(11)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*36), true),
			124 => (PCIN_dly(10)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*37), true),
			125 => (PCIN_dly(9)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*38), true),
			126 => (PCIN_dly(8)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*39), true),
			127 => (PCIN_dly(7)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*40), true),
			128 => (PCIN_dly(6)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*41), true),
			129 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*42), true),
			130 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*43), true),
			131 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*44), true),
			132 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*45), true),
			133 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*46), true),
			134 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 21)- 48*47), true),
			135 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(26), true),
			136 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(26), true),
			137 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(26), true),
			138 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(26), true),
			139 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(26), true),
			140 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(26), true),
			141 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(26), true),
			142 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(26), true),
			143 => (CLK_dly'last_event, tpd_CLK_PCOUT(26), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(25),
         GlitchData	=> PCOUT_GlitchData(25),
         OutSignalName	=> "PCOUT(25)",
         OutTemp	=> PCOUT_zd(25),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_PCOUT((863 - 22)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_PCOUT((863 - 22)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_PCOUT((863 - 22)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_PCOUT((863 - 22)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_PCOUT((863 - 22)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_PCOUT((863 - 22)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_PCOUT((863 - 22)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_PCOUT((863 - 22)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_PCOUT((863 - 22)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_PCOUT((863 - 22)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_PCOUT((863 - 22)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_PCOUT((863 - 22)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 22)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 22)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 22)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 22)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 22)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 22)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_PCOUT((863 - 22)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_PCOUT((863 - 22)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_PCOUT((863 - 22)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_PCOUT((863 - 22)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_PCOUT((863 - 22)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_PCOUT((863 - 22)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_PCOUT((863 - 22)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_PCOUT((863 - 22)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_PCOUT((863 - 22)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_PCOUT((863 - 22)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_PCOUT((863 - 22)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_PCOUT((863 - 22)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 22)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 22)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 22)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 22)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 22)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 22)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_PCOUT((863 - 22)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_PCOUT((863 - 22)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_PCOUT((863 - 22)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_PCOUT((863 - 22)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_PCOUT((863 - 22)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_PCOUT((863 - 22)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_PCOUT((863 - 22)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_PCOUT((863 - 22)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_PCOUT((863 - 22)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_PCOUT((863 - 22)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_PCOUT((863 - 22)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_PCOUT((863 - 22)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 22)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 22)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 22)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 22)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 22)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 22)- 48*17), true),
			54 => (C_dly(25)'last_event, tpd_C_PCOUT((2303 - 22)- 48*22), true),
			55 => (C_dly(24)'last_event, tpd_C_PCOUT((2303 - 22)- 48*23), true),
			56 => (C_dly(23)'last_event, tpd_C_PCOUT((2303 - 22)- 48*24), true),
			57 => (C_dly(22)'last_event, tpd_C_PCOUT((2303 - 22)- 48*25), true),
			58 => (C_dly(21)'last_event, tpd_C_PCOUT((2303 - 22)- 48*26), true),
			59 => (C_dly(20)'last_event, tpd_C_PCOUT((2303 - 22)- 48*27), true),
			60 => (C_dly(19)'last_event, tpd_C_PCOUT((2303 - 22)- 48*28), true),
			61 => (C_dly(18)'last_event, tpd_C_PCOUT((2303 - 22)- 48*29), true),
			62 => (C_dly(17)'last_event, tpd_C_PCOUT((2303 - 22)- 48*30), true),
			63 => (C_dly(16)'last_event, tpd_C_PCOUT((2303 - 22)- 48*31), true),
			64 => (C_dly(15)'last_event, tpd_C_PCOUT((2303 - 22)- 48*32), true),
			65 => (C_dly(14)'last_event, tpd_C_PCOUT((2303 - 22)- 48*33), true),
			66 => (C_dly(13)'last_event, tpd_C_PCOUT((2303 - 22)- 48*34), true),
			67 => (C_dly(12)'last_event, tpd_C_PCOUT((2303 - 22)- 48*35), true),
			68 => (C_dly(11)'last_event, tpd_C_PCOUT((2303 - 22)- 48*36), true),
			69 => (C_dly(10)'last_event, tpd_C_PCOUT((2303 - 22)- 48*37), true),
			70 => (C_dly(9)'last_event, tpd_C_PCOUT((2303 - 22)- 48*38), true),
			71 => (C_dly(8)'last_event, tpd_C_PCOUT((2303 - 22)- 48*39), true),
			72 => (C_dly(7)'last_event, tpd_C_PCOUT((2303 - 22)- 48*40), true),
			73 => (C_dly(6)'last_event, tpd_C_PCOUT((2303 - 22)- 48*41), true),
			74 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 22)- 48*42), true),
			75 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 22)- 48*43), true),
			76 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 22)- 48*44), true),
			77 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 22)- 48*45), true),
			78 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 22)- 48*46), true),
			79 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 22)- 48*47), true),
			80 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(25), true),
			81 => (D_dly(17)'last_event, tpd_D_PCOUT((863 - 22)- 48*0), true),
			82 => (D_dly(16)'last_event, tpd_D_PCOUT((863 - 22)- 48*1), true),
			83 => (D_dly(15)'last_event, tpd_D_PCOUT((863 - 22)- 48*2), true),
			84 => (D_dly(14)'last_event, tpd_D_PCOUT((863 - 22)- 48*3), true),
			85 => (D_dly(13)'last_event, tpd_D_PCOUT((863 - 22)- 48*4), true),
			86 => (D_dly(12)'last_event, tpd_D_PCOUT((863 - 22)- 48*5), true),
			87 => (D_dly(11)'last_event, tpd_D_PCOUT((863 - 22)- 48*6), true),
			88 => (D_dly(10)'last_event, tpd_D_PCOUT((863 - 22)- 48*7), true),
			89 => (D_dly(9)'last_event, tpd_D_PCOUT((863 - 22)- 48*8), true),
			90 => (D_dly(8)'last_event, tpd_D_PCOUT((863 - 22)- 48*9), true),
			91 => (D_dly(7)'last_event, tpd_D_PCOUT((863 - 22)- 48*10), true),
			92 => (D_dly(6)'last_event, tpd_D_PCOUT((863 - 22)- 48*11), true),
			93 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 22)- 48*12), true),
			94 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 22)- 48*13), true),
			95 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 22)- 48*14), true),
			96 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 22)- 48*15), true),
			97 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 22)- 48*16), true),
			98 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 22)- 48*17), true),
			99 => (OPMODE_dly(7)'last_event, tpd_OPMODE_PCOUT((383 - 22)- 48*0), true),
			100 => (OPMODE_dly(6)'last_event, tpd_OPMODE_PCOUT((383 - 22)- 48*1), true),
			101 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 22)- 48*2), true),
			102 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 22)- 48*3), true),
			103 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 22)- 48*4), true),
			104 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 22)- 48*5), true),
			105 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 22)- 48*6), true),
			106 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 22)- 48*7), true),
			107 => (PCIN_dly(25)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*22), true),
			108 => (PCIN_dly(24)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*23), true),
			109 => (PCIN_dly(23)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*24), true),
			110 => (PCIN_dly(22)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*25), true),
			111 => (PCIN_dly(21)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*26), true),
			112 => (PCIN_dly(20)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*27), true),
			113 => (PCIN_dly(19)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*28), true),
			114 => (PCIN_dly(18)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*29), true),
			115 => (PCIN_dly(17)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*30), true),
			116 => (PCIN_dly(16)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*31), true),
			117 => (PCIN_dly(15)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*32), true),
			118 => (PCIN_dly(14)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*33), true),
			119 => (PCIN_dly(13)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*34), true),
			120 => (PCIN_dly(12)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*35), true),
			121 => (PCIN_dly(11)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*36), true),
			122 => (PCIN_dly(10)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*37), true),
			123 => (PCIN_dly(9)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*38), true),
			124 => (PCIN_dly(8)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*39), true),
			125 => (PCIN_dly(7)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*40), true),
			126 => (PCIN_dly(6)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*41), true),
			127 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*42), true),
			128 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*43), true),
			129 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*44), true),
			130 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*45), true),
			131 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*46), true),
			132 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 22)- 48*47), true),
			133 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(25), true),
			134 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(25), true),
			135 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(25), true),
			136 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(25), true),
			137 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(25), true),
			138 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(25), true),
			139 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(25), true),
			140 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(25), true),
			141 => (CLK_dly'last_event, tpd_CLK_PCOUT(25), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(24),
         GlitchData	=> PCOUT_GlitchData(24),
         OutSignalName	=> "PCOUT(24)",
         OutTemp	=> PCOUT_zd(24),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_PCOUT((863 - 23)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_PCOUT((863 - 23)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_PCOUT((863 - 23)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_PCOUT((863 - 23)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_PCOUT((863 - 23)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_PCOUT((863 - 23)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_PCOUT((863 - 23)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_PCOUT((863 - 23)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_PCOUT((863 - 23)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_PCOUT((863 - 23)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_PCOUT((863 - 23)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_PCOUT((863 - 23)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 23)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 23)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 23)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 23)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 23)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 23)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_PCOUT((863 - 23)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_PCOUT((863 - 23)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_PCOUT((863 - 23)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_PCOUT((863 - 23)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_PCOUT((863 - 23)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_PCOUT((863 - 23)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_PCOUT((863 - 23)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_PCOUT((863 - 23)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_PCOUT((863 - 23)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_PCOUT((863 - 23)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_PCOUT((863 - 23)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_PCOUT((863 - 23)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 23)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 23)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 23)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 23)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 23)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 23)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_PCOUT((863 - 23)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_PCOUT((863 - 23)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_PCOUT((863 - 23)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_PCOUT((863 - 23)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_PCOUT((863 - 23)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_PCOUT((863 - 23)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_PCOUT((863 - 23)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_PCOUT((863 - 23)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_PCOUT((863 - 23)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_PCOUT((863 - 23)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_PCOUT((863 - 23)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_PCOUT((863 - 23)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 23)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 23)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 23)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 23)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 23)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 23)- 48*17), true),
			54 => (C_dly(24)'last_event, tpd_C_PCOUT((2303 - 23)- 48*23), true),
			55 => (C_dly(23)'last_event, tpd_C_PCOUT((2303 - 23)- 48*24), true),
			56 => (C_dly(22)'last_event, tpd_C_PCOUT((2303 - 23)- 48*25), true),
			57 => (C_dly(21)'last_event, tpd_C_PCOUT((2303 - 23)- 48*26), true),
			58 => (C_dly(20)'last_event, tpd_C_PCOUT((2303 - 23)- 48*27), true),
			59 => (C_dly(19)'last_event, tpd_C_PCOUT((2303 - 23)- 48*28), true),
			60 => (C_dly(18)'last_event, tpd_C_PCOUT((2303 - 23)- 48*29), true),
			61 => (C_dly(17)'last_event, tpd_C_PCOUT((2303 - 23)- 48*30), true),
			62 => (C_dly(16)'last_event, tpd_C_PCOUT((2303 - 23)- 48*31), true),
			63 => (C_dly(15)'last_event, tpd_C_PCOUT((2303 - 23)- 48*32), true),
			64 => (C_dly(14)'last_event, tpd_C_PCOUT((2303 - 23)- 48*33), true),
			65 => (C_dly(13)'last_event, tpd_C_PCOUT((2303 - 23)- 48*34), true),
			66 => (C_dly(12)'last_event, tpd_C_PCOUT((2303 - 23)- 48*35), true),
			67 => (C_dly(11)'last_event, tpd_C_PCOUT((2303 - 23)- 48*36), true),
			68 => (C_dly(10)'last_event, tpd_C_PCOUT((2303 - 23)- 48*37), true),
			69 => (C_dly(9)'last_event, tpd_C_PCOUT((2303 - 23)- 48*38), true),
			70 => (C_dly(8)'last_event, tpd_C_PCOUT((2303 - 23)- 48*39), true),
			71 => (C_dly(7)'last_event, tpd_C_PCOUT((2303 - 23)- 48*40), true),
			72 => (C_dly(6)'last_event, tpd_C_PCOUT((2303 - 23)- 48*41), true),
			73 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 23)- 48*42), true),
			74 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 23)- 48*43), true),
			75 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 23)- 48*44), true),
			76 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 23)- 48*45), true),
			77 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 23)- 48*46), true),
			78 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 23)- 48*47), true),
			79 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(24), true),
			80 => (D_dly(17)'last_event, tpd_D_PCOUT((863 - 23)- 48*0), true),
			81 => (D_dly(16)'last_event, tpd_D_PCOUT((863 - 23)- 48*1), true),
			82 => (D_dly(15)'last_event, tpd_D_PCOUT((863 - 23)- 48*2), true),
			83 => (D_dly(14)'last_event, tpd_D_PCOUT((863 - 23)- 48*3), true),
			84 => (D_dly(13)'last_event, tpd_D_PCOUT((863 - 23)- 48*4), true),
			85 => (D_dly(12)'last_event, tpd_D_PCOUT((863 - 23)- 48*5), true),
			86 => (D_dly(11)'last_event, tpd_D_PCOUT((863 - 23)- 48*6), true),
			87 => (D_dly(10)'last_event, tpd_D_PCOUT((863 - 23)- 48*7), true),
			88 => (D_dly(9)'last_event, tpd_D_PCOUT((863 - 23)- 48*8), true),
			89 => (D_dly(8)'last_event, tpd_D_PCOUT((863 - 23)- 48*9), true),
			90 => (D_dly(7)'last_event, tpd_D_PCOUT((863 - 23)- 48*10), true),
			91 => (D_dly(6)'last_event, tpd_D_PCOUT((863 - 23)- 48*11), true),
			92 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 23)- 48*12), true),
			93 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 23)- 48*13), true),
			94 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 23)- 48*14), true),
			95 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 23)- 48*15), true),
			96 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 23)- 48*16), true),
			97 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 23)- 48*17), true),
			98 => (OPMODE_dly(7)'last_event, tpd_OPMODE_PCOUT((383 - 23)- 48*0), true),
			99 => (OPMODE_dly(6)'last_event, tpd_OPMODE_PCOUT((383 - 23)- 48*1), true),
			100 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 23)- 48*2), true),
			101 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 23)- 48*3), true),
			102 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 23)- 48*4), true),
			103 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 23)- 48*5), true),
			104 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 23)- 48*6), true),
			105 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 23)- 48*7), true),
			106 => (PCIN_dly(24)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*23), true),
			107 => (PCIN_dly(23)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*24), true),
			108 => (PCIN_dly(22)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*25), true),
			109 => (PCIN_dly(21)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*26), true),
			110 => (PCIN_dly(20)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*27), true),
			111 => (PCIN_dly(19)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*28), true),
			112 => (PCIN_dly(18)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*29), true),
			113 => (PCIN_dly(17)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*30), true),
			114 => (PCIN_dly(16)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*31), true),
			115 => (PCIN_dly(15)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*32), true),
			116 => (PCIN_dly(14)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*33), true),
			117 => (PCIN_dly(13)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*34), true),
			118 => (PCIN_dly(12)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*35), true),
			119 => (PCIN_dly(11)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*36), true),
			120 => (PCIN_dly(10)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*37), true),
			121 => (PCIN_dly(9)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*38), true),
			122 => (PCIN_dly(8)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*39), true),
			123 => (PCIN_dly(7)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*40), true),
			124 => (PCIN_dly(6)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*41), true),
			125 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*42), true),
			126 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*43), true),
			127 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*44), true),
			128 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*45), true),
			129 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*46), true),
			130 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 23)- 48*47), true),
			131 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(24), true),
			132 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(24), true),
			133 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(24), true),
			134 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(24), true),
			135 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(24), true),
			136 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(24), true),
			137 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(24), true),
			138 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(24), true),
			139 => (CLK_dly'last_event, tpd_CLK_PCOUT(24), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(23),
         GlitchData	=> PCOUT_GlitchData(23),
         OutSignalName	=> "PCOUT(23)",
         OutTemp	=> PCOUT_zd(23),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_PCOUT((863 - 24)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_PCOUT((863 - 24)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_PCOUT((863 - 24)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_PCOUT((863 - 24)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_PCOUT((863 - 24)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_PCOUT((863 - 24)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_PCOUT((863 - 24)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_PCOUT((863 - 24)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_PCOUT((863 - 24)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_PCOUT((863 - 24)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_PCOUT((863 - 24)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_PCOUT((863 - 24)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 24)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 24)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 24)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 24)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 24)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 24)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_PCOUT((863 - 24)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_PCOUT((863 - 24)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_PCOUT((863 - 24)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_PCOUT((863 - 24)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_PCOUT((863 - 24)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_PCOUT((863 - 24)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_PCOUT((863 - 24)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_PCOUT((863 - 24)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_PCOUT((863 - 24)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_PCOUT((863 - 24)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_PCOUT((863 - 24)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_PCOUT((863 - 24)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 24)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 24)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 24)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 24)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 24)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 24)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_PCOUT((863 - 24)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_PCOUT((863 - 24)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_PCOUT((863 - 24)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_PCOUT((863 - 24)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_PCOUT((863 - 24)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_PCOUT((863 - 24)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_PCOUT((863 - 24)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_PCOUT((863 - 24)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_PCOUT((863 - 24)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_PCOUT((863 - 24)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_PCOUT((863 - 24)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_PCOUT((863 - 24)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 24)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 24)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 24)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 24)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 24)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 24)- 48*17), true),
			54 => (C_dly(23)'last_event, tpd_C_PCOUT((2303 - 24)- 48*24), true),
			55 => (C_dly(22)'last_event, tpd_C_PCOUT((2303 - 24)- 48*25), true),
			56 => (C_dly(21)'last_event, tpd_C_PCOUT((2303 - 24)- 48*26), true),
			57 => (C_dly(20)'last_event, tpd_C_PCOUT((2303 - 24)- 48*27), true),
			58 => (C_dly(19)'last_event, tpd_C_PCOUT((2303 - 24)- 48*28), true),
			59 => (C_dly(18)'last_event, tpd_C_PCOUT((2303 - 24)- 48*29), true),
			60 => (C_dly(17)'last_event, tpd_C_PCOUT((2303 - 24)- 48*30), true),
			61 => (C_dly(16)'last_event, tpd_C_PCOUT((2303 - 24)- 48*31), true),
			62 => (C_dly(15)'last_event, tpd_C_PCOUT((2303 - 24)- 48*32), true),
			63 => (C_dly(14)'last_event, tpd_C_PCOUT((2303 - 24)- 48*33), true),
			64 => (C_dly(13)'last_event, tpd_C_PCOUT((2303 - 24)- 48*34), true),
			65 => (C_dly(12)'last_event, tpd_C_PCOUT((2303 - 24)- 48*35), true),
			66 => (C_dly(11)'last_event, tpd_C_PCOUT((2303 - 24)- 48*36), true),
			67 => (C_dly(10)'last_event, tpd_C_PCOUT((2303 - 24)- 48*37), true),
			68 => (C_dly(9)'last_event, tpd_C_PCOUT((2303 - 24)- 48*38), true),
			69 => (C_dly(8)'last_event, tpd_C_PCOUT((2303 - 24)- 48*39), true),
			70 => (C_dly(7)'last_event, tpd_C_PCOUT((2303 - 24)- 48*40), true),
			71 => (C_dly(6)'last_event, tpd_C_PCOUT((2303 - 24)- 48*41), true),
			72 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 24)- 48*42), true),
			73 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 24)- 48*43), true),
			74 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 24)- 48*44), true),
			75 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 24)- 48*45), true),
			76 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 24)- 48*46), true),
			77 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 24)- 48*47), true),
			78 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(23), true),
			79 => (D_dly(17)'last_event, tpd_D_PCOUT((863 - 24)- 48*0), true),
			80 => (D_dly(16)'last_event, tpd_D_PCOUT((863 - 24)- 48*1), true),
			81 => (D_dly(15)'last_event, tpd_D_PCOUT((863 - 24)- 48*2), true),
			82 => (D_dly(14)'last_event, tpd_D_PCOUT((863 - 24)- 48*3), true),
			83 => (D_dly(13)'last_event, tpd_D_PCOUT((863 - 24)- 48*4), true),
			84 => (D_dly(12)'last_event, tpd_D_PCOUT((863 - 24)- 48*5), true),
			85 => (D_dly(11)'last_event, tpd_D_PCOUT((863 - 24)- 48*6), true),
			86 => (D_dly(10)'last_event, tpd_D_PCOUT((863 - 24)- 48*7), true),
			87 => (D_dly(9)'last_event, tpd_D_PCOUT((863 - 24)- 48*8), true),
			88 => (D_dly(8)'last_event, tpd_D_PCOUT((863 - 24)- 48*9), true),
			89 => (D_dly(7)'last_event, tpd_D_PCOUT((863 - 24)- 48*10), true),
			90 => (D_dly(6)'last_event, tpd_D_PCOUT((863 - 24)- 48*11), true),
			91 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 24)- 48*12), true),
			92 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 24)- 48*13), true),
			93 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 24)- 48*14), true),
			94 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 24)- 48*15), true),
			95 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 24)- 48*16), true),
			96 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 24)- 48*17), true),
			97 => (OPMODE_dly(7)'last_event, tpd_OPMODE_PCOUT((383 - 24)- 48*0), true),
			98 => (OPMODE_dly(6)'last_event, tpd_OPMODE_PCOUT((383 - 24)- 48*1), true),
			99 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 24)- 48*2), true),
			100 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 24)- 48*3), true),
			101 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 24)- 48*4), true),
			102 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 24)- 48*5), true),
			103 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 24)- 48*6), true),
			104 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 24)- 48*7), true),
			105 => (PCIN_dly(23)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*24), true),
			106 => (PCIN_dly(22)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*25), true),
			107 => (PCIN_dly(21)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*26), true),
			108 => (PCIN_dly(20)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*27), true),
			109 => (PCIN_dly(19)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*28), true),
			110 => (PCIN_dly(18)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*29), true),
			111 => (PCIN_dly(17)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*30), true),
			112 => (PCIN_dly(16)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*31), true),
			113 => (PCIN_dly(15)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*32), true),
			114 => (PCIN_dly(14)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*33), true),
			115 => (PCIN_dly(13)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*34), true),
			116 => (PCIN_dly(12)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*35), true),
			117 => (PCIN_dly(11)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*36), true),
			118 => (PCIN_dly(10)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*37), true),
			119 => (PCIN_dly(9)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*38), true),
			120 => (PCIN_dly(8)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*39), true),
			121 => (PCIN_dly(7)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*40), true),
			122 => (PCIN_dly(6)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*41), true),
			123 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*42), true),
			124 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*43), true),
			125 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*44), true),
			126 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*45), true),
			127 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*46), true),
			128 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 24)- 48*47), true),
			129 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(23), true),
			130 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(23), true),
			131 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(23), true),
			132 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(23), true),
			133 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(23), true),
			134 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(23), true),
			135 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(23), true),
			136 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(23), true),
			137 => (CLK_dly'last_event, tpd_CLK_PCOUT(23), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(22),
         GlitchData	=> PCOUT_GlitchData(22),
         OutSignalName	=> "PCOUT(22)",
         OutTemp	=> PCOUT_zd(22),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_PCOUT((863 - 25)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_PCOUT((863 - 25)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_PCOUT((863 - 25)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_PCOUT((863 - 25)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_PCOUT((863 - 25)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_PCOUT((863 - 25)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_PCOUT((863 - 25)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_PCOUT((863 - 25)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_PCOUT((863 - 25)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_PCOUT((863 - 25)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_PCOUT((863 - 25)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_PCOUT((863 - 25)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 25)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 25)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 25)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 25)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 25)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 25)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_PCOUT((863 - 25)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_PCOUT((863 - 25)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_PCOUT((863 - 25)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_PCOUT((863 - 25)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_PCOUT((863 - 25)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_PCOUT((863 - 25)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_PCOUT((863 - 25)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_PCOUT((863 - 25)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_PCOUT((863 - 25)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_PCOUT((863 - 25)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_PCOUT((863 - 25)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_PCOUT((863 - 25)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 25)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 25)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 25)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 25)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 25)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 25)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_PCOUT((863 - 25)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_PCOUT((863 - 25)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_PCOUT((863 - 25)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_PCOUT((863 - 25)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_PCOUT((863 - 25)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_PCOUT((863 - 25)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_PCOUT((863 - 25)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_PCOUT((863 - 25)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_PCOUT((863 - 25)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_PCOUT((863 - 25)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_PCOUT((863 - 25)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_PCOUT((863 - 25)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 25)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 25)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 25)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 25)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 25)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 25)- 48*17), true),
			54 => (C_dly(22)'last_event, tpd_C_PCOUT((2303 - 25)- 48*25), true),
			55 => (C_dly(21)'last_event, tpd_C_PCOUT((2303 - 25)- 48*26), true),
			56 => (C_dly(20)'last_event, tpd_C_PCOUT((2303 - 25)- 48*27), true),
			57 => (C_dly(19)'last_event, tpd_C_PCOUT((2303 - 25)- 48*28), true),
			58 => (C_dly(18)'last_event, tpd_C_PCOUT((2303 - 25)- 48*29), true),
			59 => (C_dly(17)'last_event, tpd_C_PCOUT((2303 - 25)- 48*30), true),
			60 => (C_dly(16)'last_event, tpd_C_PCOUT((2303 - 25)- 48*31), true),
			61 => (C_dly(15)'last_event, tpd_C_PCOUT((2303 - 25)- 48*32), true),
			62 => (C_dly(14)'last_event, tpd_C_PCOUT((2303 - 25)- 48*33), true),
			63 => (C_dly(13)'last_event, tpd_C_PCOUT((2303 - 25)- 48*34), true),
			64 => (C_dly(12)'last_event, tpd_C_PCOUT((2303 - 25)- 48*35), true),
			65 => (C_dly(11)'last_event, tpd_C_PCOUT((2303 - 25)- 48*36), true),
			66 => (C_dly(10)'last_event, tpd_C_PCOUT((2303 - 25)- 48*37), true),
			67 => (C_dly(9)'last_event, tpd_C_PCOUT((2303 - 25)- 48*38), true),
			68 => (C_dly(8)'last_event, tpd_C_PCOUT((2303 - 25)- 48*39), true),
			69 => (C_dly(7)'last_event, tpd_C_PCOUT((2303 - 25)- 48*40), true),
			70 => (C_dly(6)'last_event, tpd_C_PCOUT((2303 - 25)- 48*41), true),
			71 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 25)- 48*42), true),
			72 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 25)- 48*43), true),
			73 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 25)- 48*44), true),
			74 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 25)- 48*45), true),
			75 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 25)- 48*46), true),
			76 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 25)- 48*47), true),
			77 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(22), true),
			78 => (D_dly(17)'last_event, tpd_D_PCOUT((863 - 25)- 48*0), true),
			79 => (D_dly(16)'last_event, tpd_D_PCOUT((863 - 25)- 48*1), true),
			80 => (D_dly(15)'last_event, tpd_D_PCOUT((863 - 25)- 48*2), true),
			81 => (D_dly(14)'last_event, tpd_D_PCOUT((863 - 25)- 48*3), true),
			82 => (D_dly(13)'last_event, tpd_D_PCOUT((863 - 25)- 48*4), true),
			83 => (D_dly(12)'last_event, tpd_D_PCOUT((863 - 25)- 48*5), true),
			84 => (D_dly(11)'last_event, tpd_D_PCOUT((863 - 25)- 48*6), true),
			85 => (D_dly(10)'last_event, tpd_D_PCOUT((863 - 25)- 48*7), true),
			86 => (D_dly(9)'last_event, tpd_D_PCOUT((863 - 25)- 48*8), true),
			87 => (D_dly(8)'last_event, tpd_D_PCOUT((863 - 25)- 48*9), true),
			88 => (D_dly(7)'last_event, tpd_D_PCOUT((863 - 25)- 48*10), true),
			89 => (D_dly(6)'last_event, tpd_D_PCOUT((863 - 25)- 48*11), true),
			90 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 25)- 48*12), true),
			91 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 25)- 48*13), true),
			92 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 25)- 48*14), true),
			93 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 25)- 48*15), true),
			94 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 25)- 48*16), true),
			95 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 25)- 48*17), true),
			96 => (OPMODE_dly(7)'last_event, tpd_OPMODE_PCOUT((383 - 25)- 48*0), true),
			97 => (OPMODE_dly(6)'last_event, tpd_OPMODE_PCOUT((383 - 25)- 48*1), true),
			98 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 25)- 48*2), true),
			99 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 25)- 48*3), true),
			100 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 25)- 48*4), true),
			101 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 25)- 48*5), true),
			102 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 25)- 48*6), true),
			103 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 25)- 48*7), true),
			104 => (PCIN_dly(22)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*25), true),
			105 => (PCIN_dly(21)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*26), true),
			106 => (PCIN_dly(20)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*27), true),
			107 => (PCIN_dly(19)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*28), true),
			108 => (PCIN_dly(18)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*29), true),
			109 => (PCIN_dly(17)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*30), true),
			110 => (PCIN_dly(16)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*31), true),
			111 => (PCIN_dly(15)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*32), true),
			112 => (PCIN_dly(14)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*33), true),
			113 => (PCIN_dly(13)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*34), true),
			114 => (PCIN_dly(12)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*35), true),
			115 => (PCIN_dly(11)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*36), true),
			116 => (PCIN_dly(10)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*37), true),
			117 => (PCIN_dly(9)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*38), true),
			118 => (PCIN_dly(8)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*39), true),
			119 => (PCIN_dly(7)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*40), true),
			120 => (PCIN_dly(6)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*41), true),
			121 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*42), true),
			122 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*43), true),
			123 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*44), true),
			124 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*45), true),
			125 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*46), true),
			126 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 25)- 48*47), true),
			127 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(22), true),
			128 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(22), true),
			129 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(22), true),
			130 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(22), true),
			131 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(22), true),
			132 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(22), true),
			133 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(22), true),
			134 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(22), true),
			135 => (CLK_dly'last_event, tpd_CLK_PCOUT(22), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(21),
         GlitchData	=> PCOUT_GlitchData(21),
         OutSignalName	=> "PCOUT(21)",
         OutTemp	=> PCOUT_zd(21),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_PCOUT((863 - 26)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_PCOUT((863 - 26)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_PCOUT((863 - 26)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_PCOUT((863 - 26)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_PCOUT((863 - 26)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_PCOUT((863 - 26)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_PCOUT((863 - 26)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_PCOUT((863 - 26)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_PCOUT((863 - 26)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_PCOUT((863 - 26)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_PCOUT((863 - 26)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_PCOUT((863 - 26)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 26)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 26)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 26)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 26)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 26)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 26)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_PCOUT((863 - 26)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_PCOUT((863 - 26)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_PCOUT((863 - 26)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_PCOUT((863 - 26)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_PCOUT((863 - 26)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_PCOUT((863 - 26)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_PCOUT((863 - 26)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_PCOUT((863 - 26)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_PCOUT((863 - 26)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_PCOUT((863 - 26)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_PCOUT((863 - 26)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_PCOUT((863 - 26)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 26)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 26)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 26)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 26)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 26)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 26)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_PCOUT((863 - 26)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_PCOUT((863 - 26)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_PCOUT((863 - 26)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_PCOUT((863 - 26)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_PCOUT((863 - 26)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_PCOUT((863 - 26)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_PCOUT((863 - 26)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_PCOUT((863 - 26)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_PCOUT((863 - 26)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_PCOUT((863 - 26)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_PCOUT((863 - 26)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_PCOUT((863 - 26)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 26)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 26)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 26)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 26)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 26)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 26)- 48*17), true),
			54 => (C_dly(21)'last_event, tpd_C_PCOUT((2303 - 26)- 48*26), true),
			55 => (C_dly(20)'last_event, tpd_C_PCOUT((2303 - 26)- 48*27), true),
			56 => (C_dly(19)'last_event, tpd_C_PCOUT((2303 - 26)- 48*28), true),
			57 => (C_dly(18)'last_event, tpd_C_PCOUT((2303 - 26)- 48*29), true),
			58 => (C_dly(17)'last_event, tpd_C_PCOUT((2303 - 26)- 48*30), true),
			59 => (C_dly(16)'last_event, tpd_C_PCOUT((2303 - 26)- 48*31), true),
			60 => (C_dly(15)'last_event, tpd_C_PCOUT((2303 - 26)- 48*32), true),
			61 => (C_dly(14)'last_event, tpd_C_PCOUT((2303 - 26)- 48*33), true),
			62 => (C_dly(13)'last_event, tpd_C_PCOUT((2303 - 26)- 48*34), true),
			63 => (C_dly(12)'last_event, tpd_C_PCOUT((2303 - 26)- 48*35), true),
			64 => (C_dly(11)'last_event, tpd_C_PCOUT((2303 - 26)- 48*36), true),
			65 => (C_dly(10)'last_event, tpd_C_PCOUT((2303 - 26)- 48*37), true),
			66 => (C_dly(9)'last_event, tpd_C_PCOUT((2303 - 26)- 48*38), true),
			67 => (C_dly(8)'last_event, tpd_C_PCOUT((2303 - 26)- 48*39), true),
			68 => (C_dly(7)'last_event, tpd_C_PCOUT((2303 - 26)- 48*40), true),
			69 => (C_dly(6)'last_event, tpd_C_PCOUT((2303 - 26)- 48*41), true),
			70 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 26)- 48*42), true),
			71 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 26)- 48*43), true),
			72 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 26)- 48*44), true),
			73 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 26)- 48*45), true),
			74 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 26)- 48*46), true),
			75 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 26)- 48*47), true),
			76 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(21), true),
			77 => (D_dly(17)'last_event, tpd_D_PCOUT((863 - 26)- 48*0), true),
			78 => (D_dly(16)'last_event, tpd_D_PCOUT((863 - 26)- 48*1), true),
			79 => (D_dly(15)'last_event, tpd_D_PCOUT((863 - 26)- 48*2), true),
			80 => (D_dly(14)'last_event, tpd_D_PCOUT((863 - 26)- 48*3), true),
			81 => (D_dly(13)'last_event, tpd_D_PCOUT((863 - 26)- 48*4), true),
			82 => (D_dly(12)'last_event, tpd_D_PCOUT((863 - 26)- 48*5), true),
			83 => (D_dly(11)'last_event, tpd_D_PCOUT((863 - 26)- 48*6), true),
			84 => (D_dly(10)'last_event, tpd_D_PCOUT((863 - 26)- 48*7), true),
			85 => (D_dly(9)'last_event, tpd_D_PCOUT((863 - 26)- 48*8), true),
			86 => (D_dly(8)'last_event, tpd_D_PCOUT((863 - 26)- 48*9), true),
			87 => (D_dly(7)'last_event, tpd_D_PCOUT((863 - 26)- 48*10), true),
			88 => (D_dly(6)'last_event, tpd_D_PCOUT((863 - 26)- 48*11), true),
			89 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 26)- 48*12), true),
			90 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 26)- 48*13), true),
			91 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 26)- 48*14), true),
			92 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 26)- 48*15), true),
			93 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 26)- 48*16), true),
			94 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 26)- 48*17), true),
			95 => (OPMODE_dly(7)'last_event, tpd_OPMODE_PCOUT((383 - 26)- 48*0), true),
			96 => (OPMODE_dly(6)'last_event, tpd_OPMODE_PCOUT((383 - 26)- 48*1), true),
			97 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 26)- 48*2), true),
			98 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 26)- 48*3), true),
			99 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 26)- 48*4), true),
			100 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 26)- 48*5), true),
			101 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 26)- 48*6), true),
			102 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 26)- 48*7), true),
			103 => (PCIN_dly(21)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*26), true),
			104 => (PCIN_dly(20)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*27), true),
			105 => (PCIN_dly(19)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*28), true),
			106 => (PCIN_dly(18)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*29), true),
			107 => (PCIN_dly(17)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*30), true),
			108 => (PCIN_dly(16)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*31), true),
			109 => (PCIN_dly(15)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*32), true),
			110 => (PCIN_dly(14)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*33), true),
			111 => (PCIN_dly(13)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*34), true),
			112 => (PCIN_dly(12)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*35), true),
			113 => (PCIN_dly(11)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*36), true),
			114 => (PCIN_dly(10)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*37), true),
			115 => (PCIN_dly(9)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*38), true),
			116 => (PCIN_dly(8)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*39), true),
			117 => (PCIN_dly(7)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*40), true),
			118 => (PCIN_dly(6)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*41), true),
			119 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*42), true),
			120 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*43), true),
			121 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*44), true),
			122 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*45), true),
			123 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*46), true),
			124 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 26)- 48*47), true),
			125 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(21), true),
			126 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(21), true),
			127 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(21), true),
			128 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(21), true),
			129 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(21), true),
			130 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(21), true),
			131 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(21), true),
			132 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(21), true),
			133 => (CLK_dly'last_event, tpd_CLK_PCOUT(21), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(20),
         GlitchData	=> PCOUT_GlitchData(20),
         OutSignalName	=> "PCOUT(20)",
         OutTemp	=> PCOUT_zd(20),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_PCOUT((863 - 27)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_PCOUT((863 - 27)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_PCOUT((863 - 27)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_PCOUT((863 - 27)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_PCOUT((863 - 27)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_PCOUT((863 - 27)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_PCOUT((863 - 27)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_PCOUT((863 - 27)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_PCOUT((863 - 27)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_PCOUT((863 - 27)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_PCOUT((863 - 27)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_PCOUT((863 - 27)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 27)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 27)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 27)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 27)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 27)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 27)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_PCOUT((863 - 27)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_PCOUT((863 - 27)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_PCOUT((863 - 27)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_PCOUT((863 - 27)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_PCOUT((863 - 27)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_PCOUT((863 - 27)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_PCOUT((863 - 27)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_PCOUT((863 - 27)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_PCOUT((863 - 27)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_PCOUT((863 - 27)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_PCOUT((863 - 27)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_PCOUT((863 - 27)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 27)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 27)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 27)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 27)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 27)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 27)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_PCOUT((863 - 27)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_PCOUT((863 - 27)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_PCOUT((863 - 27)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_PCOUT((863 - 27)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_PCOUT((863 - 27)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_PCOUT((863 - 27)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_PCOUT((863 - 27)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_PCOUT((863 - 27)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_PCOUT((863 - 27)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_PCOUT((863 - 27)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_PCOUT((863 - 27)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_PCOUT((863 - 27)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 27)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 27)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 27)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 27)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 27)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 27)- 48*17), true),
			54 => (C_dly(20)'last_event, tpd_C_PCOUT((2303 - 27)- 48*27), true),
			55 => (C_dly(19)'last_event, tpd_C_PCOUT((2303 - 27)- 48*28), true),
			56 => (C_dly(18)'last_event, tpd_C_PCOUT((2303 - 27)- 48*29), true),
			57 => (C_dly(17)'last_event, tpd_C_PCOUT((2303 - 27)- 48*30), true),
			58 => (C_dly(16)'last_event, tpd_C_PCOUT((2303 - 27)- 48*31), true),
			59 => (C_dly(15)'last_event, tpd_C_PCOUT((2303 - 27)- 48*32), true),
			60 => (C_dly(14)'last_event, tpd_C_PCOUT((2303 - 27)- 48*33), true),
			61 => (C_dly(13)'last_event, tpd_C_PCOUT((2303 - 27)- 48*34), true),
			62 => (C_dly(12)'last_event, tpd_C_PCOUT((2303 - 27)- 48*35), true),
			63 => (C_dly(11)'last_event, tpd_C_PCOUT((2303 - 27)- 48*36), true),
			64 => (C_dly(10)'last_event, tpd_C_PCOUT((2303 - 27)- 48*37), true),
			65 => (C_dly(9)'last_event, tpd_C_PCOUT((2303 - 27)- 48*38), true),
			66 => (C_dly(8)'last_event, tpd_C_PCOUT((2303 - 27)- 48*39), true),
			67 => (C_dly(7)'last_event, tpd_C_PCOUT((2303 - 27)- 48*40), true),
			68 => (C_dly(6)'last_event, tpd_C_PCOUT((2303 - 27)- 48*41), true),
			69 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 27)- 48*42), true),
			70 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 27)- 48*43), true),
			71 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 27)- 48*44), true),
			72 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 27)- 48*45), true),
			73 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 27)- 48*46), true),
			74 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 27)- 48*47), true),
			75 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(20), true),
			76 => (D_dly(17)'last_event, tpd_D_PCOUT((863 - 27)- 48*0), true),
			77 => (D_dly(16)'last_event, tpd_D_PCOUT((863 - 27)- 48*1), true),
			78 => (D_dly(15)'last_event, tpd_D_PCOUT((863 - 27)- 48*2), true),
			79 => (D_dly(14)'last_event, tpd_D_PCOUT((863 - 27)- 48*3), true),
			80 => (D_dly(13)'last_event, tpd_D_PCOUT((863 - 27)- 48*4), true),
			81 => (D_dly(12)'last_event, tpd_D_PCOUT((863 - 27)- 48*5), true),
			82 => (D_dly(11)'last_event, tpd_D_PCOUT((863 - 27)- 48*6), true),
			83 => (D_dly(10)'last_event, tpd_D_PCOUT((863 - 27)- 48*7), true),
			84 => (D_dly(9)'last_event, tpd_D_PCOUT((863 - 27)- 48*8), true),
			85 => (D_dly(8)'last_event, tpd_D_PCOUT((863 - 27)- 48*9), true),
			86 => (D_dly(7)'last_event, tpd_D_PCOUT((863 - 27)- 48*10), true),
			87 => (D_dly(6)'last_event, tpd_D_PCOUT((863 - 27)- 48*11), true),
			88 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 27)- 48*12), true),
			89 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 27)- 48*13), true),
			90 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 27)- 48*14), true),
			91 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 27)- 48*15), true),
			92 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 27)- 48*16), true),
			93 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 27)- 48*17), true),
			94 => (OPMODE_dly(7)'last_event, tpd_OPMODE_PCOUT((383 - 27)- 48*0), true),
			95 => (OPMODE_dly(6)'last_event, tpd_OPMODE_PCOUT((383 - 27)- 48*1), true),
			96 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 27)- 48*2), true),
			97 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 27)- 48*3), true),
			98 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 27)- 48*4), true),
			99 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 27)- 48*5), true),
			100 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 27)- 48*6), true),
			101 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 27)- 48*7), true),
			102 => (PCIN_dly(20)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*27), true),
			103 => (PCIN_dly(19)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*28), true),
			104 => (PCIN_dly(18)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*29), true),
			105 => (PCIN_dly(17)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*30), true),
			106 => (PCIN_dly(16)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*31), true),
			107 => (PCIN_dly(15)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*32), true),
			108 => (PCIN_dly(14)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*33), true),
			109 => (PCIN_dly(13)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*34), true),
			110 => (PCIN_dly(12)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*35), true),
			111 => (PCIN_dly(11)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*36), true),
			112 => (PCIN_dly(10)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*37), true),
			113 => (PCIN_dly(9)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*38), true),
			114 => (PCIN_dly(8)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*39), true),
			115 => (PCIN_dly(7)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*40), true),
			116 => (PCIN_dly(6)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*41), true),
			117 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*42), true),
			118 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*43), true),
			119 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*44), true),
			120 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*45), true),
			121 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*46), true),
			122 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 27)- 48*47), true),
			123 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(20), true),
			124 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(20), true),
			125 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(20), true),
			126 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(20), true),
			127 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(20), true),
			128 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(20), true),
			129 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(20), true),
			130 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(20), true),
			131 => (CLK_dly'last_event, tpd_CLK_PCOUT(20), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(19),
         GlitchData	=> PCOUT_GlitchData(19),
         OutSignalName	=> "PCOUT(19)",
         OutTemp	=> PCOUT_zd(19),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_PCOUT((863 - 28)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_PCOUT((863 - 28)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_PCOUT((863 - 28)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_PCOUT((863 - 28)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_PCOUT((863 - 28)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_PCOUT((863 - 28)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_PCOUT((863 - 28)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_PCOUT((863 - 28)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_PCOUT((863 - 28)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_PCOUT((863 - 28)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_PCOUT((863 - 28)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_PCOUT((863 - 28)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 28)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 28)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 28)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 28)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 28)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 28)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_PCOUT((863 - 28)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_PCOUT((863 - 28)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_PCOUT((863 - 28)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_PCOUT((863 - 28)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_PCOUT((863 - 28)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_PCOUT((863 - 28)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_PCOUT((863 - 28)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_PCOUT((863 - 28)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_PCOUT((863 - 28)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_PCOUT((863 - 28)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_PCOUT((863 - 28)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_PCOUT((863 - 28)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 28)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 28)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 28)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 28)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 28)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 28)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_PCOUT((863 - 28)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_PCOUT((863 - 28)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_PCOUT((863 - 28)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_PCOUT((863 - 28)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_PCOUT((863 - 28)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_PCOUT((863 - 28)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_PCOUT((863 - 28)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_PCOUT((863 - 28)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_PCOUT((863 - 28)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_PCOUT((863 - 28)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_PCOUT((863 - 28)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_PCOUT((863 - 28)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 28)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 28)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 28)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 28)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 28)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 28)- 48*17), true),
			54 => (C_dly(19)'last_event, tpd_C_PCOUT((2303 - 28)- 48*28), true),
			55 => (C_dly(18)'last_event, tpd_C_PCOUT((2303 - 28)- 48*29), true),
			56 => (C_dly(17)'last_event, tpd_C_PCOUT((2303 - 28)- 48*30), true),
			57 => (C_dly(16)'last_event, tpd_C_PCOUT((2303 - 28)- 48*31), true),
			58 => (C_dly(15)'last_event, tpd_C_PCOUT((2303 - 28)- 48*32), true),
			59 => (C_dly(14)'last_event, tpd_C_PCOUT((2303 - 28)- 48*33), true),
			60 => (C_dly(13)'last_event, tpd_C_PCOUT((2303 - 28)- 48*34), true),
			61 => (C_dly(12)'last_event, tpd_C_PCOUT((2303 - 28)- 48*35), true),
			62 => (C_dly(11)'last_event, tpd_C_PCOUT((2303 - 28)- 48*36), true),
			63 => (C_dly(10)'last_event, tpd_C_PCOUT((2303 - 28)- 48*37), true),
			64 => (C_dly(9)'last_event, tpd_C_PCOUT((2303 - 28)- 48*38), true),
			65 => (C_dly(8)'last_event, tpd_C_PCOUT((2303 - 28)- 48*39), true),
			66 => (C_dly(7)'last_event, tpd_C_PCOUT((2303 - 28)- 48*40), true),
			67 => (C_dly(6)'last_event, tpd_C_PCOUT((2303 - 28)- 48*41), true),
			68 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 28)- 48*42), true),
			69 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 28)- 48*43), true),
			70 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 28)- 48*44), true),
			71 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 28)- 48*45), true),
			72 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 28)- 48*46), true),
			73 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 28)- 48*47), true),
			74 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(19), true),
			75 => (D_dly(17)'last_event, tpd_D_PCOUT((863 - 28)- 48*0), true),
			76 => (D_dly(16)'last_event, tpd_D_PCOUT((863 - 28)- 48*1), true),
			77 => (D_dly(15)'last_event, tpd_D_PCOUT((863 - 28)- 48*2), true),
			78 => (D_dly(14)'last_event, tpd_D_PCOUT((863 - 28)- 48*3), true),
			79 => (D_dly(13)'last_event, tpd_D_PCOUT((863 - 28)- 48*4), true),
			80 => (D_dly(12)'last_event, tpd_D_PCOUT((863 - 28)- 48*5), true),
			81 => (D_dly(11)'last_event, tpd_D_PCOUT((863 - 28)- 48*6), true),
			82 => (D_dly(10)'last_event, tpd_D_PCOUT((863 - 28)- 48*7), true),
			83 => (D_dly(9)'last_event, tpd_D_PCOUT((863 - 28)- 48*8), true),
			84 => (D_dly(8)'last_event, tpd_D_PCOUT((863 - 28)- 48*9), true),
			85 => (D_dly(7)'last_event, tpd_D_PCOUT((863 - 28)- 48*10), true),
			86 => (D_dly(6)'last_event, tpd_D_PCOUT((863 - 28)- 48*11), true),
			87 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 28)- 48*12), true),
			88 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 28)- 48*13), true),
			89 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 28)- 48*14), true),
			90 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 28)- 48*15), true),
			91 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 28)- 48*16), true),
			92 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 28)- 48*17), true),
			93 => (OPMODE_dly(7)'last_event, tpd_OPMODE_PCOUT((383 - 28)- 48*0), true),
			94 => (OPMODE_dly(6)'last_event, tpd_OPMODE_PCOUT((383 - 28)- 48*1), true),
			95 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 28)- 48*2), true),
			96 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 28)- 48*3), true),
			97 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 28)- 48*4), true),
			98 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 28)- 48*5), true),
			99 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 28)- 48*6), true),
			100 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 28)- 48*7), true),
			101 => (PCIN_dly(19)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*28), true),
			102 => (PCIN_dly(18)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*29), true),
			103 => (PCIN_dly(17)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*30), true),
			104 => (PCIN_dly(16)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*31), true),
			105 => (PCIN_dly(15)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*32), true),
			106 => (PCIN_dly(14)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*33), true),
			107 => (PCIN_dly(13)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*34), true),
			108 => (PCIN_dly(12)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*35), true),
			109 => (PCIN_dly(11)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*36), true),
			110 => (PCIN_dly(10)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*37), true),
			111 => (PCIN_dly(9)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*38), true),
			112 => (PCIN_dly(8)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*39), true),
			113 => (PCIN_dly(7)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*40), true),
			114 => (PCIN_dly(6)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*41), true),
			115 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*42), true),
			116 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*43), true),
			117 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*44), true),
			118 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*45), true),
			119 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*46), true),
			120 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 28)- 48*47), true),
			121 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(19), true),
			122 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(19), true),
			123 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(19), true),
			124 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(19), true),
			125 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(19), true),
			126 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(19), true),
			127 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(19), true),
			128 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(19), true),
			129 => (CLK_dly'last_event, tpd_CLK_PCOUT(19), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(18),
         GlitchData	=> PCOUT_GlitchData(18),
         OutSignalName	=> "PCOUT(18)",
         OutTemp	=> PCOUT_zd(18),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_PCOUT((863 - 29)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_PCOUT((863 - 29)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_PCOUT((863 - 29)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_PCOUT((863 - 29)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_PCOUT((863 - 29)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_PCOUT((863 - 29)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_PCOUT((863 - 29)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_PCOUT((863 - 29)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_PCOUT((863 - 29)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_PCOUT((863 - 29)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_PCOUT((863 - 29)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_PCOUT((863 - 29)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 29)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 29)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 29)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 29)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 29)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 29)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_PCOUT((863 - 29)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_PCOUT((863 - 29)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_PCOUT((863 - 29)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_PCOUT((863 - 29)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_PCOUT((863 - 29)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_PCOUT((863 - 29)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_PCOUT((863 - 29)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_PCOUT((863 - 29)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_PCOUT((863 - 29)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_PCOUT((863 - 29)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_PCOUT((863 - 29)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_PCOUT((863 - 29)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 29)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 29)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 29)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 29)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 29)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 29)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_PCOUT((863 - 29)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_PCOUT((863 - 29)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_PCOUT((863 - 29)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_PCOUT((863 - 29)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_PCOUT((863 - 29)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_PCOUT((863 - 29)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_PCOUT((863 - 29)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_PCOUT((863 - 29)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_PCOUT((863 - 29)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_PCOUT((863 - 29)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_PCOUT((863 - 29)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_PCOUT((863 - 29)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 29)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 29)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 29)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 29)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 29)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 29)- 48*17), true),
			54 => (C_dly(18)'last_event, tpd_C_PCOUT((2303 - 29)- 48*29), true),
			55 => (C_dly(17)'last_event, tpd_C_PCOUT((2303 - 29)- 48*30), true),
			56 => (C_dly(16)'last_event, tpd_C_PCOUT((2303 - 29)- 48*31), true),
			57 => (C_dly(15)'last_event, tpd_C_PCOUT((2303 - 29)- 48*32), true),
			58 => (C_dly(14)'last_event, tpd_C_PCOUT((2303 - 29)- 48*33), true),
			59 => (C_dly(13)'last_event, tpd_C_PCOUT((2303 - 29)- 48*34), true),
			60 => (C_dly(12)'last_event, tpd_C_PCOUT((2303 - 29)- 48*35), true),
			61 => (C_dly(11)'last_event, tpd_C_PCOUT((2303 - 29)- 48*36), true),
			62 => (C_dly(10)'last_event, tpd_C_PCOUT((2303 - 29)- 48*37), true),
			63 => (C_dly(9)'last_event, tpd_C_PCOUT((2303 - 29)- 48*38), true),
			64 => (C_dly(8)'last_event, tpd_C_PCOUT((2303 - 29)- 48*39), true),
			65 => (C_dly(7)'last_event, tpd_C_PCOUT((2303 - 29)- 48*40), true),
			66 => (C_dly(6)'last_event, tpd_C_PCOUT((2303 - 29)- 48*41), true),
			67 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 29)- 48*42), true),
			68 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 29)- 48*43), true),
			69 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 29)- 48*44), true),
			70 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 29)- 48*45), true),
			71 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 29)- 48*46), true),
			72 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 29)- 48*47), true),
			73 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(18), true),
			74 => (D_dly(17)'last_event, tpd_D_PCOUT((863 - 29)- 48*0), true),
			75 => (D_dly(16)'last_event, tpd_D_PCOUT((863 - 29)- 48*1), true),
			76 => (D_dly(15)'last_event, tpd_D_PCOUT((863 - 29)- 48*2), true),
			77 => (D_dly(14)'last_event, tpd_D_PCOUT((863 - 29)- 48*3), true),
			78 => (D_dly(13)'last_event, tpd_D_PCOUT((863 - 29)- 48*4), true),
			79 => (D_dly(12)'last_event, tpd_D_PCOUT((863 - 29)- 48*5), true),
			80 => (D_dly(11)'last_event, tpd_D_PCOUT((863 - 29)- 48*6), true),
			81 => (D_dly(10)'last_event, tpd_D_PCOUT((863 - 29)- 48*7), true),
			82 => (D_dly(9)'last_event, tpd_D_PCOUT((863 - 29)- 48*8), true),
			83 => (D_dly(8)'last_event, tpd_D_PCOUT((863 - 29)- 48*9), true),
			84 => (D_dly(7)'last_event, tpd_D_PCOUT((863 - 29)- 48*10), true),
			85 => (D_dly(6)'last_event, tpd_D_PCOUT((863 - 29)- 48*11), true),
			86 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 29)- 48*12), true),
			87 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 29)- 48*13), true),
			88 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 29)- 48*14), true),
			89 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 29)- 48*15), true),
			90 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 29)- 48*16), true),
			91 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 29)- 48*17), true),
			92 => (OPMODE_dly(7)'last_event, tpd_OPMODE_PCOUT((383 - 29)- 48*0), true),
			93 => (OPMODE_dly(6)'last_event, tpd_OPMODE_PCOUT((383 - 29)- 48*1), true),
			94 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 29)- 48*2), true),
			95 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 29)- 48*3), true),
			96 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 29)- 48*4), true),
			97 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 29)- 48*5), true),
			98 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 29)- 48*6), true),
			99 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 29)- 48*7), true),
			100 => (PCIN_dly(18)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*29), true),
			101 => (PCIN_dly(17)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*30), true),
			102 => (PCIN_dly(16)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*31), true),
			103 => (PCIN_dly(15)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*32), true),
			104 => (PCIN_dly(14)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*33), true),
			105 => (PCIN_dly(13)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*34), true),
			106 => (PCIN_dly(12)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*35), true),
			107 => (PCIN_dly(11)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*36), true),
			108 => (PCIN_dly(10)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*37), true),
			109 => (PCIN_dly(9)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*38), true),
			110 => (PCIN_dly(8)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*39), true),
			111 => (PCIN_dly(7)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*40), true),
			112 => (PCIN_dly(6)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*41), true),
			113 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*42), true),
			114 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*43), true),
			115 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*44), true),
			116 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*45), true),
			117 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*46), true),
			118 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 29)- 48*47), true),
			119 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(18), true),
			120 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(18), true),
			121 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(18), true),
			122 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(18), true),
			123 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(18), true),
			124 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(18), true),
			125 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(18), true),
			126 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(18), true),
			127 => (CLK_dly'last_event, tpd_CLK_PCOUT(18), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(17),
         GlitchData	=> PCOUT_GlitchData(17),
         OutSignalName	=> "PCOUT(17)",
         OutTemp	=> PCOUT_zd(17),
         Paths		=> (
			0 => (A_dly(17)'last_event, tpd_A_PCOUT((863 - 30)- 48*0), true),
			1 => (A_dly(16)'last_event, tpd_A_PCOUT((863 - 30)- 48*1), true),
			2 => (A_dly(15)'last_event, tpd_A_PCOUT((863 - 30)- 48*2), true),
			3 => (A_dly(14)'last_event, tpd_A_PCOUT((863 - 30)- 48*3), true),
			4 => (A_dly(13)'last_event, tpd_A_PCOUT((863 - 30)- 48*4), true),
			5 => (A_dly(12)'last_event, tpd_A_PCOUT((863 - 30)- 48*5), true),
			6 => (A_dly(11)'last_event, tpd_A_PCOUT((863 - 30)- 48*6), true),
			7 => (A_dly(10)'last_event, tpd_A_PCOUT((863 - 30)- 48*7), true),
			8 => (A_dly(9)'last_event, tpd_A_PCOUT((863 - 30)- 48*8), true),
			9 => (A_dly(8)'last_event, tpd_A_PCOUT((863 - 30)- 48*9), true),
			10 => (A_dly(7)'last_event, tpd_A_PCOUT((863 - 30)- 48*10), true),
			11 => (A_dly(6)'last_event, tpd_A_PCOUT((863 - 30)- 48*11), true),
			12 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 30)- 48*12), true),
			13 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 30)- 48*13), true),
			14 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 30)- 48*14), true),
			15 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 30)- 48*15), true),
			16 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 30)- 48*16), true),
			17 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 30)- 48*17), true),
			18 => (B_dly(17)'last_event, tpd_B_PCOUT((863 - 30)- 48*0), true),
			19 => (B_dly(16)'last_event, tpd_B_PCOUT((863 - 30)- 48*1), true),
			20 => (B_dly(15)'last_event, tpd_B_PCOUT((863 - 30)- 48*2), true),
			21 => (B_dly(14)'last_event, tpd_B_PCOUT((863 - 30)- 48*3), true),
			22 => (B_dly(13)'last_event, tpd_B_PCOUT((863 - 30)- 48*4), true),
			23 => (B_dly(12)'last_event, tpd_B_PCOUT((863 - 30)- 48*5), true),
			24 => (B_dly(11)'last_event, tpd_B_PCOUT((863 - 30)- 48*6), true),
			25 => (B_dly(10)'last_event, tpd_B_PCOUT((863 - 30)- 48*7), true),
			26 => (B_dly(9)'last_event, tpd_B_PCOUT((863 - 30)- 48*8), true),
			27 => (B_dly(8)'last_event, tpd_B_PCOUT((863 - 30)- 48*9), true),
			28 => (B_dly(7)'last_event, tpd_B_PCOUT((863 - 30)- 48*10), true),
			29 => (B_dly(6)'last_event, tpd_B_PCOUT((863 - 30)- 48*11), true),
			30 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 30)- 48*12), true),
			31 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 30)- 48*13), true),
			32 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 30)- 48*14), true),
			33 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 30)- 48*15), true),
			34 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 30)- 48*16), true),
			35 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 30)- 48*17), true),
			36 => (BCIN_dly(17)'last_event, tpd_BCIN_PCOUT((863 - 30)- 48*0), true),
			37 => (BCIN_dly(16)'last_event, tpd_BCIN_PCOUT((863 - 30)- 48*1), true),
			38 => (BCIN_dly(15)'last_event, tpd_BCIN_PCOUT((863 - 30)- 48*2), true),
			39 => (BCIN_dly(14)'last_event, tpd_BCIN_PCOUT((863 - 30)- 48*3), true),
			40 => (BCIN_dly(13)'last_event, tpd_BCIN_PCOUT((863 - 30)- 48*4), true),
			41 => (BCIN_dly(12)'last_event, tpd_BCIN_PCOUT((863 - 30)- 48*5), true),
			42 => (BCIN_dly(11)'last_event, tpd_BCIN_PCOUT((863 - 30)- 48*6), true),
			43 => (BCIN_dly(10)'last_event, tpd_BCIN_PCOUT((863 - 30)- 48*7), true),
			44 => (BCIN_dly(9)'last_event, tpd_BCIN_PCOUT((863 - 30)- 48*8), true),
			45 => (BCIN_dly(8)'last_event, tpd_BCIN_PCOUT((863 - 30)- 48*9), true),
			46 => (BCIN_dly(7)'last_event, tpd_BCIN_PCOUT((863 - 30)- 48*10), true),
			47 => (BCIN_dly(6)'last_event, tpd_BCIN_PCOUT((863 - 30)- 48*11), true),
			48 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 30)- 48*12), true),
			49 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 30)- 48*13), true),
			50 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 30)- 48*14), true),
			51 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 30)- 48*15), true),
			52 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 30)- 48*16), true),
			53 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 30)- 48*17), true),
			54 => (C_dly(17)'last_event, tpd_C_PCOUT((2303 - 30)- 48*30), true),
			55 => (C_dly(16)'last_event, tpd_C_PCOUT((2303 - 30)- 48*31), true),
			56 => (C_dly(15)'last_event, tpd_C_PCOUT((2303 - 30)- 48*32), true),
			57 => (C_dly(14)'last_event, tpd_C_PCOUT((2303 - 30)- 48*33), true),
			58 => (C_dly(13)'last_event, tpd_C_PCOUT((2303 - 30)- 48*34), true),
			59 => (C_dly(12)'last_event, tpd_C_PCOUT((2303 - 30)- 48*35), true),
			60 => (C_dly(11)'last_event, tpd_C_PCOUT((2303 - 30)- 48*36), true),
			61 => (C_dly(10)'last_event, tpd_C_PCOUT((2303 - 30)- 48*37), true),
			62 => (C_dly(9)'last_event, tpd_C_PCOUT((2303 - 30)- 48*38), true),
			63 => (C_dly(8)'last_event, tpd_C_PCOUT((2303 - 30)- 48*39), true),
			64 => (C_dly(7)'last_event, tpd_C_PCOUT((2303 - 30)- 48*40), true),
			65 => (C_dly(6)'last_event, tpd_C_PCOUT((2303 - 30)- 48*41), true),
			66 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 30)- 48*42), true),
			67 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 30)- 48*43), true),
			68 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 30)- 48*44), true),
			69 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 30)- 48*45), true),
			70 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 30)- 48*46), true),
			71 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 30)- 48*47), true),
			72 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(17), true),
			73 => (D_dly(17)'last_event, tpd_D_PCOUT((863 - 30)- 48*0), true),
			74 => (D_dly(16)'last_event, tpd_D_PCOUT((863 - 30)- 48*1), true),
			75 => (D_dly(15)'last_event, tpd_D_PCOUT((863 - 30)- 48*2), true),
			76 => (D_dly(14)'last_event, tpd_D_PCOUT((863 - 30)- 48*3), true),
			77 => (D_dly(13)'last_event, tpd_D_PCOUT((863 - 30)- 48*4), true),
			78 => (D_dly(12)'last_event, tpd_D_PCOUT((863 - 30)- 48*5), true),
			79 => (D_dly(11)'last_event, tpd_D_PCOUT((863 - 30)- 48*6), true),
			80 => (D_dly(10)'last_event, tpd_D_PCOUT((863 - 30)- 48*7), true),
			81 => (D_dly(9)'last_event, tpd_D_PCOUT((863 - 30)- 48*8), true),
			82 => (D_dly(8)'last_event, tpd_D_PCOUT((863 - 30)- 48*9), true),
			83 => (D_dly(7)'last_event, tpd_D_PCOUT((863 - 30)- 48*10), true),
			84 => (D_dly(6)'last_event, tpd_D_PCOUT((863 - 30)- 48*11), true),
			85 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 30)- 48*12), true),
			86 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 30)- 48*13), true),
			87 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 30)- 48*14), true),
			88 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 30)- 48*15), true),
			89 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 30)- 48*16), true),
			90 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 30)- 48*17), true),
			91 => (OPMODE_dly(7)'last_event, tpd_OPMODE_PCOUT((383 - 30)- 48*0), true),
			92 => (OPMODE_dly(6)'last_event, tpd_OPMODE_PCOUT((383 - 30)- 48*1), true),
			93 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 30)- 48*2), true),
			94 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 30)- 48*3), true),
			95 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 30)- 48*4), true),
			96 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 30)- 48*5), true),
			97 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 30)- 48*6), true),
			98 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 30)- 48*7), true),
			99 => (PCIN_dly(17)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*30), true),
			100 => (PCIN_dly(16)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*31), true),
			101 => (PCIN_dly(15)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*32), true),
			102 => (PCIN_dly(14)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*33), true),
			103 => (PCIN_dly(13)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*34), true),
			104 => (PCIN_dly(12)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*35), true),
			105 => (PCIN_dly(11)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*36), true),
			106 => (PCIN_dly(10)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*37), true),
			107 => (PCIN_dly(9)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*38), true),
			108 => (PCIN_dly(8)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*39), true),
			109 => (PCIN_dly(7)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*40), true),
			110 => (PCIN_dly(6)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*41), true),
			111 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*42), true),
			112 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*43), true),
			113 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*44), true),
			114 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*45), true),
			115 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*46), true),
			116 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 30)- 48*47), true),
			117 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(17), true),
			118 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(17), true),
			119 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(17), true),
			120 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(17), true),
			121 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(17), true),
			122 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(17), true),
			123 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(17), true),
			124 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(17), true),
			125 => (CLK_dly'last_event, tpd_CLK_PCOUT(17), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(16),
         GlitchData	=> PCOUT_GlitchData(16),
         OutSignalName	=> "PCOUT(16)",
         OutTemp	=> PCOUT_zd(16),
         Paths		=> (
			0 => (A_dly(16)'last_event, tpd_A_PCOUT((863 - 31)- 48*1), true),
			1 => (A_dly(15)'last_event, tpd_A_PCOUT((863 - 31)- 48*2), true),
			2 => (A_dly(14)'last_event, tpd_A_PCOUT((863 - 31)- 48*3), true),
			3 => (A_dly(13)'last_event, tpd_A_PCOUT((863 - 31)- 48*4), true),
			4 => (A_dly(12)'last_event, tpd_A_PCOUT((863 - 31)- 48*5), true),
			5 => (A_dly(11)'last_event, tpd_A_PCOUT((863 - 31)- 48*6), true),
			6 => (A_dly(10)'last_event, tpd_A_PCOUT((863 - 31)- 48*7), true),
			7 => (A_dly(9)'last_event, tpd_A_PCOUT((863 - 31)- 48*8), true),
			8 => (A_dly(8)'last_event, tpd_A_PCOUT((863 - 31)- 48*9), true),
			9 => (A_dly(7)'last_event, tpd_A_PCOUT((863 - 31)- 48*10), true),
			10 => (A_dly(6)'last_event, tpd_A_PCOUT((863 - 31)- 48*11), true),
			11 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 31)- 48*12), true),
			12 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 31)- 48*13), true),
			13 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 31)- 48*14), true),
			14 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 31)- 48*15), true),
			15 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 31)- 48*16), true),
			16 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 31)- 48*17), true),
			17 => (B_dly(16)'last_event, tpd_B_PCOUT((863 - 31)- 48*1), true),
			18 => (B_dly(15)'last_event, tpd_B_PCOUT((863 - 31)- 48*2), true),
			19 => (B_dly(14)'last_event, tpd_B_PCOUT((863 - 31)- 48*3), true),
			20 => (B_dly(13)'last_event, tpd_B_PCOUT((863 - 31)- 48*4), true),
			21 => (B_dly(12)'last_event, tpd_B_PCOUT((863 - 31)- 48*5), true),
			22 => (B_dly(11)'last_event, tpd_B_PCOUT((863 - 31)- 48*6), true),
			23 => (B_dly(10)'last_event, tpd_B_PCOUT((863 - 31)- 48*7), true),
			24 => (B_dly(9)'last_event, tpd_B_PCOUT((863 - 31)- 48*8), true),
			25 => (B_dly(8)'last_event, tpd_B_PCOUT((863 - 31)- 48*9), true),
			26 => (B_dly(7)'last_event, tpd_B_PCOUT((863 - 31)- 48*10), true),
			27 => (B_dly(6)'last_event, tpd_B_PCOUT((863 - 31)- 48*11), true),
			28 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 31)- 48*12), true),
			29 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 31)- 48*13), true),
			30 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 31)- 48*14), true),
			31 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 31)- 48*15), true),
			32 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 31)- 48*16), true),
			33 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 31)- 48*17), true),
			34 => (BCIN_dly(16)'last_event, tpd_BCIN_PCOUT((863 - 31)- 48*1), true),
			35 => (BCIN_dly(15)'last_event, tpd_BCIN_PCOUT((863 - 31)- 48*2), true),
			36 => (BCIN_dly(14)'last_event, tpd_BCIN_PCOUT((863 - 31)- 48*3), true),
			37 => (BCIN_dly(13)'last_event, tpd_BCIN_PCOUT((863 - 31)- 48*4), true),
			38 => (BCIN_dly(12)'last_event, tpd_BCIN_PCOUT((863 - 31)- 48*5), true),
			39 => (BCIN_dly(11)'last_event, tpd_BCIN_PCOUT((863 - 31)- 48*6), true),
			40 => (BCIN_dly(10)'last_event, tpd_BCIN_PCOUT((863 - 31)- 48*7), true),
			41 => (BCIN_dly(9)'last_event, tpd_BCIN_PCOUT((863 - 31)- 48*8), true),
			42 => (BCIN_dly(8)'last_event, tpd_BCIN_PCOUT((863 - 31)- 48*9), true),
			43 => (BCIN_dly(7)'last_event, tpd_BCIN_PCOUT((863 - 31)- 48*10), true),
			44 => (BCIN_dly(6)'last_event, tpd_BCIN_PCOUT((863 - 31)- 48*11), true),
			45 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 31)- 48*12), true),
			46 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 31)- 48*13), true),
			47 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 31)- 48*14), true),
			48 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 31)- 48*15), true),
			49 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 31)- 48*16), true),
			50 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 31)- 48*17), true),
			51 => (C_dly(16)'last_event, tpd_C_PCOUT((2303 - 31)- 48*31), true),
			52 => (C_dly(15)'last_event, tpd_C_PCOUT((2303 - 31)- 48*32), true),
			53 => (C_dly(14)'last_event, tpd_C_PCOUT((2303 - 31)- 48*33), true),
			54 => (C_dly(13)'last_event, tpd_C_PCOUT((2303 - 31)- 48*34), true),
			55 => (C_dly(12)'last_event, tpd_C_PCOUT((2303 - 31)- 48*35), true),
			56 => (C_dly(11)'last_event, tpd_C_PCOUT((2303 - 31)- 48*36), true),
			57 => (C_dly(10)'last_event, tpd_C_PCOUT((2303 - 31)- 48*37), true),
			58 => (C_dly(9)'last_event, tpd_C_PCOUT((2303 - 31)- 48*38), true),
			59 => (C_dly(8)'last_event, tpd_C_PCOUT((2303 - 31)- 48*39), true),
			60 => (C_dly(7)'last_event, tpd_C_PCOUT((2303 - 31)- 48*40), true),
			61 => (C_dly(6)'last_event, tpd_C_PCOUT((2303 - 31)- 48*41), true),
			62 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 31)- 48*42), true),
			63 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 31)- 48*43), true),
			64 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 31)- 48*44), true),
			65 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 31)- 48*45), true),
			66 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 31)- 48*46), true),
			67 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 31)- 48*47), true),
			68 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(16), true),
			69 => (D_dly(16)'last_event, tpd_D_PCOUT((863 - 31)- 48*1), true),
			70 => (D_dly(15)'last_event, tpd_D_PCOUT((863 - 31)- 48*2), true),
			71 => (D_dly(14)'last_event, tpd_D_PCOUT((863 - 31)- 48*3), true),
			72 => (D_dly(13)'last_event, tpd_D_PCOUT((863 - 31)- 48*4), true),
			73 => (D_dly(12)'last_event, tpd_D_PCOUT((863 - 31)- 48*5), true),
			74 => (D_dly(11)'last_event, tpd_D_PCOUT((863 - 31)- 48*6), true),
			75 => (D_dly(10)'last_event, tpd_D_PCOUT((863 - 31)- 48*7), true),
			76 => (D_dly(9)'last_event, tpd_D_PCOUT((863 - 31)- 48*8), true),
			77 => (D_dly(8)'last_event, tpd_D_PCOUT((863 - 31)- 48*9), true),
			78 => (D_dly(7)'last_event, tpd_D_PCOUT((863 - 31)- 48*10), true),
			79 => (D_dly(6)'last_event, tpd_D_PCOUT((863 - 31)- 48*11), true),
			80 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 31)- 48*12), true),
			81 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 31)- 48*13), true),
			82 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 31)- 48*14), true),
			83 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 31)- 48*15), true),
			84 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 31)- 48*16), true),
			85 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 31)- 48*17), true),
			86 => (OPMODE_dly(7)'last_event, tpd_OPMODE_PCOUT((383 - 31)- 48*0), true),
			87 => (OPMODE_dly(6)'last_event, tpd_OPMODE_PCOUT((383 - 31)- 48*1), true),
			88 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 31)- 48*2), true),
			89 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 31)- 48*3), true),
			90 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 31)- 48*4), true),
			91 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 31)- 48*5), true),
			92 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 31)- 48*6), true),
			93 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 31)- 48*7), true),
			94 => (PCIN_dly(16)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*31), true),
			95 => (PCIN_dly(15)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*32), true),
			96 => (PCIN_dly(14)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*33), true),
			97 => (PCIN_dly(13)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*34), true),
			98 => (PCIN_dly(12)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*35), true),
			99 => (PCIN_dly(11)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*36), true),
			100 => (PCIN_dly(10)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*37), true),
			101 => (PCIN_dly(9)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*38), true),
			102 => (PCIN_dly(8)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*39), true),
			103 => (PCIN_dly(7)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*40), true),
			104 => (PCIN_dly(6)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*41), true),
			105 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*42), true),
			106 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*43), true),
			107 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*44), true),
			108 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*45), true),
			109 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*46), true),
			110 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 31)- 48*47), true),
			111 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(16), true),
			112 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(16), true),
			113 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(16), true),
			114 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(16), true),
			115 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(16), true),
			116 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(16), true),
			117 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(16), true),
			118 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(16), true),
			119 => (CLK_dly'last_event, tpd_CLK_PCOUT(16), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(15),
         GlitchData	=> PCOUT_GlitchData(15),
         OutSignalName	=> "PCOUT(15)",
         OutTemp	=> PCOUT_zd(15),
         Paths		=> (
			0 => (A_dly(15)'last_event, tpd_A_PCOUT((863 - 32)- 48*2), true),
			1 => (A_dly(14)'last_event, tpd_A_PCOUT((863 - 32)- 48*3), true),
			2 => (A_dly(13)'last_event, tpd_A_PCOUT((863 - 32)- 48*4), true),
			3 => (A_dly(12)'last_event, tpd_A_PCOUT((863 - 32)- 48*5), true),
			4 => (A_dly(11)'last_event, tpd_A_PCOUT((863 - 32)- 48*6), true),
			5 => (A_dly(10)'last_event, tpd_A_PCOUT((863 - 32)- 48*7), true),
			6 => (A_dly(9)'last_event, tpd_A_PCOUT((863 - 32)- 48*8), true),
			7 => (A_dly(8)'last_event, tpd_A_PCOUT((863 - 32)- 48*9), true),
			8 => (A_dly(7)'last_event, tpd_A_PCOUT((863 - 32)- 48*10), true),
			9 => (A_dly(6)'last_event, tpd_A_PCOUT((863 - 32)- 48*11), true),
			10 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 32)- 48*12), true),
			11 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 32)- 48*13), true),
			12 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 32)- 48*14), true),
			13 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 32)- 48*15), true),
			14 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 32)- 48*16), true),
			15 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 32)- 48*17), true),
			16 => (B_dly(15)'last_event, tpd_B_PCOUT((863 - 32)- 48*2), true),
			17 => (B_dly(14)'last_event, tpd_B_PCOUT((863 - 32)- 48*3), true),
			18 => (B_dly(13)'last_event, tpd_B_PCOUT((863 - 32)- 48*4), true),
			19 => (B_dly(12)'last_event, tpd_B_PCOUT((863 - 32)- 48*5), true),
			20 => (B_dly(11)'last_event, tpd_B_PCOUT((863 - 32)- 48*6), true),
			21 => (B_dly(10)'last_event, tpd_B_PCOUT((863 - 32)- 48*7), true),
			22 => (B_dly(9)'last_event, tpd_B_PCOUT((863 - 32)- 48*8), true),
			23 => (B_dly(8)'last_event, tpd_B_PCOUT((863 - 32)- 48*9), true),
			24 => (B_dly(7)'last_event, tpd_B_PCOUT((863 - 32)- 48*10), true),
			25 => (B_dly(6)'last_event, tpd_B_PCOUT((863 - 32)- 48*11), true),
			26 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 32)- 48*12), true),
			27 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 32)- 48*13), true),
			28 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 32)- 48*14), true),
			29 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 32)- 48*15), true),
			30 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 32)- 48*16), true),
			31 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 32)- 48*17), true),
			32 => (BCIN_dly(15)'last_event, tpd_BCIN_PCOUT((863 - 32)- 48*2), true),
			33 => (BCIN_dly(14)'last_event, tpd_BCIN_PCOUT((863 - 32)- 48*3), true),
			34 => (BCIN_dly(13)'last_event, tpd_BCIN_PCOUT((863 - 32)- 48*4), true),
			35 => (BCIN_dly(12)'last_event, tpd_BCIN_PCOUT((863 - 32)- 48*5), true),
			36 => (BCIN_dly(11)'last_event, tpd_BCIN_PCOUT((863 - 32)- 48*6), true),
			37 => (BCIN_dly(10)'last_event, tpd_BCIN_PCOUT((863 - 32)- 48*7), true),
			38 => (BCIN_dly(9)'last_event, tpd_BCIN_PCOUT((863 - 32)- 48*8), true),
			39 => (BCIN_dly(8)'last_event, tpd_BCIN_PCOUT((863 - 32)- 48*9), true),
			40 => (BCIN_dly(7)'last_event, tpd_BCIN_PCOUT((863 - 32)- 48*10), true),
			41 => (BCIN_dly(6)'last_event, tpd_BCIN_PCOUT((863 - 32)- 48*11), true),
			42 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 32)- 48*12), true),
			43 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 32)- 48*13), true),
			44 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 32)- 48*14), true),
			45 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 32)- 48*15), true),
			46 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 32)- 48*16), true),
			47 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 32)- 48*17), true),
			48 => (C_dly(15)'last_event, tpd_C_PCOUT((2303 - 32)- 48*32), true),
			49 => (C_dly(14)'last_event, tpd_C_PCOUT((2303 - 32)- 48*33), true),
			50 => (C_dly(13)'last_event, tpd_C_PCOUT((2303 - 32)- 48*34), true),
			51 => (C_dly(12)'last_event, tpd_C_PCOUT((2303 - 32)- 48*35), true),
			52 => (C_dly(11)'last_event, tpd_C_PCOUT((2303 - 32)- 48*36), true),
			53 => (C_dly(10)'last_event, tpd_C_PCOUT((2303 - 32)- 48*37), true),
			54 => (C_dly(9)'last_event, tpd_C_PCOUT((2303 - 32)- 48*38), true),
			55 => (C_dly(8)'last_event, tpd_C_PCOUT((2303 - 32)- 48*39), true),
			56 => (C_dly(7)'last_event, tpd_C_PCOUT((2303 - 32)- 48*40), true),
			57 => (C_dly(6)'last_event, tpd_C_PCOUT((2303 - 32)- 48*41), true),
			58 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 32)- 48*42), true),
			59 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 32)- 48*43), true),
			60 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 32)- 48*44), true),
			61 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 32)- 48*45), true),
			62 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 32)- 48*46), true),
			63 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 32)- 48*47), true),
			64 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(15), true),
			65 => (D_dly(15)'last_event, tpd_D_PCOUT((863 - 32)- 48*2), true),
			66 => (D_dly(14)'last_event, tpd_D_PCOUT((863 - 32)- 48*3), true),
			67 => (D_dly(13)'last_event, tpd_D_PCOUT((863 - 32)- 48*4), true),
			68 => (D_dly(12)'last_event, tpd_D_PCOUT((863 - 32)- 48*5), true),
			69 => (D_dly(11)'last_event, tpd_D_PCOUT((863 - 32)- 48*6), true),
			70 => (D_dly(10)'last_event, tpd_D_PCOUT((863 - 32)- 48*7), true),
			71 => (D_dly(9)'last_event, tpd_D_PCOUT((863 - 32)- 48*8), true),
			72 => (D_dly(8)'last_event, tpd_D_PCOUT((863 - 32)- 48*9), true),
			73 => (D_dly(7)'last_event, tpd_D_PCOUT((863 - 32)- 48*10), true),
			74 => (D_dly(6)'last_event, tpd_D_PCOUT((863 - 32)- 48*11), true),
			75 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 32)- 48*12), true),
			76 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 32)- 48*13), true),
			77 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 32)- 48*14), true),
			78 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 32)- 48*15), true),
			79 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 32)- 48*16), true),
			80 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 32)- 48*17), true),
			81 => (OPMODE_dly(7)'last_event, tpd_OPMODE_PCOUT((383 - 32)- 48*0), true),
			82 => (OPMODE_dly(6)'last_event, tpd_OPMODE_PCOUT((383 - 32)- 48*1), true),
			83 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 32)- 48*2), true),
			84 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 32)- 48*3), true),
			85 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 32)- 48*4), true),
			86 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 32)- 48*5), true),
			87 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 32)- 48*6), true),
			88 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 32)- 48*7), true),
			89 => (PCIN_dly(15)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*32), true),
			90 => (PCIN_dly(14)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*33), true),
			91 => (PCIN_dly(13)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*34), true),
			92 => (PCIN_dly(12)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*35), true),
			93 => (PCIN_dly(11)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*36), true),
			94 => (PCIN_dly(10)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*37), true),
			95 => (PCIN_dly(9)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*38), true),
			96 => (PCIN_dly(8)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*39), true),
			97 => (PCIN_dly(7)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*40), true),
			98 => (PCIN_dly(6)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*41), true),
			99 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*42), true),
			100 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*43), true),
			101 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*44), true),
			102 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*45), true),
			103 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*46), true),
			104 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 32)- 48*47), true),
			105 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(15), true),
			106 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(15), true),
			107 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(15), true),
			108 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(15), true),
			109 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(15), true),
			110 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(15), true),
			111 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(15), true),
			112 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(15), true),
			113 => (CLK_dly'last_event, tpd_CLK_PCOUT(15), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(14),
         GlitchData	=> PCOUT_GlitchData(14),
         OutSignalName	=> "PCOUT(14)",
         OutTemp	=> PCOUT_zd(14),
         Paths		=> (
			0 => (A_dly(14)'last_event, tpd_A_PCOUT((863 - 33)- 48*3), true),
			1 => (A_dly(13)'last_event, tpd_A_PCOUT((863 - 33)- 48*4), true),
			2 => (A_dly(12)'last_event, tpd_A_PCOUT((863 - 33)- 48*5), true),
			3 => (A_dly(11)'last_event, tpd_A_PCOUT((863 - 33)- 48*6), true),
			4 => (A_dly(10)'last_event, tpd_A_PCOUT((863 - 33)- 48*7), true),
			5 => (A_dly(9)'last_event, tpd_A_PCOUT((863 - 33)- 48*8), true),
			6 => (A_dly(8)'last_event, tpd_A_PCOUT((863 - 33)- 48*9), true),
			7 => (A_dly(7)'last_event, tpd_A_PCOUT((863 - 33)- 48*10), true),
			8 => (A_dly(6)'last_event, tpd_A_PCOUT((863 - 33)- 48*11), true),
			9 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 33)- 48*12), true),
			10 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 33)- 48*13), true),
			11 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 33)- 48*14), true),
			12 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 33)- 48*15), true),
			13 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 33)- 48*16), true),
			14 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 33)- 48*17), true),
			15 => (B_dly(14)'last_event, tpd_B_PCOUT((863 - 33)- 48*3), true),
			16 => (B_dly(13)'last_event, tpd_B_PCOUT((863 - 33)- 48*4), true),
			17 => (B_dly(12)'last_event, tpd_B_PCOUT((863 - 33)- 48*5), true),
			18 => (B_dly(11)'last_event, tpd_B_PCOUT((863 - 33)- 48*6), true),
			19 => (B_dly(10)'last_event, tpd_B_PCOUT((863 - 33)- 48*7), true),
			20 => (B_dly(9)'last_event, tpd_B_PCOUT((863 - 33)- 48*8), true),
			21 => (B_dly(8)'last_event, tpd_B_PCOUT((863 - 33)- 48*9), true),
			22 => (B_dly(7)'last_event, tpd_B_PCOUT((863 - 33)- 48*10), true),
			23 => (B_dly(6)'last_event, tpd_B_PCOUT((863 - 33)- 48*11), true),
			24 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 33)- 48*12), true),
			25 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 33)- 48*13), true),
			26 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 33)- 48*14), true),
			27 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 33)- 48*15), true),
			28 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 33)- 48*16), true),
			29 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 33)- 48*17), true),
			30 => (BCIN_dly(14)'last_event, tpd_BCIN_PCOUT((863 - 33)- 48*3), true),
			31 => (BCIN_dly(13)'last_event, tpd_BCIN_PCOUT((863 - 33)- 48*4), true),
			32 => (BCIN_dly(12)'last_event, tpd_BCIN_PCOUT((863 - 33)- 48*5), true),
			33 => (BCIN_dly(11)'last_event, tpd_BCIN_PCOUT((863 - 33)- 48*6), true),
			34 => (BCIN_dly(10)'last_event, tpd_BCIN_PCOUT((863 - 33)- 48*7), true),
			35 => (BCIN_dly(9)'last_event, tpd_BCIN_PCOUT((863 - 33)- 48*8), true),
			36 => (BCIN_dly(8)'last_event, tpd_BCIN_PCOUT((863 - 33)- 48*9), true),
			37 => (BCIN_dly(7)'last_event, tpd_BCIN_PCOUT((863 - 33)- 48*10), true),
			38 => (BCIN_dly(6)'last_event, tpd_BCIN_PCOUT((863 - 33)- 48*11), true),
			39 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 33)- 48*12), true),
			40 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 33)- 48*13), true),
			41 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 33)- 48*14), true),
			42 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 33)- 48*15), true),
			43 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 33)- 48*16), true),
			44 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 33)- 48*17), true),
			45 => (C_dly(14)'last_event, tpd_C_PCOUT((2303 - 33)- 48*33), true),
			46 => (C_dly(13)'last_event, tpd_C_PCOUT((2303 - 33)- 48*34), true),
			47 => (C_dly(12)'last_event, tpd_C_PCOUT((2303 - 33)- 48*35), true),
			48 => (C_dly(11)'last_event, tpd_C_PCOUT((2303 - 33)- 48*36), true),
			49 => (C_dly(10)'last_event, tpd_C_PCOUT((2303 - 33)- 48*37), true),
			50 => (C_dly(9)'last_event, tpd_C_PCOUT((2303 - 33)- 48*38), true),
			51 => (C_dly(8)'last_event, tpd_C_PCOUT((2303 - 33)- 48*39), true),
			52 => (C_dly(7)'last_event, tpd_C_PCOUT((2303 - 33)- 48*40), true),
			53 => (C_dly(6)'last_event, tpd_C_PCOUT((2303 - 33)- 48*41), true),
			54 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 33)- 48*42), true),
			55 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 33)- 48*43), true),
			56 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 33)- 48*44), true),
			57 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 33)- 48*45), true),
			58 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 33)- 48*46), true),
			59 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 33)- 48*47), true),
			60 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(14), true),
			61 => (D_dly(14)'last_event, tpd_D_PCOUT((863 - 33)- 48*3), true),
			62 => (D_dly(13)'last_event, tpd_D_PCOUT((863 - 33)- 48*4), true),
			63 => (D_dly(12)'last_event, tpd_D_PCOUT((863 - 33)- 48*5), true),
			64 => (D_dly(11)'last_event, tpd_D_PCOUT((863 - 33)- 48*6), true),
			65 => (D_dly(10)'last_event, tpd_D_PCOUT((863 - 33)- 48*7), true),
			66 => (D_dly(9)'last_event, tpd_D_PCOUT((863 - 33)- 48*8), true),
			67 => (D_dly(8)'last_event, tpd_D_PCOUT((863 - 33)- 48*9), true),
			68 => (D_dly(7)'last_event, tpd_D_PCOUT((863 - 33)- 48*10), true),
			69 => (D_dly(6)'last_event, tpd_D_PCOUT((863 - 33)- 48*11), true),
			70 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 33)- 48*12), true),
			71 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 33)- 48*13), true),
			72 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 33)- 48*14), true),
			73 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 33)- 48*15), true),
			74 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 33)- 48*16), true),
			75 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 33)- 48*17), true),
			76 => (OPMODE_dly(7)'last_event, tpd_OPMODE_PCOUT((383 - 33)- 48*0), true),
			77 => (OPMODE_dly(6)'last_event, tpd_OPMODE_PCOUT((383 - 33)- 48*1), true),
			78 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 33)- 48*2), true),
			79 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 33)- 48*3), true),
			80 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 33)- 48*4), true),
			81 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 33)- 48*5), true),
			82 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 33)- 48*6), true),
			83 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 33)- 48*7), true),
			84 => (PCIN_dly(14)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*33), true),
			85 => (PCIN_dly(13)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*34), true),
			86 => (PCIN_dly(12)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*35), true),
			87 => (PCIN_dly(11)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*36), true),
			88 => (PCIN_dly(10)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*37), true),
			89 => (PCIN_dly(9)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*38), true),
			90 => (PCIN_dly(8)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*39), true),
			91 => (PCIN_dly(7)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*40), true),
			92 => (PCIN_dly(6)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*41), true),
			93 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*42), true),
			94 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*43), true),
			95 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*44), true),
			96 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*45), true),
			97 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*46), true),
			98 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 33)- 48*47), true),
			99 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(14), true),
			100 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(14), true),
			101 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(14), true),
			102 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(14), true),
			103 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(14), true),
			104 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(14), true),
			105 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(14), true),
			106 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(14), true),
			107 => (CLK_dly'last_event, tpd_CLK_PCOUT(14), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(13),
         GlitchData	=> PCOUT_GlitchData(13),
         OutSignalName	=> "PCOUT(13)",
         OutTemp	=> PCOUT_zd(13),
         Paths		=> (
			0 => (A_dly(13)'last_event, tpd_A_PCOUT((863 - 34)- 48*4), true),
			1 => (A_dly(12)'last_event, tpd_A_PCOUT((863 - 34)- 48*5), true),
			2 => (A_dly(11)'last_event, tpd_A_PCOUT((863 - 34)- 48*6), true),
			3 => (A_dly(10)'last_event, tpd_A_PCOUT((863 - 34)- 48*7), true),
			4 => (A_dly(9)'last_event, tpd_A_PCOUT((863 - 34)- 48*8), true),
			5 => (A_dly(8)'last_event, tpd_A_PCOUT((863 - 34)- 48*9), true),
			6 => (A_dly(7)'last_event, tpd_A_PCOUT((863 - 34)- 48*10), true),
			7 => (A_dly(6)'last_event, tpd_A_PCOUT((863 - 34)- 48*11), true),
			8 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 34)- 48*12), true),
			9 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 34)- 48*13), true),
			10 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 34)- 48*14), true),
			11 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 34)- 48*15), true),
			12 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 34)- 48*16), true),
			13 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 34)- 48*17), true),
			14 => (B_dly(13)'last_event, tpd_B_PCOUT((863 - 34)- 48*4), true),
			15 => (B_dly(12)'last_event, tpd_B_PCOUT((863 - 34)- 48*5), true),
			16 => (B_dly(11)'last_event, tpd_B_PCOUT((863 - 34)- 48*6), true),
			17 => (B_dly(10)'last_event, tpd_B_PCOUT((863 - 34)- 48*7), true),
			18 => (B_dly(9)'last_event, tpd_B_PCOUT((863 - 34)- 48*8), true),
			19 => (B_dly(8)'last_event, tpd_B_PCOUT((863 - 34)- 48*9), true),
			20 => (B_dly(7)'last_event, tpd_B_PCOUT((863 - 34)- 48*10), true),
			21 => (B_dly(6)'last_event, tpd_B_PCOUT((863 - 34)- 48*11), true),
			22 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 34)- 48*12), true),
			23 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 34)- 48*13), true),
			24 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 34)- 48*14), true),
			25 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 34)- 48*15), true),
			26 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 34)- 48*16), true),
			27 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 34)- 48*17), true),
			28 => (BCIN_dly(13)'last_event, tpd_BCIN_PCOUT((863 - 34)- 48*4), true),
			29 => (BCIN_dly(12)'last_event, tpd_BCIN_PCOUT((863 - 34)- 48*5), true),
			30 => (BCIN_dly(11)'last_event, tpd_BCIN_PCOUT((863 - 34)- 48*6), true),
			31 => (BCIN_dly(10)'last_event, tpd_BCIN_PCOUT((863 - 34)- 48*7), true),
			32 => (BCIN_dly(9)'last_event, tpd_BCIN_PCOUT((863 - 34)- 48*8), true),
			33 => (BCIN_dly(8)'last_event, tpd_BCIN_PCOUT((863 - 34)- 48*9), true),
			34 => (BCIN_dly(7)'last_event, tpd_BCIN_PCOUT((863 - 34)- 48*10), true),
			35 => (BCIN_dly(6)'last_event, tpd_BCIN_PCOUT((863 - 34)- 48*11), true),
			36 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 34)- 48*12), true),
			37 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 34)- 48*13), true),
			38 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 34)- 48*14), true),
			39 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 34)- 48*15), true),
			40 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 34)- 48*16), true),
			41 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 34)- 48*17), true),
			42 => (C_dly(13)'last_event, tpd_C_PCOUT((2303 - 34)- 48*34), true),
			43 => (C_dly(12)'last_event, tpd_C_PCOUT((2303 - 34)- 48*35), true),
			44 => (C_dly(11)'last_event, tpd_C_PCOUT((2303 - 34)- 48*36), true),
			45 => (C_dly(10)'last_event, tpd_C_PCOUT((2303 - 34)- 48*37), true),
			46 => (C_dly(9)'last_event, tpd_C_PCOUT((2303 - 34)- 48*38), true),
			47 => (C_dly(8)'last_event, tpd_C_PCOUT((2303 - 34)- 48*39), true),
			48 => (C_dly(7)'last_event, tpd_C_PCOUT((2303 - 34)- 48*40), true),
			49 => (C_dly(6)'last_event, tpd_C_PCOUT((2303 - 34)- 48*41), true),
			50 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 34)- 48*42), true),
			51 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 34)- 48*43), true),
			52 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 34)- 48*44), true),
			53 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 34)- 48*45), true),
			54 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 34)- 48*46), true),
			55 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 34)- 48*47), true),
			56 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(13), true),
			57 => (D_dly(13)'last_event, tpd_D_PCOUT((863 - 34)- 48*4), true),
			58 => (D_dly(12)'last_event, tpd_D_PCOUT((863 - 34)- 48*5), true),
			59 => (D_dly(11)'last_event, tpd_D_PCOUT((863 - 34)- 48*6), true),
			60 => (D_dly(10)'last_event, tpd_D_PCOUT((863 - 34)- 48*7), true),
			61 => (D_dly(9)'last_event, tpd_D_PCOUT((863 - 34)- 48*8), true),
			62 => (D_dly(8)'last_event, tpd_D_PCOUT((863 - 34)- 48*9), true),
			63 => (D_dly(7)'last_event, tpd_D_PCOUT((863 - 34)- 48*10), true),
			64 => (D_dly(6)'last_event, tpd_D_PCOUT((863 - 34)- 48*11), true),
			65 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 34)- 48*12), true),
			66 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 34)- 48*13), true),
			67 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 34)- 48*14), true),
			68 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 34)- 48*15), true),
			69 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 34)- 48*16), true),
			70 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 34)- 48*17), true),
			71 => (OPMODE_dly(7)'last_event, tpd_OPMODE_PCOUT((383 - 34)- 48*0), true),
			72 => (OPMODE_dly(6)'last_event, tpd_OPMODE_PCOUT((383 - 34)- 48*1), true),
			73 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 34)- 48*2), true),
			74 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 34)- 48*3), true),
			75 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 34)- 48*4), true),
			76 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 34)- 48*5), true),
			77 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 34)- 48*6), true),
			78 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 34)- 48*7), true),
			79 => (PCIN_dly(13)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*34), true),
			80 => (PCIN_dly(12)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*35), true),
			81 => (PCIN_dly(11)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*36), true),
			82 => (PCIN_dly(10)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*37), true),
			83 => (PCIN_dly(9)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*38), true),
			84 => (PCIN_dly(8)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*39), true),
			85 => (PCIN_dly(7)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*40), true),
			86 => (PCIN_dly(6)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*41), true),
			87 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*42), true),
			88 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*43), true),
			89 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*44), true),
			90 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*45), true),
			91 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*46), true),
			92 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 34)- 48*47), true),
			93 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(13), true),
			94 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(13), true),
			95 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(13), true),
			96 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(13), true),
			97 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(13), true),
			98 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(13), true),
			99 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(13), true),
			100 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(13), true),
			101 => (CLK_dly'last_event, tpd_CLK_PCOUT(13), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(12),
         GlitchData	=> PCOUT_GlitchData(12),
         OutSignalName	=> "PCOUT(12)",
         OutTemp	=> PCOUT_zd(12),
         Paths		=> (
			0 => (A_dly(12)'last_event, tpd_A_PCOUT((863 - 35)- 48*5), true),
			1 => (A_dly(11)'last_event, tpd_A_PCOUT((863 - 35)- 48*6), true),
			2 => (A_dly(10)'last_event, tpd_A_PCOUT((863 - 35)- 48*7), true),
			3 => (A_dly(9)'last_event, tpd_A_PCOUT((863 - 35)- 48*8), true),
			4 => (A_dly(8)'last_event, tpd_A_PCOUT((863 - 35)- 48*9), true),
			5 => (A_dly(7)'last_event, tpd_A_PCOUT((863 - 35)- 48*10), true),
			6 => (A_dly(6)'last_event, tpd_A_PCOUT((863 - 35)- 48*11), true),
			7 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 35)- 48*12), true),
			8 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 35)- 48*13), true),
			9 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 35)- 48*14), true),
			10 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 35)- 48*15), true),
			11 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 35)- 48*16), true),
			12 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 35)- 48*17), true),
			13 => (B_dly(12)'last_event, tpd_B_PCOUT((863 - 35)- 48*5), true),
			14 => (B_dly(11)'last_event, tpd_B_PCOUT((863 - 35)- 48*6), true),
			15 => (B_dly(10)'last_event, tpd_B_PCOUT((863 - 35)- 48*7), true),
			16 => (B_dly(9)'last_event, tpd_B_PCOUT((863 - 35)- 48*8), true),
			17 => (B_dly(8)'last_event, tpd_B_PCOUT((863 - 35)- 48*9), true),
			18 => (B_dly(7)'last_event, tpd_B_PCOUT((863 - 35)- 48*10), true),
			19 => (B_dly(6)'last_event, tpd_B_PCOUT((863 - 35)- 48*11), true),
			20 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 35)- 48*12), true),
			21 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 35)- 48*13), true),
			22 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 35)- 48*14), true),
			23 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 35)- 48*15), true),
			24 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 35)- 48*16), true),
			25 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 35)- 48*17), true),
			26 => (BCIN_dly(12)'last_event, tpd_BCIN_PCOUT((863 - 35)- 48*5), true),
			27 => (BCIN_dly(11)'last_event, tpd_BCIN_PCOUT((863 - 35)- 48*6), true),
			28 => (BCIN_dly(10)'last_event, tpd_BCIN_PCOUT((863 - 35)- 48*7), true),
			29 => (BCIN_dly(9)'last_event, tpd_BCIN_PCOUT((863 - 35)- 48*8), true),
			30 => (BCIN_dly(8)'last_event, tpd_BCIN_PCOUT((863 - 35)- 48*9), true),
			31 => (BCIN_dly(7)'last_event, tpd_BCIN_PCOUT((863 - 35)- 48*10), true),
			32 => (BCIN_dly(6)'last_event, tpd_BCIN_PCOUT((863 - 35)- 48*11), true),
			33 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 35)- 48*12), true),
			34 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 35)- 48*13), true),
			35 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 35)- 48*14), true),
			36 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 35)- 48*15), true),
			37 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 35)- 48*16), true),
			38 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 35)- 48*17), true),
			39 => (C_dly(12)'last_event, tpd_C_PCOUT((2303 - 35)- 48*35), true),
			40 => (C_dly(11)'last_event, tpd_C_PCOUT((2303 - 35)- 48*36), true),
			41 => (C_dly(10)'last_event, tpd_C_PCOUT((2303 - 35)- 48*37), true),
			42 => (C_dly(9)'last_event, tpd_C_PCOUT((2303 - 35)- 48*38), true),
			43 => (C_dly(8)'last_event, tpd_C_PCOUT((2303 - 35)- 48*39), true),
			44 => (C_dly(7)'last_event, tpd_C_PCOUT((2303 - 35)- 48*40), true),
			45 => (C_dly(6)'last_event, tpd_C_PCOUT((2303 - 35)- 48*41), true),
			46 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 35)- 48*42), true),
			47 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 35)- 48*43), true),
			48 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 35)- 48*44), true),
			49 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 35)- 48*45), true),
			50 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 35)- 48*46), true),
			51 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 35)- 48*47), true),
			52 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(12), true),
			53 => (D_dly(12)'last_event, tpd_D_PCOUT((863 - 35)- 48*5), true),
			54 => (D_dly(11)'last_event, tpd_D_PCOUT((863 - 35)- 48*6), true),
			55 => (D_dly(10)'last_event, tpd_D_PCOUT((863 - 35)- 48*7), true),
			56 => (D_dly(9)'last_event, tpd_D_PCOUT((863 - 35)- 48*8), true),
			57 => (D_dly(8)'last_event, tpd_D_PCOUT((863 - 35)- 48*9), true),
			58 => (D_dly(7)'last_event, tpd_D_PCOUT((863 - 35)- 48*10), true),
			59 => (D_dly(6)'last_event, tpd_D_PCOUT((863 - 35)- 48*11), true),
			60 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 35)- 48*12), true),
			61 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 35)- 48*13), true),
			62 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 35)- 48*14), true),
			63 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 35)- 48*15), true),
			64 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 35)- 48*16), true),
			65 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 35)- 48*17), true),
			66 => (OPMODE_dly(7)'last_event, tpd_OPMODE_PCOUT((383 - 35)- 48*0), true),
			67 => (OPMODE_dly(6)'last_event, tpd_OPMODE_PCOUT((383 - 35)- 48*1), true),
			68 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 35)- 48*2), true),
			69 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 35)- 48*3), true),
			70 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 35)- 48*4), true),
			71 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 35)- 48*5), true),
			72 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 35)- 48*6), true),
			73 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 35)- 48*7), true),
			74 => (PCIN_dly(12)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*35), true),
			75 => (PCIN_dly(11)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*36), true),
			76 => (PCIN_dly(10)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*37), true),
			77 => (PCIN_dly(9)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*38), true),
			78 => (PCIN_dly(8)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*39), true),
			79 => (PCIN_dly(7)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*40), true),
			80 => (PCIN_dly(6)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*41), true),
			81 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*42), true),
			82 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*43), true),
			83 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*44), true),
			84 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*45), true),
			85 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*46), true),
			86 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 35)- 48*47), true),
			87 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(12), true),
			88 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(12), true),
			89 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(12), true),
			90 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(12), true),
			91 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(12), true),
			92 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(12), true),
			93 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(12), true),
			94 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(12), true),
			95 => (CLK_dly'last_event, tpd_CLK_PCOUT(12), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(11),
         GlitchData	=> PCOUT_GlitchData(11),
         OutSignalName	=> "PCOUT(11)",
         OutTemp	=> PCOUT_zd(11),
         Paths		=> (
			0 => (A_dly(11)'last_event, tpd_A_PCOUT((863 - 36)- 48*6), true),
			1 => (A_dly(10)'last_event, tpd_A_PCOUT((863 - 36)- 48*7), true),
			2 => (A_dly(9)'last_event, tpd_A_PCOUT((863 - 36)- 48*8), true),
			3 => (A_dly(8)'last_event, tpd_A_PCOUT((863 - 36)- 48*9), true),
			4 => (A_dly(7)'last_event, tpd_A_PCOUT((863 - 36)- 48*10), true),
			5 => (A_dly(6)'last_event, tpd_A_PCOUT((863 - 36)- 48*11), true),
			6 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 36)- 48*12), true),
			7 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 36)- 48*13), true),
			8 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 36)- 48*14), true),
			9 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 36)- 48*15), true),
			10 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 36)- 48*16), true),
			11 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 36)- 48*17), true),
			12 => (B_dly(11)'last_event, tpd_B_PCOUT((863 - 36)- 48*6), true),
			13 => (B_dly(10)'last_event, tpd_B_PCOUT((863 - 36)- 48*7), true),
			14 => (B_dly(9)'last_event, tpd_B_PCOUT((863 - 36)- 48*8), true),
			15 => (B_dly(8)'last_event, tpd_B_PCOUT((863 - 36)- 48*9), true),
			16 => (B_dly(7)'last_event, tpd_B_PCOUT((863 - 36)- 48*10), true),
			17 => (B_dly(6)'last_event, tpd_B_PCOUT((863 - 36)- 48*11), true),
			18 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 36)- 48*12), true),
			19 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 36)- 48*13), true),
			20 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 36)- 48*14), true),
			21 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 36)- 48*15), true),
			22 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 36)- 48*16), true),
			23 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 36)- 48*17), true),
			24 => (BCIN_dly(11)'last_event, tpd_BCIN_PCOUT((863 - 36)- 48*6), true),
			25 => (BCIN_dly(10)'last_event, tpd_BCIN_PCOUT((863 - 36)- 48*7), true),
			26 => (BCIN_dly(9)'last_event, tpd_BCIN_PCOUT((863 - 36)- 48*8), true),
			27 => (BCIN_dly(8)'last_event, tpd_BCIN_PCOUT((863 - 36)- 48*9), true),
			28 => (BCIN_dly(7)'last_event, tpd_BCIN_PCOUT((863 - 36)- 48*10), true),
			29 => (BCIN_dly(6)'last_event, tpd_BCIN_PCOUT((863 - 36)- 48*11), true),
			30 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 36)- 48*12), true),
			31 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 36)- 48*13), true),
			32 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 36)- 48*14), true),
			33 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 36)- 48*15), true),
			34 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 36)- 48*16), true),
			35 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 36)- 48*17), true),
			36 => (C_dly(11)'last_event, tpd_C_PCOUT((2303 - 36)- 48*36), true),
			37 => (C_dly(10)'last_event, tpd_C_PCOUT((2303 - 36)- 48*37), true),
			38 => (C_dly(9)'last_event, tpd_C_PCOUT((2303 - 36)- 48*38), true),
			39 => (C_dly(8)'last_event, tpd_C_PCOUT((2303 - 36)- 48*39), true),
			40 => (C_dly(7)'last_event, tpd_C_PCOUT((2303 - 36)- 48*40), true),
			41 => (C_dly(6)'last_event, tpd_C_PCOUT((2303 - 36)- 48*41), true),
			42 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 36)- 48*42), true),
			43 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 36)- 48*43), true),
			44 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 36)- 48*44), true),
			45 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 36)- 48*45), true),
			46 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 36)- 48*46), true),
			47 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 36)- 48*47), true),
			48 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(11), true),
			49 => (D_dly(11)'last_event, tpd_D_PCOUT((863 - 36)- 48*6), true),
			50 => (D_dly(10)'last_event, tpd_D_PCOUT((863 - 36)- 48*7), true),
			51 => (D_dly(9)'last_event, tpd_D_PCOUT((863 - 36)- 48*8), true),
			52 => (D_dly(8)'last_event, tpd_D_PCOUT((863 - 36)- 48*9), true),
			53 => (D_dly(7)'last_event, tpd_D_PCOUT((863 - 36)- 48*10), true),
			54 => (D_dly(6)'last_event, tpd_D_PCOUT((863 - 36)- 48*11), true),
			55 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 36)- 48*12), true),
			56 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 36)- 48*13), true),
			57 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 36)- 48*14), true),
			58 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 36)- 48*15), true),
			59 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 36)- 48*16), true),
			60 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 36)- 48*17), true),
			61 => (OPMODE_dly(7)'last_event, tpd_OPMODE_PCOUT((383 - 36)- 48*0), true),
			62 => (OPMODE_dly(6)'last_event, tpd_OPMODE_PCOUT((383 - 36)- 48*1), true),
			63 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 36)- 48*2), true),
			64 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 36)- 48*3), true),
			65 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 36)- 48*4), true),
			66 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 36)- 48*5), true),
			67 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 36)- 48*6), true),
			68 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 36)- 48*7), true),
			69 => (PCIN_dly(11)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*36), true),
			70 => (PCIN_dly(10)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*37), true),
			71 => (PCIN_dly(9)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*38), true),
			72 => (PCIN_dly(8)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*39), true),
			73 => (PCIN_dly(7)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*40), true),
			74 => (PCIN_dly(6)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*41), true),
			75 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*42), true),
			76 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*43), true),
			77 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*44), true),
			78 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*45), true),
			79 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*46), true),
			80 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 36)- 48*47), true),
			81 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(11), true),
			82 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(11), true),
			83 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(11), true),
			84 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(11), true),
			85 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(11), true),
			86 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(11), true),
			87 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(11), true),
			88 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(11), true),
			89 => (CLK_dly'last_event, tpd_CLK_PCOUT(11), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(10),
         GlitchData	=> PCOUT_GlitchData(10),
         OutSignalName	=> "PCOUT(10)",
         OutTemp	=> PCOUT_zd(10),
         Paths		=> (
			0 => (A_dly(10)'last_event, tpd_A_PCOUT((863 - 37)- 48*7), true),
			1 => (A_dly(9)'last_event, tpd_A_PCOUT((863 - 37)- 48*8), true),
			2 => (A_dly(8)'last_event, tpd_A_PCOUT((863 - 37)- 48*9), true),
			3 => (A_dly(7)'last_event, tpd_A_PCOUT((863 - 37)- 48*10), true),
			4 => (A_dly(6)'last_event, tpd_A_PCOUT((863 - 37)- 48*11), true),
			5 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 37)- 48*12), true),
			6 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 37)- 48*13), true),
			7 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 37)- 48*14), true),
			8 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 37)- 48*15), true),
			9 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 37)- 48*16), true),
			10 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 37)- 48*17), true),
			11 => (B_dly(10)'last_event, tpd_B_PCOUT((863 - 37)- 48*7), true),
			12 => (B_dly(9)'last_event, tpd_B_PCOUT((863 - 37)- 48*8), true),
			13 => (B_dly(8)'last_event, tpd_B_PCOUT((863 - 37)- 48*9), true),
			14 => (B_dly(7)'last_event, tpd_B_PCOUT((863 - 37)- 48*10), true),
			15 => (B_dly(6)'last_event, tpd_B_PCOUT((863 - 37)- 48*11), true),
			16 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 37)- 48*12), true),
			17 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 37)- 48*13), true),
			18 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 37)- 48*14), true),
			19 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 37)- 48*15), true),
			20 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 37)- 48*16), true),
			21 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 37)- 48*17), true),
			22 => (BCIN_dly(10)'last_event, tpd_BCIN_PCOUT((863 - 37)- 48*7), true),
			23 => (BCIN_dly(9)'last_event, tpd_BCIN_PCOUT((863 - 37)- 48*8), true),
			24 => (BCIN_dly(8)'last_event, tpd_BCIN_PCOUT((863 - 37)- 48*9), true),
			25 => (BCIN_dly(7)'last_event, tpd_BCIN_PCOUT((863 - 37)- 48*10), true),
			26 => (BCIN_dly(6)'last_event, tpd_BCIN_PCOUT((863 - 37)- 48*11), true),
			27 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 37)- 48*12), true),
			28 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 37)- 48*13), true),
			29 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 37)- 48*14), true),
			30 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 37)- 48*15), true),
			31 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 37)- 48*16), true),
			32 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 37)- 48*17), true),
			33 => (C_dly(10)'last_event, tpd_C_PCOUT((2303 - 37)- 48*37), true),
			34 => (C_dly(9)'last_event, tpd_C_PCOUT((2303 - 37)- 48*38), true),
			35 => (C_dly(8)'last_event, tpd_C_PCOUT((2303 - 37)- 48*39), true),
			36 => (C_dly(7)'last_event, tpd_C_PCOUT((2303 - 37)- 48*40), true),
			37 => (C_dly(6)'last_event, tpd_C_PCOUT((2303 - 37)- 48*41), true),
			38 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 37)- 48*42), true),
			39 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 37)- 48*43), true),
			40 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 37)- 48*44), true),
			41 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 37)- 48*45), true),
			42 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 37)- 48*46), true),
			43 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 37)- 48*47), true),
			44 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(10), true),
			45 => (D_dly(10)'last_event, tpd_D_PCOUT((863 - 37)- 48*7), true),
			46 => (D_dly(9)'last_event, tpd_D_PCOUT((863 - 37)- 48*8), true),
			47 => (D_dly(8)'last_event, tpd_D_PCOUT((863 - 37)- 48*9), true),
			48 => (D_dly(7)'last_event, tpd_D_PCOUT((863 - 37)- 48*10), true),
			49 => (D_dly(6)'last_event, tpd_D_PCOUT((863 - 37)- 48*11), true),
			50 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 37)- 48*12), true),
			51 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 37)- 48*13), true),
			52 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 37)- 48*14), true),
			53 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 37)- 48*15), true),
			54 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 37)- 48*16), true),
			55 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 37)- 48*17), true),
			56 => (OPMODE_dly(7)'last_event, tpd_OPMODE_PCOUT((383 - 37)- 48*0), true),
			57 => (OPMODE_dly(6)'last_event, tpd_OPMODE_PCOUT((383 - 37)- 48*1), true),
			58 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 37)- 48*2), true),
			59 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 37)- 48*3), true),
			60 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 37)- 48*4), true),
			61 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 37)- 48*5), true),
			62 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 37)- 48*6), true),
			63 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 37)- 48*7), true),
			64 => (PCIN_dly(10)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*37), true),
			65 => (PCIN_dly(9)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*38), true),
			66 => (PCIN_dly(8)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*39), true),
			67 => (PCIN_dly(7)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*40), true),
			68 => (PCIN_dly(6)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*41), true),
			69 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*42), true),
			70 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*43), true),
			71 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*44), true),
			72 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*45), true),
			73 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*46), true),
			74 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 37)- 48*47), true),
			75 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(10), true),
			76 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(10), true),
			77 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(10), true),
			78 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(10), true),
			79 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(10), true),
			80 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(10), true),
			81 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(10), true),
			82 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(10), true),
			83 => (CLK_dly'last_event, tpd_CLK_PCOUT(10), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(9),
         GlitchData	=> PCOUT_GlitchData(9),
         OutSignalName	=> "PCOUT(9)",
         OutTemp	=> PCOUT_zd(9),
         Paths		=> (
			0 => (A_dly(9)'last_event, tpd_A_PCOUT((863 - 38)- 48*8), true),
			1 => (A_dly(8)'last_event, tpd_A_PCOUT((863 - 38)- 48*9), true),
			2 => (A_dly(7)'last_event, tpd_A_PCOUT((863 - 38)- 48*10), true),
			3 => (A_dly(6)'last_event, tpd_A_PCOUT((863 - 38)- 48*11), true),
			4 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 38)- 48*12), true),
			5 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 38)- 48*13), true),
			6 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 38)- 48*14), true),
			7 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 38)- 48*15), true),
			8 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 38)- 48*16), true),
			9 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 38)- 48*17), true),
			10 => (B_dly(9)'last_event, tpd_B_PCOUT((863 - 38)- 48*8), true),
			11 => (B_dly(8)'last_event, tpd_B_PCOUT((863 - 38)- 48*9), true),
			12 => (B_dly(7)'last_event, tpd_B_PCOUT((863 - 38)- 48*10), true),
			13 => (B_dly(6)'last_event, tpd_B_PCOUT((863 - 38)- 48*11), true),
			14 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 38)- 48*12), true),
			15 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 38)- 48*13), true),
			16 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 38)- 48*14), true),
			17 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 38)- 48*15), true),
			18 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 38)- 48*16), true),
			19 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 38)- 48*17), true),
			20 => (BCIN_dly(9)'last_event, tpd_BCIN_PCOUT((863 - 38)- 48*8), true),
			21 => (BCIN_dly(8)'last_event, tpd_BCIN_PCOUT((863 - 38)- 48*9), true),
			22 => (BCIN_dly(7)'last_event, tpd_BCIN_PCOUT((863 - 38)- 48*10), true),
			23 => (BCIN_dly(6)'last_event, tpd_BCIN_PCOUT((863 - 38)- 48*11), true),
			24 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 38)- 48*12), true),
			25 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 38)- 48*13), true),
			26 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 38)- 48*14), true),
			27 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 38)- 48*15), true),
			28 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 38)- 48*16), true),
			29 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 38)- 48*17), true),
			30 => (C_dly(9)'last_event, tpd_C_PCOUT((2303 - 38)- 48*38), true),
			31 => (C_dly(8)'last_event, tpd_C_PCOUT((2303 - 38)- 48*39), true),
			32 => (C_dly(7)'last_event, tpd_C_PCOUT((2303 - 38)- 48*40), true),
			33 => (C_dly(6)'last_event, tpd_C_PCOUT((2303 - 38)- 48*41), true),
			34 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 38)- 48*42), true),
			35 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 38)- 48*43), true),
			36 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 38)- 48*44), true),
			37 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 38)- 48*45), true),
			38 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 38)- 48*46), true),
			39 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 38)- 48*47), true),
			40 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(9), true),
			41 => (D_dly(9)'last_event, tpd_D_PCOUT((863 - 38)- 48*8), true),
			42 => (D_dly(8)'last_event, tpd_D_PCOUT((863 - 38)- 48*9), true),
			43 => (D_dly(7)'last_event, tpd_D_PCOUT((863 - 38)- 48*10), true),
			44 => (D_dly(6)'last_event, tpd_D_PCOUT((863 - 38)- 48*11), true),
			45 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 38)- 48*12), true),
			46 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 38)- 48*13), true),
			47 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 38)- 48*14), true),
			48 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 38)- 48*15), true),
			49 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 38)- 48*16), true),
			50 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 38)- 48*17), true),
			51 => (OPMODE_dly(7)'last_event, tpd_OPMODE_PCOUT((383 - 38)- 48*0), true),
			52 => (OPMODE_dly(6)'last_event, tpd_OPMODE_PCOUT((383 - 38)- 48*1), true),
			53 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 38)- 48*2), true),
			54 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 38)- 48*3), true),
			55 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 38)- 48*4), true),
			56 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 38)- 48*5), true),
			57 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 38)- 48*6), true),
			58 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 38)- 48*7), true),
			59 => (PCIN_dly(9)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*38), true),
			60 => (PCIN_dly(8)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*39), true),
			61 => (PCIN_dly(7)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*40), true),
			62 => (PCIN_dly(6)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*41), true),
			63 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*42), true),
			64 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*43), true),
			65 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*44), true),
			66 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*45), true),
			67 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*46), true),
			68 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 38)- 48*47), true),
			69 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(9), true),
			70 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(9), true),
			71 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(9), true),
			72 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(9), true),
			73 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(9), true),
			74 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(9), true),
			75 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(9), true),
			76 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(9), true),
			77 => (CLK_dly'last_event, tpd_CLK_PCOUT(9), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(8),
         GlitchData	=> PCOUT_GlitchData(8),
         OutSignalName	=> "PCOUT(8)",
         OutTemp	=> PCOUT_zd(8),
         Paths		=> (
			0 => (A_dly(8)'last_event, tpd_A_PCOUT((863 - 39)- 48*9), true),
			1 => (A_dly(7)'last_event, tpd_A_PCOUT((863 - 39)- 48*10), true),
			2 => (A_dly(6)'last_event, tpd_A_PCOUT((863 - 39)- 48*11), true),
			3 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 39)- 48*12), true),
			4 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 39)- 48*13), true),
			5 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 39)- 48*14), true),
			6 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 39)- 48*15), true),
			7 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 39)- 48*16), true),
			8 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 39)- 48*17), true),
			9 => (B_dly(8)'last_event, tpd_B_PCOUT((863 - 39)- 48*9), true),
			10 => (B_dly(7)'last_event, tpd_B_PCOUT((863 - 39)- 48*10), true),
			11 => (B_dly(6)'last_event, tpd_B_PCOUT((863 - 39)- 48*11), true),
			12 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 39)- 48*12), true),
			13 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 39)- 48*13), true),
			14 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 39)- 48*14), true),
			15 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 39)- 48*15), true),
			16 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 39)- 48*16), true),
			17 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 39)- 48*17), true),
			18 => (BCIN_dly(8)'last_event, tpd_BCIN_PCOUT((863 - 39)- 48*9), true),
			19 => (BCIN_dly(7)'last_event, tpd_BCIN_PCOUT((863 - 39)- 48*10), true),
			20 => (BCIN_dly(6)'last_event, tpd_BCIN_PCOUT((863 - 39)- 48*11), true),
			21 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 39)- 48*12), true),
			22 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 39)- 48*13), true),
			23 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 39)- 48*14), true),
			24 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 39)- 48*15), true),
			25 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 39)- 48*16), true),
			26 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 39)- 48*17), true),
			27 => (C_dly(8)'last_event, tpd_C_PCOUT((2303 - 39)- 48*39), true),
			28 => (C_dly(7)'last_event, tpd_C_PCOUT((2303 - 39)- 48*40), true),
			29 => (C_dly(6)'last_event, tpd_C_PCOUT((2303 - 39)- 48*41), true),
			30 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 39)- 48*42), true),
			31 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 39)- 48*43), true),
			32 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 39)- 48*44), true),
			33 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 39)- 48*45), true),
			34 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 39)- 48*46), true),
			35 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 39)- 48*47), true),
			36 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(8), true),
			37 => (D_dly(8)'last_event, tpd_D_PCOUT((863 - 39)- 48*9), true),
			38 => (D_dly(7)'last_event, tpd_D_PCOUT((863 - 39)- 48*10), true),
			39 => (D_dly(6)'last_event, tpd_D_PCOUT((863 - 39)- 48*11), true),
			40 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 39)- 48*12), true),
			41 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 39)- 48*13), true),
			42 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 39)- 48*14), true),
			43 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 39)- 48*15), true),
			44 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 39)- 48*16), true),
			45 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 39)- 48*17), true),
			46 => (OPMODE_dly(7)'last_event, tpd_OPMODE_PCOUT((383 - 39)- 48*0), true),
			47 => (OPMODE_dly(6)'last_event, tpd_OPMODE_PCOUT((383 - 39)- 48*1), true),
			48 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 39)- 48*2), true),
			49 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 39)- 48*3), true),
			50 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 39)- 48*4), true),
			51 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 39)- 48*5), true),
			52 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 39)- 48*6), true),
			53 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 39)- 48*7), true),
			54 => (PCIN_dly(8)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*39), true),
			55 => (PCIN_dly(7)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*40), true),
			56 => (PCIN_dly(6)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*41), true),
			57 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*42), true),
			58 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*43), true),
			59 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*44), true),
			60 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*45), true),
			61 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*46), true),
			62 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 39)- 48*47), true),
			63 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(8), true),
			64 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(8), true),
			65 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(8), true),
			66 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(8), true),
			67 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(8), true),
			68 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(8), true),
			69 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(8), true),
			70 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(8), true),
			71 => (CLK_dly'last_event, tpd_CLK_PCOUT(8), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(7),
         GlitchData	=> PCOUT_GlitchData(7),
         OutSignalName	=> "PCOUT(7)",
         OutTemp	=> PCOUT_zd(7),
         Paths		=> (
			0 => (A_dly(7)'last_event, tpd_A_PCOUT((863 - 40)- 48*10), true),
			1 => (A_dly(6)'last_event, tpd_A_PCOUT((863 - 40)- 48*11), true),
			2 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 40)- 48*12), true),
			3 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 40)- 48*13), true),
			4 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 40)- 48*14), true),
			5 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 40)- 48*15), true),
			6 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 40)- 48*16), true),
			7 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 40)- 48*17), true),
			8 => (B_dly(7)'last_event, tpd_B_PCOUT((863 - 40)- 48*10), true),
			9 => (B_dly(6)'last_event, tpd_B_PCOUT((863 - 40)- 48*11), true),
			10 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 40)- 48*12), true),
			11 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 40)- 48*13), true),
			12 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 40)- 48*14), true),
			13 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 40)- 48*15), true),
			14 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 40)- 48*16), true),
			15 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 40)- 48*17), true),
			16 => (BCIN_dly(7)'last_event, tpd_BCIN_PCOUT((863 - 40)- 48*10), true),
			17 => (BCIN_dly(6)'last_event, tpd_BCIN_PCOUT((863 - 40)- 48*11), true),
			18 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 40)- 48*12), true),
			19 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 40)- 48*13), true),
			20 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 40)- 48*14), true),
			21 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 40)- 48*15), true),
			22 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 40)- 48*16), true),
			23 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 40)- 48*17), true),
			24 => (C_dly(7)'last_event, tpd_C_PCOUT((2303 - 40)- 48*40), true),
			25 => (C_dly(6)'last_event, tpd_C_PCOUT((2303 - 40)- 48*41), true),
			26 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 40)- 48*42), true),
			27 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 40)- 48*43), true),
			28 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 40)- 48*44), true),
			29 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 40)- 48*45), true),
			30 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 40)- 48*46), true),
			31 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 40)- 48*47), true),
			32 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(7), true),
			33 => (D_dly(7)'last_event, tpd_D_PCOUT((863 - 40)- 48*10), true),
			34 => (D_dly(6)'last_event, tpd_D_PCOUT((863 - 40)- 48*11), true),
			35 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 40)- 48*12), true),
			36 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 40)- 48*13), true),
			37 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 40)- 48*14), true),
			38 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 40)- 48*15), true),
			39 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 40)- 48*16), true),
			40 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 40)- 48*17), true),
			41 => (OPMODE_dly(7)'last_event, tpd_OPMODE_PCOUT((383 - 40)- 48*0), true),
			42 => (OPMODE_dly(6)'last_event, tpd_OPMODE_PCOUT((383 - 40)- 48*1), true),
			43 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 40)- 48*2), true),
			44 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 40)- 48*3), true),
			45 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 40)- 48*4), true),
			46 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 40)- 48*5), true),
			47 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 40)- 48*6), true),
			48 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 40)- 48*7), true),
			49 => (PCIN_dly(7)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*40), true),
			50 => (PCIN_dly(6)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*41), true),
			51 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*42), true),
			52 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*43), true),
			53 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*44), true),
			54 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*45), true),
			55 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*46), true),
			56 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 40)- 48*47), true),
			57 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(7), true),
			58 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(7), true),
			59 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(7), true),
			60 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(7), true),
			61 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(7), true),
			62 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(7), true),
			63 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(7), true),
			64 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(7), true),
			65 => (CLK_dly'last_event, tpd_CLK_PCOUT(7), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(6),
         GlitchData	=> PCOUT_GlitchData(6),
         OutSignalName	=> "PCOUT(6)",
         OutTemp	=> PCOUT_zd(6),
         Paths		=> (
			0 => (A_dly(6)'last_event, tpd_A_PCOUT((863 - 41)- 48*11), true),
			1 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 41)- 48*12), true),
			2 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 41)- 48*13), true),
			3 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 41)- 48*14), true),
			4 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 41)- 48*15), true),
			5 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 41)- 48*16), true),
			6 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 41)- 48*17), true),
			7 => (B_dly(6)'last_event, tpd_B_PCOUT((863 - 41)- 48*11), true),
			8 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 41)- 48*12), true),
			9 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 41)- 48*13), true),
			10 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 41)- 48*14), true),
			11 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 41)- 48*15), true),
			12 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 41)- 48*16), true),
			13 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 41)- 48*17), true),
			14 => (BCIN_dly(6)'last_event, tpd_BCIN_PCOUT((863 - 41)- 48*11), true),
			15 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 41)- 48*12), true),
			16 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 41)- 48*13), true),
			17 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 41)- 48*14), true),
			18 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 41)- 48*15), true),
			19 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 41)- 48*16), true),
			20 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 41)- 48*17), true),
			21 => (C_dly(6)'last_event, tpd_C_PCOUT((2303 - 41)- 48*41), true),
			22 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 41)- 48*42), true),
			23 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 41)- 48*43), true),
			24 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 41)- 48*44), true),
			25 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 41)- 48*45), true),
			26 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 41)- 48*46), true),
			27 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 41)- 48*47), true),
			28 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(6), true),
			29 => (D_dly(6)'last_event, tpd_D_PCOUT((863 - 41)- 48*11), true),
			30 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 41)- 48*12), true),
			31 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 41)- 48*13), true),
			32 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 41)- 48*14), true),
			33 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 41)- 48*15), true),
			34 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 41)- 48*16), true),
			35 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 41)- 48*17), true),
			36 => (OPMODE_dly(6)'last_event, tpd_OPMODE_PCOUT((383 - 41)- 48*1), true),
			37 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 41)- 48*2), true),
			38 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 41)- 48*3), true),
			39 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 41)- 48*4), true),
			40 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 41)- 48*5), true),
			41 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 41)- 48*6), true),
			42 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 41)- 48*7), true),
			43 => (PCIN_dly(6)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*41), true),
			44 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*42), true),
			45 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*43), true),
			46 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*44), true),
			47 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*45), true),
			48 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*46), true),
			49 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 41)- 48*47), true),
			50 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(6), true),
			51 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(6), true),
			52 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(6), true),
			53 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(6), true),
			54 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(6), true),
			55 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(6), true),
			56 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(6), true),
			57 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(6), true),
			58 => (CLK_dly'last_event, tpd_CLK_PCOUT(6), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(5),
         GlitchData	=> PCOUT_GlitchData(5),
         OutSignalName	=> "PCOUT(5)",
         OutTemp	=> PCOUT_zd(5),
         Paths		=> (
			0 => (A_dly(5)'last_event, tpd_A_PCOUT((863 - 42)- 48*12), true),
			1 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 42)- 48*13), true),
			2 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 42)- 48*14), true),
			3 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 42)- 48*15), true),
			4 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 42)- 48*16), true),
			5 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 42)- 48*17), true),
			6 => (B_dly(5)'last_event, tpd_B_PCOUT((863 - 42)- 48*12), true),
			7 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 42)- 48*13), true),
			8 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 42)- 48*14), true),
			9 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 42)- 48*15), true),
			10 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 42)- 48*16), true),
			11 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 42)- 48*17), true),
			12 => (BCIN_dly(5)'last_event, tpd_BCIN_PCOUT((863 - 42)- 48*12), true),
			13 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 42)- 48*13), true),
			14 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 42)- 48*14), true),
			15 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 42)- 48*15), true),
			16 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 42)- 48*16), true),
			17 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 42)- 48*17), true),
			18 => (C_dly(5)'last_event, tpd_C_PCOUT((2303 - 42)- 48*42), true),
			19 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 42)- 48*43), true),
			20 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 42)- 48*44), true),
			21 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 42)- 48*45), true),
			22 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 42)- 48*46), true),
			23 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 42)- 48*47), true),
			24 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(5), true),
			25 => (D_dly(5)'last_event, tpd_D_PCOUT((863 - 42)- 48*12), true),
			26 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 42)- 48*13), true),
			27 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 42)- 48*14), true),
			28 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 42)- 48*15), true),
			29 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 42)- 48*16), true),
			30 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 42)- 48*17), true),
			31 => (OPMODE_dly(5)'last_event, tpd_OPMODE_PCOUT((383 - 42)- 48*2), true),
			32 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 42)- 48*3), true),
			33 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 42)- 48*4), true),
			34 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 42)- 48*5), true),
			35 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 42)- 48*6), true),
			36 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 42)- 48*7), true),
			37 => (PCIN_dly(5)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*42), true),
			38 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*43), true),
			39 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*44), true),
			40 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*45), true),
			41 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*46), true),
			42 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 42)- 48*47), true),
			43 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(5), true),
			44 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(5), true),
			45 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(5), true),
			46 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(5), true),
			47 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(5), true),
			48 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(5), true),
			49 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(5), true),
			50 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(5), true),
			51 => (CLK_dly'last_event, tpd_CLK_PCOUT(5), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(4),
         GlitchData	=> PCOUT_GlitchData(4),
         OutSignalName	=> "PCOUT(4)",
         OutTemp	=> PCOUT_zd(4),
         Paths		=> (
			0 => (A_dly(4)'last_event, tpd_A_PCOUT((863 - 43)- 48*13), true),
			1 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 43)- 48*14), true),
			2 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 43)- 48*15), true),
			3 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 43)- 48*16), true),
			4 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 43)- 48*17), true),
			5 => (B_dly(4)'last_event, tpd_B_PCOUT((863 - 43)- 48*13), true),
			6 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 43)- 48*14), true),
			7 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 43)- 48*15), true),
			8 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 43)- 48*16), true),
			9 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 43)- 48*17), true),
			10 => (BCIN_dly(4)'last_event, tpd_BCIN_PCOUT((863 - 43)- 48*13), true),
			11 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 43)- 48*14), true),
			12 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 43)- 48*15), true),
			13 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 43)- 48*16), true),
			14 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 43)- 48*17), true),
			15 => (C_dly(4)'last_event, tpd_C_PCOUT((2303 - 43)- 48*43), true),
			16 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 43)- 48*44), true),
			17 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 43)- 48*45), true),
			18 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 43)- 48*46), true),
			19 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 43)- 48*47), true),
			20 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(4), true),
			21 => (D_dly(4)'last_event, tpd_D_PCOUT((863 - 43)- 48*13), true),
			22 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 43)- 48*14), true),
			23 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 43)- 48*15), true),
			24 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 43)- 48*16), true),
			25 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 43)- 48*17), true),
			26 => (OPMODE_dly(4)'last_event, tpd_OPMODE_PCOUT((383 - 43)- 48*3), true),
			27 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 43)- 48*4), true),
			28 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 43)- 48*5), true),
			29 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 43)- 48*6), true),
			30 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 43)- 48*7), true),
			31 => (PCIN_dly(4)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*43), true),
			32 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*44), true),
			33 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*45), true),
			34 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*46), true),
			35 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 43)- 48*47), true),
			36 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(4), true),
			37 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(4), true),
			38 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(4), true),
			39 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(4), true),
			40 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(4), true),
			41 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(4), true),
			42 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(4), true),
			43 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(4), true),
			44 => (CLK_dly'last_event, tpd_CLK_PCOUT(4), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(3),
         GlitchData	=> PCOUT_GlitchData(3),
         OutSignalName	=> "PCOUT(3)",
         OutTemp	=> PCOUT_zd(3),
         Paths		=> (
			0 => (A_dly(3)'last_event, tpd_A_PCOUT((863 - 44)- 48*14), true),
			1 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 44)- 48*15), true),
			2 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 44)- 48*16), true),
			3 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 44)- 48*17), true),
			4 => (B_dly(3)'last_event, tpd_B_PCOUT((863 - 44)- 48*14), true),
			5 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 44)- 48*15), true),
			6 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 44)- 48*16), true),
			7 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 44)- 48*17), true),
			8 => (BCIN_dly(3)'last_event, tpd_BCIN_PCOUT((863 - 44)- 48*14), true),
			9 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 44)- 48*15), true),
			10 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 44)- 48*16), true),
			11 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 44)- 48*17), true),
			12 => (C_dly(3)'last_event, tpd_C_PCOUT((2303 - 44)- 48*44), true),
			13 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 44)- 48*45), true),
			14 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 44)- 48*46), true),
			15 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 44)- 48*47), true),
			16 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(3), true),
			17 => (D_dly(3)'last_event, tpd_D_PCOUT((863 - 44)- 48*14), true),
			18 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 44)- 48*15), true),
			19 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 44)- 48*16), true),
			20 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 44)- 48*17), true),
			21 => (OPMODE_dly(3)'last_event, tpd_OPMODE_PCOUT((383 - 44)- 48*4), true),
			22 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 44)- 48*5), true),
			23 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 44)- 48*6), true),
			24 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 44)- 48*7), true),
			25 => (PCIN_dly(3)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*44), true),
			26 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*45), true),
			27 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*46), true),
			28 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 44)- 48*47), true),
			29 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(3), true),
			30 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(3), true),
			31 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(3), true),
			32 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(3), true),
			33 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(3), true),
			34 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(3), true),
			35 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(3), true),
			36 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(3), true),
			37 => (CLK_dly'last_event, tpd_CLK_PCOUT(3), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(2),
         GlitchData	=> PCOUT_GlitchData(2),
         OutSignalName	=> "PCOUT(2)",
         OutTemp	=> PCOUT_zd(2),
         Paths		=> (
			0 => (A_dly(2)'last_event, tpd_A_PCOUT((863 - 45)- 48*15), true),
			1 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 45)- 48*16), true),
			2 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 45)- 48*17), true),
			3 => (B_dly(2)'last_event, tpd_B_PCOUT((863 - 45)- 48*15), true),
			4 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 45)- 48*16), true),
			5 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 45)- 48*17), true),
			6 => (BCIN_dly(2)'last_event, tpd_BCIN_PCOUT((863 - 45)- 48*15), true),
			7 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 45)- 48*16), true),
			8 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 45)- 48*17), true),
			9 => (C_dly(2)'last_event, tpd_C_PCOUT((2303 - 45)- 48*45), true),
			10 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 45)- 48*46), true),
			11 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 45)- 48*47), true),
			12 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(2), true),
			13 => (D_dly(2)'last_event, tpd_D_PCOUT((863 - 45)- 48*15), true),
			14 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 45)- 48*16), true),
			15 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 45)- 48*17), true),
			16 => (OPMODE_dly(2)'last_event, tpd_OPMODE_PCOUT((383 - 45)- 48*5), true),
			17 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 45)- 48*6), true),
			18 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 45)- 48*7), true),
			19 => (PCIN_dly(2)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*45), true),
			20 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*46), true),
			21 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 45)- 48*47), true),
			22 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(2), true),
			23 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(2), true),
			24 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(2), true),
			25 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(2), true),
			26 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(2), true),
			27 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(2), true),
			28 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(2), true),
			29 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(2), true),
			30 => (CLK_dly'last_event, tpd_CLK_PCOUT(2), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(1),
         GlitchData	=> PCOUT_GlitchData(1),
         OutSignalName	=> "PCOUT(1)",
         OutTemp	=> PCOUT_zd(1),
         Paths		=> (
			0 => (A_dly(1)'last_event, tpd_A_PCOUT((863 - 46)- 48*16), true),
			1 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 46)- 48*17), true),
			2 => (B_dly(1)'last_event, tpd_B_PCOUT((863 - 46)- 48*16), true),
			3 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 46)- 48*17), true),
			4 => (BCIN_dly(1)'last_event, tpd_BCIN_PCOUT((863 - 46)- 48*16), true),
			5 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 46)- 48*17), true),
			6 => (C_dly(1)'last_event, tpd_C_PCOUT((2303 - 46)- 48*46), true),
			7 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 46)- 48*47), true),
			8 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(1), true),
			9 => (D_dly(1)'last_event, tpd_D_PCOUT((863 - 46)- 48*16), true),
			10 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 46)- 48*17), true),
			11 => (OPMODE_dly(1)'last_event, tpd_OPMODE_PCOUT((383 - 46)- 48*6), true),
			12 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 46)- 48*7), true),
			13 => (PCIN_dly(1)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*46), true),
			14 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 46)- 48*47), true),
			15 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(1), true),
			16 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(1), true),
			17 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(1), true),
			18 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(1), true),
			19 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(1), true),
			20 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(1), true),
			21 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(1), true),
			22 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(1), true),
			23 => (CLK_dly'last_event, tpd_CLK_PCOUT(1), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

       VitalPathDelay01 (
         OutSignal	=> PCOUT(0),
         GlitchData	=> PCOUT_GlitchData(0),
         OutSignalName	=> "PCOUT(0)",
         OutTemp	=> PCOUT_zd(0),
         Paths		=> (
			0 => (A_dly(0)'last_event, tpd_A_PCOUT((863 - 47)- 48*17), true),
			1 => (B_dly(0)'last_event, tpd_B_PCOUT((863 - 47)- 48*17), true),
			2 => (BCIN_dly(0)'last_event, tpd_BCIN_PCOUT((863 - 47)- 48*17), true),
			3 => (C_dly(0)'last_event, tpd_C_PCOUT((2303 - 47)- 48*47), true),
			4 => (CARRYIN_dly'last_event, tpd_CARRYIN_PCOUT(0), true),
			5 => (D_dly(0)'last_event, tpd_D_PCOUT((863 - 47)- 48*17), true),
			6 => (OPMODE_dly(0)'last_event, tpd_OPMODE_PCOUT((383 - 47)- 48*7), true),
			7 => (PCIN_dly(0)'last_event, tpd_PCIN_PCOUT((2303 - 47)- 48*47), true),
			8 => (RSTA_dly'last_event, tpd_RSTA_PCOUT(0), true),
			9 => (RSTB_dly'last_event, tpd_RSTB_PCOUT(0), true),
			10 => (RSTC_dly'last_event, tpd_RSTC_PCOUT(0), true),
			11 => (RSTCARRYIN_dly'last_event, tpd_RSTCARRYIN_PCOUT(0), true),
			12 => (RSTD_dly'last_event, tpd_RSTD_PCOUT(0), true),
			13 => (RSTM_dly'last_event, tpd_RSTM_PCOUT(0), true),
			14 => (RSTOPMODE_dly'last_event, tpd_RSTOPMODE_PCOUT(0), true),
			15 => (RSTP_dly'last_event, tpd_RSTP_PCOUT(0), true),
			16 => (CLK_dly'last_event, tpd_CLK_PCOUT(0), true)),
         Mode	=> VitalTransport,
         Xon		=> Xon,
         MsgOn	=> MsgOn,
         MsgSeverity	=> Warning);

   wait on
   A_dly,
   B_dly,
   BCIN_dly,
   C_dly,
   CARRYIN_dly,
   CEA_dly,
   CEB_dly,
   CEC_dly,
   CECARRYIN_dly,
   CED_dly,
   CEM_dly,
   CEOPMODE_dly,
   CEP_dly,
   CLK_dly,
   D_dly,
   OPMODE_dly,
   PCIN_dly,
   RSTA_dly,
   RSTB_dly,
   RSTC_dly,
   RSTCARRYIN_dly,
   RSTD_dly,
   RSTM_dly,
   RSTOPMODE_dly,
   RSTP_dly,

   BCOUT_zd,
   CARRYOUT_zd,
   P_zd,
   PCOUT_zd;


   end process prcs_tmngchk;



end X_DSP48A_V;

-------------------------------------------------------------------------------
-- Copyright (c) 1995/2004 Xilinx, Inc.
-- All Right Reserved.
-------------------------------------------------------------------------------
--   ____  ____
--  /   /\/   /
-- /___/  \  /    Vendor : Xilinx
-- \   \   \/     Version : 10.1i
--  \   \         Description : Xilinx Timing Simulation Library Component
--  /   /                  16K-Bit Data and 2K-Bit Parity Dual Port Block RAM
-- /___/   /\     Filename : X_RAMB16BWER.vhd
-- \   \  /  \    Timestamp : Thu Jan 26 16:47:05 PST 2006
--  \___\/\___\
--
-- Revision:
--    01/26/06 - Initial version.
--    08/23/06 - fixed CR 422403.
--    10/16/06 - fixed CR 426962
--    10/19/06 - fixed CR 427370
--    10/26/06 - fixed CR 427914
--    12/07/06 - fixed CR 430517
-- End Revision

----- CELL X_RAMB16BWER -----

library IEEE;
use IEEE.STD_LOGIC_1164.all;

library STD;
use STD.TEXTIO.all;



library IEEE;
use IEEE.VITAL_Timing.all;

library simprim;
use simprim.Vcomponents.all;
use simprim.VPACKAGE.all;

entity X_RAMB16BWER is

  generic (
    TimingChecksOn : boolean := true;
    InstancePath   : string  := "*";
    Xon            : boolean := true;
    MsgOn          : boolean := true;
    LOC            : string  := "UNPLACED";


--- VITAL input wire delays

    tipd_ADDRA   : VitalDelayArrayType01(13 downto 0) := (others => (0 ps, 0 ps));
    tipd_CLKA    : VitalDelayType01                   := ( 0 ps, 0 ps);
    tipd_DIA     : VitalDelayArrayType01(31 downto 0) := (others => (0 ps, 0 ps));
    tipd_DIPA    : VitalDelayArrayType01(3 downto 0)  := (others => (0 ps, 0 ps));
    tipd_ENA     : VitalDelayType01                   := ( 0 ps, 0 ps);
    tipd_REGCEA  : VitalDelayType01                   := ( 0 ps, 0 ps);
    tipd_RSTA    : VitalDelayType01                   := ( 0 ps, 0 ps);
    tipd_WEA     : VitalDelayArrayType01 (3 downto 0) := (others => (0 ps, 0 ps));

    tipd_ADDRB   : VitalDelayArrayType01(13 downto 0) := (others => (0 ps, 0 ps));
    tipd_CLKB    : VitalDelayType01                   := ( 0 ps, 0 ps);
    tipd_DIB     : VitalDelayArrayType01(31 downto 0) := (others => (0 ps, 0 ps));
    tipd_DIPB    : VitalDelayArrayType01(3 downto 0)  := (others => (0 ps, 0 ps));
    tipd_ENB     : VitalDelayType01                   := ( 0 ps, 0 ps);
    tipd_REGCEB  : VitalDelayType01                   := ( 0 ps, 0 ps);
    tipd_RSTB    : VitalDelayType01                   := ( 0 ps, 0 ps);
    tipd_WEB     : VitalDelayArrayType01 (3 downto 0) := (others => (0 ps, 0 ps));

    tipd_GSR : VitalDelayType01 := ( 0 ps, 0 ps);

--- VITAL pin-to-pin propagation delays


    tpd_CLKA_DOA  : VitalDelayArrayType01(31 downto 0) := (others => (100 ps, 100 ps));
    tpd_CLKA_DOPA : VitalDelayArrayType01(3 downto 0)  := (others => (100 ps, 100 ps));

    tpd_CLKB_DOB  : VitalDelayArrayType01(31 downto 0) := (others => (100 ps, 100 ps));
    tpd_CLKB_DOPB : VitalDelayArrayType01(3 downto 0)  := (others => (100 ps, 100 ps));

    tpd_GSR_DOA  : VitalDelayArrayType01(31 downto 0) := (others => (0 ps, 0 ps));
    tpd_GSR_DOPA : VitalDelayArrayType01(3 downto 0)  := (others => (0 ps, 0 ps));

    tpd_GSR_DOB  : VitalDelayArrayType01(31 downto 0) := (others => (0 ps, 0 ps));
    tpd_GSR_DOPB : VitalDelayArrayType01(3 downto 0)  := (others => (0 ps, 0 ps));

    tpd_RSTA_DOA  : VitalDelayArrayType01(31 downto 0) := (others => (0 ps, 0 ps));
    tpd_RSTA_DOPA : VitalDelayArrayType01(3 downto 0)  := (others => (0 ps, 0 ps));

    tpd_RSTB_DOB  : VitalDelayArrayType01(31 downto 0) := (others => (0 ps, 0 ps));
    tpd_RSTB_DOPB : VitalDelayArrayType01(3 downto 0)  := (others => (0 ps, 0 ps));

--- VITAL recovery time 

    trecovery_GSR_CLKA_negedge_posedge : VitalDelayType                   := 0 ps;
    trecovery_GSR_CLKB_negedge_posedge : VitalDelayType                   := 0 ps;

    trecovery_RSTA_CLKA_negedge_posedge : VitalDelayType                   := 0 ps;
    tremoval_RSTA_CLKA_negedge_posedge  : VitalDelayType                   := 0 ps;

    trecovery_RSTB_CLKB_negedge_posedge : VitalDelayType                   := 0 ps;
    tremoval_RSTB_CLKB_negedge_posedge  : VitalDelayType                   := 0 ps;

--- VITAL setup time 

    tsetup_ADDRA_CLKA_negedge_posedge  : VitalDelayArrayType(13 downto 0) := (others => 0 ps);
    tsetup_ADDRA_CLKA_posedge_posedge  : VitalDelayArrayType(13 downto 0) := (others => 0 ps);
    tsetup_DIA_CLKA_negedge_posedge    : VitalDelayArrayType(31 downto 0) := (others => 0 ps);
    tsetup_DIA_CLKA_posedge_posedge    : VitalDelayArrayType(31 downto 0) := (others => 0 ps);
    tsetup_DIPA_CLKA_negedge_posedge   : VitalDelayArrayType(3 downto 0)  := (others => 0 ps);
    tsetup_DIPA_CLKA_posedge_posedge   : VitalDelayArrayType(3 downto 0)  := (others => 0 ps);
    tsetup_ENA_CLKA_negedge_posedge    : VitalDelayType                   := 0 ps;
    tsetup_ENA_CLKA_posedge_posedge    : VitalDelayType                   := 0 ps;
    tsetup_REGCEA_CLKA_negedge_posedge : VitalDelayType                   := 0 ps;
    tsetup_REGCEA_CLKA_posedge_posedge : VitalDelayType                   := 0 ps;
    tsetup_RSTA_CLKA_negedge_posedge   : VitalDelayType                   := 0 ps;
    tsetup_RSTA_CLKA_posedge_posedge   : VitalDelayType                   := 0 ps;
    tsetup_WEA_CLKA_negedge_posedge    : VitalDelayArrayType(3 downto 0)  := (others => 0 ps);
    tsetup_WEA_CLKA_posedge_posedge    : VitalDelayArrayType(3 downto 0)  := (others => 0 ps);

    tsetup_ADDRB_CLKB_negedge_posedge  : VitalDelayArrayType(13 downto 0) := (others => 0 ps);
    tsetup_ADDRB_CLKB_posedge_posedge  : VitalDelayArrayType(13 downto 0) := (others => 0 ps);
    tsetup_DIB_CLKB_negedge_posedge    : VitalDelayArrayType(31 downto 0) := (others => 0 ps);
    tsetup_DIB_CLKB_posedge_posedge    : VitalDelayArrayType(31 downto 0) := (others => 0 ps);
    tsetup_DIPB_CLKB_negedge_posedge   : VitalDelayArrayType(3 downto 0)  := (others => 0 ps);
    tsetup_DIPB_CLKB_posedge_posedge   : VitalDelayArrayType(3 downto 0)  := (others => 0 ps);
    tsetup_ENB_CLKB_negedge_posedge    : VitalDelayType                   := 0 ps;
    tsetup_ENB_CLKB_posedge_posedge    : VitalDelayType                   := 0 ps;
    tsetup_REGCEB_CLKB_negedge_posedge : VitalDelayType                   := 0 ps;
    tsetup_REGCEB_CLKB_posedge_posedge : VitalDelayType                   := 0 ps;
    tsetup_RSTB_CLKB_negedge_posedge   : VitalDelayType                   := 0 ps;
    tsetup_RSTB_CLKB_posedge_posedge   : VitalDelayType                   := 0 ps;
    tsetup_WEB_CLKB_negedge_posedge    : VitalDelayArrayType(3 downto 0)  := (others => 0 ps);
    tsetup_WEB_CLKB_posedge_posedge    : VitalDelayArrayType(3 downto 0)  := (others => 0 ps);

--- VITAL hold time 

    thold_ADDRA_CLKA_negedge_posedge  : VitalDelayArrayType(13 downto 0) := (others => 0 ps);
    thold_ADDRA_CLKA_posedge_posedge  : VitalDelayArrayType(13 downto 0) := (others => 0 ps);
    thold_DIA_CLKA_negedge_posedge    : VitalDelayArrayType(31 downto 0) := (others => 0 ps);
    thold_DIA_CLKA_posedge_posedge    : VitalDelayArrayType(31 downto 0) := (others => 0 ps);
    thold_DIPA_CLKA_negedge_posedge   : VitalDelayArrayType(3 downto 0)  := (others => 0 ps);
    thold_DIPA_CLKA_posedge_posedge   : VitalDelayArrayType(3 downto 0)  := (others => 0 ps);
    thold_ENA_CLKA_negedge_posedge    : VitalDelayType                   := 0 ps;
    thold_ENA_CLKA_posedge_posedge    : VitalDelayType                   := 0 ps;
    thold_GSR_CLKA_negedge_posedge    : VitalDelayType                   := 0 ps;
    thold_REGCEA_CLKA_negedge_posedge : VitalDelayType                   := 0 ps;
    thold_REGCEA_CLKA_posedge_posedge : VitalDelayType                   := 0 ps;
    thold_RSTA_CLKA_negedge_posedge   : VitalDelayType                   := 0 ps;
    thold_RSTA_CLKA_posedge_posedge   : VitalDelayType                   := 0 ps;
    thold_WEA_CLKA_negedge_posedge    : VitalDelayArrayType(3 downto 0)  := (others => 0 ps);
    thold_WEA_CLKA_posedge_posedge    : VitalDelayArrayType(3 downto 0)  := (others => 0 ps);

    thold_ADDRB_CLKB_negedge_posedge  : VitalDelayArrayType(13 downto 0) := (others => 0 ps);
    thold_ADDRB_CLKB_posedge_posedge  : VitalDelayArrayType(13 downto 0) := (others => 0 ps);
    thold_DIB_CLKB_negedge_posedge    : VitalDelayArrayType(31 downto 0) := (others => 0 ps);
    thold_DIB_CLKB_posedge_posedge    : VitalDelayArrayType(31 downto 0) := (others => 0 ps);
    thold_DIPB_CLKB_negedge_posedge   : VitalDelayArrayType(3 downto 0)  := (others => 0 ps);
    thold_DIPB_CLKB_posedge_posedge   : VitalDelayArrayType(3 downto 0)  := (others => 0 ps);
    thold_ENB_CLKB_negedge_posedge    : VitalDelayType                   := 0 ps;
    thold_ENB_CLKB_posedge_posedge    : VitalDelayType                   := 0 ps;
    thold_GSR_CLKB_negedge_posedge    : VitalDelayType                   := 0 ps;
    thold_REGCEB_CLKB_negedge_posedge : VitalDelayType                   := 0 ps;
    thold_REGCEB_CLKB_posedge_posedge : VitalDelayType                   := 0 ps;
    thold_RSTB_CLKB_negedge_posedge   : VitalDelayType                   := 0 ps;
    thold_RSTB_CLKB_posedge_posedge   : VitalDelayType                   := 0 ps;
    thold_WEB_CLKB_negedge_posedge    : VitalDelayArrayType(3 downto 0)  := (others => 0 ps);
    thold_WEB_CLKB_posedge_posedge    : VitalDelayArrayType(3 downto 0)  := (others => 0 ps);

    tbpd_GSR_DOA_CLKA  : VitalDelayArrayType01(31 downto 0) := (others => (0 ps, 0 ps));
    tbpd_GSR_DOPA_CLKA : VitalDelayArrayType01(3 downto 0)  := (others => (0 ps, 0 ps));

    ticd_CLKA          : VitalDelayType                     := 0 ps;
    tisd_ADDRA_CLKA    : VitalDelayArrayType(13 downto 0)   := (others => 0 ps);
    tisd_DIA_CLKA      : VitalDelayArrayType(31 downto 0)   := (others => 0 ps);
    tisd_DIPA_CLKA     : VitalDelayArrayType(3 downto 0)    := (others => 0 ps);
    tisd_ENA_CLKA      : VitalDelayType                     := 0 ps;
    tisd_GSR_CLKA      : VitalDelayType                     := 0 ps;
    tisd_REGCEA_CLKA   : VitalDelayType                     := 0 ps;
    tisd_RSTA_CLKA     : VitalDelayType                     := 0 ps;
    tisd_WEA_CLKA      : VitalDelayArrayType(3 downto 0)    := (others => 0 ps);

    tbpd_GSR_DOB_CLKB  : VitalDelayArrayType01(31 downto 0) := (others => (0 ps, 0 ps));
    tbpd_GSR_DOPB_CLKB : VitalDelayArrayType01(3 downto 0)  := (others => (0 ps, 0 ps));

    ticd_CLKB          : VitalDelayType                     := 0 ps;
    tisd_ADDRB_CLKB    : VitalDelayArrayType(13 downto 0)   := (others => 0 ps);
    tisd_DIB_CLKB      : VitalDelayArrayType(31 downto 0)   := (others => 0 ps);
    tisd_DIPB_CLKB     : VitalDelayArrayType(3 downto 0)    := (others => 0 ps);
    tisd_ENB_CLKB      : VitalDelayType                     := 0 ps;
    tisd_GSR_CLKB      : VitalDelayType                     := 0 ps;
    tisd_REGCEB_CLKB   : VitalDelayType                     := 0 ps;
    tisd_RSTB_CLKB     : VitalDelayType                     := 0 ps;
    tisd_WEB_CLKB      : VitalDelayArrayType(3 downto 0)    := (others => 0 ps);

    tperiod_clka_posedge : VitalDelayType := 0 ps;
    tperiod_clkb_posedge : VitalDelayType := 0 ps;

    tpw_CLKA_negedge : VitalDelayType := 0 ps;
    tpw_CLKA_posedge : VitalDelayType := 0 ps;
    tpw_CLKB_negedge : VitalDelayType := 0 ps;
    tpw_CLKB_posedge : VitalDelayType := 0 ps;
    tpw_GSR_posedge  : VitalDelayType := 0 ps;

    tpw_RSTA_posedge : VitalDelayType := 0 ps;
    tpw_RSTB_posedge : VitalDelayType := 0 ps;


    DATA_WIDTH_A : integer := 0;
    DATA_WIDTH_B : integer := 0;

    DOA_REG : integer := 0 ;
    DOB_REG : integer := 0 ;

    INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";

    INIT_A : bit_vector := X"000000000";
    INIT_B : bit_vector := X"000000000";

    INITP_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INITP_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INITP_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INITP_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INITP_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INITP_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INITP_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
    INITP_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";

    RSTTYPE  : string     := "SYNC"; 

    SETUP_ALL : VitalDelayType := 1000 ps;
    SETUP_READ_FIRST : VitalDelayType := 3000 ps;

    SIM_COLLISION_CHECK : string := "ALL";

    SRVAL_A : bit_vector := X"000000000";
    SRVAL_B : bit_vector := X"000000000";

    WRITE_MODE_A : string := "WRITE_FIRST";
    WRITE_MODE_B : string := "WRITE_FIRST"

    );

  port(
    DOA          : out std_logic_vector (31 downto 0);
    DOB          : out std_logic_vector (31 downto 0);
    DOPA         : out std_logic_vector (3 downto 0);
    DOPB         : out std_logic_vector (3 downto 0);

    ADDRA        : in  std_logic_vector (13 downto 0);
    ADDRB        : in  std_logic_vector (13 downto 0);
    CLKA         : in  std_ulogic;
    CLKB         : in  std_ulogic;
    DIA          : in  std_logic_vector (31 downto 0);
    DIB          : in  std_logic_vector (31 downto 0);
    DIPA         : in  std_logic_vector (3 downto 0);
    DIPB         : in  std_logic_vector (3 downto 0);
    ENA          : in  std_ulogic;
    ENB          : in  std_ulogic;
    RSTA         : in  std_ulogic;
    RSTB         : in  std_ulogic;
    REGCEA       : in  std_ulogic;
    REGCEB       : in  std_ulogic;
    WEA          : in  std_logic_vector (3 downto 0);
    WEB          : in  std_logic_vector (3 downto 0)
    );

  attribute VITAL_LEVEL0 of
    X_RAMB16BWER : entity is true;

end X_RAMB16BWER;

architecture X_RAMB16BWER_V of X_RAMB16BWER is

  attribute VITAL_LEVEL0 of
    X_RAMB16BWER_V : architecture is true;


-- Constants

  constant MAX_ADDR: integer := 13;

  constant MAX_DI:   integer := 31;
  constant MAX_DIP:  integer := 3;
  constant MAX_WE:   integer := 3;

  constant SYNC_PATH_DELAY : time  := 100 ps;

  TYPE CollisionFlagType IS RECORD
     active_port : integer; 
     read_write  : boolean; 
     write_read  : boolean; 
     write_write : boolean; 
     we          : std_logic_vector(MAX_WE downto 0);
  END RECORD;

  TYPE DataWidthType IS RECORD
     diaw  : integer; 
     dipaw : integer; 
     doaw  : integer; 
     dopaw : integer; 
     dibw  : integer; 
     dipbw : integer; 
     dobw  : integer; 
     dopbw : integer; 
  END RECORD;

  TYPE ClsnXbufType IS RECORD
     DO1_clsn   : std_logic_vector(31 downto 0);
     DOP1_clsn  : std_logic_vector(3 downto 0);
     MEM1_clsn  : std_logic_vector(31 downto 0);
     MEMP1_clsn : std_logic_vector(3 downto 0);

     DO2_clsn   : std_logic_vector(31 downto 0);
     DOP2_clsn  : std_logic_vector(3 downto 0);
     MEM2_clsn  : std_logic_vector(31 downto 0);
     MEMP2_clsn : std_logic_vector(3 downto 0);
  END RECORD;

  TYPE memory_collision_type is (Read_A_Write_B,
                                 Write_A_Read_B,
                                 Write_A_Write_B,
                                 Read_B_Write_A,
                                 Write_B_Read_A,
                                 Write_B_Write_A);

-- Procedures and Functions

------------------------------------------------
-- procedure ClkCollisionCheck
------------------------------------------------
--
--  Checks whether the time duration of rising
--  clka and clkb violates required setup time
--  between these clocks.
--
   procedure ClkCollisionCheck(
             variable violation        : out integer;
             constant CheckEnabled     : in boolean := false;
             variable CLK1_time        : in time := 0 ns;
             variable CLK2_time        : in time := 0 ns;
             constant SETUP_ALL        : in time := 0 ns;
             constant SETUP_READ_FIRST : in time := 0 ns
   ) is

   begin

     violation := 0;
     if(CheckEnabled) then
        if((CLK1_time > 0 ns ) and (CLK2_time > 0 ns )) then
           if((CLK1_time - CLK2_time) = 0 ns ) then
              violation := 3;
           elsif ((CLK1_time - CLK2_time) < SETUP_ALL) then
              violation := 11;
           elsif ((CLK1_time - CLK2_time) < SETUP_READ_FIRST) then
              violation := 12;
           end if;
        end if;
     end if;
   end ClkCollisionCheck;

------------------------------------------------
-- function AddrOverlapCheck
------------------------------------------------
--

   function AddrOverlapCheck(
                   d1w         : in integer := 0;
                   d2w         : in integer := 0;
                   addr1       : in  std_logic_vector(MAX_ADDR downto 0)   := (others => 'X');
                   addr2       : in  std_logic_vector(MAX_ADDR downto 0)   := (others => 'X');
                   zero_addr1  : in  std_logic_vector(MAX_ADDR downto 0)   := (others => 'X');
                   zero_addr2  : in  std_logic_vector(MAX_ADDR downto 0)   := (others => 'X');
                   we_segment  : in integer := 0
   ) return boolean is 
   variable collision, port1_overlap, port2_overlap : boolean := false;
   variable addr1_zero_int, addr2_zero_int, wea_index, INDEX1, INDEX2 : integer := -1;
   variable tmp_addr1_zero, tmp_addr2_zero : std_logic_vector(MAX_ADDR downto 0) := (others => 'X');
   variable zero_out                       : std_logic_vector(MAX_ADDR downto 0)   := (others => 'X');
   variable tmp_we                         : std_logic_vector(1 downto 0)          := (others => '0');


   
   
   begin
     INDEX1 := SLV_TO_INT(addr1(4 downto 0));
     INDEX2 := SLV_TO_INT(addr2(4 downto 0));

     if(D1W >= D2W) then  
        zero_out := zero_addr1;
     elsif(D1W < D2W) then
        zero_out := zero_addr2;
     end if;

     tmp_addr1_zero := (addr1(MAX_ADDR downto 0) and zero_out);
     tmp_addr2_zero := (addr2(MAX_ADDR downto 0) and zero_out);

     addr1_zero_int := SLV_TO_INT(tmp_addr1_zero); 
     addr2_zero_int := SLV_TO_INT(tmp_addr2_zero); 
   
--     if((addr1_zero_int = addr2_zero_int) and ((INDEX1 + D1W) > we_segment * 8 ) and ((INDEX2 + D2W) > we_segment * 8 )) then
     if(addr1_zero_int = addr2_zero_int) then

        case D1W is
           ---------
           when 1|2|4|8 =>
           ---------
              tmp_we(1 downto 0) := addr1( 4 downto 3);
              wea_index := SLV_TO_INT(tmp_we);
              if(wea_index = we_segment) then
                port1_overlap := true;
              end if;

           ---------
           when 16 =>
           ---------

              tmp_we(1) := addr1(4);
              tmp_we(0) := '0';
              wea_index := SLV_TO_INT(tmp_we);
              if(wea_index = we_segment) then
                port1_overlap := true;
              end if;
   
              tmp_we(1) := addr1(4);
              tmp_we(0) := '1';
              wea_index := SLV_TO_INT(tmp_we);
              if(wea_index = we_segment) then
                port1_overlap := true;
              end if;
            
           ---------
           when 32 =>
           ---------

                port1_overlap := true;

           ---------
           when others => null;
           ---------
        end case;



        case D2W is
           ---------
           when 1|2|4|8 =>
           ---------
              tmp_we(1 downto 0) := addr2( 4 downto 3);
              wea_index := SLV_TO_INT(tmp_we);
              if(wea_index = we_segment) then
                port2_overlap := true;
              end if;

           ---------
           when 16 =>
           ---------

              tmp_we(1) := addr2(4);
              tmp_we(0) := '0';
              wea_index := SLV_TO_INT(tmp_we);
              if(wea_index = we_segment) then
                port2_overlap := true;
              end if;
   
              tmp_we(1) := addr2(4);
              tmp_we(0) := '1';
              wea_index := SLV_TO_INT(tmp_we);
              if(wea_index = we_segment) then
                port2_overlap := true;
              end if;
            
           ---------
           when 32 =>
           ---------

                port2_overlap := true;

           ---------
           when others => null;
           ---------
        end case;

     end if;

     collision :=  (port1_overlap and port2_overlap);
     return collision;
   end;
------------------------------------------------
-- procedure QkAddrOverlapChk
------------------------------------------------
--

   procedure QkAddrOverlapChk(
                   variable addr_overlap : out boolean;
                   variable data_widths  : in DataWidthType;
                   variable addra        : in  std_logic_vector(MAX_ADDR downto 0) := (others => 'X');
                   variable addrb        : in  std_logic_vector(MAX_ADDR downto 0) := (others => 'X')
   ) is
   variable addra_int, addrb_int, max_width : integer := -1;
   variable tmp_addra_zero, tmp_addrb_zero  : std_logic_vector(MAX_ADDR downto 0) := (others => 'X');
   variable zero_data_out                   : std_logic_vector(MAX_ADDR downto 0) := (others => 'X');
   variable zero_parity_out                 : std_logic_vector((MAX_ADDR-3) downto 0) := (others => 'X');
 
   begin
     addr_overlap := false;
     zero_data_out   := (others => '1');
     zero_parity_out := (others => '1');

     max_width := data_widths.diaw;

     if(data_widths.doaw > max_width) then
        max_width := data_widths.doaw;
     end if;
   
     if(data_widths.dibw > max_width) then
        max_width := data_widths.dibw;
     end if;

     if(data_widths.dobw > max_width) then
        max_width := data_widths.dobw;
     end if;

    
     case max_width is

        -------
        when 32 =>
        -------
            zero_data_out(4 downto 0) := (others => '0'); 
            zero_parity_out(1 downto 0) := (others => '0'); 

        -------
        when 16 =>
        -------
            zero_data_out(3 downto 0) := (others => '0'); 
            zero_parity_out(0 downto 0) := (others => '0'); 

        -------
        when 8 =>
        -------
            zero_data_out(2 downto 0) := (others => '0'); 

        -------
        when 4 =>
        -------
            zero_data_out(1 downto 0) := (others => '0'); 

        -------
        when 2 =>
        -------
            zero_data_out(0 downto 0) := (others => '0'); 

        -------
        when others =>
        -------
           null;


     end case;

     tmp_addra_zero := (addra(MAX_ADDR downto 0) and zero_data_out);
     tmp_addrb_zero := (addrb(MAX_ADDR downto 0) and zero_data_out);

     addra_int := SLV_TO_INT(tmp_addra_zero); 
     addrb_int := SLV_TO_INT(tmp_addrb_zero); 
   
     if(addra_int = addrb_int) then
          addr_overlap := true;
     end if;

   end QkAddrOverlapChk;

------------------------------------------------
-- procedure SameDataChk 
------------------------------------------------
--
--  Checks whether the data written is the same
--  as in the memory, or in the case of both ports
--  writing whether the inputs are the same.
--  If true, then there is no collision
--
   procedure SameDataChk(
             variable same_data  : out boolean;
             variable same_datap : out boolean;
             constant MEM        : in std_logic_vector(18431 downto 0); 
             constant di1        : in std_logic_vector(31 downto 0);
             constant di2        : in std_logic_vector(31 downto 0);
             constant dip1       : in std_logic_vector(3 downto 0);
             constant dip2       : in std_logic_vector(3 downto 0);
             variable addr1      : in std_logic_vector(13 downto 0) := (others => 'X');
             variable addr2      : in std_logic_vector(13 downto 0) := (others => 'X');
             variable addrp1     : in std_logic_vector(10 downto 0) := (others => 'X');
             variable addrp2     : in std_logic_vector(10 downto 0) := (others => 'X');
             variable wr_mode_1  : in std_logic_vector(1 downto 0) := "00";
             variable wr_mode_2  : in std_logic_vector(1 downto 0) := "00";
             constant we_segment : in integer := -1;
             variable we1        : in std_ulogic := 'X';
             variable we2        : in std_ulogic := 'X';
             variable D1W       : in integer := -1;
             variable D1PW      : in integer := -1;
             variable D2W       : in integer := -1;
             variable D2PW      : in integer := -1
   ) is
   variable REM1 : integer := -1;
   variable REM2 : integer := -1;
   variable XOUT_BITS : integer := -1;
   variable XOUT_BITS_1 : integer := -1;
   variable XOUT_PBITS_1 : integer := 0;
   variable INDEX, INDEXP, DATA_INDEX : integer := -1;
   variable ADDRESS, ADDRESS_P, ADDRESS32_1, ADDRESS32P_1, ADDRESS32_2, ADDRESS32P_2 : integer := -1;
   variable SMALL_ADDRESS32, SMALL_ADDRESS32P : integer := -1;
   variable SMALL_DW : integer := -1;

  
   variable TableRow : std_logic_vector(1 downto 0) := (others => '0');

   variable cmp_d1_buf   : std_logic_vector(7 downto 0) := (others => '0');
   variable cmp_d1p_buf  : std_logic_vector(0 downto 0) := (others => '0');
   variable cmp_d2_buf   : std_logic_vector(7 downto 0) := (others => '0');
   variable cmp_d2p_buf  : std_logic_vector(0 downto 0) := (others => '0');
   variable cmp_mem_buf  : std_logic_vector(7 downto 0) := (others => '0');
   variable cmp_memp_buf : std_logic_vector(0 downto 0) := (others => '0');

   variable cmp_d1_buf32 : std_logic_vector(31 downto 0) := (others => '0');
   variable cmp_d1p_buf4 : std_logic_vector(3 downto 0)  := (others => '0');
   variable cmp_d2_buf32 : std_logic_vector(31 downto 0) := (others => '0');
   variable cmp_d2p_buf4 : std_logic_vector(3 downto 0)  := (others => '0');

   variable tmp_cmp_d1_buf  : std_logic_vector(7 downto 0) := (others => '0');
   variable tmp_cmp_d1p_buf : std_logic_vector(0 downto 0) := (others => '0');
   variable tmp_cmp_d2_buf  : std_logic_vector(7 downto 0) := (others => '0');
   variable tmp_cmp_d2p_buf : std_logic_vector(0 downto 0) := (others => '0');

   variable memp_fp      :  std_logic_vector(3 downto 0)  := (others => '0');

   begin

-- ##################################################################
-----------------------------------------------------------------------
------------ Port 1  Active Clock -------------------------------------
-----------------------------------------------------------------------

      same_data  := false;
      same_datap := false;

      if((D1W >= D2W) and (D2W < 8)) then
         INDEX := SLV_TO_INT(addr2(4 downto 0));
      elsif((D2W >= D1W) and (D1W < 8)) then
         INDEX := SLV_TO_INT(addr1(4 downto 0));
      else
         INDEX := we_segment * 8;
      end if;


      ---  Data Bits ---

      REM1 := D1W REM 8;
      REM2 := D2W REM 8;

      -- find the minimum data bits to overlap
      if((REM1 = 0) and (REM2 = 0)) then
          XOUT_BITS := 8 ;
      elsif(REM1 = 0) then
          XOUT_BITS := REM2;
      elsif(REM2 = 0) then
          XOUT_BITS := REM1;
      elsif(REM1 > REM2) then
          XOUT_BITS := REM2 ;
      elsif (REM1 <= REM2) then
          XOUT_BITS := REM1 ;
      end if;

      XOUT_BITS_1 := XOUT_BITS - 1 ;


      if(D1W <= D2W) then
         SMALL_DW := D1W;
         ADDRESS  := SLV_TO_INT(addr1);
         SMALL_ADDRESS32:= SLV_TO_INT(addr1(4 downto 0));
      elsif(D1W > D2W) then
         SMALL_DW := D2W;
         ADDRESS  := SLV_TO_INT(addr2);
         SMALL_ADDRESS32:= SLV_TO_INT(addr2(4 downto 0));
      end if;

      if(D1PW <= D2PW) then
         ADDRESS_P := SLV_TO_INT(addrp1);
         SMALL_ADDRESS32P:= SLV_TO_INT(addrp1(1 downto 0));
      elsif(D1PW > D2PW) then
         ADDRESS_P := SLV_TO_INT(addrp2);
         SMALL_ADDRESS32P:= SLV_TO_INT(addrp2(1 downto 0));
      end if;
  
      INDEXP  := we_segment;
 
      TableRow := (we1 & we2);

      cmp_d1_buf   := (others => '0'); 
      cmp_d1p_buf  := (others => '0'); 
      cmp_d2_buf   := (others => '0'); 
      cmp_d2p_buf  := (others => '0'); 
      cmp_mem_buf  := (others => '0'); 
      cmp_memp_buf := (others => '0'); 

--==================================================================================================
      ADDRESS32_1  := SLV_TO_INT(addr1(4 downto 0));
      ADDRESS32P_1 := SLV_TO_INT(addrp1(1 downto 0));
      cmp_d1_buf32(((D1W - 1) + ADDRESS32_1) downto ADDRESS32_1)   :=  di1((D1W - 1) downto 0);
      cmp_d1p_buf4(((D1PW - 1) + ADDRESS32P_1) downto ADDRESS32P_1) :=  dip1((D1PW - 1) downto 0);

      ADDRESS32_2  := SLV_TO_INT(addr2(4 downto 0));
      ADDRESS32P_2 := SLV_TO_INT(addrp2(1 downto 0));
      cmp_d2_buf32(((D2W - 1) + ADDRESS32_2) downto ADDRESS32_2)    :=  di2((D2W - 1) downto 0);
      cmp_d2p_buf4(((D2PW - 1) + ADDRESS32P_2) downto ADDRESS32P_2) :=  dip2((D2PW - 1 ) downto 0);

      case SMALL_DW is
         when 1|2|4 =>
            cmp_mem_buf(XOUT_BITS_1 downto 0)      := MEM((XOUT_BITS_1 + ADDRESS ) downto (ADDRESS)); 
               
            tmp_cmp_d1_buf(XOUT_BITS_1 downto 0)   :=  cmp_d1_buf32((XOUT_BITS_1 + SMALL_ADDRESS32 ) downto SMALL_ADDRESS32);
            tmp_cmp_d2_buf(XOUT_BITS_1 downto 0)   :=  cmp_d2_buf32((XOUT_BITS_1 + SMALL_ADDRESS32 ) downto SMALL_ADDRESS32);

         when 8 =>
            cmp_mem_buf(XOUT_BITS_1 downto 0)      := MEM((XOUT_BITS_1 + ADDRESS ) downto (ADDRESS)); 
            cmp_memp_buf(XOUT_PBITS_1 downto 0)    := MEM((XOUT_PBITS_1 + 16384 + ADDRESS_P) downto (ADDRESS_P + 16384)); 

            tmp_cmp_d1_buf(XOUT_BITS_1 downto 0)   := cmp_d1_buf32((XOUT_BITS_1 + SMALL_ADDRESS32 ) downto SMALL_ADDRESS32);
            tmp_cmp_d1p_buf(XOUT_PBITS_1 downto 0) := cmp_d1p_buf4((XOUT_PBITS_1 + SMALL_ADDRESS32P) downto SMALL_ADDRESS32P);  

            tmp_cmp_d2_buf(XOUT_BITS_1 downto 0)   := cmp_d2_buf32((XOUT_BITS_1 + SMALL_ADDRESS32 ) downto SMALL_ADDRESS32);
            tmp_cmp_d2p_buf(XOUT_PBITS_1 downto 0) := cmp_d2p_buf4((XOUT_PBITS_1 + SMALL_ADDRESS32P) downto SMALL_ADDRESS32P);  

         when 16 =>
            if((we_segment = 0) or (we_segment = 2)) then
                DATA_INDEX := 0;
            elsif((we_segment = 1) or (we_segment = 3))then
                DATA_INDEX := 1;
            end if;

            cmp_mem_buf(XOUT_BITS_1 downto 0)   := MEM((XOUT_BITS_1 + ADDRESS + DATA_INDEX*8 ) downto (DATA_INDEX*8 + ADDRESS)); 
            cmp_memp_buf(XOUT_PBITS_1 downto 0) := MEM((XOUT_PBITS_1 + 16384 + DATA_INDEX + ADDRESS_P) downto (DATA_INDEX + ADDRESS_P + 16384)); 
            tmp_cmp_d1_buf(XOUT_BITS_1 downto 0)   := cmp_d1_buf32((XOUT_BITS_1 + we_segment*8 ) downto we_segment*8);
            tmp_cmp_d1p_buf(XOUT_PBITS_1 downto 0) := cmp_d1p_buf4((XOUT_PBITS_1 + we_segment*1) downto we_segment*1);  

            tmp_cmp_d2_buf(XOUT_BITS_1 downto 0)   := cmp_d2_buf32((XOUT_BITS_1 + we_segment*8 ) downto we_segment*8);
            tmp_cmp_d2p_buf(XOUT_PBITS_1 downto 0) := cmp_d2p_buf4((XOUT_PBITS_1 + we_segment*1) downto we_segment*1);  

         when 32 =>
            cmp_mem_buf(XOUT_BITS_1 downto 0)   := MEM((XOUT_BITS_1 + INDEX + ADDRESS ) downto (INDEX + ADDRESS)); 
            cmp_memp_buf(XOUT_PBITS_1 downto 0) := MEM((XOUT_PBITS_1 + 16384 + INDEXP + ADDRESS_P) downto (INDEXP + ADDRESS_P + 16384)); 

            tmp_cmp_d1_buf(XOUT_BITS_1 downto 0)   := cmp_d1_buf32((XOUT_BITS_1 + we_segment*8 ) downto we_segment*8);
            tmp_cmp_d1p_buf(XOUT_PBITS_1 downto 0) := cmp_d1p_buf4((XOUT_PBITS_1 + we_segment*1) downto we_segment*1);  

            tmp_cmp_d2_buf(XOUT_BITS_1 downto 0)   := cmp_d2_buf32((XOUT_BITS_1 + we_segment*8 ) downto we_segment*8);
            tmp_cmp_d2p_buf(XOUT_PBITS_1 downto 0) := cmp_d2p_buf4((XOUT_PBITS_1 + we_segment*1) downto we_segment*1);  

         when  others => null; 

      end case;

      case TableRow is
---===============================================================================
---                           wea&web = 11
---===============================================================================
          ----
          when "11" =>
          ----
              
               memp_fp := MEM(( 3 + 16384 + ADDRESS_P) downto (16384 + ADDRESS_P)); 


               if((tmp_cmp_d1_buf = tmp_cmp_d2_buf) and (tmp_cmp_d2_buf = cmp_mem_buf)) then
                   same_data := true;
               end if;

           -- Parity
               if((D1PW /= 0) and (D2PW /= 0)) then
                  if((tmp_cmp_d1p_buf = tmp_cmp_d2p_buf) and (tmp_cmp_d2p_buf = cmp_memp_buf)) then
                      same_datap := true;
                  end if;
               end if;
---===============================================================================
---                           wea&web = 01
---===============================================================================
          ----
          when "01" =>
          ----

               if(tmp_cmp_d2_buf = cmp_mem_buf) then
                   same_data := true;
               end if;

               -- Parity
               if((D1PW /= 0) and (D2PW /= 0)) then
                  if(tmp_cmp_d2p_buf = cmp_memp_buf) then
                      same_datap := true;
                  end if;
               end if;
---===============================================================================
---                           wea&web = 10
---===============================================================================
          ----
          when "10" =>
          ----
               if(tmp_cmp_d1_buf = cmp_mem_buf) then
                   same_data := true;
               end if;

               -- Parity
               if((D1PW /= 0) and (D2PW /= 0)) then
                  if(tmp_cmp_d1p_buf = cmp_memp_buf) then
                      same_datap := true;
                  end if;
               end if;
---===============================================================================
---                           others 
---===============================================================================

          ---------
          when others =>
          ---------
                null;
      end case;

   end SameDataChk;

------------------------------------------------
-- procedure CollisionTableRest
------------------------------------------------
--
--  Checks whether the time duration of rising
--  clka and clkb violates required setup time
--  between these clocks.
--
   procedure CollisionTableRest(
             variable clsn_bufs      : out ClsnXbufType;
             variable same_data_flg  : out boolean;
             variable same_datap_flg : out boolean;
             constant MEM            : in std_logic_vector(18431 downto 0);
             constant di1            : in std_logic_vector(31 downto 0);
             constant di2            : in std_logic_vector(31 downto 0);
             constant dip1           : in std_logic_vector(3 downto 0);
             constant dip2           : in std_logic_vector(3 downto 0);
             variable addr1          : in std_logic_vector(13 downto 0) := (others => 'X');
             variable addr2          : in std_logic_vector(13 downto 0) := (others => 'X');
             variable addrp1         : in std_logic_vector(10 downto 0) := (others => 'X');
             variable addrp2         : in std_logic_vector(10 downto 0) := (others => 'X');
             variable wr_mode_1      : in std_logic_vector(1 downto 0) := "00";
             variable wr_mode_2      : in std_logic_vector(1 downto 0) := "00";
             constant we_segment     : in integer := -1;
             constant violation      : in integer := -1;
             variable we1            : in std_ulogic := 'X';
             variable we2            : in std_ulogic := 'X';
             variable D1W            : in integer := -1;
             variable D1PW           : in integer := -1;
             variable D2W            : in integer := -1;
             variable D2PW           : in integer := -1
   ) is
   variable REM1 : integer := -1;
   variable REM2 : integer := -1;
   variable XOUT_BITS : integer := -1;
   variable XOUT_BITS_1 : integer := -1;
   variable INDEX, INDEX_P : integer := -1;
  
   variable TableRow :  std_logic_vector(5 downto 0) := (others => '0');
   variable we1we2   :  std_logic_vector(1 downto 0) := (others => '0');

   variable same_data                : boolean    := false;
   variable same_datap               : boolean    := false;
   variable SAME_DATA_CHECK_DISABLED : boolean    := true;

   begin

-- ##################################################################
-----------------------------------------------------------------------
------------ Port 1  Active Clock -------------------------------------
-----------------------------------------------------------------------


   if((D1W >= D2W) and (D2W < 8)) then
      INDEX := SLV_TO_INT(addr2(4 downto 0));
   elsif((D2W >= D1W) and (D1W < 8)) then
      INDEX := SLV_TO_INT(addr1(4 downto 0));
   else
      INDEX := we_segment * 8;
   end if;


   ---  Data Bits ---

   REM1 := D1W REM 8;
   REM2 := D2W REM 8;

   -- find the minimum data bits to overlap
   if((REM1 = 0) and (REM2 = 0)) then
       XOUT_BITS := 8 ;
   elsif(REM1 = 0) then
       XOUT_BITS := REM2;
   elsif(REM2 = 0) then
       XOUT_BITS := REM1;
   elsif(REM1 > REM2) then
       XOUT_BITS := REM2 ;
   elsif (REM1 <= REM2) then
       XOUT_BITS := REM1 ;
   end if;

   XOUT_BITS_1 := XOUT_BITS - 1 ;



   ---  Parity Bits ---

   -- find the minimum parity bits to overlap

   if(D1PW >= D2PW) then
      INDEX_P := SLV_TO_INT(addrp2(1 downto 0));
   else
      INDEX_P := SLV_TO_INT(addrp1(1 downto 0));
   end if;
--===============================================================================
--   Same Data Check for both Data and Parity 
--   If Data/Parity_Data are the same in Ports A and B, and the contents of the 
--   Memory/Parity_memory are the same as the Data, then here is no collision
--===============================================================================


   SameDataChk(
      same_data  => same_data,
      same_datap => same_datap,
      mem        => mem,
      di1        => di1,
      di2        => di2,
      dip1       => dip1,
      dip2       => dip2,
      addr1      => addr1,
      addr2      => addr2,
      addrp1     => addrp1,
      addrp2     => addrp2,
      wr_mode_1  => wr_mode_1,
      wr_mode_2  => wr_mode_2,
      we_segment => we_segment,
      we1        => we1,
      we2        => we2,
      D1W        => D1W,
      D1PW       => D1PW,
      D2W        => D2W,
      D2PW       => D2PW
    );

---===============================================================================
---===============================================================================
-- DEBUG                    
if(SAME_DATA_CHECK_DISABLED) then
  same_data  := false;
  same_datap := false;
end if;

  same_data_flg  := same_data;
  same_datap_flg := same_datap;
 
   TableRow := (wr_mode_1 & wr_mode_2 & we1 & we2);
   case TableRow is
---===============================================================================
---                           wea&web = 11
---===============================================================================
          ----
          when "000011" | "010011"  =>
          ----
            if((violation = 3) or (violation = 11)) then
                if(not same_data) then
                   -- port 1
                   clsn_bufs.DO1_clsn((INDEX + XOUT_BITS_1 ) downto INDEX) := (others => 'X');
                   clsn_bufs.MEM1_clsn((INDEX + XOUT_BITS_1) downto INDEX ) := (others => 'X');
                   -- port 2
                   clsn_bufs.DO2_clsn((INDEX + XOUT_BITS_1 ) downto INDEX) := (others => 'X');
                   clsn_bufs.MEM2_clsn((INDEX + XOUT_BITS_1) downto INDEX ) := (others => 'X');
                end if;
                if(not same_datap) then
                   -- parity port 1
                   if((D1PW /= 0) and (D2PW /= 0)) then
--                       clsn_bufs.DOP1_clsn((INDEX_P + (we_segment * 1))  downto (INDEX_P + (we_segment * 1))) := (others => 'X');
                       clsn_bufs.DOP1_clsn((we_segment * 1)  downto (we_segment * 1)) := (others => 'X');
                       clsn_bufs.MEMP1_clsn((we_segment * 1) downto (we_segment * 1)) := (others => 'X');
                   end if;
                   -- parity port 2
                   if((D1PW /= 0) and (D2PW /= 0)) then
--                       clsn_bufs.DOP2_clsn((INDEX_P + (we_segment * 1))  downto (INDEX_P + (we_segment * 1))) := (others => 'X');
                       clsn_bufs.DOP2_clsn((we_segment * 1)  downto (we_segment * 1)) := (others => 'X');
                       clsn_bufs.MEMP2_clsn((we_segment * 1) downto (we_segment * 1)) := (others => 'X');
                   end if;
                end if;

            end if;

          ----
          when "001011" | "011011" =>
          ----
            if((violation = 3) or (violation = 11)) then
                if(not same_data) then
                   -- port 1
                   clsn_bufs.DO1_clsn((INDEX + XOUT_BITS_1 ) downto INDEX) := (others => 'X');
                   clsn_bufs.MEM1_clsn((INDEX + XOUT_BITS_1) downto INDEX ) := (others => 'X');
                   -- port 2
                   clsn_bufs.MEM2_clsn((INDEX + XOUT_BITS_1) downto INDEX ) := (others => 'X');
                end if;
                if(not same_datap) then
                   -- parity port 1
                   if((D1PW /= 0) and (D2PW /= 0)) then
                       clsn_bufs.DOP1_clsn((we_segment * 1)  downto (we_segment * 1)) := (others => 'X');
                       clsn_bufs.MEMP1_clsn((we_segment * 1) downto (we_segment * 1)) := (others => 'X');
                   end if;

                   if((D1PW /= 0) and (D2PW /= 0)) then
                       clsn_bufs.MEMP2_clsn((we_segment * 1) downto (we_segment * 1)) := (others => 'X');
                   end if;
                end if;
            end if;
          ----
          when "000111" | "010111"  =>
          ----
            if((violation = 3) or (violation = 11) or (violation = 12)) then
                if(not same_data) then
                   -- port 1
                   clsn_bufs.DO1_clsn((INDEX + XOUT_BITS_1 ) downto INDEX) := (others => 'X');
                   clsn_bufs.MEM1_clsn((INDEX + XOUT_BITS_1) downto INDEX ) := (others => 'X');
                   -- port 2
                   clsn_bufs.DO2_clsn((INDEX + XOUT_BITS_1 ) downto INDEX) := (others => 'X');
                   clsn_bufs.MEM2_clsn((INDEX + XOUT_BITS_1) downto INDEX ) := (others => 'X');
                end if;
                if(not same_datap) then
                   -- parity port 1
                   if((D1PW /= 0) and (D2PW /= 0)) then
                       clsn_bufs.DOP1_clsn((we_segment * 1)  downto (we_segment * 1)) := (others => 'X');
                       clsn_bufs.MEMP1_clsn((we_segment * 1) downto (we_segment * 1)) := (others => 'X');
                   end if;
                   -- parity port 2
                   if((D1PW /= 0) and (D2PW /= 0)) then
                       clsn_bufs.DOP2_clsn((we_segment * 1)  downto (we_segment * 1)) := (others => 'X');
                       clsn_bufs.MEMP2_clsn((we_segment * 1) downto (we_segment * 1)) := (others => 'X');
                   end if;
                end if;
            end if;

          ----
          when "100011" =>
          ----
             if((violation = 3) or (violation = 11)) then
                if(not same_data) then
                   -- port 1
                   clsn_bufs.MEM1_clsn((INDEX + XOUT_BITS_1) downto INDEX ) := (others => 'X');
                   -- port 2
                   clsn_bufs.DO2_clsn((INDEX + XOUT_BITS_1 ) downto INDEX) := (others => 'X');
                   clsn_bufs.MEM2_clsn((INDEX + XOUT_BITS_1) downto INDEX ) := (others => 'X');
                end if;

                if(not same_datap) then
                   -- parity port 1
                   if((D1PW /= 0) and (D2PW /= 0)) then
                       clsn_bufs.MEMP1_clsn((we_segment * 1) downto (we_segment * 1)) := (others => 'X');
                   end if;
                   -- parity port 2
                   if((D1PW /= 0) and (D2PW /= 0)) then
                       clsn_bufs.DOP2_clsn((we_segment * 1)  downto (we_segment * 1)) := (others => 'X');
                       clsn_bufs.MEMP2_clsn((we_segment * 1) downto (we_segment * 1)) := (others => 'X');
                   end if;
                end if;

             end if;

          ----
          when "100111" =>
          ----
             if((violation = 3) or (violation = 11) or (violation = 12) ) then
                if(not same_data) then
                   -- port 1
                   clsn_bufs.MEM1_clsn((INDEX + XOUT_BITS_1) downto INDEX ) := (others => 'X');
                   -- port 2
                   clsn_bufs.DO2_clsn((INDEX + XOUT_BITS_1 ) downto INDEX) := (others => 'X');
                   clsn_bufs.MEM2_clsn((INDEX + XOUT_BITS_1) downto INDEX ) := (others => 'X');
                end if;

                if(not same_datap) then
                   -- parity port 1
                   if((D1PW /= 0) and (D2PW /= 0)) then
                       clsn_bufs.MEMP1_clsn((we_segment * 1) downto (we_segment * 1)) := (others => 'X');
                   end if;
                   -- parity port 2
                   if((D1PW /= 0) and (D2PW /= 0)) then
                       clsn_bufs.DOP2_clsn((we_segment * 1)  downto (we_segment * 1)) := (others => 'X');
                       clsn_bufs.MEMP2_clsn((we_segment * 1) downto (we_segment * 1)) := (others => 'X');
                   end if;
                end if;

             end if;
          ----
          when "101011" =>
          ----
             if((violation = 3) or (violation = 11)) then
                if(not same_data) then
                   -- port 1
                   clsn_bufs.MEM1_clsn((INDEX + XOUT_BITS_1) downto INDEX ) := (others => 'X');
                   -- port 2
                   clsn_bufs.MEM2_clsn((INDEX + XOUT_BITS_1) downto INDEX ) := (others => 'X');
                end if;
                if(not same_datap) then
                   if((D1PW /= 0) and (D2PW /= 0)) then
                        -- parity port 1
                       clsn_bufs.MEMP1_clsn((we_segment * 1) downto (we_segment * 1)) := (others => 'X');
                        -- parity port 2
                       clsn_bufs.MEMP2_clsn((we_segment * 1) downto (we_segment * 1)) := (others => 'X');
                   end if;
                end if;
             end if;

---===============================================================================
---                           wea&web = 01
---===============================================================================
          ----
          when "000001" | "010001" | "100001"  =>
          ----
             if((violation = 3) or (violation = 11)) then
                if(not same_data) then
                   -- port 1
                   clsn_bufs.DO1_clsn((INDEX + XOUT_BITS_1 ) downto INDEX) := (others => 'X');
                end if;
                if(not same_datap) then
                   if((D1PW /= 0) and (D2PW /= 0)) then
                       clsn_bufs.DOP1_clsn((we_segment * 1)  downto (we_segment * 1)) := (others => 'X');
                   end if;
                end if;
             end if;
          ----
          when "000101" | "010101" | "100101"  =>
          ----
             if((violation = 11)  or (violation = 12)) then
                if(not same_data) then
                   -- port 1
                   clsn_bufs.DO1_clsn((INDEX + XOUT_BITS_1 ) downto INDEX) := (others => 'X');
                end if;
                if(not same_datap) then
                   -- parity port 1
                   if((D1PW /= 0) and (D2PW /= 0)) then
                      clsn_bufs.DOP1_clsn((we_segment * 1)  downto (we_segment * 1)) := (others => 'X');
                   end if;
                end if;

             end if;
          ----
          when "001001" | "011001" | "101001"  =>
          ----
             if((violation = 3) or (violation = 11)) then
                if(not same_data) then
                   -- port 1
                   clsn_bufs.DO1_clsn((INDEX + XOUT_BITS_1 ) downto INDEX) := (others => 'X');
                end if;
                if(not same_datap) then
                   -- parity port 1
                   if((D1PW /= 0) and (D2PW /= 0)) then
                       clsn_bufs.DOP1_clsn((we_segment * 1)  downto (we_segment * 1)) := (others => 'X');
                   end if;
                end if;
             end if;

---===============================================================================
---                           wea&web = 10
---===============================================================================

          ----
          when "000010" | "000110" | "001010"  =>
          ----
             if((violation = 3) or (violation = 11)) then
                if(not same_data) then
                   --  port 1
                   clsn_bufs.DO2_clsn((INDEX + XOUT_BITS_1 ) downto INDEX) := (others => 'X');
                end if;
                if(not same_datap) then
                   -- parity port 1
                   if((D1PW /= 0) and (D2PW /= 0)) then
                       clsn_bufs.DOP2_clsn((we_segment * 1)  downto (we_segment * 1)) := (others => 'X');
                   end if;
                end if;
             end if;
          ----
          when "100010" | "100110" | "101010"  =>
          ----
             if((violation = 3) or (violation = 11)) then
                if(not same_data) then
                   --  port 1
                   clsn_bufs.DO2_clsn((INDEX + XOUT_BITS_1 ) downto INDEX) := (others => 'X');
                end if;
                if(not same_datap) then
                   -- parity port 1
                   if((D1PW /= 0) and (D2PW /= 0)) then
                       clsn_bufs.DOP2_clsn((we_segment * 1)  downto (we_segment * 1)) := (others => 'X');
                   end if;
                end if;

             end if;

---===============================================================================
---                           others 
---===============================================================================

          ---------
          when others =>
          ---------
                null;
   end case;

   end CollisionTableRest;

------------------------------------------------
-- procedure PreProcessWe1We2
------------------------------------------------
--
--  Checks whether the time duration of rising
--  clka and clkb violates required setup time
--  between these clocks.
--
   procedure PreProcessWe1We2(
             variable clsn_bufs     : out ClsnXbufType;
             variable clsn_Type     : out CollisionFlagType;
             constant memory        : in std_logic_vector(18431 downto 0);
             constant di1           : in std_logic_vector(31 downto 0)   := (others => 'X');
             constant di2           : in std_logic_vector(31 downto 0)   := (others => 'X');
             constant dip1          : in std_logic_vector(3 downto 0)    := (others => 'X');
             constant dip2          : in std_logic_vector(3 downto 0)    := (others => 'X');
             variable addr1         : in std_logic_vector(13 downto 0)   := (others => 'X');
             variable addr2         : in std_logic_vector(13 downto 0)   := (others => 'X');
             variable we1           : in std_logic_vector(3 downto 0)    := (others => 'X');
             variable we2           : in std_logic_vector(3 downto 0)    := (others => 'X');
             variable zero_read_1   : in std_logic_vector(13 downto 0)   := (others => 'X');
             variable zero_readp_1  : in std_logic_vector(10 downto 0)   := (others => 'X');
             variable zero_write_1  : in std_logic_vector(13 downto 0)   := (others => 'X');
             variable zero_writep_1 : in std_logic_vector(10 downto 0)   := (others => 'X');
             variable zero_read_2   : in std_logic_vector(13 downto 0)   := (others => 'X');
             variable zero_readp_2  : in std_logic_vector(10 downto 0)   := (others => 'X');
             variable zero_write_2  : in std_logic_vector(13 downto 0)   := (others => 'X');
             variable zero_writep_2 : in std_logic_vector(10 downto 0)   := (others => 'X');
             variable wr_mode_1     : in std_logic_vector(1 downto 0)    := "00";
             variable wr_mode_2     : in std_logic_vector(1 downto 0)    := "00";
             constant violation     : in integer := -1;
             variable DI1W          : in integer := -1;
             variable DIP1W         : in integer := -1;
             variable DI2W          : in integer := -1;
             variable DIP2W         : in integer := -1;
             variable DO1W          : in integer := -1;
             variable DOP1W         : in integer := -1;
             variable DO2W          : in integer := -1;
             variable DOP2W         : in integer := -1
   ) is

   variable we1we2 : std_logic_vector(1 downto 0) := "XX";
   variable zero_addr1        : std_logic_vector(13 downto 0) := (others => 'X');
   variable zero_addr2        : std_logic_vector(13 downto 0) := (others => 'X');
   variable zero_parity_addr1 : std_logic_vector(10 downto 0) := (others => 'X');
   variable zero_parity_addr2 : std_logic_vector(10 downto 0) := (others => 'X');
   variable tmp_addr1_zero    : std_logic_vector(13 downto 0) := (others => 'X');
   variable tmp_addr2_zero    : std_logic_vector(13 downto 0) := (others => 'X');
   variable tmp_parity_addr1_zero    : std_logic_vector(10 downto 0) := (others => 'X');
   variable tmp_parity_addr2_zero    : std_logic_vector(10 downto 0) := (others => 'X');


   variable tmp_we1                  : std_ulogic := 'X';
   variable tmp_we2                  : std_ulogic := 'X';
   variable j                        : integer    := 0;

   variable same_data_flg            : boolean    := false;
   variable same_datap_flg           : boolean    := false;

   begin
      
      clsn_type.read_write  := false;
      clsn_type.write_read  := false;
      clsn_type.write_write := false;

      for i in  0 to 3 loop
         we1we2 := we1(i)&we2(i);
         clsn_type.we(i)  := '0';
         case we1we2 is
             ---------
             when "00" =>
             ---------
                null;
   
             ---------
             when "01" =>
             ---------
                same_data_flg  := false;
                same_datap_flg := false;

                zero_addr1 := zero_read_1;
                zero_addr2 := zero_write_2;
             
                zero_parity_addr1 := zero_readp_1;
                zero_parity_addr2 := zero_writep_2;

                tmp_we1 := '0';
                tmp_we2 := '1';

                if(AddrOverlapCheck(DO1W, DI2W, addr1, addr2, zero_addr1, zero_addr2,i)) then

                   tmp_addr1_zero := (addr1(MAX_ADDR downto 0) and zero_addr1);
                   tmp_addr2_zero := (addr2(MAX_ADDR downto 0) and zero_addr2);

                   tmp_parity_addr1_zero := addr1(13 downto 3) and zero_parity_addr1;
                   tmp_parity_addr2_zero := addr2(13 downto 3) and zero_parity_addr2;

-- FP fixed false message for DSP group 12/06/04

                      clsn_type.read_write := true;
                      clsn_type.we(i)  := '1';

                      if((wr_mode_2 = "01")) then
                        clsn_type.read_write := false;
                        clsn_type.we(i)  := '0';
                      end if;

	
                      CollisionTableRest(
                        same_data_flg  => same_data_flg,
                        same_datap_flg => same_datap_flg,
                        clsn_bufs      => clsn_bufs,
                        mem            => memory,
                        di1            => di1,
                        di2            => di2,
                        dip1           => dip1,
                        dip2           => dip2,
                        addr1          => tmp_addr1_zero,
                        addr2          => tmp_addr2_zero,
                        addrp1         => tmp_parity_addr1_zero,
                        addrp2         => tmp_parity_addr2_zero,
                        wr_mode_1      => wr_mode_1,
                        wr_mode_2      => wr_mode_2,
                        violation      => violation,
                        we_segment     => i,
                        we1            => tmp_we1,
                        we2            => tmp_we2,
                        D1W            => DO1W,
                        D1PW           => DOP1W,
                        D2W            => DI2W,
                        D2PW           => DIP2W
                      );
                end if;
             ---------
             when "10" =>
             ---------
                same_data_flg  := false;
                same_datap_flg := false;

                zero_addr1 := zero_write_1;
                zero_addr2 := zero_read_2;

                zero_parity_addr1 := zero_writep_1;
                zero_parity_addr2 := zero_readp_2;

                tmp_we1 := '1';
                tmp_we2 := '0';


                if(AddrOverlapCheck(DI1W, DO2W, addr1, addr2, zero_addr1, zero_addr2,i)) then

                   tmp_addr1_zero := (addr1(MAX_ADDR downto 0) and zero_addr1);
                   tmp_addr2_zero := (addr2(MAX_ADDR downto 0) and zero_addr2);

                   tmp_parity_addr1_zero := addr1(13 downto 3) and zero_parity_addr1;
                   tmp_parity_addr2_zero := addr2(13 downto 3) and zero_parity_addr2;

                      clsn_type.write_read := true;
                      clsn_type.we(i)  := '1';

-- FP fixed false message for DSP group 12/06/04
--                      if((violation = 12) or (wr_mode_1 = "01")) then
                      if((wr_mode_1 = "01")) then
                        clsn_type.write_read := false;
                        clsn_type.we(i)  := '0';
                      end if; 

                      CollisionTableRest(
                        same_data_flg  => same_data_flg,
                        same_datap_flg => same_datap_flg,
                        clsn_bufs      => clsn_bufs,
                        mem            => memory,
                        di1            => di1,
                        di2            => di2,
                        dip1           => dip1,
                        dip2           => dip2,
                        addr1          => tmp_addr1_zero,
                        addr2          => tmp_addr2_zero,
                        addrp1         => tmp_parity_addr1_zero,
                        addrp2         => tmp_parity_addr2_zero,
                        wr_mode_1      => wr_mode_1,
                        wr_mode_2      => wr_mode_2,
                        violation      => violation,
                        we_segment     => i,
                        we1            => tmp_we1,
                        we2            => tmp_we2,
                        D1W            => DI1W,
                        D1PW           => DIP1W,
                        D2W            => DO2W,
                        D2PW           => DOP2W
                      );
                end if;
             ---------
             when "11" =>
             ---------
                same_data_flg  := false;
                same_datap_flg := false;

                zero_addr1 := zero_write_1;
                zero_addr2 := zero_write_2;

                zero_parity_addr1 := zero_writep_1;
                zero_parity_addr2 := zero_writep_2;

                tmp_we1 := '1';
                tmp_we2 := '1';

                if(AddrOverlapCheck(DI1W, DI2W, addr1, addr2, zero_addr1, zero_addr2,i)) then

                   tmp_addr1_zero := (addr1(MAX_ADDR downto 0) and zero_addr1);
                   tmp_addr2_zero := (addr2(MAX_ADDR downto 0) and zero_addr2);

                   tmp_parity_addr1_zero := addr1(13 downto 3) and zero_parity_addr1;
                   tmp_parity_addr2_zero := addr2(13 downto 3) and zero_parity_addr2;

                      if(violation = 12) then
                         if(wr_mode_2 = "01") then
                            clsn_type.write_write := true;
                            clsn_type.we(i)  := '1';
                         end if; 
                      else 
                         clsn_type.write_write := true;
                         clsn_type.we(i)  := '1';
                      end if;

                      CollisionTableRest(
                        same_data_flg  => same_data_flg,
                        same_datap_flg => same_datap_flg,
                        clsn_bufs      => clsn_bufs,
                        mem            => memory,
                        di1            => di1,
                        di2            => di2,
                        dip1           => dip1,
                        dip2           => dip2,
                        addr1          => tmp_addr1_zero,
                        addr2          => tmp_addr2_zero,
                        addrp1         => tmp_parity_addr1_zero,
                        addrp2         => tmp_parity_addr2_zero,
                        wr_mode_1      => wr_mode_1,
                        wr_mode_2      => wr_mode_2,
                        violation      => violation,
                        we_segment     => i,
                        we1            => tmp_we1,
                        we2            => tmp_we2,
                        D1W            => DI1W,
                        D1PW           => DIP1W,
                        D2W            => DI2W,
                        D2PW           => DIP2W
                      );
                end if;

                if((DI1W /= DO1W) or (DI2W /= DO2W)) then
--FP disabled the cross check call
--                   tmp_we1 := '1';
--                   tmp_we2 := '0';
                   tmp_we1 := '0';
                   tmp_we2 := '0';

                   zero_addr1 := zero_write_1;
                   zero_addr2 := zero_read_2;

                   zero_parity_addr1 := zero_writep_1;
                   zero_parity_addr2 := zero_readp_2;

                   if(AddrOverlapCheck(DI1W, DO2W, addr1, addr2, zero_addr1, zero_addr2,i)) then

                      tmp_addr1_zero := (addr1(MAX_ADDR downto 0) and zero_addr1);
                      tmp_addr2_zero := (addr2(MAX_ADDR downto 0) and zero_addr2);

                      tmp_parity_addr1_zero := addr1(13 downto 3) and zero_parity_addr1;
                      tmp_parity_addr2_zero := addr2(13 downto 3) and zero_parity_addr2;

                      CollisionTableRest(
                        same_data_flg  => same_data_flg,
                        same_datap_flg => same_datap_flg,
                        clsn_bufs      => clsn_bufs,
                        mem            => memory,
                        di1            => di1,
                        di2            => di2,
                        dip1           => dip1,
                        dip2           => dip2,
                        addr1          => tmp_addr1_zero,
                        addr2          => tmp_addr2_zero,
                        addrp1         => tmp_parity_addr1_zero,
                        addrp2         => tmp_parity_addr2_zero,
                        wr_mode_1      => wr_mode_1,
                        wr_mode_2      => wr_mode_2,
                        violation      => violation,
                        we_segment     => i,
                        we1            => tmp_we1,
                        we2            => tmp_we2,
                        D1W            => DI1W,
                        D1PW           => DIP1W,
                        D2W            => DO2W,
                        D2PW           => DOP2W
                      );
                   end if;

--FP disabled the cross check call
--                   tmp_we1 := '0';
--                   tmp_we2 := '1';
                   tmp_we1 := '0';
                   tmp_we2 := '0';

                   zero_addr1 := zero_read_1;
                   zero_addr2 := zero_write_2;

                   zero_parity_addr1 := zero_readp_1;
                   zero_parity_addr2 := zero_writep_2;

                   if(AddrOverlapCheck(DO1W, DI2W, addr1, addr2, zero_addr1, zero_addr2,i)) then

                      tmp_addr1_zero := (addr1(MAX_ADDR downto 0) and zero_addr1);
                      tmp_addr2_zero := (addr2(MAX_ADDR downto 0) and zero_addr2);

                      tmp_parity_addr1_zero := addr1(13 downto 3) and zero_parity_addr1;
                      tmp_parity_addr2_zero := addr2(13 downto 3) and zero_parity_addr2;

                      CollisionTableRest(
                        same_data_flg  => same_data_flg,
                        same_datap_flg => same_datap_flg,
                        clsn_bufs      => clsn_bufs,
                        mem            => memory,
                        di1            => di1,
                        di2            => di2,
                        dip1           => dip1,
                        dip2           => dip2,
                        addr1          => tmp_addr1_zero,
                        addr2          => tmp_addr2_zero,
                        addrp1         => tmp_parity_addr1_zero,
                        addrp2         => tmp_parity_addr2_zero,
                        wr_mode_1      => wr_mode_1,
                        wr_mode_2      => wr_mode_2,
                        violation      => violation,
                        we_segment     => i,
                        we1            => tmp_we1,
                        we2            => tmp_we2,
                        D1W            => DO1W,
                        D1PW           => DOP1W,
                        D2W            => DI2W,
                        D2PW           => DIP2W
                      );

                   end if;
                end if;
  
             when others =>
                null;

         end case;

      end loop;

   end PreProcessWe1We2;
------------------------------------------------
-- procedure Memory_Collision_Msg_ramb16
------------------------------------------------
-- This is almost the same procedure as the procedure for V2 ram collision 
-- except that is is local to the model (since this is the only one that 
-- calls this procedure
  Procedure Memory_Collision_Msg_ramb16 (
    CONSTANT HeaderMsg      : IN STRING := " Memory Collision Error on ";        
    CONSTANT EntityName : IN STRING := "";
    CONSTANT InstanceName : IN STRING := "";
    constant collision_type : in memory_collision_type;
    constant address_1 : in std_logic_vector; 
    constant address_2 : in std_logic_vector; 
    CONSTANT MsgSeverity    : IN SEVERITY_LEVEL := Error
    
    
    ) IS
    variable current_time : time := NOW;
    variable string_length_1 : integer;
    variable string_length_2 : integer;    

    VARIABLE Message : LINE;
  BEGIN
    if ((address_1'length mod 4) = 0) then
      string_length_1 := address_1'length/4;
    elsif ((address_1'length mod 4) > 0) then
      string_length_1 := address_1'length/4 + 1;      
    end if;
    if ((address_2'length mod 4) = 0) then
      string_length_2 := address_2'length/4;
    elsif ((address_2'length mod 4) > 0) then
      string_length_2 := address_2'length/4 + 1;      
    end if;    
--    if ((collision_type = Read_A_Write_B) or (collision_type = Read_B_Write_A)) then
    if ((collision_type = Read_A_Write_B) or (collision_type = Write_A_Read_B) or
        (collision_type = Read_B_Write_A) or (collision_type = Write_B_Read_A)) then
      Write ( Message, HeaderMsg);
      Write ( Message, EntityName);    
      Write ( Message, STRING'(": "));
      Write ( Message, InstanceName);
      Write ( Message, STRING'(" at simulation time "));
      Write ( Message, current_time);
      Write ( Message, STRING'("."));
      Write ( Message, LF );            
      Write ( Message, STRING'(" A read was performed on address "));
      Write ( Message, SLV_TO_HEX(address_1, string_length_1));
      Write ( Message, STRING'(" (hex) "));            
--      if (collision_type = Read_A_Write_B) then
      if ((collision_type = Read_A_Write_B) or (collision_type = Write_B_Read_A))then
         Write ( Message, STRING'("of port A while a write was requested to the same address on Port B "));
         Write ( Message, STRING'(" The write will be successful however the read value is unknown until the next CLKA cycle  "));
--      elsif(collision_type = Read_B_Write_A) then
      elsif((collision_type = Read_B_Write_A) or (collision_type = Write_A_Read_B)) then
         Write ( Message, STRING'("of port B while a write was requested to the same address on Port A "));
         Write ( Message, STRING'(" The write will be successful however the read value is unknown until the next CLKB cycle  "));
      end if;
    elsif ((collision_type = Write_A_Write_B) or (collision_type = Write_B_Write_A)) then
      Write ( Message, HeaderMsg);
      Write ( Message, EntityName);    
      Write ( Message, STRING'(": "));
      Write ( Message, InstanceName);
      Write ( Message, STRING'(" at simulation time "));
      Write ( Message, current_time);
      Write ( Message, STRING'("."));
      Write ( Message, LF );            
      Write ( Message, STRING'(" A write was requested to the same address simultaneously at both Port A and Port B of the RAM."));
      Write ( Message, STRING'(" The contents written to the RAM at address location "));      
      Write ( Message, SLV_TO_HEX(address_1, string_length_1));
      Write ( Message, STRING'(" (hex) "));            
      Write ( Message, STRING'("of Port A and address location "));
      Write ( Message, SLV_TO_HEX(address_2, string_length_2));
      Write ( Message, STRING'(" (hex) "));            
      Write ( Message, STRING'("of Port B are unknown. "));
    end if;      
    ASSERT FALSE REPORT Message.ALL SEVERITY MsgSeverity;

    DEALLOCATE (Message);
  END Memory_Collision_Msg_ramb16;      

------------------ END Procedures/Functions ------------------------------

  signal ADDRA_ipd    : std_logic_vector(MAX_ADDR downto 0) := (others => 'X');
  signal CLKA_ipd     : std_ulogic                          := 'X';
  signal DIA_ipd      : std_logic_vector(MAX_DI  downto 0)  := (others => 'X');
  signal DIPA_ipd     : std_logic_vector(MAX_DIP downto 0)  := (others => 'X');
  signal ENA_ipd      : std_ulogic                          := 'X';
  signal RSTA_ipd      : std_ulogic                          := 'X';
  signal REGCEA_ipd   : std_ulogic                          := 'X';
  signal WEA_ipd      : std_logic_vector(MAX_WE downto 0)   := (others => 'X');

  signal ADDRB_ipd    : std_logic_vector(MAX_ADDR downto 0) := (others => 'X');
  signal CLKB_ipd     : std_ulogic                          := 'X';
  signal DIB_ipd      : std_logic_vector(MAX_DI  downto 0)  := (others => 'X');
  signal DIPB_ipd     : std_logic_vector(MAX_DIP downto 0)  := (others => 'X');
  signal ENB_ipd      : std_ulogic                          := 'X';
  signal RSTB_ipd      : std_ulogic                          := 'X';
  signal REGCEB_ipd   : std_ulogic                          := 'X';
  signal WEB_ipd      : std_logic_vector(MAX_WE downto 0)   := (others => 'X');

  signal GSR_ipd      : std_ulogic                          := 'X';

  signal GSR_dly      : std_ulogic                          := 'X';

  signal ADDRA_dly    : std_logic_vector(MAX_ADDR downto 0) := (others => 'X');
  signal CLKA_dly     : std_ulogic                          := 'X';
  signal DIA_dly      : std_logic_vector(MAX_DI downto 0) := (others => 'X');
  signal DIPA_dly     : std_logic_vector(MAX_DIP downto 0)  := (others => 'X');
  signal ENA_dly      : std_ulogic                          := 'X';
  signal GSR_CLKA_dly : std_ulogic                          := 'X';
  signal RSTA_dly      : std_ulogic                          := 'X';
  signal REGCEA_dly   : std_ulogic                          := 'X';
  signal WEA_dly      : std_logic_vector(MAX_WE downto 0)   := (others => 'X');

  signal ADDRB_dly    : std_logic_vector(MAX_ADDR downto 0) := (others => 'X');
  signal CLKB_dly     : std_ulogic                          := 'X';
  signal DIB_dly      : std_logic_vector(MAX_DI downto 0) := (others => 'X');
  signal DIPB_dly     : std_logic_vector(MAX_DIP downto 0)  := (others => 'X');
  signal ENB_dly      : std_ulogic                          := 'X';
  signal GSR_CLKB_dly : std_ulogic                          := 'X';
  signal RSTB_dly      : std_ulogic                          := 'X';
  signal REGCEB_dly   : std_ulogic                          := 'X';
  signal WEB_dly      : std_logic_vector(MAX_WE downto 0)   := (others => 'X');

  signal DOA_viol     : std_logic_vector(MAX_DI downto 0);
  signal DOPA_viol    : std_logic_vector(3 downto 0);
  signal DOB_viol     : std_logic_vector(MAX_DI downto 0);
  signal DOPB_viol    : std_logic_vector(3 downto 0);

  signal DOA_regist   : std_logic_vector(MAX_DI downto 0);
  signal DOPA_regist  : std_logic_vector(3 downto 0);
  signal DOB_regist   : std_logic_vector(MAX_DI downto 0);
  signal DOPB_regist  : std_logic_vector(3 downto 0);

  signal DOA_mux      : std_logic_vector(MAX_DI downto 0);
  signal DOPA_mux     : std_logic_vector(3 downto 0);
  signal DOB_mux      : std_logic_vector(MAX_DI downto 0);
  signal DOPB_mux     : std_logic_vector(3 downto 0);


  signal DIAW              : integer;
  signal DIAW_1            : integer;
  signal DIBW              : integer;
  signal DIBW_1            : integer;
  signal DIPAW             : integer;
  signal DIPAW_1           : integer;
  signal DIPBW             : integer;
  signal DIPBW_1           : integer;

  signal DOAW              : integer;
  signal DOAW_1            : integer;
  signal DOBW              : integer;
  signal DOBW_1            : integer;
  signal DOPAW             : integer;
  signal DOPAW_1           : integer;
  signal DOPBW             : integer;
  signal DOPBW_1           : integer;

  signal INI_A_sig         : std_logic_vector (35 downto 0) :=  (others => 'X');
  signal INI_B_sig         : std_logic_vector (35 downto 0) :=  (others => 'X');

  signal SRVA_A_sig        : std_logic_vector (35 downto 0) :=  (others => 'X');
  signal SRVA_B_sig        : std_logic_vector (35 downto 0) :=  (others => 'X');

  signal rst_async_flag    : std_ulogic := '0';

  signal INIT_DONE         : boolean := false;

begin
  ---------------------
  --  INPUT PATH DELAYs
  --------------------

  WireDelay     : block
  begin

-----  Port A

    ADDRA_DELAY : for i in MAX_ADDR downto 0 generate
      VitalWireDelay (ADDRA_ipd(i), ADDRA(i), tipd_ADDRA(i));
    end generate ADDRA_DELAY;

    DIA_DELAY   : for i in MAX_DI downto 0 generate
      VitalWireDelay (DIA_ipd(i), DIA(i), tipd_DIA(i));
    end generate DIA_DELAY;

    DIPA_DELAY  : for i in MAX_DIP downto 0 generate
      VitalWireDelay (DIPA_ipd(i), DIPA(i), tipd_DIPA(i));
    end generate DIPA_DELAY;

    WEA_DELAY : for i in  MAX_WE downto 0 GENERATE
      VitalWireDelay (WEA_ipd(i) , WEA(i), tipd_WEA(i));
    end generate WEA_DELAY;

    VitalWireDelay (CLKA_ipd, CLKA, tipd_CLKA);
    VitalWireDelay (ENA_ipd, ENA, tipd_ENA);
    VitalWireDelay (RSTA_ipd, RSTA, tipd_RSTA);
    VitalWireDelay (REGCEA_ipd, REGCEA, tipd_REGCEA);

-----  Port B

    ADDRB_DELAY : for i in MAX_ADDR downto 0 generate
      VitalWireDelay (ADDRB_ipd(i), ADDRB(i), tipd_ADDRB(i));
    end generate ADDRB_DELAY;

    DIB_DELAY   : for i in MAX_DI downto 0 generate
      VitalWireDelay (DIB_ipd(i), DIB(i), tipd_DIB(i));
    end generate DIB_DELAY;

    DIPB_DELAY  : for i in MAX_DIP downto 0 generate
      VitalWireDelay (DIPB_ipd(i), DIPB(i), tipd_DIPB(i));
    end generate DIPB_DELAY;

    WEB_DELAY : for i in  MAX_WE downto 0 GENERATE
      VitalWireDelay (WEB_ipd(i) , WEB(i), tipd_WEB(i));
    end generate WEB_DELAY;

    VitalWireDelay (CLKB_ipd, CLKB, tipd_CLKB);
    VitalWireDelay (ENB_ipd, ENB, tipd_ENB);
    VitalWireDelay (RSTB_ipd, RSTB, tipd_RSTB);
    VitalWireDelay (REGCEB_ipd, REGCEB, tipd_REGCEB);

----- GSR

    VitalWireDelay (GSR_ipd, GSR, tipd_GSR);

  end block;

  SignalDelay   : block
  begin

-----  Port A

    ADDRA_DELAY : for i in MAX_ADDR downto 0 generate
      VitalSignalDelay (ADDRA_dly(i), ADDRA_ipd(i), tisd_ADDRA_CLKA(i));
    end generate ADDRA_DELAY;

    DIA_DELAY   : for i in MAX_DI downto 0 generate
      VitalSignalDelay (DIA_dly(i), DIA_ipd(i), tisd_DIA_CLKA(i));
    end generate DIA_DELAY;

    DIPA_DELAY  : for i in MAX_DIP downto 0 generate
      VitalSignalDelay (DIPA_dly(i), DIPA_ipd(i), tisd_DIPA_CLKA(i));
    end generate DIPA_DELAY;

    WEA_DELAY   : for i in MAX_WE downto 0 generate
      VitalSignalDelay (WEA_dly(i), WEA_ipd(i), tisd_WEA_CLKA(i));
    end generate WEA_DELAY;

    VitalSignalDelay (CLKA_dly, CLKA_ipd, ticd_CLKA);
    VitalSignalDelay (ENA_dly, ENA_ipd, tisd_ENA_CLKA);
    VitalSignalDelay (GSR_CLKA_dly, GSR_ipd, tisd_GSR_CLKA);
    VitalSignalDelay (RSTA_dly, RSTA_ipd, tisd_RSTA_CLKA);
    VitalSignalDelay (REGCEA_dly, REGCEA_ipd, tisd_REGCEA_CLKA);

-----  Port B   

    ADDRB_DELAY : for i in MAX_ADDR downto 0 generate
      VitalSignalDelay (ADDRB_dly(i), ADDRB_ipd(i), tisd_ADDRB_CLKB(i));
    end generate ADDRB_DELAY;


    DIB_DELAY   : for i in MAX_DI downto 0 generate
      VitalSignalDelay (DIB_dly(i), DIB_ipd(i), tisd_DIB_CLKB(i));
    end generate DIB_DELAY;

    DIPB_DELAY  : for i in MAX_DIP downto 0 generate
      VitalSignalDelay (DIPB_dly(i), DIPB_ipd(i), tisd_DIPB_CLKB(i));
    end generate DIPB_DELAY;

    WEB_DELAY   : for i in MAX_WE downto 0 generate
      VitalSignalDelay (WEB_dly(i), WEB_ipd(i), tisd_WEB_CLKB(i));
    end generate WEB_DELAY;

    VitalSignalDelay (CLKB_dly, CLKB_ipd, ticd_CLKB);
    VitalSignalDelay (ENB_dly, ENB_ipd, tisd_ENB_CLKB);
    VitalSignalDelay (GSR_CLKB_dly, GSR_ipd, tisd_GSR_CLKB);
    VitalSignalDelay (RSTB_dly, RSTB_ipd, tisd_RSTB_CLKB);
    VitalSignalDelay (REGCEB_dly, REGCEB_ipd, tisd_REGCEB_CLKB);

  end block;

  --------------------
  --  BEHAVIOR SECTION
  --------------------

   prcs_initialize:process
    variable INI_A         : std_logic_vector (35 downto 0) :=  (others => 'X');
    variable INI_A_UNBOUND : std_logic_vector (INIT_A'length-1 downto 0);
    variable INI_B         : std_logic_vector (35 downto 0) :=  (others => 'X');
    variable INI_B_UNBOUND : std_logic_vector (INIT_B'length-1 downto 0);

    variable SRVA_A            : std_logic_vector (35 downto 0) :=  (others => 'X');
    variable SRVA_A_UNBOUND    : std_logic_vector (SRVAL_A'length-1 downto 0);
    variable SRVA_B            : std_logic_vector (35 downto 0) :=  (others => 'X');
    variable SRVA_B_UNBOUND    : std_logic_vector (SRVAL_B'length-1 downto 0);

    variable DIAW_var              : integer;
    variable DIAW_1_var            : integer;
    variable DIBW_var              : integer;
    variable DIBW_1_var            : integer;
    variable DIPAW_var             : integer;
    variable DIPAW_1_var           : integer;
    variable DIPBW_var             : integer;
    variable DIPBW_1_var           : integer;

    variable DOAW_var              : integer;
    variable DOAW_1_var            : integer;
    variable DOBW_var              : integer;
    variable DOBW_1_var            : integer;
    variable DOPAW_var             : integer;
    variable DOPAW_1_var           : integer;
    variable DOPBW_var             : integer;
    variable DOPBW_1_var           : integer;

   begin
      DIPAW_var   := 0;
      DIPAW_1_var := -1;
      DIPBW_var   := 0;
      DIPBW_1_var := -1;

      DOPAW_var   := 0;
      DOPAW_1_var := -1;
      DOPBW_var   := 0;
      DOPBW_1_var := -1;

     
--------------------------------------------------------------------
--    Additional Checks Added Later
--------------------------------------------------------------------
      if((DATA_WIDTH_A = 0) and (DATA_WIDTH_B = 0 )) then
        assert false
        report "Attribute Syntax Error: Both DATA_WIDTH_A and DATA_WIDTH_B can not be 0."
        severity Failure;
      end if;

      case DATA_WIDTH_A is

            when 0 =>
                 DOAW_var    := 1;
                 DOAW_1_var  := DOAW_var -1;
                 DIAW_var    := 1;
                 DIAW_1_var  := DIAW_var -1;

            when 1 =>
                 DOAW_var    := 1;
                 DOAW_1_var  := DOAW_var -1;
                 DIAW_var    := 1;
                 DIAW_1_var  := DIAW_var -1;

            when 2 =>
                 DOAW_var    := 2;
                 DOAW_1_var  := DOAW_var -1;
                 DIAW_var    := 2;
                 DIAW_1_var  := DIAW_var -1;

            when 4 =>
                 DOAW_var    := 4;
                 DOAW_1_var  := DOAW_var -1;
                 DIAW_var    := 4;
                 DIAW_1_var  := DIAW_var -1;

            when 9 =>
                 DOAW_var    := 8;
                 DOAW_1_var  := DOAW_var -1;
                 DOPAW_var   := 1;
                 DOPAW_1_var := DOPAW_var -1;
                 DIAW_var    := 8;
                 DIAW_1_var  := DIAW_var -1;
                 DIPAW_var   := 1;
                 DIPAW_1_var := DIPAW_var -1;

            when 18  =>
                 DOAW_var    := 16;
                 DOAW_1_var  := DOAW_var -1;
                 DOPAW_var   := 2;
                 DOPAW_1_var := DOPAW_var -1;
                 DIAW_var    := 16;
                 DIAW_1_var  := DIAW_var -1;
                 DIPAW_var   := 2;
                 DIPAW_1_var := DIPAW_var -1;

            when 36  =>
                 DOAW_var    := 32;
                 DOAW_1_var  := DOAW_var -1;
                 DOPAW_var   := 4;
                 DOPAW_1_var := DOPAW_var -1;
                 DIAW_var    := 32;
                 DIAW_1_var  := DIAW_var -1;
                 DIPAW_var   := 4;
                 DIPAW_1_var := DIPAW_var -1;

            when others =>
                 GenericValueCheckMessage
                 (  HeaderMsg            => " Attribute Syntax Error : ",
                    GenericName          => " DATA_WIDTH_A ",
                    EntityName           => "/X_RAMB16BWER",
                    GenericValue         => DATA_WIDTH_A,
                    Unit                 => "",
                    ExpectedValueMsg     => " The Legal values for this attribute are ",
                    ExpectedGenericValue => " 0, 1, 2, 4, 9, 18 or 36.",
                    TailMsg              => "",
                    MsgSeverity          => failure
                 );
      end case;


      case DATA_WIDTH_B is

            when 0 =>
                 DOBW_var    := 1;
                 DOBW_1_var  := DOBW_var -1;
                 DIBW_var    := 1;
                 DIBW_1_var  := DIBW_var -1;

            when 1 =>
                 DOBW_var    := 1;
                 DOBW_1_var  := DOBW_var -1;
                 DIBW_var    := 1;
                 DIBW_1_var  := DIBW_var -1;

            when 2 =>
                 DOBW_var    := 2;
                 DOBW_1_var  := DOBW_var -1;
                 DIBW_var    := 2;
                 DIBW_1_var  := DIBW_var -1;

            when 4 =>
                 DOBW_var    := 4;
                 DOBW_1_var  := DOBW_var -1;
                 DIBW_var    := 4;
                 DIBW_1_var  := DIBW_var -1;

            when 9 =>
                 DOBW_var    := 8;
                 DOBW_1_var  := DOBW_var -1;
                 DOPBW_var   := 1;
                 DOPBW_1_var := DOPBW_var -1;
                 DIBW_var    := 8;
                 DIBW_1_var  := DIBW_var -1;
                 DIPBW_var   := 1;
                 DIPBW_1_var := DIPBW_var -1;

            when 18  =>
                 DOBW_var    := 16;
                 DOBW_1_var  := DOBW_var -1;
                 DOPBW_var   := 2;
                 DOPBW_1_var := DOPBW_var -1;
                 DIBW_var    := 16;
                 DIBW_1_var  := DIBW_var -1;
                 DIPBW_var   := 2;
                 DIPBW_1_var := DIPBW_var -1;

            when 36  =>
                 DOBW_var    := 32;
                 DOBW_1_var  := DOBW_var -1;
                 DOPBW_var   := 4;
                 DOPBW_1_var := DOPBW_var -1;
                 DIBW_var    := 32;
                 DIBW_1_var  := DIBW_var -1;
                 DIPBW_var   := 4;
                 DIPBW_1_var := DIPBW_var -1;

            when others =>
                 GenericValueCheckMessage
                 (  HeaderMsg            => " Attribute Syntax Error : ",
                    GenericName          => " DATA_WIDTH_B ",
                    EntityName           => "/X_RAMB16BWER",
                    GenericValue         => DATA_WIDTH_B,
                    Unit                 => "",
                    ExpectedValueMsg     => " The Legal values for this attribute are ",
                    ExpectedGenericValue => " 0, 1, 2, 4, 9, 18 or 36.",
                    TailMsg              => "",
                    MsgSeverity          => failure
                 );
                 null;

      end case;


      if (INIT_A'length > 36) then
        INI_A_UNBOUND(INIT_A'length-1 downto 0) := To_StdLogicVector(INIT_A );
        INI_A(35 downto 0)                      := INI_A_UNBOUND(35 downto 0);
      elsif (INIT_A'length < 36) then
        INI_A(INIT_A'length-1 downto 0)         := To_StdLogicVector(INIT_A );
      elsif (INIT_A'length = 36) then
        INI_A(INIT_A'length-1 downto 0)         := To_StdLogicVector(INIT_A );
      end if;

      if (INIT_B'length > 36) then
        INI_B_UNBOUND(INIT_B'length-1 downto 0) := To_StdLogicVector(INIT_B );
        INI_B(35 downto 0)                      := INI_B_UNBOUND(35 downto 0);
      elsif (INIT_B'length < 36) then
        INI_B(INIT_B'length-1 downto 0)         := To_StdLogicVector(INIT_B );
      elsif (INIT_B'length = 36) then
        INI_B(INIT_B'length-1 downto 0)         := To_StdLogicVector(INIT_B );
      end if;

      if (SRVAL_A'length > 36) then
        SRVA_A_UNBOUND(SRVAL_A'length-1 downto 0) := To_StdLogicVector(SRVAL_A );
        SRVA_A(35 downto 0)                       := SRVA_A_UNBOUND(35 downto 0);
      elsif (SRVAL_A'length < 36) then
        SRVA_A(SRVAL_A'length-1 downto 0)         := To_StdLogicVector(SRVAL_A );
      elsif (SRVAL_A'length = 36) then
        SRVA_A(SRVAL_A'length-1 downto 0)         := To_StdLogicVector(SRVAL_A );
      end if;

      if (SRVAL_B'length > 36) then
        SRVA_B_UNBOUND(SRVAL_B'length-1 downto 0) := To_StdLogicVector(SRVAL_B );
        SRVA_B(35 downto 0)                       := SRVA_B_UNBOUND(35 downto 0);
      elsif (SRVAL_B'length < 36) then
        SRVA_B(SRVAL_B'length-1 downto 0)         := To_StdLogicVector(SRVAL_B );
      elsif (SRVAL_B'length = 36) then
        SRVA_B(SRVAL_B'length-1 downto 0)         := To_StdLogicVector(SRVAL_B );
      end if;

      DIAW     <= DIAW_var;
      DIAW_1   <= DIAW_1_var;
      DIBW     <= DIBW_var;
      DIBW_1   <= DIBW_1_var;
      DIPAW    <= DIPAW_var;
      DIPAW_1  <= DIPAW_1_var;
      DIPBW    <= DIPBW_var;
      DIPBW_1  <= DIPBW_1_var;

      DOAW     <= DOAW_var;
      DOAW_1   <= DOAW_1_var;
      DOBW     <= DOBW_var;
      DOBW_1   <= DOBW_1_var;
      DOPAW    <= DOPAW_var;
      DOPAW_1  <= DOPAW_1_var;
      DOPBW    <= DOPBW_var;
      DOPBW_1  <= DOPBW_1_var;

      SRVA_A_sig <= SRVA_A;
      SRVA_B_sig <= SRVA_B;
      INI_A_sig  <= INI_A;
      INI_B_sig  <= INI_B;

-------- RSTTYPE ----------

     if((RSTTYPE = "SYNC") or (RSTTYPE = "sync")) then
        rst_async_flag  <= '0';
     elsif((RSTTYPE = "ASYNC") or (RSTTYPE = "async")) then
        rst_async_flag  <= '1';
     else
        assert false
        report "Attribute Syntax Error: The attribute RSTTYPE on DSP48A is incorrect. Legal values for this attribute are SYNC or ASYNC."
        severity Failure;
     end if;
-----------------------------

      INIT_DONE  <= true;

      wait;
  end process prcs_initialize;
---------------------------------------------------------------------------------------
  VITALBehavior                         : process

    variable Tviol_ADDRA0_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA1_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA2_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA3_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA4_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA5_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA6_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA7_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA8_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA9_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA10_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA11_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA12_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA13_CLKA_posedge : std_ulogic := '0';
    variable Tviol_DIA0_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_DIA1_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_DIA2_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_DIA3_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_DIA4_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_DIA5_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_DIA6_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_DIA7_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_DIA8_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_DIA9_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_DIA10_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA11_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA12_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA13_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA14_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA15_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA16_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA17_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA18_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA19_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA20_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA21_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA22_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA23_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA24_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA25_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA26_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA27_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA28_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA29_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA30_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA31_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIPA0_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIPA1_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIPA2_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIPA3_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_ENA_CLKA_posedge     : std_ulogic := '0';
    variable Tviol_GSR_CLKA_posedge     : std_ulogic := '0';
    variable Tviol_REGCEA_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_RSTA_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_WEA0_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_WEA1_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_WEA2_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_WEA3_CLKA_posedge    : std_ulogic := '0';

    variable Tviol_ADDRB0_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB1_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB2_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB3_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB4_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB5_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB6_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB7_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB8_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB9_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB10_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB11_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB12_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB13_CLKB_posedge : std_ulogic := '0';
    variable Tviol_DIB0_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB1_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB2_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB3_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB4_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB5_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB6_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB7_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB8_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB9_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB10_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB11_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB12_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB13_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB14_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB15_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB16_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB17_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB18_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB19_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB20_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB21_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB22_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB23_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB24_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB25_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB26_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB27_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB28_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB29_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB30_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB31_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIPB0_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIPB1_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIPB2_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIPB3_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_ENB_CLKB_posedge     : std_ulogic := '0';
    variable Tviol_GSR_CLKB_posedge     : std_ulogic := '0';
    variable Tviol_REGCEB_CLKB_posedge     : std_ulogic := '0';
    variable Tviol_RSTB_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_WEB0_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_WEB1_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_WEB2_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_WEB3_CLKB_posedge    : std_ulogic := '0';

    variable Tviol_CLKA_CLKB_all        : std_ulogic := '0';
    variable Tviol_CLKA_CLKB_read_first : std_ulogic := '0';
    variable Tviol_CLKB_CLKA_all        : std_ulogic := '0';
    variable Tviol_CLKB_CLKA_read_first : std_ulogic := '0';

    variable Tmkr_ADDRA0_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA1_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA2_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA3_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA4_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA5_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA6_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA7_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA8_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA9_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA10_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA11_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA12_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA13_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA0_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA1_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA2_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA3_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA4_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA5_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA6_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA7_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA8_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA9_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA10_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA11_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA12_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA13_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA14_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA15_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA16_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA17_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA18_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA19_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA20_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA21_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA22_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA23_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA24_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA25_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA26_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA27_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA28_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA29_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA30_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA31_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIPA0_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIPA1_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIPA2_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIPA3_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ENA_CLKA_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_GSR_CLKA_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_REGCEA_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_RSTA_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WEA0_CLKA_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WEA1_CLKA_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WEA2_CLKA_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WEA3_CLKA_posedge      : VitalTimingDataType := VitalTimingDataInit;

    variable Tmkr_ADDRB0_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB1_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB2_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB3_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB4_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB5_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB6_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB7_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB8_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB9_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB10_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB11_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB12_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB13_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB0_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB1_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB2_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB3_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB4_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB5_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB6_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB7_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB8_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB9_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB10_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB11_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB12_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB13_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB14_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB15_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB16_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB17_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB18_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB19_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB20_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB21_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB22_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB23_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB24_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB25_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB26_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB27_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB28_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB29_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB30_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB31_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIPB0_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIPB1_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIPB2_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIPB3_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ENB_CLKB_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_GSR_CLKB_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_REGCEB_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_RSTB_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WEB0_CLKB_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WEB1_CLKB_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WEB2_CLKB_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WEB3_CLKB_posedge      : VitalTimingDataType := VitalTimingDataInit;

    variable Tmkr_CLKA_CLKB_all        : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_CLKA_CLKB_read_first : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_CLKB_CLKA_all        : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_CLKB_CLKA_read_first : VitalTimingDataType := VitalTimingDataInit;

    variable PViol_GSR : std_ulogic          := '0';
    variable PInfo_GSR : VitalPeriodDataType := VitalPeriodDataInit;

    variable Pviol_CLKA, Pviol_CLKB : std_ulogic          := '0';
    variable Pinfo_CLKA, Pinfo_CLKB : VitalPeriodDataType := VitalPeriodDataInit;

    variable Pviol_RSTA, Pviol_RSTB : std_ulogic          := '0';
    variable Pinfo_RSTA, Pinfo_RSTB : VitalPeriodDataType := VitalPeriodDataInit;


    variable MEM : std_logic_vector(18431 downto 0) := To_StdLogicVector(INITP_07) &
                                                       To_StdLogicVector(INITP_06) &
                                                       To_StdLogicVector(INITP_05) &
                                                       To_StdLogicVector(INITP_04) &
                                                       To_StdLogicVector(INITP_03) &
                                                       To_StdLogicVector(INITP_02) &
                                                       To_StdLogicVector(INITP_01) &
                                                       To_StdLogicVector(INITP_00) & 

                                                       To_StdLogicVector(INIT_3F)  &
                                                       To_StdLogicVector(INIT_3E)  &
                                                       To_StdLogicVector(INIT_3D)  &
                                                       To_StdLogicVector(INIT_3C)  &
                                                       To_StdLogicVector(INIT_3B)  &
                                                       To_StdLogicVector(INIT_3A)  &
                                                       To_StdLogicVector(INIT_39)  &
                                                       To_StdLogicVector(INIT_38)  &
                                                       To_StdLogicVector(INIT_37)  &
                                                       To_StdLogicVector(INIT_36)  &
                                                       To_StdLogicVector(INIT_35)  &
                                                       To_StdLogicVector(INIT_34)  &
                                                       To_StdLogicVector(INIT_33)  &
                                                       To_StdLogicVector(INIT_32)  &
                                                       To_StdLogicVector(INIT_31)  &
                                                       To_StdLogicVector(INIT_30)  &
                                                       To_StdLogicVector(INIT_2F)  &
                                                       To_StdLogicVector(INIT_2E)  &
                                                       To_StdLogicVector(INIT_2D)  &
                                                       To_StdLogicVector(INIT_2C)  &
                                                       To_StdLogicVector(INIT_2B)  &
                                                       To_StdLogicVector(INIT_2A)  &
                                                       To_StdLogicVector(INIT_29)  &
                                                       To_StdLogicVector(INIT_28)  &
                                                       To_StdLogicVector(INIT_27)  &
                                                       To_StdLogicVector(INIT_26)  &
                                                       To_StdLogicVector(INIT_25)  &
                                                       To_StdLogicVector(INIT_24)  &
                                                       To_StdLogicVector(INIT_23)  &
                                                       To_StdLogicVector(INIT_22)  &
                                                       To_StdLogicVector(INIT_21)  &
                                                       To_StdLogicVector(INIT_20)  &
                                                       To_StdLogicVector(INIT_1F)  &
                                                       To_StdLogicVector(INIT_1E)  &
                                                       To_StdLogicVector(INIT_1D)  &
                                                       To_StdLogicVector(INIT_1C)  &
                                                       To_StdLogicVector(INIT_1B)  &
                                                       To_StdLogicVector(INIT_1A)  &
                                                       To_StdLogicVector(INIT_19)  &
                                                       To_StdLogicVector(INIT_18)  &
                                                       To_StdLogicVector(INIT_17)  &
                                                       To_StdLogicVector(INIT_16)  &
                                                       To_StdLogicVector(INIT_15)  &
                                                       To_StdLogicVector(INIT_14)  &
                                                       To_StdLogicVector(INIT_13)  &
                                                       To_StdLogicVector(INIT_12)  &
                                                       To_StdLogicVector(INIT_11)  &
                                                       To_StdLogicVector(INIT_10)  &
                                                       To_StdLogicVector(INIT_0F)  &
                                                       To_StdLogicVector(INIT_0E)  &
                                                       To_StdLogicVector(INIT_0D)  &
                                                       To_StdLogicVector(INIT_0C)  &
                                                       To_StdLogicVector(INIT_0B)  &
                                                       To_StdLogicVector(INIT_0A)  &
                                                       To_StdLogicVector(INIT_09)  &
                                                       To_StdLogicVector(INIT_08)  &
                                                       To_StdLogicVector(INIT_07)  &
                                                       To_StdLogicVector(INIT_06)  &
                                                       To_StdLogicVector(INIT_05)  &
                                                       To_StdLogicVector(INIT_04)  &
                                                       To_StdLogicVector(INIT_03)  &
                                                       To_StdLogicVector(INIT_02)  &
                                                       To_StdLogicVector(INIT_01)  &
                                                       To_StdLogicVector(INIT_00) ;
 
    variable INI_A         : std_logic_vector (35 downto 0) := (others => 'X');
    variable INI_A_UNBOUND : std_logic_vector (INIT_A'length-1 downto 0);
    variable INI_B         : std_logic_vector (35 downto 0) := (others => 'X');
    variable INI_B_UNBOUND : std_logic_vector (INIT_B'length-1 downto 0);

    variable DIAW              : integer;
    variable DIAW_1            : integer;
    variable DIBW              : integer;
    variable DIBW_1            : integer;
    variable DIPAW             : integer;
    variable DIPAW_1           : integer;
    variable DIPBW             : integer;
    variable DIPBW_1           : integer;

    variable DOAW              : integer;
    variable DOAW_1            : integer;
    variable DOBW              : integer;
    variable DOBW_1            : integer;
    variable DOPAW             : integer;
    variable DOPAW_1           : integer;
    variable DOPBW             : integer;
    variable DOPBW_1           : integer;

    variable ADDRA_dly_sampled : std_logic_vector(MAX_ADDR downto 0)   := (others => 'X');
    variable ADDRB_dly_sampled : std_logic_vector(MAX_ADDR downto 0)   := (others => 'X');
    variable ADDRESS_A         : integer;
    variable ADDRESS_B         : integer;

    variable ADDRESS_READ_A, ADDRESS_WRITE_A, ADDRESS_READ_B, ADDRESS_WRITE_B : integer;
    variable ADDRESS_PARITY_READ_A, ADDRESS_PARITY_WRITE_A, ADDRESS_PARITY_READ_B, ADDRESS_PARITY_WRITE_B : integer;

    variable DOA_INDEX, DOPA_INDEX : integer := -1;
    variable DOB_INDEX, DOPB_INDEX : integer := -1;

    variable DOA_OV_LSB        : integer;
    variable DOA_OV_MSB        : integer;
    variable DOA_zd            : std_logic_vector(MAX_DI downto 0)  := INI_A(MAX_DI downto 0);
    variable DOA_zd_buf        : std_logic_vector(MAX_DI downto 0)  := INI_A(MAX_DI downto 0);
    variable DOB_OV_LSB        : integer;
    variable DOB_OV_MSB        : integer;
    variable DOB_zd            : std_logic_vector(MAX_DI downto 0)  := INI_B(MAX_DI downto 0);
    variable DOB_zd_buf        : std_logic_vector(MAX_DI downto 0)  := INI_B(MAX_DI downto 0);
    variable DOPA_OV_LSB       : integer;
    variable DOPA_OV_MSB       : integer;
    variable DOPA_zd           : std_logic_vector(3 downto 0)   := INI_A(35 downto 32);
    variable DOPA_zd_buf       : std_logic_vector(3 downto 0)   := INI_A(35 downto 32);
    variable DOPB_OV_LSB       : integer;
    variable DOPB_OV_MSB       : integer;
    variable DOPB_zd           : std_logic_vector(3 downto 0)   := INI_B(35 downto 32);
    variable DOPB_zd_buf       : std_logic_vector(3 downto 0)   := INI_B(35 downto 32);
    variable ENA_dly_sampled   : std_ulogic                      := 'X';
    variable ENB_dly_sampled   : std_ulogic                      := 'X';
    variable FIRST_TIME        : boolean                        := true;
    variable HAS_OVERLAP       : boolean                        := false;
    variable HAS_OVERLAP_P     : boolean                        := false;
    variable OLPP_LSB          : integer;
    variable OLPP_MSB          : integer;
    variable OLP_LSB           : integer;
    variable OLP_MSB           : integer;
    variable SRVA_A            : std_logic_vector (35 downto 0) := (others => 'X');
    variable SRVA_A_UNBOUND    : std_logic_vector (SRVAL_A'length-1 downto 0);
    variable SRVA_B            : std_logic_vector (35 downto 0) := (others => 'X');
    variable SRVA_B_UNBOUND    : std_logic_vector (SRVAL_B'length-1 downto 0);
    variable RSTA_dly_sampled  : std_ulogic                      := 'X';
    variable RSTB_dly_sampled  : std_ulogic                      := 'X';
    variable VALID_ADDRA       : boolean                        := true;
    variable VALID_ADDRB       : boolean                        := true;
    variable ViolationA        : std_ulogic                     := '0';
    variable ViolationB        : std_ulogic                     := '0';
    variable ViolationCLKAB    : std_ulogic                     := '0';
    variable ViolationCLKAB_S0 : boolean                        := false;
    variable Violation_S1      : boolean                        := false;
    variable Violation_S3      : boolean                        := false;
    variable WEA_dly_sampled   : std_logic_vector(MAX_WE downto 0) := (others => 'X');
    variable WEB_dly_sampled   : std_logic_vector(MAX_WE downto 0) := (others => 'X');
    variable wr_mode_a         : std_logic_vector(1 downto 0)   := "00";
    variable wr_mode_b         : std_logic_vector(1 downto 0)   := "00";

--FP
    variable wea_index          : integer                       := -1;
    variable web_index          : integer                       := -1;

    variable tmp_we                  : std_logic_vector(1 downto 0)             := (others => '1');
    variable xout_we_seg1            : std_logic_vector(1 downto 0)             := (others => '0');
    variable xout_we_seg2            : std_logic_vector(1 downto 0)             := (others => '0');

    variable tmp_zero_write_a        : std_logic_vector(MAX_ADDR downto 0)      := (others => '1');
    variable tmp_zero_read_a         : std_logic_vector(MAX_ADDR downto 0)      := (others => '1');
    variable tmp_zero_parity_write_a : std_logic_vector((MAX_ADDR-3) downto 0)  := (others => '0');
    variable tmp_zero_parity_read_a  : std_logic_vector((MAX_ADDR-3) downto 0)  := (others => '0');

    variable tmp_zero_write_b        : std_logic_vector(MAX_ADDR downto 0)      := (others => '1');
    variable tmp_zero_read_b         : std_logic_vector(MAX_ADDR downto 0)      := (others => '1');
    variable tmp_zero_parity_write_b : std_logic_vector((MAX_ADDR-3) downto 0)  := (others => '0');
    variable tmp_zero_parity_read_b  : std_logic_vector((MAX_ADDR-3) downto 0)  := (others => '0');

    variable zero_write_a        : std_logic_vector(MAX_ADDR downto 0)      := (others => '1');
    variable zero_read_a         : std_logic_vector(MAX_ADDR downto 0)      := (others => '1');
    variable zero_parity_write_a : std_logic_vector((MAX_ADDR-3) downto 0)  := (others => '1');
    variable zero_parity_read_a  : std_logic_vector((MAX_ADDR-3) downto 0)  := (others => '1');

    variable zero_write_b        : std_logic_vector(MAX_ADDR downto 0)      := (others => '1');
    variable zero_read_b         : std_logic_vector(MAX_ADDR downto 0)      := (others => '1');
    variable zero_parity_write_b : std_logic_vector((MAX_ADDR-3) downto 0)  := (others => '1');
    variable zero_parity_read_b  : std_logic_vector((MAX_ADDR-3) downto 0)  := (others => '1');


    variable addra_in_14 : std_ulogic := '0';
    variable addrb_in_14 : std_ulogic := '0';

    variable SimCollisionCheck_var : integer := 3;
    variable collision_clka_clkb   : integer := 0;
    variable addr_overlap          : boolean := false;

    variable CLKA_time             : time := 0 ps;
    variable CLKB_time             : time := 0 ps;

    variable DOA_clsn              : std_logic_vector(31 downto 0) := (others => '0');
    variable DOPA_clsn             : std_logic_vector(3 downto 0) := (others => '0');
    variable DOA_clsn_sav          : std_logic_vector(31 downto 0) := (others => '0');
    variable DOPA_clsn_sav         : std_logic_vector(3 downto 0) := (others => '0');
    variable DOA_clsn_zero         : std_logic_vector(31 downto 0) := (others => '0');
    variable DOPA_clsn_zero        : std_logic_vector(3 downto 0) := (others => '0');

    variable DOB_clsn              : std_logic_vector(31 downto 0) := (others => '0');
    variable DOPB_clsn             : std_logic_vector(3 downto 0) := (others => '0');
    variable DOB_clsn_sav          : std_logic_vector(31 downto 0) := (others => '0');
    variable DOPB_clsn_sav         : std_logic_vector(3 downto 0) := (others => '0');
    variable DOB_clsn_zero         : std_logic_vector(31 downto 0) := (others => '0');
    variable DOPB_clsn_zero        : std_logic_vector(3 downto 0) := (others => '0');

    variable DOA_clsn_slice        : std_logic_vector(31 downto 0) := (others => '0');
    variable DOPA_clsn_slice       : std_logic_vector(3 downto 0) := (others => '0');
    variable DOB_clsn_slice        : std_logic_vector(31 downto 0) := (others => '0');
    variable DOPB_clsn_slice       : std_logic_vector(3 downto 0) := (others => '0');

    variable tmp_membuf            : std_logic_vector(31 downto 0) := (others => '0');

    variable DOA_clsn_read_index, DOPA_clsn_read_index : integer := -1;
    variable DOB_clsn_read_index, DOPB_clsn_read_index : integer := -1;

    variable DOA_clsn_write_index, DOPA_clsn_write_index : integer := -1;
    variable DOB_clsn_write_index, DOPB_clsn_write_index : integer := -1;

    variable clsn_type       : CollisionFlagType;
    variable data_widths     : DataWidthType;
    variable clsn_xbufs      : ClsnXbufType;

    variable collision_msg   : memory_collision_type;

    variable Write_A_Write_B : memory_collision_type := Write_A_Write_B;
    variable Read_A_Write_B  : memory_collision_type := Read_A_Write_B;
    variable Write_A_Read_B  : memory_collision_type := Write_A_Read_B;
    variable Write_B_Write_A : memory_collision_type := Write_B_Write_A;
    variable Read_B_Write_A  : memory_collision_type := Read_B_Write_A;
    variable Write_B_Read_A  : memory_collision_type := Write_B_Read_A;

    variable msg_addr1       : std_logic_vector(MAX_ADDR downto 0)      := (others => '0');
    variable msg_addr2       : std_logic_vector(MAX_ADDR downto 0)      := (others => '0');

  begin


    if (FIRST_TIME) then

      DIPAW   := 0;
      DIPAW_1 := -1;
      DIPBW   := 0;
      DIPBW_1 := -1;

      DOPAW   := 0;
      DOPAW_1 := -1;
      DOPBW   := 0;
      DOPBW_1 := -1;

      case DATA_WIDTH_A is

            when 0 =>
                 DOAW    := 1;
                 DOAW_1  := DOAW -1;
                 DIAW    := 1;
                 DIAW_1  := DIAW -1;

            when 1 =>
                 zero_read_a(13 downto 0) := (others => '1');
                 DOAW    := 1;
                 DOAW_1  := DOAW -1;
                 zero_write_a(13 downto 0) := (others => '1');
                 DIAW    := 1;
                 DIAW_1  := DIAW -1;

            when 2 =>
                 zero_read_a(0 downto 0) := (others => '0');
                 DOAW    := 2;
                 DOAW_1  := DOAW -1;
                 zero_write_a(0 downto 0) := (others => '0');
                 DIAW    := 2;
                 DIAW_1  := DIAW -1;

            when 4 =>
                 zero_read_a(1 downto 0) := (others => '0');
                 DOAW    := 4;
                 DOAW_1  := DOAW -1;
                 zero_write_a(1 downto 0) := (others => '0');
                 DIAW    := 4;
                 DIAW_1  := DIAW -1;

            when 9 =>
                 zero_read_a(2 downto 0) := (others => '0');
                 DOAW    := 8;
                 DOAW_1  := DOAW -1;
                 DOPAW   := 1;
                 DOPAW_1 := DOPAW -1;
                 zero_write_a(2 downto 0) := (others => '0');
                 DIAW    := 8;
                 DIAW_1  := DIAW -1;
                 DIPAW   := 1;
                 DIPAW_1 := DIPAW -1;

            when 18  =>
                 zero_read_a(3 downto 0) := (others => '0');
                 zero_parity_read_a(0 downto 0) := (others => '0');
                 DOAW    := 16;
                 DOAW_1  := DOAW -1;
                 DOPAW   := 2;
                 DOPAW_1 := DOPAW -1;
                 zero_write_a(3 downto 0) := (others => '0');
                 zero_parity_write_a(0 downto 0) := (others => '0');
                 DIAW    := 16;
                 DIAW_1  := DIAW -1;
                 DIPAW   := 2;
                 DIPAW_1 := DIPAW -1;

            when 36  =>
                 zero_read_a(4 downto 0) := (others => '0');
                 zero_parity_read_a(1 downto 0) := (others => '0');
                 DOAW    := 32;
                 DOAW_1  := DOAW -1;
                 DOPAW   := 4;
                 DOPAW_1 := DOPAW -1;
                 zero_write_a(4 downto 0) := (others => '0');
                 zero_parity_write_a(1 downto 0) := (others => '0');
                 DIAW    := 32;
                 DIAW_1  := DIAW -1;
                 DIPAW   := 4;
                 DIPAW_1 := DIPAW -1;

            when others =>
                 null;

      end case;

      case DATA_WIDTH_B is

            when 0 =>
                 DOBW    := 1;
                 DOBW_1  := DOBW -1;
                 DIBW    := 1;
                 DIBW_1  := DIBW -1;

            when 1 =>
                 zero_read_b(13 downto 0) := (others => '1');
                 DOBW    := 1;
                 DOBW_1  := DOBW -1;
                 zero_write_b(13 downto 0) := (others => '1');
                 DIBW    := 1;
                 DIBW_1  := DIBW -1;

            when 2 =>
                 zero_read_b(0 downto 0) := (others => '0');
                 DOBW    := 2;
                 DOBW_1  := DOBW -1;
                 zero_write_b(0 downto 0) := (others => '0');
                 DIBW    := 2;
                 DIBW_1  := DIBW -1;

            when 4 =>
                 zero_read_b(1 downto 0) := (others => '0');
                 DOBW    := 4;
                 DOBW_1  := DOBW -1;
                 zero_write_b(1 downto 0) := (others => '0');
                 DIBW    := 4;
                 DIBW_1  := DIBW -1;

            when 9 =>
                 zero_read_b(2 downto 0) := (others => '0');
                 DOBW    := 8;
                 DOBW_1  := DOBW -1;
                 DOPBW   := 1;
                 DOPBW_1 := DOPBW -1;
                 zero_write_b(2 downto 0) := (others => '0');
                 DIBW    := 8;
                 DIBW_1  := DIBW -1;
                 DIPBW   := 1;
                 DIPBW_1 := DIPBW -1;

            when 18  =>
                 zero_read_b(3 downto 0) := (others => '0');
                 zero_parity_read_b(0 downto 0) := (others => '0');
                 DOBW    := 16;
                 DOBW_1  := DOBW -1;
                 DOPBW   := 2;
                 DOPBW_1 := DOPBW -1;
                 zero_write_b(3 downto 0) := (others => '0');
                 zero_parity_write_b(0 downto 0) := (others => '0');
                 DIBW    := 16;
                 DIBW_1  := DIBW -1;
                 DIPBW   := 2;
                 DIPBW_1 := DIPBW -1;

            when 36  =>
                 zero_read_b(4 downto 0) := (others => '0');
                 zero_parity_read_b(1 downto 0) := (others => '0');
                 DOBW    := 32;
                 DOBW_1  := DOBW -1;
                 DOPBW   := 4;
                 DOPBW_1 := DOPBW -1;
                 zero_write_b(4 downto 0) := (others => '0');
                 zero_parity_write_b(1 downto 0) := (others => '0');
                 DIBW    := 32;
                 DIBW_1  := DIBW -1;
                 DIPBW   := 4;
                 DIPBW_1 := DIPBW -1;

            when others =>
                 null;

      end case;

      if (INIT_A'length > 36) then
        INI_A_UNBOUND(INIT_A'length-1 downto 0) := To_StdLogicVector(INIT_A );
        INI_A(35 downto 0)                      := INI_A_UNBOUND(35 downto 0);
      elsif (INIT_A'length < 36) then
        INI_A(INIT_A'length-1 downto 0)         := To_StdLogicVector(INIT_A );
      elsif (INIT_A'length = 36) then
        INI_A(INIT_A'length-1 downto 0)         := To_StdLogicVector(INIT_A );
      end if;

      if (INIT_B'length > 36) then
        INI_B_UNBOUND(INIT_B'length-1 downto 0) := To_StdLogicVector(INIT_B );
        INI_B(35 downto 0)                      := INI_B_UNBOUND(35 downto 0);
      elsif (INIT_B'length < 36) then
        INI_B(INIT_B'length-1 downto 0)         := To_StdLogicVector(INIT_B );
      elsif (INIT_B'length = 36) then
        INI_B(INIT_B'length-1 downto 0)         := To_StdLogicVector(INIT_B );
      end if;

      if (SRVAL_A'length > 36) then
        SRVA_A_UNBOUND(SRVAL_A'length-1 downto 0) := To_StdLogicVector(SRVAL_A );
        SRVA_A(35 downto 0)                       := SRVA_A_UNBOUND(35 downto 0);
      elsif (SRVAL_A'length < 36) then
        SRVA_A(SRVAL_A'length-1 downto 0)         := To_StdLogicVector(SRVAL_A );
      elsif (SRVAL_A'length = 36) then
        SRVA_A(SRVAL_A'length-1 downto 0)         := To_StdLogicVector(SRVAL_A );
      end if;

      if (SRVAL_B'length > 36) then
        SRVA_B_UNBOUND(SRVAL_B'length-1 downto 0) := To_StdLogicVector(SRVAL_B );
        SRVA_B(35 downto 0)                       := SRVA_B_UNBOUND(35 downto 0);
      elsif (SRVAL_B'length < 36) then
        SRVA_B(SRVAL_B'length-1 downto 0)         := To_StdLogicVector(SRVAL_B );
      elsif (SRVAL_B'length = 36) then
        SRVA_B(SRVAL_B'length-1 downto 0)         := To_StdLogicVector(SRVAL_B );
      end if;

      if ((WRITE_MODE_A = "write_first") or (WRITE_MODE_A = "WRITE_FIRST")) then
        wr_mode_a := "00";
      elsif ((WRITE_MODE_A = "read_first") or (WRITE_MODE_A = "READ_FIRST")) then
        wr_mode_a := "01";
      elsif ((WRITE_MODE_A = "no_change") or (WRITE_MODE_A = "NO_CHANGE")) then
        wr_mode_a := "10";
      else
        GenericValueCheckMessage
          ( HeaderMsg            => " Attribute Syntax Error : ",
            GenericName          => " WRITE_MODE_A ",
            EntityName           => "/X_RAMB16BWER",
            GenericValue         => WRITE_MODE_A,
            Unit                 => "",
            ExpectedValueMsg     => " The Legal values for this attribute are ",
            ExpectedGenericValue => " WRITE_FIRST, READ_FIRST or NO_CHANGE ",
            TailMsg              => "",
            MsgSeverity          => error
            );
      end if;

      if ((WRITE_MODE_B = "write_first") or (WRITE_MODE_B = "WRITE_FIRST")) then
        wr_mode_b := "00";
      elsif ((WRITE_MODE_B = "read_first") or (WRITE_MODE_B = "READ_FIRST")) then
        wr_mode_b := "01";
      elsif ((WRITE_MODE_B = "no_change") or (WRITE_MODE_B = "NO_CHANGE")) then
        wr_mode_b := "10";
      else
        GenericValueCheckMessage
          ( HeaderMsg            => " Attribute Syntax Error : ",
            GenericName          => " WRITE_MODE_B ",
            EntityName           => "/X_RAMB16BWER",
            GenericValue         => WRITE_MODE_B,
            Unit                 => "",
            ExpectedValueMsg     => " The Legal values for this attribute are ",
            ExpectedGenericValue => " WRITE_FIRST, READ_FIRST or NO_CHANGE ",
            TailMsg              => "",
            MsgSeverity          => error
            );
      end if;

      if((SIM_COLLISION_CHECK = "ALL") or (SIM_COLLISION_CHECK = "all")) then
          SimCollisionCheck_var := 3;
      elsif((SIM_COLLISION_CHECK = "NONE") or (SIM_COLLISION_CHECK = "none")) then
          SimCollisionCheck_var := 0;
      elsif((SIM_COLLISION_CHECK = "WARNING_ONLY") or (SIM_COLLISION_CHECK = "warning_only")) then
          SimCollisionCheck_var := 1;
      elsif((SIM_COLLISION_CHECK = "GENERATE_X_ONLY") or (SIM_COLLISION_CHECK = "generate_x_only")) then
          SimCollisionCheck_var := 2;
     else
        GenericValueCheckMessage
         ( HeaderMsg            => " Attribute Syntax Error : ",
           GenericName          => " SIM_COLLISION_CHECK ",
           EntityName           => "/X_RAMB16BWER",
           GenericValue         => SIM_COLLISION_CHECK,
           Unit                 => "",
           ExpectedValueMsg     => " The Legal values for this attribute are ",
           ExpectedGenericValue => " ALL, NONE, WARNING_ONLY or GENERATE_X_ONLY ",
           TailMsg              => "",
           MsgSeverity          => error
           );
     end if;


      wait until (GSR_CLKA_dly = '1' or GSR_CLKB_dly = '1' or ((CLKA_dly = '0' or CLKA_dly = '1') or (CLKB_dly = '0' or CLKB_dly = '1')));
---################################################################################
        DOA_zd(DOAW_1 downto 0) := INI_A(DOAW_1 downto 0);
        DOB_zd(DOBW_1 downto 0) := INI_B(DOBW_1 downto 0);

        if(DOPAW_1 /= -1) then
           DOPA_zd(DOPAW_1 downto 0) := INI_A((DOPAW_1 + DOAW) downto DOAW);
        end if;

        if(DOPBW_1 /= -1) then
           DOPB_zd(DOPBW_1 downto 0) := INI_B((DOPBW_1 + DOBW) downto DOBW);
        end if;

----- Port A
--        DOA <= DOA_zd;
--        if(DOPAW_1 /= -1) then
--           DOPA <= DOPA_zd;
--        end if;

----- Port B
--        DOB <= DOB_zd;
--        if(DOPBW_1 /= -1) then
--           DOPB <= DOPB_zd;
--        end if;

      data_widths.diaw  := DIAW; 
      data_widths.dipaw := DIPAW; 
      data_widths.doaw  := DOAW; 
      data_widths.dopaw := DOPAW; 

      data_widths.dibw  := DIBW; 
      data_widths.dipbw := DIPBW; 
      data_widths.dobw  := DOBW; 
      data_widths.dopbw := DOPBW; 

      FIRST_TIME  := false;
    end if;
----------------  END FIRST_TIME

--    addra_in_14 := ADDRA_dly(14);

--    if (CLKA_dly'event) then
    if (rising_edge(CLKA_dly)) then
      ENA_dly_sampled   := ENA_dly;
      RSTA_dly_sampled  := RSTA_dly;
      WEA_dly_sampled   := WEA_dly;
      ADDRA_dly_sampled := ADDRA_dly;
    end if;

-------------------------------------------------------------

--    addrb_in_14 := ADDRB_dly(14);

--    if (CLKB_dly'event) then
    if (rising_edge(CLKB_dly)) then
      ENB_dly_sampled   := ENB_dly;
      RSTB_dly_sampled  := RSTB_dly;
      WEB_dly_sampled   := WEB_dly;
      ADDRB_dly_sampled := ADDRB_dly;
    end if;


    if (TimingChecksOn) then
--=====================================================
      VitalPeriodPulseCheck (
         Violation      => Pviol_RSTA,
         PeriodData     => PInfo_RSTA,
         TestSignal     => RSTA_dly,
         TestSignalName => "RSTA",
         TestDelay      => 0 ns,
         Period         => 0 ns,
         PulseWidthHigh => tpw_RSTA_posedge,
         PulseWidthLow  => 0 ns,
         CheckEnabled   => TRUE,
         HeaderMsg      => "/X_RAMB16BWER",
         Xon            => Xon,
         MsgOn          => MsgOn,
         MsgSeverity    => warning);
      VitalPeriodPulseCheck (
         Violation      => Pviol_RSTB,
         PeriodData     => PInfo_RSTB,
         TestSignal     => RSTB_dly,
         TestSignalName => "RSTB",
         TestDelay      => 0 ns,
         Period         => 0 ns,
         PulseWidthHigh => tpw_RSTB_posedge,
         PulseWidthLow  => 0 ns,
         CheckEnabled   => TRUE,
         HeaderMsg      => "/X_RAMB16BWER",
         Xon            => Xon,
         MsgOn          => MsgOn,
         MsgSeverity    => warning);
      VitalRecoveryRemovalCheck (
        Violation      => Tviol_RSTA_CLKA_posedge,
        TimingData     => Tmkr_RSTA_CLKA_posedge,
        TestSignal     => RSTA_dly,
        TestSignalName => "RSTA",
        TestDelay      => tisd_RSTA_CLKA,
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        Recovery       => trecovery_RSTA_CLKA_negedge_posedge,
        Removal        => tremoval_RSTA_CLKA_negedge_posedge,
        ActiveLow      => false,
        CheckEnabled   => true,
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => true,
        MsgSeverity    => warning);
      VitalRecoveryRemovalCheck (
        Violation      => Tviol_GSR_CLKA_posedge,
        TimingData     => Tmkr_GSR_CLKA_posedge,
        TestSignal     => GSR_CLKA_dly,
        TestSignalName => "GSR",
        TestDelay      => tisd_GSR_CLKA,
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        Recovery       => trecovery_GSR_CLKA_negedge_posedge,
        Removal        => thold_GSR_CLKA_negedge_posedge,
        ActiveLow      => false,
        CheckEnabled   => true,
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => true,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_ENA_CLKA_posedge,
        TimingData     => Tmkr_ENA_CLKA_posedge,
        TestSignal     => ENA_dly,
        TestSignalName => "ENA",
        TestDelay      => tisd_ENA_CLKA,
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_ENA_CLKA_posedge_posedge,
        SetupLow       => tsetup_ENA_CLKA_negedge_posedge,
        HoldLow        => thold_ENA_CLKA_negedge_posedge,
        HoldHigh       => thold_ENA_CLKA_posedge_posedge,
        CheckEnabled   => true,
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_REGCEA_CLKA_posedge,
        TimingData     => Tmkr_REGCEA_CLKA_posedge,
        TestSignal     => REGCEA_dly,
        TestSignalName => "REGCEA",
        TestDelay      => tisd_REGCEA_CLKA,
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_REGCEA_CLKA_posedge_posedge,
        SetupLow       => tsetup_REGCEA_CLKA_negedge_posedge,
        HoldLow        => thold_REGCEA_CLKA_negedge_posedge,
        HoldHigh       => thold_REGCEA_CLKA_posedge_posedge,
        CheckEnabled   => true,
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_RSTA_CLKA_posedge,
        TimingData     => Tmkr_RSTA_CLKA_posedge,
        TestSignal     => RSTA_dly,
        TestSignalName => "RSTA",
        TestDelay      => tisd_RSTA_CLKA,
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_RSTA_CLKA_posedge_posedge,
        SetupLow       => tsetup_RSTA_CLKA_negedge_posedge,
        HoldLow        => thold_RSTA_CLKA_negedge_posedge,
        HoldHigh       => thold_RSTA_CLKA_posedge_posedge,
        CheckEnabled   => TO_X01(ena_dly_sampled) = '1',
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
 -- FP
      VitalSetupHoldCheck (
        Violation      => Tviol_WEA0_CLKA_posedge,
        TimingData     => Tmkr_WEA0_CLKA_posedge,
        TestSignal     => WEA_dly(0),
        TestSignalName => "WEA(0)",
        TestDelay      => tisd_WEA_CLKA(0),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_WEA_CLKA_posedge_posedge(0),
        SetupLow       => tsetup_WEA_CLKA_negedge_posedge(0),
        HoldLow        => thold_WEA_CLKA_negedge_posedge(0),
        HoldHigh       => thold_WEA_CLKA_posedge_posedge(0),
        CheckEnabled   => TO_X01(ena_dly_sampled) = '1',
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_WEA1_CLKA_posedge,
        TimingData     => Tmkr_WEA1_CLKA_posedge,
        TestSignal     => WEA_dly(1),
        TestSignalName => "WEA(1)",
        TestDelay      => tisd_WEA_CLKA(1),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_WEA_CLKA_posedge_posedge(1),
        SetupLow       => tsetup_WEA_CLKA_negedge_posedge(1),
        HoldLow        => thold_WEA_CLKA_negedge_posedge(1),
        HoldHigh       => thold_WEA_CLKA_posedge_posedge(1),
        CheckEnabled   => TO_X01(ena_dly_sampled) = '1',
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_WEA2_CLKA_posedge,
        TimingData     => Tmkr_WEA2_CLKA_posedge,
        TestSignal     => WEA_dly(2),
        TestSignalName => "WEA(2)",
        TestDelay      => tisd_WEA_CLKA(2),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_WEA_CLKA_posedge_posedge(2),
        SetupLow       => tsetup_WEA_CLKA_negedge_posedge(2),
        HoldLow        => thold_WEA_CLKA_negedge_posedge(2),
        HoldHigh       => thold_WEA_CLKA_posedge_posedge(2),
        CheckEnabled   => TO_X01(ena_dly_sampled) = '1',
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_WEA3_CLKA_posedge,
        TimingData     => Tmkr_WEA3_CLKA_posedge,
        TestSignal     => WEA_dly(3),
        TestSignalName => "WEA(3)",
        TestDelay      => tisd_WEA_CLKA(3),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_WEA_CLKA_posedge_posedge(3),
        SetupLow       => tsetup_WEA_CLKA_negedge_posedge(3),
        HoldLow        => thold_WEA_CLKA_negedge_posedge(3),
        HoldHigh       => thold_WEA_CLKA_posedge_posedge(3),
        CheckEnabled   => TO_X01(ena_dly_sampled) = '1',
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_ADDRA0_CLKA_posedge,
        TimingData     => Tmkr_ADDRA0_CLKA_posedge,
        TestSignal     => ADDRA_dly(0),
        TestSignalName => "ADDRA(0)",
        TestDelay      => tisd_ADDRA_CLKA(0),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_ADDRA_CLKA_posedge_posedge(0),
        SetupLow       => tsetup_ADDRA_CLKA_negedge_posedge(0),
        HoldLow        => thold_ADDRA_CLKA_negedge_posedge(0),
        HoldHigh       => thold_ADDRA_CLKA_posedge_posedge(0),
        CheckEnabled   => TO_X01(ena_dly_sampled) = '1',
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_ADDRA1_CLKA_posedge,
        TimingData     => Tmkr_ADDRA1_CLKA_posedge,
        TestSignal     => ADDRA_dly(1),
        TestSignalName => "ADDRA(1)",
        TestDelay      => tisd_ADDRA_CLKA(1),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_ADDRA_CLKA_posedge_posedge(1),
        SetupLow       => tsetup_ADDRA_CLKA_negedge_posedge(1),
        HoldLow        => thold_ADDRA_CLKA_negedge_posedge(1),
        HoldHigh       => thold_ADDRA_CLKA_posedge_posedge(1),
        CheckEnabled   => TO_X01(ena_dly_sampled) = '1',
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_ADDRA2_CLKA_posedge,
        TimingData     => Tmkr_ADDRA2_CLKA_posedge,
        TestSignal     => ADDRA_dly(2),
        TestSignalName => "ADDRA(2)",
        TestDelay      => tisd_ADDRA_CLKA(2),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_ADDRA_CLKA_posedge_posedge(2),
        SetupLow       => tsetup_ADDRA_CLKA_negedge_posedge(2),
        HoldLow        => thold_ADDRA_CLKA_negedge_posedge(2),
        HoldHigh       => thold_ADDRA_CLKA_posedge_posedge(2),
        CheckEnabled   => TO_X01(ena_dly_sampled) = '1',
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_ADDRA3_CLKA_posedge,
        TimingData     => Tmkr_ADDRA3_CLKA_posedge,
        TestSignal     => ADDRA_dly(3),
        TestSignalName => "ADDRA(3)",
        TestDelay      => tisd_ADDRA_CLKA(3),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_ADDRA_CLKA_posedge_posedge(3),
        SetupLow       => tsetup_ADDRA_CLKA_negedge_posedge(3),
        HoldLow        => thold_ADDRA_CLKA_negedge_posedge(3),
        HoldHigh       => thold_ADDRA_CLKA_posedge_posedge(3),
        CheckEnabled   => TO_X01(ena_dly_sampled) = '1',
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_ADDRA4_CLKA_posedge,
        TimingData     => Tmkr_ADDRA4_CLKA_posedge,
        TestSignal     => ADDRA_dly(4),
        TestSignalName => "ADDRA(4)",
        TestDelay      => tisd_ADDRA_CLKA(4),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_ADDRA_CLKA_posedge_posedge(4),
        SetupLow       => tsetup_ADDRA_CLKA_negedge_posedge(4),
        HoldLow        => thold_ADDRA_CLKA_negedge_posedge(4),
        HoldHigh       => thold_ADDRA_CLKA_posedge_posedge(4),
        CheckEnabled   => TO_X01(ena_dly_sampled) = '1',
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_ADDRA5_CLKA_posedge,
        TimingData     => Tmkr_ADDRA5_CLKA_posedge,
        TestSignal     => ADDRA_dly(5),
        TestSignalName => "ADDRA(5)",
        TestDelay      => tisd_ADDRA_CLKA(5),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_ADDRA_CLKA_posedge_posedge(5),
        SetupLow       => tsetup_ADDRA_CLKA_negedge_posedge(5),
        HoldLow        => thold_ADDRA_CLKA_negedge_posedge(5),
        HoldHigh       => thold_ADDRA_CLKA_posedge_posedge(5),
        CheckEnabled   => TO_X01(ena_dly_sampled) = '1',
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_ADDRA6_CLKA_posedge,
        TimingData     => Tmkr_ADDRA6_CLKA_posedge,
        TestSignal     => ADDRA_dly(6),
        TestSignalName => "ADDRA(6)",
        TestDelay      => tisd_ADDRA_CLKA(6),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_ADDRA_CLKA_posedge_posedge(6),
        SetupLow       => tsetup_ADDRA_CLKA_negedge_posedge(6),
        HoldLow        => thold_ADDRA_CLKA_negedge_posedge(6),
        HoldHigh       => thold_ADDRA_CLKA_posedge_posedge(6),
        CheckEnabled   => TO_X01(ena_dly_sampled) = '1',
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_ADDRA7_CLKA_posedge,
        TimingData     => Tmkr_ADDRA7_CLKA_posedge,
        TestSignal     => ADDRA_dly(7),
        TestSignalName => "ADDRA(7)",
        TestDelay      => tisd_ADDRA_CLKA(7),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_ADDRA_CLKA_posedge_posedge(7),
        SetupLow       => tsetup_ADDRA_CLKA_negedge_posedge(7),
        HoldLow        => thold_ADDRA_CLKA_negedge_posedge(7),
        HoldHigh       => thold_ADDRA_CLKA_posedge_posedge(7),
        CheckEnabled   => TO_X01(ena_dly_sampled) = '1',
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_ADDRA8_CLKA_posedge,
        TimingData     => Tmkr_ADDRA8_CLKA_posedge,
        TestSignal     => ADDRA_dly(8),
        TestSignalName => "ADDRA(8)",
        TestDelay      => tisd_ADDRA_CLKA(8),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_ADDRA_CLKA_posedge_posedge(8),
        SetupLow       => tsetup_ADDRA_CLKA_negedge_posedge(8),
        HoldLow        => thold_ADDRA_CLKA_negedge_posedge(8),
        HoldHigh       => thold_ADDRA_CLKA_posedge_posedge(8),
        CheckEnabled   => TO_X01(ena_dly_sampled) = '1',
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIPA0_CLKA_posedge,
        TimingData     => Tmkr_DIPA0_CLKA_posedge,
        TestSignal     => DIPA_dly(0),
        TestSignalName => "DIPA(0)",
        TestDelay      => tisd_DIPA_CLKA(0),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_DIPA_CLKA_posedge_posedge(0),
        SetupLow       => tsetup_DIPA_CLKA_negedge_posedge(0),
        HoldLow        => thold_DIPA_CLKA_negedge_posedge(0),
        HoldHigh       => thold_DIPA_CLKA_posedge_posedge(0),
--        CheckEnabled   => (TO_X01(ena_dly_sampled) = '1' and TO_X01(wea_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(ena_dly_sampled)    = '1' and
                           TO_X01(wea_dly_sampled(0)) = '1' and
                           TO_X01(wea_dly_sampled(1)) = '1' and
                           TO_X01(wea_dly_sampled(2)) = '1' and
                           TO_X01(wea_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIPA1_CLKA_posedge,
        TimingData     => Tmkr_DIPA1_CLKA_posedge,
        TestSignal     => DIPA_dly(1),
        TestSignalName => "DIPA(1)",
        TestDelay      => tisd_DIPA_CLKA(1),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_DIPA_CLKA_posedge_posedge(1),
        SetupLow       => tsetup_DIPA_CLKA_negedge_posedge(1),
        HoldLow        => thold_DIPA_CLKA_negedge_posedge(1),
        HoldHigh       => thold_DIPA_CLKA_posedge_posedge(1),
--        CheckEnabled   => (TO_X01(ena_dly_sampled) = '1' and TO_X01(wea_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(ena_dly_sampled)    = '1' and
                           TO_X01(wea_dly_sampled(0)) = '1' and
                           TO_X01(wea_dly_sampled(1)) = '1' and
                           TO_X01(wea_dly_sampled(2)) = '1' and
                           TO_X01(wea_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIPA2_CLKA_posedge,
        TimingData     => Tmkr_DIPA2_CLKA_posedge,
        TestSignal     => DIPA_dly(2),
        TestSignalName => "DIPA(2)",
        TestDelay      => tisd_DIPA_CLKA(2),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_DIPA_CLKA_posedge_posedge(2),
        SetupLow       => tsetup_DIPA_CLKA_negedge_posedge(2),
        HoldLow        => thold_DIPA_CLKA_negedge_posedge(2),
        HoldHigh       => thold_DIPA_CLKA_posedge_posedge(2),
--        CheckEnabled   => (TO_X01(ena_dly_sampled) = '1' and TO_X01(wea_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(ena_dly_sampled)    = '1' and
                           TO_X01(wea_dly_sampled(0)) = '1' and
                           TO_X01(wea_dly_sampled(1)) = '1' and
                           TO_X01(wea_dly_sampled(2)) = '1' and
                           TO_X01(wea_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIPA3_CLKA_posedge,
        TimingData     => Tmkr_DIPA3_CLKA_posedge,
        TestSignal     => DIPA_dly(3),
        TestSignalName => "DIPA(3)",
        TestDelay      => tisd_DIPA_CLKA(3),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_DIPA_CLKA_posedge_posedge(3),
        SetupLow       => tsetup_DIPA_CLKA_negedge_posedge(3),
        HoldLow        => thold_DIPA_CLKA_negedge_posedge(3),
        HoldHigh       => thold_DIPA_CLKA_posedge_posedge(3),
--        CheckEnabled   => (TO_X01(ena_dly_sampled) = '1' and TO_X01(wea_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(ena_dly_sampled)    = '1' and
                           TO_X01(wea_dly_sampled(0)) = '1' and
                           TO_X01(wea_dly_sampled(1)) = '1' and
                           TO_X01(wea_dly_sampled(2)) = '1' and
                           TO_X01(wea_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIA0_CLKA_posedge,
        TimingData     => Tmkr_DIA0_CLKA_posedge,
        TestSignal     => DIA_dly(0),
        TestSignalName => "DIA(0)",
        TestDelay      => tisd_DIA_CLKA(0),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_DIA_CLKA_posedge_posedge(0),
        SetupLow       => tsetup_DIA_CLKA_negedge_posedge(0),
        HoldLow        => thold_DIA_CLKA_negedge_posedge(0),
        HoldHigh       => thold_DIA_CLKA_posedge_posedge(0),
--        CheckEnabled   => (TO_X01(ena_dly_sampled) = '1' and TO_X01(wea_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(ena_dly_sampled)    = '1' and
                           TO_X01(wea_dly_sampled(0)) = '1' and
                           TO_X01(wea_dly_sampled(1)) = '1' and
                           TO_X01(wea_dly_sampled(2)) = '1' and
                           TO_X01(wea_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIA1_CLKA_posedge,
        TimingData     => Tmkr_DIA1_CLKA_posedge,
        TestSignal     => DIA_dly(1),
        TestSignalName => "DIA(1)",
        TestDelay      => tisd_DIA_CLKA(1),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_DIA_CLKA_posedge_posedge(1),
        SetupLow       => tsetup_DIA_CLKA_negedge_posedge(1),
        HoldLow        => thold_DIA_CLKA_negedge_posedge(1),
        HoldHigh       => thold_DIA_CLKA_posedge_posedge(1),
--        CheckEnabled   => (TO_X01(ena_dly_sampled) = '1' and TO_X01(wea_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(ena_dly_sampled)    = '1' and
                           TO_X01(wea_dly_sampled(0)) = '1' and
                           TO_X01(wea_dly_sampled(1)) = '1' and
                           TO_X01(wea_dly_sampled(2)) = '1' and
                           TO_X01(wea_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIA2_CLKA_posedge,
        TimingData     => Tmkr_DIA2_CLKA_posedge,
        TestSignal     => DIA_dly(2),
        TestSignalName => "DIA(2)",
        TestDelay      => tisd_DIA_CLKA(2),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_DIA_CLKA_posedge_posedge(2),
        SetupLow       => tsetup_DIA_CLKA_negedge_posedge(2),
        HoldLow        => thold_DIA_CLKA_negedge_posedge(2),
        HoldHigh       => thold_DIA_CLKA_posedge_posedge(2),
--        CheckEnabled   => (TO_X01(ena_dly_sampled) = '1' and TO_X01(wea_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(ena_dly_sampled)    = '1' and
                           TO_X01(wea_dly_sampled(0)) = '1' and
                           TO_X01(wea_dly_sampled(1)) = '1' and
                           TO_X01(wea_dly_sampled(2)) = '1' and
                           TO_X01(wea_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIA3_CLKA_posedge,
        TimingData     => Tmkr_DIA3_CLKA_posedge,
        TestSignal     => DIA_dly(3),
        TestSignalName => "DIA(3)",
        TestDelay      => tisd_DIA_CLKA(3),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_DIA_CLKA_posedge_posedge(3),
        SetupLow       => tsetup_DIA_CLKA_negedge_posedge(3),
        HoldLow        => thold_DIA_CLKA_negedge_posedge(3),
        HoldHigh       => thold_DIA_CLKA_posedge_posedge(3),
--        CheckEnabled   => (TO_X01(ena_dly_sampled) = '1' and TO_X01(wea_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(ena_dly_sampled)    = '1' and
                           TO_X01(wea_dly_sampled(0)) = '1' and
                           TO_X01(wea_dly_sampled(1)) = '1' and
                           TO_X01(wea_dly_sampled(2)) = '1' and
                           TO_X01(wea_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIA4_CLKA_posedge,
        TimingData     => Tmkr_DIA4_CLKA_posedge,
        TestSignal     => DIA_dly(4),
        TestSignalName => "DIA(4)",
        TestDelay      => tisd_DIA_CLKA(4),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_DIA_CLKA_posedge_posedge(4),
        SetupLow       => tsetup_DIA_CLKA_negedge_posedge(4),
        HoldLow        => thold_DIA_CLKA_negedge_posedge(4),
        HoldHigh       => thold_DIA_CLKA_posedge_posedge(4),
--        CheckEnabled   => (TO_X01(ena_dly_sampled) = '1' and TO_X01(wea_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(ena_dly_sampled)    = '1' and
                           TO_X01(wea_dly_sampled(0)) = '1' and
                           TO_X01(wea_dly_sampled(1)) = '1' and
                           TO_X01(wea_dly_sampled(2)) = '1' and
                           TO_X01(wea_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIA5_CLKA_posedge,
        TimingData     => Tmkr_DIA5_CLKA_posedge,
        TestSignal     => DIA_dly(5),
        TestSignalName => "DIA(5)",
        TestDelay      => tisd_DIA_CLKA(5),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_DIA_CLKA_posedge_posedge(5),
        SetupLow       => tsetup_DIA_CLKA_negedge_posedge(5),
        HoldLow        => thold_DIA_CLKA_negedge_posedge(5),
        HoldHigh       => thold_DIA_CLKA_posedge_posedge(5),
--        CheckEnabled   => (TO_X01(ena_dly_sampled) = '1' and TO_X01(wea_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(ena_dly_sampled)    = '1' and
                           TO_X01(wea_dly_sampled(0)) = '1' and
                           TO_X01(wea_dly_sampled(1)) = '1' and
                           TO_X01(wea_dly_sampled(2)) = '1' and
                           TO_X01(wea_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIA6_CLKA_posedge,
        TimingData     => Tmkr_DIA6_CLKA_posedge,
        TestSignal     => DIA_dly(6),
        TestSignalName => "DIA(6)",
        TestDelay      => tisd_DIA_CLKA(6),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_DIA_CLKA_posedge_posedge(6),
        SetupLow       => tsetup_DIA_CLKA_negedge_posedge(6),
        HoldLow        => thold_DIA_CLKA_negedge_posedge(6),
        HoldHigh       => thold_DIA_CLKA_posedge_posedge(6),
--        CheckEnabled   => (TO_X01(ena_dly_sampled) = '1' and TO_X01(wea_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(ena_dly_sampled)    = '1' and
                           TO_X01(wea_dly_sampled(0)) = '1' and
                           TO_X01(wea_dly_sampled(1)) = '1' and
                           TO_X01(wea_dly_sampled(2)) = '1' and
                           TO_X01(wea_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIA7_CLKA_posedge,
        TimingData     => Tmkr_DIA7_CLKA_posedge,
        TestSignal     => DIA_dly(7),
        TestSignalName => "DIA(7)",
        TestDelay      => tisd_DIA_CLKA(7),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_DIA_CLKA_posedge_posedge(7),
        SetupLow       => tsetup_DIA_CLKA_negedge_posedge(7),
        HoldLow        => thold_DIA_CLKA_negedge_posedge(7),
        HoldHigh       => thold_DIA_CLKA_posedge_posedge(7),
--        CheckEnabled   => (TO_X01(ena_dly_sampled) = '1' and TO_X01(wea_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(ena_dly_sampled)    = '1' and
                           TO_X01(wea_dly_sampled(0)) = '1' and
                           TO_X01(wea_dly_sampled(1)) = '1' and
                           TO_X01(wea_dly_sampled(2)) = '1' and
                           TO_X01(wea_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIA8_CLKA_posedge,
        TimingData     => Tmkr_DIA8_CLKA_posedge,
        TestSignal     => DIA_dly(8),
        TestSignalName => "DIA(8)",
        TestDelay      => tisd_DIA_CLKA(8),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_DIA_CLKA_posedge_posedge(8),
        SetupLow       => tsetup_DIA_CLKA_negedge_posedge(8),
        HoldLow        => thold_DIA_CLKA_negedge_posedge(8),
        HoldHigh       => thold_DIA_CLKA_posedge_posedge(8),
--        CheckEnabled   => (TO_X01(ena_dly_sampled) = '1' and TO_X01(wea_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(ena_dly_sampled)    = '1' and
                           TO_X01(wea_dly_sampled(0)) = '1' and
                           TO_X01(wea_dly_sampled(1)) = '1' and
                           TO_X01(wea_dly_sampled(2)) = '1' and
                           TO_X01(wea_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIA9_CLKA_posedge,
        TimingData     => Tmkr_DIA9_CLKA_posedge,
        TestSignal     => DIA_dly(9),
        TestSignalName => "DIA(9)",
        TestDelay      => tisd_DIA_CLKA(9),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_DIA_CLKA_posedge_posedge(9),
        SetupLow       => tsetup_DIA_CLKA_negedge_posedge(9),
        HoldLow        => thold_DIA_CLKA_negedge_posedge(9),
        HoldHigh       => thold_DIA_CLKA_posedge_posedge(9),
--        CheckEnabled   => (TO_X01(ena_dly_sampled) = '1' and TO_X01(wea_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(ena_dly_sampled)    = '1' and
                           TO_X01(wea_dly_sampled(0)) = '1' and
                           TO_X01(wea_dly_sampled(1)) = '1' and
                           TO_X01(wea_dly_sampled(2)) = '1' and
                           TO_X01(wea_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIA10_CLKA_posedge,
        TimingData     => Tmkr_DIA10_CLKA_posedge,
        TestSignal     => DIA_dly(10),
        TestSignalName => "DIA(10)",
        TestDelay      => tisd_DIA_CLKA(10),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_DIA_CLKA_posedge_posedge(10),
        SetupLow       => tsetup_DIA_CLKA_negedge_posedge(10),
        HoldLow        => thold_DIA_CLKA_negedge_posedge(10),
        HoldHigh       => thold_DIA_CLKA_posedge_posedge(10),
--        CheckEnabled   => (TO_X01(ena_dly_sampled) = '1' and TO_X01(wea_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(ena_dly_sampled)    = '1' and
                           TO_X01(wea_dly_sampled(0)) = '1' and
                           TO_X01(wea_dly_sampled(1)) = '1' and
                           TO_X01(wea_dly_sampled(2)) = '1' and
                           TO_X01(wea_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIA11_CLKA_posedge,
        TimingData     => Tmkr_DIA11_CLKA_posedge,
        TestSignal     => DIA_dly(11),
        TestSignalName => "DIA(11)",
        TestDelay      => tisd_DIA_CLKA(11),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_DIA_CLKA_posedge_posedge(11),
        SetupLow       => tsetup_DIA_CLKA_negedge_posedge(11),
        HoldLow        => thold_DIA_CLKA_negedge_posedge(11),
        HoldHigh       => thold_DIA_CLKA_posedge_posedge(11),
--        CheckEnabled   => (TO_X01(ena_dly_sampled) = '1' and TO_X01(wea_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(ena_dly_sampled)    = '1' and
                           TO_X01(wea_dly_sampled(0)) = '1' and
                           TO_X01(wea_dly_sampled(1)) = '1' and
                           TO_X01(wea_dly_sampled(2)) = '1' and
                           TO_X01(wea_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIA12_CLKA_posedge,
        TimingData     => Tmkr_DIA12_CLKA_posedge,
        TestSignal     => DIA_dly(12),
        TestSignalName => "DIA(12)",
        TestDelay      => tisd_DIA_CLKA(12),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_DIA_CLKA_posedge_posedge(12),
        SetupLow       => tsetup_DIA_CLKA_negedge_posedge(12),
        HoldLow        => thold_DIA_CLKA_negedge_posedge(12),
        HoldHigh       => thold_DIA_CLKA_posedge_posedge(12),
--        CheckEnabled   => (TO_X01(ena_dly_sampled) = '1' and TO_X01(wea_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(ena_dly_sampled)    = '1' and
                           TO_X01(wea_dly_sampled(0)) = '1' and
                           TO_X01(wea_dly_sampled(1)) = '1' and
                           TO_X01(wea_dly_sampled(2)) = '1' and
                           TO_X01(wea_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIA13_CLKA_posedge,
        TimingData     => Tmkr_DIA13_CLKA_posedge,
        TestSignal     => DIA_dly(13),
        TestSignalName => "DIA(13)",
        TestDelay      => tisd_DIA_CLKA(13),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_DIA_CLKA_posedge_posedge(13),
        SetupLow       => tsetup_DIA_CLKA_negedge_posedge(13),
        HoldLow        => thold_DIA_CLKA_negedge_posedge(13),
        HoldHigh       => thold_DIA_CLKA_posedge_posedge(13),
--        CheckEnabled   => (TO_X01(ena_dly_sampled) = '1' and TO_X01(wea_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(ena_dly_sampled)    = '1' and
                           TO_X01(wea_dly_sampled(0)) = '1' and
                           TO_X01(wea_dly_sampled(1)) = '1' and
                           TO_X01(wea_dly_sampled(2)) = '1' and
                           TO_X01(wea_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIA14_CLKA_posedge,
        TimingData     => Tmkr_DIA14_CLKA_posedge,
        TestSignal     => DIA_dly(14),
        TestSignalName => "DIA(14)",
        TestDelay      => tisd_DIA_CLKA(14),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_DIA_CLKA_posedge_posedge(14),
        SetupLow       => tsetup_DIA_CLKA_negedge_posedge(14),
        HoldLow        => thold_DIA_CLKA_negedge_posedge(14),
        HoldHigh       => thold_DIA_CLKA_posedge_posedge(14),
--        CheckEnabled   => (TO_X01(ena_dly_sampled) = '1' and TO_X01(wea_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(ena_dly_sampled)    = '1' and
                           TO_X01(wea_dly_sampled(0)) = '1' and
                           TO_X01(wea_dly_sampled(1)) = '1' and
                           TO_X01(wea_dly_sampled(2)) = '1' and
                           TO_X01(wea_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIA15_CLKA_posedge,
        TimingData     => Tmkr_DIA15_CLKA_posedge,
        TestSignal     => DIA_dly(15),
        TestSignalName => "DIA(15)",
        TestDelay      => tisd_DIA_CLKA(15),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_DIA_CLKA_posedge_posedge(15),
        SetupLow       => tsetup_DIA_CLKA_negedge_posedge(15),
        HoldLow        => thold_DIA_CLKA_negedge_posedge(15),
        HoldHigh       => thold_DIA_CLKA_posedge_posedge(15),
--        CheckEnabled   => (TO_X01(ena_dly_sampled) = '1' and TO_X01(wea_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(ena_dly_sampled)    = '1' and
                           TO_X01(wea_dly_sampled(0)) = '1' and
                           TO_X01(wea_dly_sampled(1)) = '1' and
                           TO_X01(wea_dly_sampled(2)) = '1' and
                           TO_X01(wea_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIA16_CLKA_posedge,
        TimingData     => Tmkr_DIA16_CLKA_posedge,
        TestSignal     => DIA_dly(16),
        TestSignalName => "DIA(16)",
        TestDelay      => tisd_DIA_CLKA(16),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_DIA_CLKA_posedge_posedge(16),
        SetupLow       => tsetup_DIA_CLKA_negedge_posedge(16),
        HoldLow        => thold_DIA_CLKA_negedge_posedge(16),
        HoldHigh       => thold_DIA_CLKA_posedge_posedge(16),
--        CheckEnabled   => (TO_X01(ena_dly_sampled) = '1' and TO_X01(wea_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(ena_dly_sampled)    = '1' and
                           TO_X01(wea_dly_sampled(0)) = '1' and
                           TO_X01(wea_dly_sampled(1)) = '1' and
                           TO_X01(wea_dly_sampled(2)) = '1' and
                           TO_X01(wea_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIA17_CLKA_posedge,
        TimingData     => Tmkr_DIA17_CLKA_posedge,
        TestSignal     => DIA_dly(17),
        TestSignalName => "DIA(17)",
        TestDelay      => tisd_DIA_CLKA(17),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_DIA_CLKA_posedge_posedge(17),
        SetupLow       => tsetup_DIA_CLKA_negedge_posedge(17),
        HoldLow        => thold_DIA_CLKA_negedge_posedge(17),
        HoldHigh       => thold_DIA_CLKA_posedge_posedge(17),
--        CheckEnabled   => (TO_X01(ena_dly_sampled) = '1' and TO_X01(wea_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(ena_dly_sampled)    = '1' and
                           TO_X01(wea_dly_sampled(0)) = '1' and
                           TO_X01(wea_dly_sampled(1)) = '1' and
                           TO_X01(wea_dly_sampled(2)) = '1' and
                           TO_X01(wea_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIA18_CLKA_posedge,
        TimingData     => Tmkr_DIA18_CLKA_posedge,
        TestSignal     => DIA_dly(18),
        TestSignalName => "DIA(18)",
        TestDelay      => tisd_DIA_CLKA(18),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_DIA_CLKA_posedge_posedge(18),
        SetupLow       => tsetup_DIA_CLKA_negedge_posedge(18),
        HoldLow        => thold_DIA_CLKA_negedge_posedge(18),
        HoldHigh       => thold_DIA_CLKA_posedge_posedge(18),
--        CheckEnabled   => (TO_X01(ena_dly_sampled) = '1' and TO_X01(wea_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(ena_dly_sampled)    = '1' and
                           TO_X01(wea_dly_sampled(0)) = '1' and
                           TO_X01(wea_dly_sampled(1)) = '1' and
                           TO_X01(wea_dly_sampled(2)) = '1' and
                           TO_X01(wea_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIA19_CLKA_posedge,
        TimingData     => Tmkr_DIA19_CLKA_posedge,
        TestSignal     => DIA_dly(19),
        TestSignalName => "DIA(19)",
        TestDelay      => tisd_DIA_CLKA(19),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_DIA_CLKA_posedge_posedge(19),
        SetupLow       => tsetup_DIA_CLKA_negedge_posedge(19),
        HoldLow        => thold_DIA_CLKA_negedge_posedge(19),
        HoldHigh       => thold_DIA_CLKA_posedge_posedge(19),
--        CheckEnabled   => (TO_X01(ena_dly_sampled) = '1' and TO_X01(wea_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(ena_dly_sampled)    = '1' and
                           TO_X01(wea_dly_sampled(0)) = '1' and
                           TO_X01(wea_dly_sampled(1)) = '1' and
                           TO_X01(wea_dly_sampled(2)) = '1' and
                           TO_X01(wea_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIA20_CLKA_posedge,
        TimingData     => Tmkr_DIA20_CLKA_posedge,
        TestSignal     => DIA_dly(20),
        TestSignalName => "DIA(20)",
        TestDelay      => tisd_DIA_CLKA(20),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_DIA_CLKA_posedge_posedge(20),
        SetupLow       => tsetup_DIA_CLKA_negedge_posedge(20),
        HoldLow        => thold_DIA_CLKA_negedge_posedge(20),
        HoldHigh       => thold_DIA_CLKA_posedge_posedge(20),
--        CheckEnabled   => (TO_X01(ena_dly_sampled) = '1' and TO_X01(wea_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(ena_dly_sampled)    = '1' and
                           TO_X01(wea_dly_sampled(0)) = '1' and
                           TO_X01(wea_dly_sampled(1)) = '1' and
                           TO_X01(wea_dly_sampled(2)) = '1' and
                           TO_X01(wea_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIA21_CLKA_posedge,
        TimingData     => Tmkr_DIA21_CLKA_posedge,
        TestSignal     => DIA_dly(21),
        TestSignalName => "DIA(21)",
        TestDelay      => tisd_DIA_CLKA(21),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_DIA_CLKA_posedge_posedge(21),
        SetupLow       => tsetup_DIA_CLKA_negedge_posedge(21),
        HoldLow        => thold_DIA_CLKA_negedge_posedge(21),
        HoldHigh       => thold_DIA_CLKA_posedge_posedge(21),
--        CheckEnabled   => (TO_X01(ena_dly_sampled) = '1' and TO_X01(wea_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(ena_dly_sampled)    = '1' and
                           TO_X01(wea_dly_sampled(0)) = '1' and
                           TO_X01(wea_dly_sampled(1)) = '1' and
                           TO_X01(wea_dly_sampled(2)) = '1' and
                           TO_X01(wea_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIA22_CLKA_posedge,
        TimingData     => Tmkr_DIA22_CLKA_posedge,
        TestSignal     => DIA_dly(22),
        TestSignalName => "DIA(22)",
        TestDelay      => tisd_DIA_CLKA(22),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_DIA_CLKA_posedge_posedge(22),
        SetupLow       => tsetup_DIA_CLKA_negedge_posedge(22),
        HoldLow        => thold_DIA_CLKA_negedge_posedge(22),
        HoldHigh       => thold_DIA_CLKA_posedge_posedge(22),
--        CheckEnabled   => (TO_X01(ena_dly_sampled) = '1' and TO_X01(wea_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(ena_dly_sampled)    = '1' and
                           TO_X01(wea_dly_sampled(0)) = '1' and
                           TO_X01(wea_dly_sampled(1)) = '1' and
                           TO_X01(wea_dly_sampled(2)) = '1' and
                           TO_X01(wea_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIA23_CLKA_posedge,
        TimingData     => Tmkr_DIA23_CLKA_posedge,
        TestSignal     => DIA_dly(23),
        TestSignalName => "DIA(23)",
        TestDelay      => tisd_DIA_CLKA(23),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_DIA_CLKA_posedge_posedge(23),
        SetupLow       => tsetup_DIA_CLKA_negedge_posedge(23),
        HoldLow        => thold_DIA_CLKA_negedge_posedge(23),
        HoldHigh       => thold_DIA_CLKA_posedge_posedge(23),
--        CheckEnabled   => (TO_X01(ena_dly_sampled) = '1' and TO_X01(wea_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(ena_dly_sampled)    = '1' and
                           TO_X01(wea_dly_sampled(0)) = '1' and
                           TO_X01(wea_dly_sampled(1)) = '1' and
                           TO_X01(wea_dly_sampled(2)) = '1' and
                           TO_X01(wea_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIA24_CLKA_posedge,
        TimingData     => Tmkr_DIA24_CLKA_posedge,
        TestSignal     => DIA_dly(24),
        TestSignalName => "DIA(24)",
        TestDelay      => tisd_DIA_CLKA(24),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_DIA_CLKA_posedge_posedge(24),
        SetupLow       => tsetup_DIA_CLKA_negedge_posedge(24),
        HoldLow        => thold_DIA_CLKA_negedge_posedge(24),
        HoldHigh       => thold_DIA_CLKA_posedge_posedge(24),
--        CheckEnabled   => (TO_X01(ena_dly_sampled) = '1' and TO_X01(wea_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(ena_dly_sampled)    = '1' and
                           TO_X01(wea_dly_sampled(0)) = '1' and
                           TO_X01(wea_dly_sampled(1)) = '1' and
                           TO_X01(wea_dly_sampled(2)) = '1' and
                           TO_X01(wea_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIA25_CLKA_posedge,
        TimingData     => Tmkr_DIA25_CLKA_posedge,
        TestSignal     => DIA_dly(25),
        TestSignalName => "DIA(25)",
        TestDelay      => tisd_DIA_CLKA(25),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_DIA_CLKA_posedge_posedge(25),
        SetupLow       => tsetup_DIA_CLKA_negedge_posedge(25),
        HoldLow        => thold_DIA_CLKA_negedge_posedge(25),
        HoldHigh       => thold_DIA_CLKA_posedge_posedge(25),
--        CheckEnabled   => (TO_X01(ena_dly_sampled) = '1' and TO_X01(wea_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(ena_dly_sampled)    = '1' and
                           TO_X01(wea_dly_sampled(0)) = '1' and
                           TO_X01(wea_dly_sampled(1)) = '1' and
                           TO_X01(wea_dly_sampled(2)) = '1' and
                           TO_X01(wea_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIA26_CLKA_posedge,
        TimingData     => Tmkr_DIA26_CLKA_posedge,
        TestSignal     => DIA_dly(26),
        TestSignalName => "DIA(26)",
        TestDelay      => tisd_DIA_CLKA(26),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_DIA_CLKA_posedge_posedge(26),
        SetupLow       => tsetup_DIA_CLKA_negedge_posedge(26),
        HoldLow        => thold_DIA_CLKA_negedge_posedge(26),
        HoldHigh       => thold_DIA_CLKA_posedge_posedge(26),
--        CheckEnabled   => (TO_X01(ena_dly_sampled) = '1' and TO_X01(wea_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(ena_dly_sampled)    = '1' and
                           TO_X01(wea_dly_sampled(0)) = '1' and
                           TO_X01(wea_dly_sampled(1)) = '1' and
                           TO_X01(wea_dly_sampled(2)) = '1' and
                           TO_X01(wea_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIA27_CLKA_posedge,
        TimingData     => Tmkr_DIA27_CLKA_posedge,
        TestSignal     => DIA_dly(27),
        TestSignalName => "DIA(27)",
        TestDelay      => tisd_DIA_CLKA(27),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_DIA_CLKA_posedge_posedge(27),
        SetupLow       => tsetup_DIA_CLKA_negedge_posedge(27),
        HoldLow        => thold_DIA_CLKA_negedge_posedge(27),
        HoldHigh       => thold_DIA_CLKA_posedge_posedge(27),
--        CheckEnabled   => (TO_X01(ena_dly_sampled) = '1' and TO_X01(wea_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(ena_dly_sampled)    = '1' and
                           TO_X01(wea_dly_sampled(0)) = '1' and
                           TO_X01(wea_dly_sampled(1)) = '1' and
                           TO_X01(wea_dly_sampled(2)) = '1' and
                           TO_X01(wea_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIA28_CLKA_posedge,
        TimingData     => Tmkr_DIA28_CLKA_posedge,
        TestSignal     => DIA_dly(28),
        TestSignalName => "DIA(28)",
        TestDelay      => tisd_DIA_CLKA(28),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_DIA_CLKA_posedge_posedge(28),
        SetupLow       => tsetup_DIA_CLKA_negedge_posedge(28),
        HoldLow        => thold_DIA_CLKA_negedge_posedge(28),
        HoldHigh       => thold_DIA_CLKA_posedge_posedge(28),
--        CheckEnabled   => (TO_X01(ena_dly_sampled) = '1' and TO_X01(wea_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(ena_dly_sampled)    = '1' and
                           TO_X01(wea_dly_sampled(0)) = '1' and
                           TO_X01(wea_dly_sampled(1)) = '1' and
                           TO_X01(wea_dly_sampled(2)) = '1' and
                           TO_X01(wea_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIA29_CLKA_posedge,
        TimingData     => Tmkr_DIA29_CLKA_posedge,
        TestSignal     => DIA_dly(29),
        TestSignalName => "DIA(29)",
        TestDelay      => tisd_DIA_CLKA(29),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_DIA_CLKA_posedge_posedge(29),
        SetupLow       => tsetup_DIA_CLKA_negedge_posedge(29),
        HoldLow        => thold_DIA_CLKA_negedge_posedge(29),
        HoldHigh       => thold_DIA_CLKA_posedge_posedge(29),
--        CheckEnabled   => (TO_X01(ena_dly_sampled) = '1' and TO_X01(wea_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(ena_dly_sampled)    = '1' and
                           TO_X01(wea_dly_sampled(0)) = '1' and
                           TO_X01(wea_dly_sampled(1)) = '1' and
                           TO_X01(wea_dly_sampled(2)) = '1' and
                           TO_X01(wea_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIA30_CLKA_posedge,
        TimingData     => Tmkr_DIA30_CLKA_posedge,
        TestSignal     => DIA_dly(30),
        TestSignalName => "DIA(30)",
        TestDelay      => tisd_DIA_CLKA(30),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_DIA_CLKA_posedge_posedge(30),
        SetupLow       => tsetup_DIA_CLKA_negedge_posedge(30),
        HoldLow        => thold_DIA_CLKA_negedge_posedge(30),
        HoldHigh       => thold_DIA_CLKA_posedge_posedge(30),
--        CheckEnabled   => (TO_X01(ena_dly_sampled) = '1' and TO_X01(wea_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(ena_dly_sampled)    = '1' and
                           TO_X01(wea_dly_sampled(0)) = '1' and
                           TO_X01(wea_dly_sampled(1)) = '1' and
                           TO_X01(wea_dly_sampled(2)) = '1' and
                           TO_X01(wea_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIA31_CLKA_posedge,
        TimingData     => Tmkr_DIA31_CLKA_posedge,
        TestSignal     => DIA_dly(31),
        TestSignalName => "DIA(31)",
        TestDelay      => tisd_DIA_CLKA(31),
        RefSignal      => CLKA_dly,
        RefSignalName  => "CLKA",
        RefDelay       => ticd_CLKA,
        SetupHigh      => tsetup_DIA_CLKA_posedge_posedge(31),
        SetupLow       => tsetup_DIA_CLKA_negedge_posedge(31),
        HoldLow        => thold_DIA_CLKA_negedge_posedge(31),
        HoldHigh       => thold_DIA_CLKA_posedge_posedge(31),
--        CheckEnabled   => (TO_X01(ena_dly_sampled) = '1' and TO_X01(wea_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(ena_dly_sampled)    = '1' and
                           TO_X01(wea_dly_sampled(0)) = '1' and
                           TO_X01(wea_dly_sampled(1)) = '1' and
                           TO_X01(wea_dly_sampled(2)) = '1' and
                           TO_X01(wea_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalRecoveryRemovalCheck (
        Violation      => Tviol_RSTB_CLKB_posedge,
        TimingData     => Tmkr_RSTB_CLKB_posedge,
        TestSignal     => RSTB_dly,
        TestSignalName => "RSTB",
        TestDelay      => tisd_RSTB_CLKB,
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        Recovery       => trecovery_RSTB_CLKB_negedge_posedge,
        Removal        => tremoval_RSTB_CLKB_negedge_posedge,
        ActiveLow      => false,
        CheckEnabled   => true,
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => true,
        MsgSeverity    => warning);
      VitalRecoveryRemovalCheck (
        Violation      => Tviol_GSR_CLKB_posedge,
        TimingData     => Tmkr_GSR_CLKB_posedge,
        TestSignal     => GSR_CLKB_dly,
        TestSignalName => "GSR",
        TestDelay      => tisd_GSR_CLKB,
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        Recovery       => trecovery_GSR_CLKB_negedge_posedge,
        Removal        => thold_GSR_CLKB_negedge_posedge,
        ActiveLow      => false,
        CheckEnabled   => true,
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => true,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_ENB_CLKB_posedge,
        TimingData     => Tmkr_ENB_CLKB_posedge,
        TestSignal     => ENB_dly,
        TestSignalName => "ENB",
        TestDelay      => tisd_ENB_CLKB,
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_ENB_CLKB_posedge_posedge,
        SetupLow       => tsetup_ENB_CLKB_negedge_posedge,
        HoldLow        => thold_ENB_CLKB_negedge_posedge,
        HoldHigh       => thold_ENB_CLKB_posedge_posedge,
        CheckEnabled   => true,
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_REGCEB_CLKB_posedge,
        TimingData     => Tmkr_REGCEB_CLKB_posedge,
        TestSignal     => REGCEB_dly,
        TestSignalName => "REGCEB",
        TestDelay      => tisd_REGCEB_CLKB,
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_REGCEB_CLKB_posedge_posedge,
        SetupLow       => tsetup_REGCEB_CLKB_negedge_posedge,
        HoldLow        => thold_REGCEB_CLKB_negedge_posedge,
        HoldHigh       => thold_REGCEB_CLKB_posedge_posedge,
        CheckEnabled   => true,
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_RSTB_CLKB_posedge,
        TimingData     => Tmkr_RSTB_CLKB_posedge,
        TestSignal     => RSTB_dly,
        TestSignalName => "RSTB",
        TestDelay      => tisd_RSTB_CLKB,
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_RSTB_CLKB_posedge_posedge,
        SetupLow       => tsetup_RSTB_CLKB_negedge_posedge,
        HoldLow        => thold_RSTB_CLKB_negedge_posedge,
        HoldHigh       => thold_RSTB_CLKB_posedge_posedge,
        CheckEnabled   => TO_X01(enb_dly_sampled) = '1',
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_WEB0_CLKB_posedge,
        TimingData     => Tmkr_WEB0_CLKB_posedge,
        TestSignal     => WEB_dly(0),
        TestSignalName => "WEB(0)",
        TestDelay      => tisd_WEB_CLKB(0),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_WEB_CLKB_posedge_posedge(0),
        SetupLow       => tsetup_WEB_CLKB_negedge_posedge(0),
        HoldLow        => thold_WEB_CLKB_negedge_posedge(0),
        HoldHigh       => thold_WEB_CLKB_posedge_posedge(0),
        CheckEnabled   => TO_X01(enb_dly_sampled) = '1',
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_WEB1_CLKB_posedge,
        TimingData     => Tmkr_WEB1_CLKB_posedge,
        TestSignal     => WEB_dly(1),
        TestSignalName => "WEB(1)",
        TestDelay      => tisd_WEB_CLKB(1),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_WEB_CLKB_posedge_posedge(1),
        SetupLow       => tsetup_WEB_CLKB_negedge_posedge(1),
        HoldLow        => thold_WEB_CLKB_negedge_posedge(1),
        HoldHigh       => thold_WEB_CLKB_posedge_posedge(1),
        CheckEnabled   => TO_X01(enb_dly_sampled) = '1',
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_WEB2_CLKB_posedge,
        TimingData     => Tmkr_WEB2_CLKB_posedge,
        TestSignal     => WEB_dly(2),
        TestSignalName => "WEB(2)",
        TestDelay      => tisd_WEB_CLKB(2),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_WEB_CLKB_posedge_posedge(2),
        SetupLow       => tsetup_WEB_CLKB_negedge_posedge(2),
        HoldLow        => thold_WEB_CLKB_negedge_posedge(2),
        HoldHigh       => thold_WEB_CLKB_posedge_posedge(2),
        CheckEnabled   => TO_X01(enb_dly_sampled) = '1',
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_WEB3_CLKB_posedge,
        TimingData     => Tmkr_WEB3_CLKB_posedge,
        TestSignal     => WEB_dly(3),
        TestSignalName => "WEB(3)",
        TestDelay      => tisd_WEB_CLKB(3),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_WEB_CLKB_posedge_posedge(3),
        SetupLow       => tsetup_WEB_CLKB_negedge_posedge(3),
        HoldLow        => thold_WEB_CLKB_negedge_posedge(3),
        HoldHigh       => thold_WEB_CLKB_posedge_posedge(3),
        CheckEnabled   => TO_X01(enb_dly_sampled) = '1',
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_ADDRB0_CLKB_posedge,
        TimingData     => Tmkr_ADDRB0_CLKB_posedge,
        TestSignal     => ADDRB_dly(0),
        TestSignalName => "ADDRB(0)",
        TestDelay      => tisd_ADDRB_CLKB(0),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_ADDRB_CLKB_posedge_posedge(0),
        SetupLow       => tsetup_ADDRB_CLKB_negedge_posedge(0),
        HoldLow        => thold_ADDRB_CLKB_negedge_posedge(0),
        HoldHigh       => thold_ADDRB_CLKB_posedge_posedge(0),
        CheckEnabled   => TO_X01(enb_dly_sampled) = '1',
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_ADDRB1_CLKB_posedge,
        TimingData     => Tmkr_ADDRB1_CLKB_posedge,
        TestSignal     => ADDRB_dly(1),
        TestSignalName => "ADDRB(1)",
        TestDelay      => tisd_ADDRB_CLKB(1),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_ADDRB_CLKB_posedge_posedge(1),
        SetupLow       => tsetup_ADDRB_CLKB_negedge_posedge(1),
        HoldLow        => thold_ADDRB_CLKB_negedge_posedge(1),
        HoldHigh       => thold_ADDRB_CLKB_posedge_posedge(1),
        CheckEnabled   => TO_X01(enb_dly_sampled) = '1',
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_ADDRB2_CLKB_posedge,
        TimingData     => Tmkr_ADDRB2_CLKB_posedge,
        TestSignal     => ADDRB_dly(2),
        TestSignalName => "ADDRB(2)",
        TestDelay      => tisd_ADDRB_CLKB(2),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_ADDRB_CLKB_posedge_posedge(2),
        SetupLow       => tsetup_ADDRB_CLKB_negedge_posedge(2),
        HoldLow        => thold_ADDRB_CLKB_negedge_posedge(2),
        HoldHigh       => thold_ADDRB_CLKB_posedge_posedge(2),
        CheckEnabled   => TO_X01(enb_dly_sampled) = '1',
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_ADDRB3_CLKB_posedge,
        TimingData     => Tmkr_ADDRB3_CLKB_posedge,
        TestSignal     => ADDRB_dly(3),
        TestSignalName => "ADDRB(3)",
        TestDelay      => tisd_ADDRB_CLKB(3),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_ADDRB_CLKB_posedge_posedge(3),
        SetupLow       => tsetup_ADDRB_CLKB_negedge_posedge(3),
        HoldLow        => thold_ADDRB_CLKB_negedge_posedge(3),
        HoldHigh       => thold_ADDRB_CLKB_posedge_posedge(3),
        CheckEnabled   => TO_X01(enb_dly_sampled) = '1',
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_ADDRB4_CLKB_posedge,
        TimingData     => Tmkr_ADDRB4_CLKB_posedge,
        TestSignal     => ADDRB_dly(4),
        TestSignalName => "ADDRB(4)",
        TestDelay      => tisd_ADDRB_CLKB(4),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_ADDRB_CLKB_posedge_posedge(4),
        SetupLow       => tsetup_ADDRB_CLKB_negedge_posedge(4),
        HoldLow        => thold_ADDRB_CLKB_negedge_posedge(4),
        HoldHigh       => thold_ADDRB_CLKB_posedge_posedge(4),
        CheckEnabled   => TO_X01(enb_dly_sampled) = '1',
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_ADDRB5_CLKB_posedge,
        TimingData     => Tmkr_ADDRB5_CLKB_posedge,
        TestSignal     => ADDRB_dly(5),
        TestSignalName => "ADDRB(5)",
        TestDelay      => tisd_ADDRB_CLKB(5),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_ADDRB_CLKB_posedge_posedge(5),
        SetupLow       => tsetup_ADDRB_CLKB_negedge_posedge(5),
        HoldLow        => thold_ADDRB_CLKB_negedge_posedge(5),
        HoldHigh       => thold_ADDRB_CLKB_posedge_posedge(5),
        CheckEnabled   => TO_X01(enb_dly_sampled) = '1',
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_ADDRB6_CLKB_posedge,
        TimingData     => Tmkr_ADDRB6_CLKB_posedge,
        TestSignal     => ADDRB_dly(6),
        TestSignalName => "ADDRB(6)",
        TestDelay      => tisd_ADDRB_CLKB(6),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_ADDRB_CLKB_posedge_posedge(6),
        SetupLow       => tsetup_ADDRB_CLKB_negedge_posedge(6),
        HoldLow        => thold_ADDRB_CLKB_negedge_posedge(6),
        HoldHigh       => thold_ADDRB_CLKB_posedge_posedge(6),
        CheckEnabled   => TO_X01(enb_dly_sampled) = '1',
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_ADDRB7_CLKB_posedge,
        TimingData     => Tmkr_ADDRB7_CLKB_posedge,
        TestSignal     => ADDRB_dly(7),
        TestSignalName => "ADDRB(7)",
        TestDelay      => tisd_ADDRB_CLKB(7),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_ADDRB_CLKB_posedge_posedge(7),
        SetupLow       => tsetup_ADDRB_CLKB_negedge_posedge(7),
        HoldLow        => thold_ADDRB_CLKB_negedge_posedge(7),
        HoldHigh       => thold_ADDRB_CLKB_posedge_posedge(7),
        CheckEnabled   => TO_X01(enb_dly_sampled) = '1',
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_ADDRB8_CLKB_posedge,
        TimingData     => Tmkr_ADDRB8_CLKB_posedge,
        TestSignal     => ADDRB_dly(8),
        TestSignalName => "ADDRB(8)",
        TestDelay      => tisd_ADDRB_CLKB(8),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_ADDRB_CLKB_posedge_posedge(8),
        SetupLow       => tsetup_ADDRB_CLKB_negedge_posedge(8),
        HoldLow        => thold_ADDRB_CLKB_negedge_posedge(8),
        HoldHigh       => thold_ADDRB_CLKB_posedge_posedge(8),
        CheckEnabled   => TO_X01(enb_dly_sampled) = '1',
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIPB0_CLKB_posedge,
        TimingData     => Tmkr_DIPB0_CLKB_posedge,
        TestSignal     => DIPB_dly(0),
        TestSignalName => "DIPB(0)",
        TestDelay      => tisd_DIPB_CLKB(0),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_DIPB_CLKB_posedge_posedge(0),
        SetupLow       => tsetup_DIPB_CLKB_negedge_posedge(0),
        HoldLow        => thold_DIPB_CLKB_negedge_posedge(0),
        HoldHigh       => thold_DIPB_CLKB_posedge_posedge(0),
--        CheckEnabled   => (TO_X01(enb_dly_sampled) = '1' and TO_X01(web_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(enb_dly_sampled)    = '1' and
                           TO_X01(web_dly_sampled(0)) = '1' and
                           TO_X01(web_dly_sampled(1)) = '1' and
                           TO_X01(web_dly_sampled(2)) = '1' and
                           TO_X01(web_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIPB1_CLKB_posedge,
        TimingData     => Tmkr_DIPB1_CLKB_posedge,
        TestSignal     => DIPB_dly(1),
        TestSignalName => "DIPB(1)",
        TestDelay      => tisd_DIPB_CLKB(1),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_DIPB_CLKB_posedge_posedge(1),
        SetupLow       => tsetup_DIPB_CLKB_negedge_posedge(1),
        HoldLow        => thold_DIPB_CLKB_negedge_posedge(1),
        HoldHigh       => thold_DIPB_CLKB_posedge_posedge(1),
--        CheckEnabled   => (TO_X01(enb_dly_sampled) = '1' and TO_X01(web_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(enb_dly_sampled)    = '1' and
                           TO_X01(web_dly_sampled(0)) = '1' and
                           TO_X01(web_dly_sampled(1)) = '1' and
                           TO_X01(web_dly_sampled(2)) = '1' and
                           TO_X01(web_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIPB2_CLKB_posedge,
        TimingData     => Tmkr_DIPB2_CLKB_posedge,
        TestSignal     => DIPB_dly(2),
        TestSignalName => "DIPB(2)",
        TestDelay      => tisd_DIPB_CLKB(2),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_DIPB_CLKB_posedge_posedge(2),
        SetupLow       => tsetup_DIPB_CLKB_negedge_posedge(2),
        HoldLow        => thold_DIPB_CLKB_negedge_posedge(2),
        HoldHigh       => thold_DIPB_CLKB_posedge_posedge(2),
--        CheckEnabled   => (TO_X01(enb_dly_sampled) = '1' and TO_X01(web_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(enb_dly_sampled)    = '1' and
                           TO_X01(web_dly_sampled(0)) = '1' and
                           TO_X01(web_dly_sampled(1)) = '1' and
                           TO_X01(web_dly_sampled(2)) = '1' and
                           TO_X01(web_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIPB3_CLKB_posedge,
        TimingData     => Tmkr_DIPB3_CLKB_posedge,
        TestSignal     => DIPB_dly(3),
        TestSignalName => "DIPB(3)",
        TestDelay      => tisd_DIPB_CLKB(3),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_DIPB_CLKB_posedge_posedge(3),
        SetupLow       => tsetup_DIPB_CLKB_negedge_posedge(3),
        HoldLow        => thold_DIPB_CLKB_negedge_posedge(3),
        HoldHigh       => thold_DIPB_CLKB_posedge_posedge(3),
--        CheckEnabled   => (TO_X01(enb_dly_sampled) = '1' and TO_X01(web_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(enb_dly_sampled)    = '1' and
                           TO_X01(web_dly_sampled(0)) = '1' and
                           TO_X01(web_dly_sampled(1)) = '1' and
                           TO_X01(web_dly_sampled(2)) = '1' and
                           TO_X01(web_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIB0_CLKB_posedge,
        TimingData     => Tmkr_DIB0_CLKB_posedge,
        TestSignal     => DIB_dly(0),
        TestSignalName => "DIB(0)",
        TestDelay      => tisd_DIB_CLKB(0),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_DIB_CLKB_posedge_posedge(0),
        SetupLow       => tsetup_DIB_CLKB_negedge_posedge(0),
        HoldLow        => thold_DIB_CLKB_negedge_posedge(0),
        HoldHigh       => thold_DIB_CLKB_posedge_posedge(0),
--        CheckEnabled   => (TO_X01(enb_dly_sampled) = '1' and TO_X01(web_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(enb_dly_sampled)    = '1' and
                           TO_X01(web_dly_sampled(0)) = '1' and
                           TO_X01(web_dly_sampled(1)) = '1' and
                           TO_X01(web_dly_sampled(2)) = '1' and
                           TO_X01(web_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIB1_CLKB_posedge,
        TimingData     => Tmkr_DIB1_CLKB_posedge,
        TestSignal     => DIB_dly(1),
        TestSignalName => "DIB(1)",
        TestDelay      => tisd_DIB_CLKB(1),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_DIB_CLKB_posedge_posedge(1),
        SetupLow       => tsetup_DIB_CLKB_negedge_posedge(1),
        HoldLow        => thold_DIB_CLKB_negedge_posedge(1),
        HoldHigh       => thold_DIB_CLKB_posedge_posedge(1),
--        CheckEnabled   => (TO_X01(enb_dly_sampled) = '1' and TO_X01(web_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(enb_dly_sampled)    = '1' and
                           TO_X01(web_dly_sampled(0)) = '1' and
                           TO_X01(web_dly_sampled(1)) = '1' and
                           TO_X01(web_dly_sampled(2)) = '1' and
                           TO_X01(web_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIB2_CLKB_posedge,
        TimingData     => Tmkr_DIB2_CLKB_posedge,
        TestSignal     => DIB_dly(2),
        TestSignalName => "DIB(2)",
        TestDelay      => tisd_DIB_CLKB(2),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_DIB_CLKB_posedge_posedge(2),
        SetupLow       => tsetup_DIB_CLKB_negedge_posedge(2),
        HoldLow        => thold_DIB_CLKB_negedge_posedge(2),
        HoldHigh       => thold_DIB_CLKB_posedge_posedge(2),
--        CheckEnabled   => (TO_X01(enb_dly_sampled) = '1' and TO_X01(web_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(enb_dly_sampled)    = '1' and
                           TO_X01(web_dly_sampled(0)) = '1' and
                           TO_X01(web_dly_sampled(1)) = '1' and
                           TO_X01(web_dly_sampled(2)) = '1' and
                           TO_X01(web_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIB3_CLKB_posedge,
        TimingData     => Tmkr_DIB3_CLKB_posedge,
        TestSignal     => DIB_dly(3),
        TestSignalName => "DIB(3)",
        TestDelay      => tisd_DIB_CLKB(3),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_DIB_CLKB_posedge_posedge(3),
        SetupLow       => tsetup_DIB_CLKB_negedge_posedge(3),
        HoldLow        => thold_DIB_CLKB_negedge_posedge(3),
        HoldHigh       => thold_DIB_CLKB_posedge_posedge(3),
--        CheckEnabled   => (TO_X01(enb_dly_sampled) = '1' and TO_X01(web_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(enb_dly_sampled)    = '1' and
                           TO_X01(web_dly_sampled(0)) = '1' and
                           TO_X01(web_dly_sampled(1)) = '1' and
                           TO_X01(web_dly_sampled(2)) = '1' and
                           TO_X01(web_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIB4_CLKB_posedge,
        TimingData     => Tmkr_DIB4_CLKB_posedge,
        TestSignal     => DIB_dly(4),
        TestSignalName => "DIB(4)",
        TestDelay      => tisd_DIB_CLKB(4),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_DIB_CLKB_posedge_posedge(4),
        SetupLow       => tsetup_DIB_CLKB_negedge_posedge(4),
        HoldLow        => thold_DIB_CLKB_negedge_posedge(4),
        HoldHigh       => thold_DIB_CLKB_posedge_posedge(4),
--        CheckEnabled   => (TO_X01(enb_dly_sampled) = '1' and TO_X01(web_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(enb_dly_sampled)    = '1' and
                           TO_X01(web_dly_sampled(0)) = '1' and
                           TO_X01(web_dly_sampled(1)) = '1' and
                           TO_X01(web_dly_sampled(2)) = '1' and
                           TO_X01(web_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIB5_CLKB_posedge,
        TimingData     => Tmkr_DIB5_CLKB_posedge,
        TestSignal     => DIB_dly(5),
        TestSignalName => "DIB(5)",
        TestDelay      => tisd_DIB_CLKB(5),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_DIB_CLKB_posedge_posedge(5),
        SetupLow       => tsetup_DIB_CLKB_negedge_posedge(5),
        HoldLow        => thold_DIB_CLKB_negedge_posedge(5),
        HoldHigh       => thold_DIB_CLKB_posedge_posedge(5),
--        CheckEnabled   => (TO_X01(enb_dly_sampled) = '1' and TO_X01(web_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(enb_dly_sampled)    = '1' and
                           TO_X01(web_dly_sampled(0)) = '1' and
                           TO_X01(web_dly_sampled(1)) = '1' and
                           TO_X01(web_dly_sampled(2)) = '1' and
                           TO_X01(web_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIB6_CLKB_posedge,
        TimingData     => Tmkr_DIB6_CLKB_posedge,
        TestSignal     => DIB_dly(6),
        TestSignalName => "DIB(6)",
        TestDelay      => tisd_DIB_CLKB(6),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_DIB_CLKB_posedge_posedge(6),
        SetupLow       => tsetup_DIB_CLKB_negedge_posedge(6),
        HoldLow        => thold_DIB_CLKB_negedge_posedge(6),
        HoldHigh       => thold_DIB_CLKB_posedge_posedge(6),
--        CheckEnabled   => (TO_X01(enb_dly_sampled) = '1' and TO_X01(web_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(enb_dly_sampled)    = '1' and
                           TO_X01(web_dly_sampled(0)) = '1' and
                           TO_X01(web_dly_sampled(1)) = '1' and
                           TO_X01(web_dly_sampled(2)) = '1' and
                           TO_X01(web_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIB7_CLKB_posedge,
        TimingData     => Tmkr_DIB7_CLKB_posedge,
        TestSignal     => DIB_dly(7),
        TestSignalName => "DIB(7)",
        TestDelay      => tisd_DIB_CLKB(7),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_DIB_CLKB_posedge_posedge(7),
        SetupLow       => tsetup_DIB_CLKB_negedge_posedge(7),
        HoldLow        => thold_DIB_CLKB_negedge_posedge(7),
        HoldHigh       => thold_DIB_CLKB_posedge_posedge(7),
--        CheckEnabled   => (TO_X01(enb_dly_sampled) = '1' and TO_X01(web_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(enb_dly_sampled)    = '1' and
                           TO_X01(web_dly_sampled(0)) = '1' and
                           TO_X01(web_dly_sampled(1)) = '1' and
                           TO_X01(web_dly_sampled(2)) = '1' and
                           TO_X01(web_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIB8_CLKB_posedge,
        TimingData     => Tmkr_DIB8_CLKB_posedge,
        TestSignal     => DIB_dly(8),
        TestSignalName => "DIB(8)",
        TestDelay      => tisd_DIB_CLKB(8),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_DIB_CLKB_posedge_posedge(8),
        SetupLow       => tsetup_DIB_CLKB_negedge_posedge(8),
        HoldLow        => thold_DIB_CLKB_negedge_posedge(8),
        HoldHigh       => thold_DIB_CLKB_posedge_posedge(8),
--        CheckEnabled   => (TO_X01(enb_dly_sampled) = '1' and TO_X01(web_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(enb_dly_sampled)    = '1' and
                           TO_X01(web_dly_sampled(0)) = '1' and
                           TO_X01(web_dly_sampled(1)) = '1' and
                           TO_X01(web_dly_sampled(2)) = '1' and
                           TO_X01(web_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIB9_CLKB_posedge,
        TimingData     => Tmkr_DIB9_CLKB_posedge,
        TestSignal     => DIB_dly(9),
        TestSignalName => "DIB(9)",
        TestDelay      => tisd_DIB_CLKB(9),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_DIB_CLKB_posedge_posedge(9),
        SetupLow       => tsetup_DIB_CLKB_negedge_posedge(9),
        HoldLow        => thold_DIB_CLKB_negedge_posedge(9),
        HoldHigh       => thold_DIB_CLKB_posedge_posedge(9),
--        CheckEnabled   => (TO_X01(enb_dly_sampled) = '1' and TO_X01(web_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(enb_dly_sampled)    = '1' and
                           TO_X01(web_dly_sampled(0)) = '1' and
                           TO_X01(web_dly_sampled(1)) = '1' and
                           TO_X01(web_dly_sampled(2)) = '1' and
                           TO_X01(web_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIB10_CLKB_posedge,
        TimingData     => Tmkr_DIB10_CLKB_posedge,
        TestSignal     => DIB_dly(10),
        TestSignalName => "DIB(10)",
        TestDelay      => tisd_DIB_CLKB(10),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_DIB_CLKB_posedge_posedge(10),
        SetupLow       => tsetup_DIB_CLKB_negedge_posedge(10),
        HoldLow        => thold_DIB_CLKB_negedge_posedge(10),
        HoldHigh       => thold_DIB_CLKB_posedge_posedge(10),
--        CheckEnabled   => (TO_X01(enb_dly_sampled) = '1' and TO_X01(web_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(enb_dly_sampled)    = '1' and
                           TO_X01(web_dly_sampled(0)) = '1' and
                           TO_X01(web_dly_sampled(1)) = '1' and
                           TO_X01(web_dly_sampled(2)) = '1' and
                           TO_X01(web_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIB11_CLKB_posedge,
        TimingData     => Tmkr_DIB11_CLKB_posedge,
        TestSignal     => DIB_dly(11),
        TestSignalName => "DIB(11)",
        TestDelay      => tisd_DIB_CLKB(11),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_DIB_CLKB_posedge_posedge(11),
        SetupLow       => tsetup_DIB_CLKB_negedge_posedge(11),
        HoldLow        => thold_DIB_CLKB_negedge_posedge(11),
        HoldHigh       => thold_DIB_CLKB_posedge_posedge(11),
--        CheckEnabled   => (TO_X01(enb_dly_sampled) = '1' and TO_X01(web_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(enb_dly_sampled)    = '1' and
                           TO_X01(web_dly_sampled(0)) = '1' and
                           TO_X01(web_dly_sampled(1)) = '1' and
                           TO_X01(web_dly_sampled(2)) = '1' and
                           TO_X01(web_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIB12_CLKB_posedge,
        TimingData     => Tmkr_DIB12_CLKB_posedge,
        TestSignal     => DIB_dly(12),
        TestSignalName => "DIB(12)",
        TestDelay      => tisd_DIB_CLKB(12),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_DIB_CLKB_posedge_posedge(12),
        SetupLow       => tsetup_DIB_CLKB_negedge_posedge(12),
        HoldLow        => thold_DIB_CLKB_negedge_posedge(12),
        HoldHigh       => thold_DIB_CLKB_posedge_posedge(12),
--        CheckEnabled   => (TO_X01(enb_dly_sampled) = '1' and TO_X01(web_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(enb_dly_sampled)    = '1' and
                           TO_X01(web_dly_sampled(0)) = '1' and
                           TO_X01(web_dly_sampled(1)) = '1' and
                           TO_X01(web_dly_sampled(2)) = '1' and
                           TO_X01(web_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIB13_CLKB_posedge,
        TimingData     => Tmkr_DIB13_CLKB_posedge,
        TestSignal     => DIB_dly(13),
        TestSignalName => "DIB(13)",
        TestDelay      => tisd_DIB_CLKB(13),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_DIB_CLKB_posedge_posedge(13),
        SetupLow       => tsetup_DIB_CLKB_negedge_posedge(13),
        HoldLow        => thold_DIB_CLKB_negedge_posedge(13),
        HoldHigh       => thold_DIB_CLKB_posedge_posedge(13),
--        CheckEnabled   => (TO_X01(enb_dly_sampled) = '1' and TO_X01(web_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(enb_dly_sampled)    = '1' and
                           TO_X01(web_dly_sampled(0)) = '1' and
                           TO_X01(web_dly_sampled(1)) = '1' and
                           TO_X01(web_dly_sampled(2)) = '1' and
                           TO_X01(web_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIB14_CLKB_posedge,
        TimingData     => Tmkr_DIB14_CLKB_posedge,
        TestSignal     => DIB_dly(14),
        TestSignalName => "DIB(14)",
        TestDelay      => tisd_DIB_CLKB(14),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_DIB_CLKB_posedge_posedge(14),
        SetupLow       => tsetup_DIB_CLKB_negedge_posedge(14),
        HoldLow        => thold_DIB_CLKB_negedge_posedge(14),
        HoldHigh       => thold_DIB_CLKB_posedge_posedge(14),
--        CheckEnabled   => (TO_X01(enb_dly_sampled) = '1' and TO_X01(web_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(enb_dly_sampled)    = '1' and
                           TO_X01(web_dly_sampled(0)) = '1' and
                           TO_X01(web_dly_sampled(1)) = '1' and
                           TO_X01(web_dly_sampled(2)) = '1' and
                           TO_X01(web_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIB15_CLKB_posedge,
        TimingData     => Tmkr_DIB15_CLKB_posedge,
        TestSignal     => DIB_dly(15),
        TestSignalName => "DIB(15)",
        TestDelay      => tisd_DIB_CLKB(15),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_DIB_CLKB_posedge_posedge(15),
        SetupLow       => tsetup_DIB_CLKB_negedge_posedge(15),
        HoldLow        => thold_DIB_CLKB_negedge_posedge(15),
        HoldHigh       => thold_DIB_CLKB_posedge_posedge(15),
--        CheckEnabled   => (TO_X01(enb_dly_sampled) = '1' and TO_X01(web_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(enb_dly_sampled)    = '1' and
                           TO_X01(web_dly_sampled(0)) = '1' and
                           TO_X01(web_dly_sampled(1)) = '1' and
                           TO_X01(web_dly_sampled(2)) = '1' and
                           TO_X01(web_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIB16_CLKB_posedge,
        TimingData     => Tmkr_DIB16_CLKB_posedge,
        TestSignal     => DIB_dly(16),
        TestSignalName => "DIB(16)",
        TestDelay      => tisd_DIB_CLKB(16),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_DIB_CLKB_posedge_posedge(16),
        SetupLow       => tsetup_DIB_CLKB_negedge_posedge(16),
        HoldLow        => thold_DIB_CLKB_negedge_posedge(16),
        HoldHigh       => thold_DIB_CLKB_posedge_posedge(16),
--        CheckEnabled   => (TO_X01(enb_dly_sampled) = '1' and TO_X01(web_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(enb_dly_sampled)    = '1' and
                           TO_X01(web_dly_sampled(0)) = '1' and
                           TO_X01(web_dly_sampled(1)) = '1' and
                           TO_X01(web_dly_sampled(2)) = '1' and
                           TO_X01(web_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIB17_CLKB_posedge,
        TimingData     => Tmkr_DIB17_CLKB_posedge,
        TestSignal     => DIB_dly(17),
        TestSignalName => "DIB(17)",
        TestDelay      => tisd_DIB_CLKB(17),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_DIB_CLKB_posedge_posedge(17),
        SetupLow       => tsetup_DIB_CLKB_negedge_posedge(17),
        HoldLow        => thold_DIB_CLKB_negedge_posedge(17),
        HoldHigh       => thold_DIB_CLKB_posedge_posedge(17),
--        CheckEnabled   => (TO_X01(enb_dly_sampled) = '1' and TO_X01(web_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(enb_dly_sampled)    = '1' and
                           TO_X01(web_dly_sampled(0)) = '1' and
                           TO_X01(web_dly_sampled(1)) = '1' and
                           TO_X01(web_dly_sampled(2)) = '1' and
                           TO_X01(web_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIB18_CLKB_posedge,
        TimingData     => Tmkr_DIB18_CLKB_posedge,
        TestSignal     => DIB_dly(18),
        TestSignalName => "DIB(18)",
        TestDelay      => tisd_DIB_CLKB(18),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_DIB_CLKB_posedge_posedge(18),
        SetupLow       => tsetup_DIB_CLKB_negedge_posedge(18),
        HoldLow        => thold_DIB_CLKB_negedge_posedge(18),
        HoldHigh       => thold_DIB_CLKB_posedge_posedge(18),
--        CheckEnabled   => (TO_X01(enb_dly_sampled) = '1' and TO_X01(web_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(enb_dly_sampled)    = '1' and
                           TO_X01(web_dly_sampled(0)) = '1' and
                           TO_X01(web_dly_sampled(1)) = '1' and
                           TO_X01(web_dly_sampled(2)) = '1' and
                           TO_X01(web_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIB19_CLKB_posedge,
        TimingData     => Tmkr_DIB19_CLKB_posedge,
        TestSignal     => DIB_dly(19),
        TestSignalName => "DIB(19)",
        TestDelay      => tisd_DIB_CLKB(19),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_DIB_CLKB_posedge_posedge(19),
        SetupLow       => tsetup_DIB_CLKB_negedge_posedge(19),
        HoldLow        => thold_DIB_CLKB_negedge_posedge(19),
        HoldHigh       => thold_DIB_CLKB_posedge_posedge(19),
--        CheckEnabled   => (TO_X01(enb_dly_sampled) = '1' and TO_X01(web_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(enb_dly_sampled)    = '1' and
                           TO_X01(web_dly_sampled(0)) = '1' and
                           TO_X01(web_dly_sampled(1)) = '1' and
                           TO_X01(web_dly_sampled(2)) = '1' and
                           TO_X01(web_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIB20_CLKB_posedge,
        TimingData     => Tmkr_DIB20_CLKB_posedge,
        TestSignal     => DIB_dly(20),
        TestSignalName => "DIB(20)",
        TestDelay      => tisd_DIB_CLKB(20),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_DIB_CLKB_posedge_posedge(20),
        SetupLow       => tsetup_DIB_CLKB_negedge_posedge(20),
        HoldLow        => thold_DIB_CLKB_negedge_posedge(20),
        HoldHigh       => thold_DIB_CLKB_posedge_posedge(20),
--        CheckEnabled   => (TO_X01(enb_dly_sampled) = '1' and TO_X01(web_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(enb_dly_sampled)    = '1' and
                           TO_X01(web_dly_sampled(0)) = '1' and
                           TO_X01(web_dly_sampled(1)) = '1' and
                           TO_X01(web_dly_sampled(2)) = '1' and
                           TO_X01(web_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIB21_CLKB_posedge,
        TimingData     => Tmkr_DIB21_CLKB_posedge,
        TestSignal     => DIB_dly(21),
        TestSignalName => "DIB(21)",
        TestDelay      => tisd_DIB_CLKB(21),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_DIB_CLKB_posedge_posedge(21),
        SetupLow       => tsetup_DIB_CLKB_negedge_posedge(21),
        HoldLow        => thold_DIB_CLKB_negedge_posedge(21),
        HoldHigh       => thold_DIB_CLKB_posedge_posedge(21),
--        CheckEnabled   => (TO_X01(enb_dly_sampled) = '1' and TO_X01(web_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(enb_dly_sampled)    = '1' and
                           TO_X01(web_dly_sampled(0)) = '1' and
                           TO_X01(web_dly_sampled(1)) = '1' and
                           TO_X01(web_dly_sampled(2)) = '1' and
                           TO_X01(web_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIB22_CLKB_posedge,
        TimingData     => Tmkr_DIB22_CLKB_posedge,
        TestSignal     => DIB_dly(22),
        TestSignalName => "DIB(22)",
        TestDelay      => tisd_DIB_CLKB(22),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_DIB_CLKB_posedge_posedge(22),
        SetupLow       => tsetup_DIB_CLKB_negedge_posedge(22),
        HoldLow        => thold_DIB_CLKB_negedge_posedge(22),
        HoldHigh       => thold_DIB_CLKB_posedge_posedge(22),
--        CheckEnabled   => (TO_X01(enb_dly_sampled) = '1' and TO_X01(web_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(enb_dly_sampled)    = '1' and
                           TO_X01(web_dly_sampled(0)) = '1' and
                           TO_X01(web_dly_sampled(1)) = '1' and
                           TO_X01(web_dly_sampled(2)) = '1' and
                           TO_X01(web_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIB23_CLKB_posedge,
        TimingData     => Tmkr_DIB23_CLKB_posedge,
        TestSignal     => DIB_dly(23),
        TestSignalName => "DIB(23)",
        TestDelay      => tisd_DIB_CLKB(23),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_DIB_CLKB_posedge_posedge(23),
        SetupLow       => tsetup_DIB_CLKB_negedge_posedge(23),
        HoldLow        => thold_DIB_CLKB_negedge_posedge(23),
        HoldHigh       => thold_DIB_CLKB_posedge_posedge(23),
--        CheckEnabled   => (TO_X01(enb_dly_sampled) = '1' and TO_X01(web_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(enb_dly_sampled)    = '1' and
                           TO_X01(web_dly_sampled(0)) = '1' and
                           TO_X01(web_dly_sampled(1)) = '1' and
                           TO_X01(web_dly_sampled(2)) = '1' and
                           TO_X01(web_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIB24_CLKB_posedge,
        TimingData     => Tmkr_DIB24_CLKB_posedge,
        TestSignal     => DIB_dly(24),
        TestSignalName => "DIB(24)",
        TestDelay      => tisd_DIB_CLKB(24),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_DIB_CLKB_posedge_posedge(24),
        SetupLow       => tsetup_DIB_CLKB_negedge_posedge(24),
        HoldLow        => thold_DIB_CLKB_negedge_posedge(24),
        HoldHigh       => thold_DIB_CLKB_posedge_posedge(24),
--        CheckEnabled   => (TO_X01(enb_dly_sampled) = '1' and TO_X01(web_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(enb_dly_sampled)    = '1' and
                           TO_X01(web_dly_sampled(0)) = '1' and
                           TO_X01(web_dly_sampled(1)) = '1' and
                           TO_X01(web_dly_sampled(2)) = '1' and
                           TO_X01(web_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIB25_CLKB_posedge,
        TimingData     => Tmkr_DIB25_CLKB_posedge,
        TestSignal     => DIB_dly(25),
        TestSignalName => "DIB(25)",
        TestDelay      => tisd_DIB_CLKB(25),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_DIB_CLKB_posedge_posedge(25),
        SetupLow       => tsetup_DIB_CLKB_negedge_posedge(25),
        HoldLow        => thold_DIB_CLKB_negedge_posedge(25),
        HoldHigh       => thold_DIB_CLKB_posedge_posedge(25),
--        CheckEnabled   => (TO_X01(enb_dly_sampled) = '1' and TO_X01(web_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(enb_dly_sampled)    = '1' and
                           TO_X01(web_dly_sampled(0)) = '1' and
                           TO_X01(web_dly_sampled(1)) = '1' and
                           TO_X01(web_dly_sampled(2)) = '1' and
                           TO_X01(web_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIB26_CLKB_posedge,
        TimingData     => Tmkr_DIB26_CLKB_posedge,
        TestSignal     => DIB_dly(26),
        TestSignalName => "DIB(26)",
        TestDelay      => tisd_DIB_CLKB(26),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_DIB_CLKB_posedge_posedge(26),
        SetupLow       => tsetup_DIB_CLKB_negedge_posedge(26),
        HoldLow        => thold_DIB_CLKB_negedge_posedge(26),
        HoldHigh       => thold_DIB_CLKB_posedge_posedge(26),
--        CheckEnabled   => (TO_X01(enb_dly_sampled) = '1' and TO_X01(web_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(enb_dly_sampled)    = '1' and
                           TO_X01(web_dly_sampled(0)) = '1' and
                           TO_X01(web_dly_sampled(1)) = '1' and
                           TO_X01(web_dly_sampled(2)) = '1' and
                           TO_X01(web_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIB27_CLKB_posedge,
        TimingData     => Tmkr_DIB27_CLKB_posedge,
        TestSignal     => DIB_dly(27),
        TestSignalName => "DIB(27)",
        TestDelay      => tisd_DIB_CLKB(27),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_DIB_CLKB_posedge_posedge(27),
        SetupLow       => tsetup_DIB_CLKB_negedge_posedge(27),
        HoldLow        => thold_DIB_CLKB_negedge_posedge(27),
        HoldHigh       => thold_DIB_CLKB_posedge_posedge(27),
--        CheckEnabled   => (TO_X01(enb_dly_sampled) = '1' and TO_X01(web_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(enb_dly_sampled)    = '1' and
                           TO_X01(web_dly_sampled(0)) = '1' and
                           TO_X01(web_dly_sampled(1)) = '1' and
                           TO_X01(web_dly_sampled(2)) = '1' and
                           TO_X01(web_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIB28_CLKB_posedge,
        TimingData     => Tmkr_DIB28_CLKB_posedge,
        TestSignal     => DIB_dly(28),
        TestSignalName => "DIB(28)",
        TestDelay      => tisd_DIB_CLKB(28),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_DIB_CLKB_posedge_posedge(28),
        SetupLow       => tsetup_DIB_CLKB_negedge_posedge(28),
        HoldLow        => thold_DIB_CLKB_negedge_posedge(28),
        HoldHigh       => thold_DIB_CLKB_posedge_posedge(28),
--        CheckEnabled   => (TO_X01(enb_dly_sampled) = '1' and TO_X01(web_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(enb_dly_sampled)    = '1' and
                           TO_X01(web_dly_sampled(0)) = '1' and
                           TO_X01(web_dly_sampled(1)) = '1' and
                           TO_X01(web_dly_sampled(2)) = '1' and
                           TO_X01(web_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIB29_CLKB_posedge,
        TimingData     => Tmkr_DIB29_CLKB_posedge,
        TestSignal     => DIB_dly(29),
        TestSignalName => "DIB(29)",
        TestDelay      => tisd_DIB_CLKB(29),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_DIB_CLKB_posedge_posedge(29),
        SetupLow       => tsetup_DIB_CLKB_negedge_posedge(29),
        HoldLow        => thold_DIB_CLKB_negedge_posedge(29),
        HoldHigh       => thold_DIB_CLKB_posedge_posedge(29),
--        CheckEnabled   => (TO_X01(enb_dly_sampled) = '1' and TO_X01(web_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(enb_dly_sampled)    = '1' and
                           TO_X01(web_dly_sampled(0)) = '1' and
                           TO_X01(web_dly_sampled(1)) = '1' and
                           TO_X01(web_dly_sampled(2)) = '1' and
                           TO_X01(web_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIB30_CLKB_posedge,
        TimingData     => Tmkr_DIB30_CLKB_posedge,
        TestSignal     => DIB_dly(30),
        TestSignalName => "DIB(30)",
        TestDelay      => tisd_DIB_CLKB(30),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_DIB_CLKB_posedge_posedge(30),
        SetupLow       => tsetup_DIB_CLKB_negedge_posedge(30),
        HoldLow        => thold_DIB_CLKB_negedge_posedge(30),
        HoldHigh       => thold_DIB_CLKB_posedge_posedge(30),
--        CheckEnabled   => (TO_X01(enb_dly_sampled) = '1' and TO_X01(web_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(enb_dly_sampled)    = '1' and
                           TO_X01(web_dly_sampled(0)) = '1' and
                           TO_X01(web_dly_sampled(1)) = '1' and
                           TO_X01(web_dly_sampled(2)) = '1' and
                           TO_X01(web_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalSetupHoldCheck (
        Violation      => Tviol_DIB31_CLKB_posedge,
        TimingData     => Tmkr_DIB31_CLKB_posedge,
        TestSignal     => DIB_dly(31),
        TestSignalName => "DIB(31)",
        TestDelay      => tisd_DIB_CLKB(31),
        RefSignal      => CLKB_dly,
        RefSignalName  => "CLKB",
        RefDelay       => ticd_CLKB,
        SetupHigh      => tsetup_DIB_CLKB_posedge_posedge(31),
        SetupLow       => tsetup_DIB_CLKB_negedge_posedge(31),
        HoldLow        => thold_DIB_CLKB_negedge_posedge(31),
        HoldHigh       => thold_DIB_CLKB_posedge_posedge(31),
--        CheckEnabled   => (TO_X01(enb_dly_sampled) = '1' and TO_X01(web_dly_sampled) = '1'),
        CheckEnabled   => (TO_X01(enb_dly_sampled)    = '1' and
                           TO_X01(web_dly_sampled(0)) = '1' and
                           TO_X01(web_dly_sampled(1)) = '1' and
                           TO_X01(web_dly_sampled(2)) = '1' and
                           TO_X01(web_dly_sampled(3)) = '1'
                           ),
        RefTransition  => 'R',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalPeriodPulseCheck (
        Violation      => Pviol_CLKA,
        PeriodData     => PInfo_CLKA,
        TestSignal     => CLKA_dly,
        TestSignalName => "CLKA",
        TestDelay      => 0 ps,
        Period         => tperiod_clka_posedge,
        PulseWidthHigh => tpw_CLKA_posedge,
        PulseWidthLow  => tpw_CLKA_negedge,
        CheckEnabled   => TO_X01(ena_dly_sampled) = '1',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalPeriodPulseCheck (
        Violation      => Pviol_CLKB,
        PeriodData     => PInfo_CLKB,
        TestSignal     => CLKB_dly,
        TestSignalName => "CLKB",
        TestDelay      => 0 ps,
        Period         => tperiod_clkb_posedge,
        PulseWidthHigh => tpw_CLKB_posedge,
        PulseWidthLow  => tpw_CLKB_negedge,
        CheckEnabled   => TO_X01(enb_dly_sampled) = '1',
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => MsgOn,
        MsgSeverity    => warning);
      VitalPeriodPulseCheck (
        Violation      => Pviol_GSR,
        PeriodData     => PInfo_GSR,
        TestSignal     => GSR_ipd,
        TestSignalName => "GSR",
        TestDelay      => 0 ps,
        Period         => 0 ps,
        PulseWidthHigh => tpw_GSR_posedge,
        PulseWidthLow  => 0 ps,
        CheckEnabled   => true,
        HeaderMsg      => "/X_RAMB16BWER",
        Xon            => Xon,
        MsgOn          => true,
        MsgSeverity    => warning);
    end if;
    ViolationA          :=
      Tviol_ADDRA0_CLKA_posedge or
      Tviol_ADDRA1_CLKA_posedge or
      Tviol_ADDRA2_CLKA_posedge or
      Tviol_ADDRA3_CLKA_posedge or
      Tviol_ADDRA4_CLKA_posedge or
      Tviol_ADDRA5_CLKA_posedge or
      Tviol_ADDRA6_CLKA_posedge or
      Tviol_ADDRA7_CLKA_posedge or
      Tviol_ADDRA8_CLKA_posedge or
      Tviol_DIA0_CLKA_posedge or
      Tviol_DIA1_CLKA_posedge or
      Tviol_DIA2_CLKA_posedge or
      Tviol_DIA3_CLKA_posedge or
      Tviol_DIA4_CLKA_posedge or
      Tviol_DIA5_CLKA_posedge or
      Tviol_DIA6_CLKA_posedge or
      Tviol_DIA7_CLKA_posedge or
      Tviol_DIA8_CLKA_posedge or
      Tviol_DIA9_CLKA_posedge or
      Tviol_DIA10_CLKA_posedge or
      Tviol_DIA11_CLKA_posedge or
      Tviol_DIA12_CLKA_posedge or
      Tviol_DIA13_CLKA_posedge or
      Tviol_DIA14_CLKA_posedge or
      Tviol_DIA15_CLKA_posedge or
      Tviol_DIA16_CLKA_posedge or
      Tviol_DIA17_CLKA_posedge or
      Tviol_DIA18_CLKA_posedge or
      Tviol_DIA19_CLKA_posedge or
      Tviol_DIA20_CLKA_posedge or
      Tviol_DIA21_CLKA_posedge or
      Tviol_DIA22_CLKA_posedge or
      Tviol_DIA23_CLKA_posedge or
      Tviol_DIA24_CLKA_posedge or
      Tviol_DIA25_CLKA_posedge or
      Tviol_DIA26_CLKA_posedge or
      Tviol_DIA27_CLKA_posedge or
      Tviol_DIA28_CLKA_posedge or
      Tviol_DIA29_CLKA_posedge or
      Tviol_DIA30_CLKA_posedge or
      Tviol_DIA31_CLKA_posedge or
      Tviol_DIPA0_CLKA_posedge or
      Tviol_DIPA1_CLKA_posedge or
      Tviol_DIPA2_CLKA_posedge or
      Tviol_DIPA3_CLKA_posedge or
      Tviol_ENA_CLKA_posedge or
      Tviol_REGCEA_CLKA_posedge or
      Tviol_RSTA_CLKA_posedge or
      Tviol_WEA0_CLKA_posedge or
      Tviol_WEA1_CLKA_posedge or
      Tviol_WEA2_CLKA_posedge or
      Tviol_WEA3_CLKA_posedge or
      Pviol_CLKA or Pviol_RSTA ;
    ViolationB          :=
      Tviol_ADDRB0_CLKB_posedge or
      Tviol_ADDRB1_CLKB_posedge or
      Tviol_ADDRB2_CLKB_posedge or
      Tviol_ADDRB3_CLKB_posedge or
      Tviol_ADDRB4_CLKB_posedge or
      Tviol_ADDRB5_CLKB_posedge or
      Tviol_ADDRB6_CLKB_posedge or
      Tviol_ADDRB7_CLKB_posedge or
      Tviol_ADDRB8_CLKB_posedge or
      Tviol_DIB0_CLKB_posedge or
      Tviol_DIB1_CLKB_posedge or
      Tviol_DIB2_CLKB_posedge or
      Tviol_DIB3_CLKB_posedge or
      Tviol_DIB4_CLKB_posedge or
      Tviol_DIB5_CLKB_posedge or
      Tviol_DIB6_CLKB_posedge or
      Tviol_DIB7_CLKB_posedge or
      Tviol_DIB8_CLKB_posedge or
      Tviol_DIB9_CLKB_posedge or
      Tviol_DIB10_CLKB_posedge or
      Tviol_DIB11_CLKB_posedge or
      Tviol_DIB12_CLKB_posedge or
      Tviol_DIB13_CLKB_posedge or
      Tviol_DIB14_CLKB_posedge or
      Tviol_DIB15_CLKB_posedge or
      Tviol_DIB16_CLKB_posedge or
      Tviol_DIB17_CLKB_posedge or
      Tviol_DIB18_CLKB_posedge or
      Tviol_DIB19_CLKB_posedge or
      Tviol_DIB20_CLKB_posedge or
      Tviol_DIB21_CLKB_posedge or
      Tviol_DIB22_CLKB_posedge or
      Tviol_DIB23_CLKB_posedge or
      Tviol_DIB24_CLKB_posedge or
      Tviol_DIB25_CLKB_posedge or
      Tviol_DIB26_CLKB_posedge or
      Tviol_DIB27_CLKB_posedge or
      Tviol_DIB28_CLKB_posedge or
      Tviol_DIB29_CLKB_posedge or
      Tviol_DIB30_CLKB_posedge or
      Tviol_DIB31_CLKB_posedge or
      Tviol_DIPB0_CLKB_posedge or
      Tviol_DIPB1_CLKB_posedge or
      Tviol_DIPB2_CLKB_posedge or
      Tviol_DIPB3_CLKB_posedge or
      Tviol_ENB_CLKB_posedge or
      Tviol_REGCEB_CLKB_posedge or
      Tviol_RSTB_CLKB_posedge or
      Tviol_WEB0_CLKB_posedge or
      Tviol_WEB1_CLKB_posedge or
      Tviol_WEB2_CLKB_posedge or
      Tviol_WEB3_CLKB_posedge or
      Pviol_CLKB or Pviol_RSTB ;


--------------------------------    A    ----------------------------------------
        tmp_zero_write_a  := (addra_dly_sampled(13 downto 0) and zero_write_a);
        ADDRESS_WRITE_A := SLV_TO_INT(tmp_zero_write_a);

        tmp_zero_read_a  := (addra_dly_sampled(13 downto 0) and zero_read_a);
        ADDRESS_READ_A  := SLV_TO_INT(tmp_zero_read_a);

        tmp_zero_parity_write_a(10 downto 0) := addra_dly_sampled( 13 downto 3) and zero_parity_write_a;
        ADDRESS_PARITY_WRITE_A := SLV_TO_INT(tmp_zero_parity_write_a);

        tmp_zero_parity_read_a(10 downto 0) := addra_dly_sampled( 13 downto 3) and zero_parity_read_a;
        ADDRESS_PARITY_READ_A := SLV_TO_INT(tmp_zero_parity_read_a);
--------------------------------    B    ----------------------------------------
        tmp_zero_write_b  := (addrb_dly_sampled(13 downto 0) and zero_write_b);
        ADDRESS_WRITE_B := SLV_TO_INT(tmp_zero_write_b);

        tmp_zero_read_b  := (addrb_dly_sampled(13 downto 0) and zero_read_b);
        ADDRESS_READ_B  := SLV_TO_INT(tmp_zero_read_b);

        tmp_zero_parity_write_b(10 downto 0) := addrb_dly_sampled( 13 downto 3) and zero_parity_write_b;
        ADDRESS_PARITY_WRITE_B := SLV_TO_INT(tmp_zero_parity_write_b);

        tmp_zero_parity_read_b(10 downto 0) := addrb_dly_sampled( 13 downto 3) and zero_parity_read_b;
        ADDRESS_PARITY_READ_B := SLV_TO_INT(tmp_zero_parity_read_b);


--    VALID_ADDRA           := ADDR_IS_VALID(addra_dly_sampled);
--    if (VALID_ADDRA) then
--    end if;

--    VALID_ADDRB           := ADDR_IS_VALID(addrb_dly_sampled);
--    if (VALID_ADDRB) then
--    end if;

--  DOA_INDEX /  DOPA_INDEX

    if(DIAW <= DOAW) then
       case DIAW is
          when 1 =>
             case DOAW is
                when 1  => DOA_INDEX := 0;
                when 2  => DOA_INDEX := SLV_TO_INT(tmp_zero_write_a(0 downto 0));
                when 4  => DOA_INDEX := SLV_TO_INT(tmp_zero_write_a(1 downto 0));
                when 8  => DOA_INDEX := SLV_TO_INT(tmp_zero_write_a(2 downto 0));
                when 16 => DOA_INDEX := SLV_TO_INT(tmp_zero_write_a(3 downto 0));
                when 32 => DOA_INDEX := SLV_TO_INT(tmp_zero_write_a(4 downto 0));
                when others => null;
             end case;

          when 2 =>
             case DOAW is
                when 2  => DOA_INDEX := 0;
                when 4  => DOA_INDEX := SLV_TO_INT(tmp_zero_write_a(1 downto 1));
                when 8  => DOA_INDEX := SLV_TO_INT(tmp_zero_write_a(2 downto 1));
                when 16 => DOA_INDEX := SLV_TO_INT(tmp_zero_write_a(3 downto 1));
                when 32 => DOA_INDEX := SLV_TO_INT(tmp_zero_write_a(4 downto 1));
                when others => null;
             end case;

          when 4 =>
             case DOAW is
                when 4  => DOA_INDEX := 0;
                when 8  => DOA_INDEX := SLV_TO_INT(tmp_zero_write_a(2 downto 2));
                when 16 => DOA_INDEX := SLV_TO_INT(tmp_zero_write_a(3 downto 2));
                when 32 => DOA_INDEX := SLV_TO_INT(tmp_zero_write_a(4 downto 2));
                when others => null;
             end case;

          when 8 =>
             case DOAW is
                when 8  => DOA_INDEX := 0;
                           DOPA_INDEX := 0;
                when 16 => DOA_INDEX := SLV_TO_INT(tmp_zero_write_a(3 downto 3));
                           DOPA_INDEX := SLV_TO_INT(tmp_zero_parity_write_a(0 downto 0));
                when 32 => DOA_INDEX := SLV_TO_INT(tmp_zero_write_a(4 downto 3));
                           DOPA_INDEX := SLV_TO_INT(tmp_zero_parity_write_a(1 downto 0));
                when others => null;
             end case;

          when 16 =>
             case DOAW is
                when 16 => DOA_INDEX := 0;
                           DOPA_INDEX := 0;
                when 32 => DOA_INDEX := SLV_TO_INT(tmp_zero_write_a(4 downto 4));
                           DOPA_INDEX := SLV_TO_INT(tmp_zero_parity_write_a(1 downto 1));
                when others => null;
             end case;

          when 32 =>
             case DOAW is
                when 32 => DOA_INDEX := 0;
                           DOPA_INDEX := 0;
                when others => null;
             end case;
       
          when others => null;
       end case;

    elsif(DIAW > DOAW) then
       case DOAW is
          when 1 =>
             case DIAW is
                when 2  => DOA_INDEX := SLV_TO_INT(tmp_zero_read_a(0 downto 0));
                when 4  => DOA_INDEX := SLV_TO_INT(tmp_zero_read_a(1 downto 0));
                when 8  => DOA_INDEX := SLV_TO_INT(tmp_zero_read_a(2 downto 0));
                when 16 => DOA_INDEX := SLV_TO_INT(tmp_zero_read_a(3 downto 0));
                when 32 => DOA_INDEX := SLV_TO_INT(tmp_zero_read_a(4 downto 0));
                when others => null;
             end case;
          when 2 =>
             case DIAW is
                when 4  => DOA_INDEX := SLV_TO_INT(tmp_zero_read_a(1 downto 1));
                when 8  => DOA_INDEX := SLV_TO_INT(tmp_zero_read_a(2 downto 1));
                when 16 => DOA_INDEX := SLV_TO_INT(tmp_zero_read_a(3 downto 1));
                when 32 => DOA_INDEX := SLV_TO_INT(tmp_zero_read_a(4 downto 1));
                when others => null;
             end case;

          when 4 =>
             case DIAW is
                when 8  => DOA_INDEX := SLV_TO_INT(tmp_zero_read_a(2 downto 2));
                when 16 => DOA_INDEX := SLV_TO_INT(tmp_zero_read_a(3 downto 2));
                when 32 => DOA_INDEX := SLV_TO_INT(tmp_zero_read_a(4 downto 2));
                when others => null;
             end case;
          when 8 =>
             case DIAW is
                when 16 => DOA_INDEX := SLV_TO_INT(tmp_zero_read_a(3 downto 3));
                           DOPA_INDEX := SLV_TO_INT(tmp_zero_parity_read_a(0 downto 0));
                when 32 => DOA_INDEX := SLV_TO_INT(tmp_zero_read_a(4 downto 3));
                           DOPA_INDEX := SLV_TO_INT(tmp_zero_parity_read_a(1 downto 0));
                when others => null;
             end case;

          when 16 =>
             case DIAW is
                when 32 => DOA_INDEX := SLV_TO_INT(tmp_zero_read_a(4 downto 4));
                           DOPA_INDEX := SLV_TO_INT(tmp_zero_parity_read_a(1 downto 1));
                when others => null;
             end case;

          when others => null;
       end case;
    end if;

--  DOB_INDEX /  DOPB_INDEX

    if(DIBW <= DOBW) then
       case DIBW is
          when 1 =>
             case DOBW is
                when 1  => DOB_INDEX := 0;
                when 2  => DOB_INDEX := SLV_TO_INT(tmp_zero_write_b(0 downto 0));
                when 4  => DOB_INDEX := SLV_TO_INT(tmp_zero_write_b(1 downto 0));
                when 8  => DOB_INDEX := SLV_TO_INT(tmp_zero_write_b(2 downto 0));
                when 16 => DOB_INDEX := SLV_TO_INT(tmp_zero_write_b(3 downto 0));
                when 32 => DOB_INDEX := SLV_TO_INT(tmp_zero_write_b(4 downto 0));
                when others => null;
             end case;

          when 2 =>
             case DOBW is
                when 2  => DOB_INDEX := 0;
                when 4  => DOB_INDEX := SLV_TO_INT(tmp_zero_write_b(1 downto 1));
                when 8  => DOB_INDEX := SLV_TO_INT(tmp_zero_write_b(2 downto 1));
                when 16 => DOB_INDEX := SLV_TO_INT(tmp_zero_write_b(3 downto 1));
                when 32 => DOB_INDEX := SLV_TO_INT(tmp_zero_write_b(4 downto 1));
                when others => null;
             end case;

          when 4 =>
             case DOBW is
                when 4  => DOB_INDEX := 0;
                when 8  => DOB_INDEX := SLV_TO_INT(tmp_zero_write_b(2 downto 2));
                when 16 => DOB_INDEX := SLV_TO_INT(tmp_zero_write_b(3 downto 2));
                when 32 => DOB_INDEX := SLV_TO_INT(tmp_zero_write_b(4 downto 2));
                when others => null;
             end case;

          when 8 =>
             case DOBW is
                when 8  => DOB_INDEX := 0;
                           DOPB_INDEX := 0;
                when 16 => DOB_INDEX := SLV_TO_INT(tmp_zero_write_b(3 downto 3));
                           DOPB_INDEX := SLV_TO_INT(tmp_zero_parity_write_b(0 downto 0));
                when 32 => DOB_INDEX := SLV_TO_INT(tmp_zero_write_b(4 downto 3));
                           DOPB_INDEX := SLV_TO_INT(tmp_zero_parity_write_b(1 downto 0));
                when others => null;
             end case;

          when 16 =>
             case DOBW is
                when 16 => DOB_INDEX := 0;
                           DOPB_INDEX := 0;
                when 32 => DOB_INDEX := SLV_TO_INT(tmp_zero_write_b(4 downto 4));
                           DOPB_INDEX := SLV_TO_INT(tmp_zero_parity_write_b(1 downto 1));
                when others => null;
             end case;

          when 32 =>
             case DOBW is
                when 32 => DOB_INDEX := 0;
                           DOPB_INDEX := 0;
                when others => null;
             end case;
       
          when others => null;
       end case;

    elsif(DIBW > DOBW) then
       case DOBW is
          when 1 =>
             case DIBW is
                when 2  => DOB_INDEX := SLV_TO_INT(tmp_zero_read_b(0 downto 0));
                when 4  => DOB_INDEX := SLV_TO_INT(tmp_zero_read_b(1 downto 0));
                when 8  => DOB_INDEX := SLV_TO_INT(tmp_zero_read_b(2 downto 0));
                when 16 => DOB_INDEX := SLV_TO_INT(tmp_zero_read_b(3 downto 0));
                when 32 => DOB_INDEX := SLV_TO_INT(tmp_zero_read_b(4 downto 0));
                when others => null;
             end case;
          when 2 =>
             case DIBW is
                when 4  => DOB_INDEX := SLV_TO_INT(tmp_zero_read_b(1 downto 1));
                when 8  => DOB_INDEX := SLV_TO_INT(tmp_zero_read_b(2 downto 1));
                when 16 => DOB_INDEX := SLV_TO_INT(tmp_zero_read_b(3 downto 1));
                when 32 => DOB_INDEX := SLV_TO_INT(tmp_zero_read_b(4 downto 1));
                when others => null;
             end case;

          when 4 =>
             case DIBW is
                when 8  => DOB_INDEX := SLV_TO_INT(tmp_zero_read_b(2 downto 2));
                when 16 => DOB_INDEX := SLV_TO_INT(tmp_zero_read_b(3 downto 2));
                when 32 => DOB_INDEX := SLV_TO_INT(tmp_zero_read_b(4 downto 2));
                when others => null;
             end case;
          when 8 =>
             case DIBW is
                when 16 => DOB_INDEX := SLV_TO_INT(tmp_zero_read_b(3 downto 3));
                           DOPB_INDEX := SLV_TO_INT(tmp_zero_parity_read_b(0 downto 0));
                when 32 => DOB_INDEX := SLV_TO_INT(tmp_zero_read_b(4 downto 3));
                           DOPB_INDEX := SLV_TO_INT(tmp_zero_parity_read_b(1 downto 0));
                when others => null;
             end case;

          when 16 =>
             case DIBW is
                when 32 => DOB_INDEX := SLV_TO_INT(tmp_zero_read_b(4 downto 4));
                           DOPB_INDEX := SLV_TO_INT(tmp_zero_parity_read_b(1 downto 1));
                when others => null;
             end case;

          when others => null;
       end case;
    end if;


----- ######################################################################################################

        if(rising_edge(CLKA_dly)) then
           CLKA_time := now;
        end if;

        if(rising_edge(CLKB_dly)) then
           CLKB_time := now;
        end if;


----- ######################################################################################################
------------------------------------------------------------------------                       
------------ Port A ----------------------------------------------------
------------------------------------------------------------------------                       
    if(GSR_CLKA_dly = '1') then
       DOA_zd(DOAW_1 downto 0) := INI_A(DOAW_1 downto 0);
       if(DOPAW_1 /= -1) then
         DOPA_zd(DOPAW_1 downto 0) := INI_A((DOPAW_1 + DOAW) downto DOAW);
       end if;

-- CR 422403
    elsif((RSTA_dly = '1') and (rst_async_flag = '1') and (ena_dly_sampled = '1')) then
       DOA_zd(DOAW_1 downto 0) := SRVA_A(DOAW_1 downto 0);
       DOA_clsn_zero := (others => '0');
       DOA_clsn := (others => '0');
       if(DOPAW_1 /= -1) then
          DOPA_zd(DOPAW_1 downto 0) := SRVA_A((DOPAW_1 + DOAW) downto DOAW);
          DOPA_clsn_zero := (others => '0');
          DOPA_clsn := (others => '0');
       end if;
    elsif(CLKA_dly'event AND CLKA_dly'last_value = '0') then

        if (ena_dly_sampled = '1') then
            if (RSTA_dly_sampled = '1') then
                   DOA_zd(DOAW_1 downto 0) := SRVA_A(DOAW_1 downto 0);
                   DOA_clsn_zero := (others => '0');
                   DOA_clsn := (others => '0');
                   if(DOPAW_1 /= -1) then
                      DOPA_zd(DOPAW_1 downto 0) := SRVA_A((DOPAW_1 + DOAW) downto DOAW);
                      DOPA_clsn_zero := (others => '0');
                      DOPA_clsn := (others => '0');
                   end if;
            else
-----------------------  Start COLLISION A ------------------------------

        if(SimCollisionCheck_var /= 0) then
           DOA_clsn_sav          := DOA_clsn;
           DOPA_clsn_sav         := DOPA_clsn;

           DOA_clsn              := (others => '0');
           DOPA_clsn             := (others => '0');
           clsn_xbufs.DO1_clsn   := (others => '0');
           clsn_xbufs.DOP1_clsn  := (others => '0');
           clsn_xbufs.MEM1_clsn  := (others => '0');
           clsn_xbufs.MEMP1_clsn := (others => '0');

           clsn_xbufs.DO2_clsn   := (others => '0');
           clsn_xbufs.DOP2_clsn  := (others => '0');
           clsn_xbufs.MEM2_clsn  := (others => '0');
           clsn_xbufs.MEMP2_clsn := (others => '0');
        
           clsn_type.active_port := 1;
           addr_overlap := false;
           clsn_type.read_write  := false;
           clsn_type.write_read  := false;
           clsn_type.write_write := false;

--           CLKA_time := now;

           ClkCollisionCheck(
              violation => collision_clka_clkb,
              CheckEnabled => ((TO_X01(ena_dly_sampled) = '1') and (TO_X01(enb_dly_sampled) = '1')), 
              CLK1_time => CLKA_time,
              CLK2_time => CLKB_time,
              SETUP_All => SETUP_ALL,
              SETUP_READ_FIRST => SETUP_READ_FIRST
           );

           if(collision_clka_clkb /= 0) then
              QkAddrOverlapChk(
                addr_overlap => addr_overlap,
                data_widths  => data_widths,
                addra        => addra_dly_sampled,
                addrb        => addrb_dly_sampled
              );
           end if;
        
           if(addr_overlap) then
              PreProcessWe1We2(
                clsn_bufs     => clsn_xbufs,
                clsn_type     => clsn_type,
                memory        => MEM,
                di1           => dia_dly,
                di2           => dib_dly,
                dip1          => dipa_dly,
                dip2          => dipb_dly,
                addr1         => addra_dly_sampled,
                addr2         => addrb_dly_sampled,
                we1           => wea_dly_sampled,
                we2           => web_dly_sampled,
                zero_read_1   => zero_read_a,
                zero_readp_1  => zero_parity_read_a,
                zero_write_1  => zero_write_a,
                zero_writep_1 => zero_parity_write_a,
                zero_read_2   => zero_read_b,
                zero_readp_2  => zero_parity_read_b,
                zero_write_2  => zero_write_b,
                zero_writep_2 => zero_parity_write_b,
                wr_mode_1     => wr_mode_a,
                wr_mode_2     => wr_mode_b,
                violation     => collision_clka_clkb,
                DI1W          => DIAW,
                DIP1W         => DIPAW,
                DI2W          => DIBW,
                DIP2W         => DIPBW,
                DO1W          => DOAW,
                DOP1W         => DOPAW,
                DO2W          => DOBW,
                DOP2W         => DOPBW
              );
           end if;
           
           if(clsn_type.read_write or clsn_type.write_write or clsn_type.write_read) then
               
              if(clsn_type.write_write) then
                  collision_msg := Write_A_Write_B; 
                  msg_addr1 := tmp_zero_write_a; 
                  msg_addr2 := tmp_zero_write_b; 
              elsif(clsn_type.read_write) then
                  collision_msg :=  Read_A_Write_B; 
                  msg_addr1 := tmp_zero_read_a; 
                  msg_addr2 := tmp_zero_write_b; 
              elsif(clsn_type.write_read) then
                  collision_msg :=  Write_A_Read_B; 
--                  msg_addr1 := tmp_zero_write_a; 
--                  msg_addr2 := tmp_zero_read_b; 
                  msg_addr1 := tmp_zero_read_b;
                  msg_addr2 := tmp_zero_write_a;
              end if;

              if(SimCollisionCheck_var = 1) then
                 --- Message 
                 Memory_Collision_Msg_ramb16
                 (  collision_type => collision_msg,
                   EntityName => "X_RAMB16BWER",
                   InstanceName => X_RAMB16BWER'path_name,
                   address_1 => msg_addr1,
                   address_2 => msg_addr2
                 );

              DOA_clsn  := (others => '0');
              DOPA_clsn := (others => '0');
              DOA_clsn_sav  := DOA_clsn;
              DOPA_clsn_sav := DOPA_clsn;

              elsif(SimCollisionCheck_var = 2) then

                 DOA_clsn_read_index  := SLV_TO_INT(tmp_zero_read_a(4 downto 0));
                 DOB_clsn_read_index := SLV_TO_INT(tmp_zero_read_b(4 downto 0));
                 DOA_clsn(DOAW_1 downto 0) := clsn_xbufs.DO1_clsn((DOA_clsn_read_index+DOAW_1) downto DOA_clsn_read_index);
                 DOB_clsn(DOBW_1 downto 0) := clsn_xbufs.DO2_clsn((DOB_clsn_read_index+DOBW_1) downto DOB_clsn_read_index);
                 if(DOPAW_1 /= -1) then
                    DOPA_clsn_read_index := SLV_TO_INT(tmp_zero_parity_read_a(1 downto 0));
                    DOPA_clsn(DOPAW_1 downto 0) := clsn_xbufs.DOP1_clsn((DOPA_clsn_read_index+DOPAW_1) downto DOPA_clsn_read_index);
                 end if;

                 if(DOPBW_1 /= -1) then
                    DOPB_clsn_read_index := SLV_TO_INT(tmp_zero_parity_read_b(1 downto 0));
                    DOPB_clsn(DOPBW_1 downto 0) := clsn_xbufs.DOP2_clsn((DOPB_clsn_read_index+DOPBW_1) downto DOPB_clsn_read_index);
                 end if;

                 if(wr_mode_a = "10") then
                    DOA_clsn(DOAW_1 downto 0) := DOA_clsn(DOAW_1 downto 0) xor DOA_clsn_sav(DOAW_1 downto 0);
                    if(DOPAW_1 /= -1) then
                       DOPA_clsn(DOPAW_1 downto 0) := DOPA_clsn(DOPAW_1 downto 0) xor DOPA_clsn_sav(DOPAW_1 downto 0);
                    end if;
                 end if;

                 if(wr_mode_b = "10") then
                    DOB_clsn(DOBW_1 downto 0) := DOB_clsn(DOBW_1 downto 0) xor DOB_clsn_sav(DOBW_1 downto 0);
                    if(DOPBW_1 /= -1) then
                       DOPB_clsn(DOPBW_1 downto 0) := DOPB_clsn(DOPBW_1 downto 0) xor DOPB_clsn_sav(DOPBW_1 downto 0);
                    end if;
                 end if;

              elsif(SimCollisionCheck_var = 3) then
                 --- Message 
                 Memory_Collision_Msg_ramb16
                 (  collision_type => collision_msg,
                   EntityName => "X_RAMB16BWER",
                   InstanceName => X_RAMB16BWER'path_name,
                   address_1 => msg_addr1,
                   address_2 => msg_addr2
                 );

                 DOA_clsn_read_index := SLV_TO_INT(tmp_zero_read_a(4 downto 0));
                 DOB_clsn_read_index := SLV_TO_INT(tmp_zero_read_b(4 downto 0));
                 DOA_clsn(DOAW_1 downto 0) := clsn_xbufs.DO1_clsn((DOA_clsn_read_index+DOAW_1) downto DOA_clsn_read_index);
                 DOB_clsn(DOBW_1 downto 0) := clsn_xbufs.DO2_clsn((DOB_clsn_read_index+DOBW_1) downto DOB_clsn_read_index);
                 if(DOPAW_1 /= -1) then
                    DOPA_clsn_read_index := SLV_TO_INT(tmp_zero_parity_read_a(1 downto 0));
                    DOPA_clsn(DOPAW_1 downto 0) := clsn_xbufs.DOP1_clsn((DOPA_clsn_read_index+DOPAW_1) downto DOPA_clsn_read_index);
                 end if;

                 if(DOPBW_1 /= -1) then
                    DOPB_clsn_read_index := SLV_TO_INT(tmp_zero_parity_read_b(1 downto 0));
                    DOPB_clsn(DOPBW_1 downto 0) := clsn_xbufs.DOP2_clsn((DOPB_clsn_read_index+DOPBW_1) downto DOPB_clsn_read_index);
                 end if;

                 if(wr_mode_a = "10") then
                    DOA_clsn(DOAW_1 downto 0) := DOA_clsn(DOAW_1 downto 0) xor DOA_clsn_sav(DOAW_1 downto 0);
                    if(DOPAW_1 /= -1) then
                       DOPA_clsn(DOPAW_1 downto 0) := DOPA_clsn(DOPAW_1 downto 0) xor DOPA_clsn_sav(DOPAW_1 downto 0);
                    end if;
                 end if;

                 if(wr_mode_b = "10") then
                    DOB_clsn(DOBW_1 downto 0) := DOB_clsn(DOBW_1 downto 0) xor DOB_clsn_sav(DOBW_1 downto 0);
                    if(DOPBW_1 /= -1) then
                       DOPB_clsn(DOPBW_1 downto 0) := DOPB_clsn(DOPBW_1 downto 0) xor DOPB_clsn_sav(DOPBW_1 downto 0);
                    end if;
                 end if;


              end if;

           end if;

           DOA_clsn_zero  := DOA_clsn;
           DOPA_clsn_zero := DOPA_clsn;
           if(RSTB_dly_sampled = '0') then
              DOB_clsn_zero  := DOB_clsn;
              DOPB_clsn_zero := DOPB_clsn;
           end if;

        end if;

----------------  END COLLISION A ------------------------------
            if  (wr_mode_a = "00") then

               case DIAW is
               ---------
               when 1|2|4|8 =>
               ---------
                  tmp_we(1 downto 0) := addra_dly_sampled( 4 downto 3);
                  wea_index := SLV_TO_INT(tmp_we);
                  if(wea_dly_sampled(wea_index) = '1') then
                     if(DOAW > DIAW) then
                        DOA_zd_buf(DOAW_1 downto 0) := MEM((ADDRESS_READ_A + DOAW_1) downto  ADDRESS_READ_A);
                        DOA_zd_buf(((DOA_INDEX *DIAW) + DIAW_1) downto (DOA_INDEX *DIAW)) := DIA_dly(DIAW_1 downto 0);
                        DOA_zd(DOAW_1 downto 0) := DOA_zd_buf(DOAW_1 downto 0);
                              
                        if(DOPAW_1 /= -1) then
                          DOPA_zd_buf(DOPAW_1 downto 0) := MEM((16384 + ADDRESS_PARITY_READ_A + DOPAW_1) downto  (16384 + ADDRESS_PARITY_READ_A));
                          DOPA_zd_buf(((DOPA_INDEX *DIPAW) + DIPAW_1) downto (DOPA_INDEX *DIPAW)) := DIPA_dly(DIPAW_1 downto 0);
                          DOPA_zd(DOPAW_1 downto 0) := DOPA_zd_buf(DOPAW_1 downto 0);
                        end if;
                     elsif(DOAW <= DIAW) then
--FP                        DOA_zd(DOAW_1 downto 0)   := DIA_dly(DOAW_1 downto 0);
                        DOA_zd(DOAW_1 downto 0)   := DIA_dly((((DOA_INDEX)*DOAW)+ DOAW_1) downto ((DOA_INDEX)*DOAW));
                        if(DOPAW_1 /= -1) then
                           DOPA_zd(DOPAW_1 downto 0)   := DIPA_dly(DOPAW_1 downto 0);
                        end if;
                     end if;
                  elsif(wea_dly_sampled(wea_index) = '0') then
                     DOA_zd(DOAW_1 downto 0) := MEM((ADDRESS_READ_A + DOAW_1) downto (ADDRESS_READ_A));
                     if(DOPAW_1 /= -1) then
                        DOPA_zd(DOPAW_1 downto 0) := MEM((16384 + ADDRESS_PARITY_READ_A + DOPAW_1) downto (16384 + ADDRESS_PARITY_READ_A));
                     end if;
                  end if;
                     
               ---------
               when 16 =>
               ---------
                  if(DOAW > DIAW) then
                     DOA_zd_buf(DOAW_1 downto 0) := MEM((ADDRESS_READ_A + DOAW_1) downto  ADDRESS_READ_A);
                     DOPA_zd_buf(DOPAW_1 downto 0) := MEM((16384 + ADDRESS_PARITY_READ_A + DOPAW_1) downto  (16384 + ADDRESS_PARITY_READ_A));
                     
-- The following code was added to "X" the output in WRITE_FIRST_MODE when DO /= DI and the WE[--] segments are not all 0's or all 1's    
                     
                     xout_we_seg1(1) := addra_dly_sampled(4);
                     xout_we_seg1(0) := '0';
                     xout_we_seg2(1) := addra_dly_sampled(4);
                     xout_we_seg2(0) := '1';

                     if(wea_dly_sampled(SLV_TO_INT(xout_we_seg1)) /= wea_dly_sampled(SLV_TO_INT(xout_we_seg2))) then 
                        DOA_zd_buf(DOAW_1 downto 0) := (others => 'X');
                        DOPA_zd_buf(DOPAW_1 downto 0) := (others => 'X');
                     else
                        tmp_we(1) := addra_dly_sampled(4);
                        tmp_we(0) := '0';
                        wea_index := SLV_TO_INT(tmp_we);
                        if(wea_dly_sampled(wea_index) = '1') then
                           DOA_zd_buf(((DOA_INDEX *DIAW) + (DIAW/2 - 1)) downto (DOA_INDEX *DIAW)) := DIA_dly((DIAW/2 - 1) downto 0);
                           DOPA_zd_buf(((DOPA_INDEX *DIPAW) + (DIPAW/2 - 1)) downto (DOPA_INDEX *DIPAW)) := DIPA_dly((DIPAW/2 - 1) downto 0);
                        end if;

                        tmp_we(1) := addra_dly_sampled(4);
                        tmp_we(0) := '1';
                        wea_index := SLV_TO_INT(tmp_we);
                        if(wea_dly_sampled(wea_index) = '1') then
                          DOA_zd_buf(((DOA_INDEX *DIAW) + DIAW_1) downto ((DOA_INDEX *DIAW) + DIAW/2 )) := DIA_dly(DIAW_1 downto DIAW/2);
                          DOPA_zd_buf(((DOPA_INDEX *DIPAW) + DIPAW_1) downto ((DOPA_INDEX *DIPAW) + DIPAW/2 )) := DIPA_dly(DIPAW_1 downto DIPAW/2);
                        end if;

                     end if;

                     DOA_zd(DOAW_1 downto 0)   := DOA_zd_buf(DOAW_1 downto 0);
                     DOPA_zd(DOPAW_1 downto 0) := DOPA_zd_buf(DOPAW_1 downto 0);

                  end if;

-------------------
                  if(DOAW <= DIAW) then
                     DOA_zd_buf(DIAW_1 downto 0) := MEM((ADDRESS_WRITE_A + DIAW_1) downto  ADDRESS_WRITE_A);
                     if(DOPAW_1 /= -1) then
                       DOPA_zd_buf(DIPAW_1 downto 0) := MEM((16384 + ADDRESS_PARITY_WRITE_A + DIPAW_1) downto  (16384 + ADDRESS_PARITY_WRITE_A));
                     end if;
-- The following code was added to "X" the output in WRITE_FIRST_MODE when DO /= DI and the WE[--] segments are not all 0's or all 1's    
                     
                     xout_we_seg1(1) := addra_dly_sampled(4);
                     xout_we_seg1(0) := '0';
                     xout_we_seg2(1) := addra_dly_sampled(4);
                     xout_we_seg2(0) := '1';

                     tmp_we(1) := addra_dly_sampled(4);
                     tmp_we(0) := '0';
                     wea_index := SLV_TO_INT(tmp_we);
                     if(wea_dly_sampled(wea_index) = '1') then
                        DOA_zd_buf((DIAW/2 - 1) downto 0)   := DIA_dly((DIAW/2 -1 ) downto 0);
                        if(DOPAW_1 /= -1) then
                           DOPA_zd_buf((DIPAW/2 - 1) downto 0)   := DIPA_dly((DIPAW/2 -1 ) downto 0);
                        end if;
                     elsif(wea_dly_sampled(wea_index) = '0') then
                        if(wea_dly_sampled(SLV_TO_INT(xout_we_seg1)) /= wea_dly_sampled(SLV_TO_INT(xout_we_seg2))) then
                           DOA_zd_buf((DIAW/2 - 1) downto 0)   := (others => 'X');
                           if(DOPAW_1 /= -1) then
                              DOPA_zd_buf((DIPAW/2 - 1) downto 0)   := (others => 'X');
                           end if;
                        end if;
                     end if;

                     tmp_we(1) := addra_dly_sampled(4);
                     tmp_we(0) := '1';
                     wea_index := SLV_TO_INT(tmp_we);
                     if(wea_dly_sampled(wea_index) = '1') then
                        DOA_zd_buf(DIAW_1 downto DIAW/2 )   := DIA_dly(DIAW_1 downto DIAW/2);
                        if(DOPAW_1 /= -1) then
                           DOPA_zd_buf(DIPAW_1 downto DIPAW/2 )   := DIPA_dly(DIPAW_1 downto DIPAW/2);
                        end if;
                     elsif(wea_dly_sampled(wea_index) = '0') then
                        if(wea_dly_sampled(SLV_TO_INT(xout_we_seg1)) /= wea_dly_sampled(SLV_TO_INT(xout_we_seg2))) then
                           DOA_zd_buf(DIAW_1 downto DIAW/2 )   := (others => 'X');
                           if(DOPAW_1 /= -1) then
                              DOPA_zd_buf(DIPAW_1 downto DIPAW/2 )   := (others => 'X');
                           end if;
                        end if;
                     end if;

-- The following code was added to "X" the output in WRITE_FIRST_MODE when DO /= DI and the WE[--] segments are not all 0's or all 1's    
                     if((wea_dly_sampled(SLV_TO_INT(xout_we_seg1)) /= wea_dly_sampled(SLV_TO_INT(xout_we_seg2))) and (DOAW /= DIAW)) then 
                        DOA_zd_buf(DIAW_1 downto 0) := (others => 'X');
                        DOPA_zd_buf(DIPAW_1 downto 0) := (others => 'X');
                     end if;

                     DOA_zd(DOAW_1 downto 0)   := DOA_zd_buf(((DOA_INDEX * DOAW) + DOAW_1) downto (DOA_INDEX * DOAW));
                     if(DOPAW_1 /= -1) then
                        DOPA_zd(DOPAW_1 downto 0) :=  DOPA_zd_buf(((DOPA_INDEX * DOPAW) + DOPAW_1) downto (DOPA_INDEX * DOPAW));
                     end if;

                  end if;

               ---------
               when 32 =>
               ---------

                  for i in 0 to 3 loop
                     if (wea_dly_sampled(i) = '1') then
                        DOA_zd_buf(((DIAW/4)*(i+1) - 1) downto (DIAW/4)*i)   := DIA_dly(((DIAW/4)*(i+1) - 1) downto (DIAW/4)*i);
                        if(DOPAW_1 /= -1) then
                           DOPA_zd_buf(((DIPAW/4)*(i+1) - 1) downto (DIPAW/4)*i) := DIPA_dly(((DIPAW/4)*(i+1) - 1) downto (DIPAW/4)*i);
                        end if;
                     elsif (wea_dly_sampled(i) = '0') then
-- The following code was added to "X" the output in WRITE_FIRST_MODE when DO /= DI and the WE[--] segments are not all 0's or all 1's    
                        DOA_zd_buf(((DIAW/4)*(i+1) - 1) downto (DIAW/4)*i)   := (others => 'X');
                        if(DOPAW_1 /= -1) then
                           DOPA_zd_buf(((DIPAW/4)*(i+1) - 1) downto (DIPAW/4)*i) := (others => 'X');
                        end if;
                     end if;
                  end loop;

-- The following code was added to "X" the output in WRITE_FIRST_MODE when DO /= DI and the WE[--] segments are not all 0's or all 1's    
                  if((wea_dly_sampled(0) = '0') and (wea_dly_sampled(1) = '0') and (wea_dly_sampled(2) = '0') and  (wea_dly_sampled(3) = '0')) then 
                     DOA_zd_buf(DIAW_1 downto 0) := MEM((ADDRESS_WRITE_A + DIAW_1) downto  ADDRESS_WRITE_A);
                     if(DOPAW_1 /= -1) then
                        DOPA_zd_buf(DIPAW_1 downto 0) := MEM((16384 + ADDRESS_PARITY_WRITE_A + DIPAW_1) downto  (16384 + ADDRESS_PARITY_WRITE_A));
                     end if;
                  
                  elsif(not((wea_dly_sampled(0) = '1') and (wea_dly_sampled(1) = '1') and (wea_dly_sampled(2) = '1') and  (wea_dly_sampled(3) = '1'))) then 
                      if(DOAW /= DIAW) then
                         DOA_zd_buf(DIAW_1 downto 0) := (others => 'X');
                         if(DOPAW_1 /= -1) then
                            DOPA_zd_buf(DIPAW_1 downto 0) := (others => 'X');
                         end if;
                      end if;
                  end if;

                  DOA_zd(DOAW_1 downto 0)   := DOA_zd_buf(((DOA_INDEX * DOAW) + DOAW_1) downto (DOA_INDEX * DOAW));
                  if(DOPAW_1 /= -1) then
                     DOPA_zd(DOPAW_1 downto 0) :=  DOPA_zd_buf(((DOPA_INDEX * DOPAW) + DOPAW_1) downto (DOPA_INDEX * DOPAW));
                  end if;

                  when others =>
                     null;
               end case;

            elsif(wr_mode_a = "01") then
              DOA_zd(DOAW_1 downto 0) := MEM((ADDRESS_READ_A + DOAW_1) downto (ADDRESS_READ_A));
              if(DOPAW_1 /= -1) then
                  DOPA_zd(DOPAW_1 downto 0) := MEM((16384 + ADDRESS_PARITY_READ_A + DOPAW_1) downto (16384 + ADDRESS_PARITY_READ_A));
              end if;
            elsif(wr_mode_a = "10") then
              case DIAW is
                 when 1|2|4|8 =>
                    tmp_we(1 downto 0) := addra_dly_sampled( 4 downto 3);
                    wea_index := SLV_TO_INT(tmp_we);
                    if (wea_dly_sampled(wea_index) = '0') then
                       DOA_zd(DOAW_1 downto 0) := MEM((ADDRESS_READ_A + DOAW_1) downto (ADDRESS_READ_A));
                       if(DOPAW_1 /= -1) then
                           DOPA_zd(DOPAW_1 downto 0) := MEM((16384 + ADDRESS_PARITY_READ_A + DOPAW_1) downto (16384 + ADDRESS_PARITY_READ_A));
                       end if;
                    end if;
                 ----------
                 when 16|32 =>
                 ----------
                    if ((wea_dly_sampled(0) = '0') and (wea_dly_sampled(1) = '0') and (wea_dly_sampled(2) = '0') and (wea_dly_sampled(3) = '0'))then
                       DOA_zd(DOAW_1 downto 0) := MEM((ADDRESS_READ_A + DOAW_1) downto (ADDRESS_READ_A));
                       if(DOPAW_1 /= -1) then
                           DOPA_zd(DOPAW_1 downto 0) := MEM((16384 + ADDRESS_PARITY_READ_A + DOPAW_1) downto (16384 + ADDRESS_PARITY_READ_A));
                       end if;
                    end if;
                 ----------
                 when others =>
                 ----------
                    null;
               end case;
          end if;
          end if;
            end if; -- /* end ena_dly_sampled = '1' */
      end if;

------------------------------------------------------------------------                       
------------ Port B ----------------------------------------------------
------------------------------------------------------------------------                       
    if(GSR_CLKB_dly = '1') then
       DOB_zd(DOBW_1 downto 0) := INI_B(DOBW_1 downto 0);
       if(DOPBW_1 /= -1) then
         DOPB_zd(DOPBW_1 downto 0) := INI_B((DOPBW_1 + DOBW) downto DOBW);
       end if;

-- CR 422403
    elsif((RSTB_dly = '1') and (rst_async_flag = '1') and (enb_dly_sampled = '1')) then
       DOB_zd(DOBW_1 downto 0) := SRVA_B(DOBW_1 downto 0);
       DOB_clsn_zero := (others => '0');
       DOB_clsn := (others => '0');
       if(DOPBW_1 /= -1) then
          DOPB_zd(DOPBW_1 downto 0) := SRVA_B((DOPBW_1 + DOBW) downto DOBW);
          DOPB_clsn_zero := (others => '0');
          DOPB_clsn := (others => '0');
       end if;
    elsif(CLKB_dly'event AND CLKB_dly'last_value = '0') then
        if (enb_dly_sampled = '1') then
            if (RSTB_dly_sampled = '1') then
                   DOB_zd(DOBW_1 downto 0) := SRVA_B(DOBW_1 downto 0);
                   DOB_clsn_zero := (others => '0');
                   DOB_clsn := (others => '0');
                   if(DOPBW_1 /= -1) then
                      DOPB_zd(DOPBW_1 downto 0) := SRVA_B((DOPBW_1 + DOBW) downto DOBW);
                      DOPB_clsn_zero := (others => '0');
                      DOPB_clsn := (others => '0');
                   end if;
            else
-----------------------  Start COLLISION B ------------------------------
        if(SimCollisionCheck_var /= 0) then
           DOB_clsn_sav          := DOB_clsn;
           DOPB_clsn_sav         := DOPB_clsn;

           DOB_clsn              := (others => '0');
           DOPB_clsn             := (others => '0');
           clsn_xbufs.DO1_clsn   := (others => '0');
           clsn_xbufs.DOP1_clsn  := (others => '0');
           clsn_xbufs.MEM1_clsn  := (others => '0');
           clsn_xbufs.MEMP1_clsn := (others => '0');

           clsn_xbufs.DO2_clsn   := (others => '0');
           clsn_xbufs.DOP2_clsn  := (others => '0');
           clsn_xbufs.MEM2_clsn  := (others => '0');
           clsn_xbufs.MEMP2_clsn := (others => '0');
        
           clsn_type.active_port := 2;
           addr_overlap := false;
           clsn_type.read_write  := false;
           clsn_type.write_read  := false;
           clsn_type.write_write := false;

--           CLKB_time := now;

           ClkCollisionCheck(
              violation => collision_clka_clkb,
              CheckEnabled => ((TO_X01(ena_dly_sampled) = '1') and (TO_X01(enb_dly_sampled) = '1')), 
              CLK1_time => CLKB_time,
              CLK2_time => CLKA_time,
              SETUP_All => SETUP_ALL,
              SETUP_READ_FIRST => SETUP_READ_FIRST
           );

           if(collision_clka_clkb /= 0) then
              QkAddrOverlapChk(
                addr_overlap => addr_overlap,
                data_widths  => data_widths,
                addra        => addra_dly_sampled,
                addrb        => addrb_dly_sampled
              );
           end if;
        
           if(addr_overlap) then
              PreProcessWe1We2(
                clsn_bufs     => clsn_xbufs,
                clsn_type     => clsn_type,
                memory        => MEM,
                di1           => dib_dly,
                di2           => dia_dly,
                dip1          => dipb_dly,
                dip2          => dipa_dly,
                addr1         => addrb_dly_sampled,
                addr2         => addra_dly_sampled,
                we1           => web_dly_sampled,
                we2           => wea_dly_sampled,
                zero_read_1   => zero_read_b,
                zero_readp_1  => zero_parity_read_b,
                zero_write_1  => zero_write_b,
                zero_writep_1 => zero_parity_write_b,
                zero_read_2   => zero_read_a,
                zero_readp_2  => zero_parity_read_a,
                zero_write_2  => zero_write_a,
                zero_writep_2 => zero_parity_write_a,
                wr_mode_1     => wr_mode_b,
                wr_mode_2     => wr_mode_a,
                violation     => collision_clka_clkb,
                DI1W          => DIBW,
                DIP1W         => DIPBW,
                DI2W          => DIAW,
                DIP2W         => DIPAW,
                DO1W          => DOBW,
                DOP1W         => DOPBW,
                DO2W          => DOAW,
                DOP2W         => DOPAW
              );
           end if;
           
           if(clsn_type.read_write or clsn_type.write_write or clsn_type.write_read) then
               
              if(clsn_type.write_write) then
                  collision_msg := Write_B_Write_A; 
--                  msg_addr1 := tmp_zero_write_b; 
--                  msg_addr2 := tmp_zero_write_a; 
                  msg_addr1 := tmp_zero_write_a; 
                  msg_addr2 := tmp_zero_write_b; 
              elsif(clsn_type.read_write) then
                  collision_msg :=  Read_B_Write_A; 
                  msg_addr1 := tmp_zero_read_b; 
                  msg_addr2 := tmp_zero_write_a; 
              elsif(clsn_type.write_read) then
                  collision_msg :=  Write_B_Read_A; 
--                  msg_addr1 := tmp_zero_write_b; 
--                  msg_addr2 := tmp_zero_read_a; 
                  msg_addr1 := tmp_zero_read_a;
                  msg_addr2 := tmp_zero_write_b;
              end if;

              if(SimCollisionCheck_var = 1) then
                 --- Message 
                 Memory_Collision_Msg_ramb16
                 (  collision_type => collision_msg,
                   EntityName => "X_RAMB16BWER",
                   InstanceName => X_RAMB16BWER'path_name,
                   address_1 => msg_addr1,
                   address_2 => msg_addr2
                 );

              DOB_clsn  := (others => '0');
              DOPB_clsn := (others => '0');
              DOB_clsn_sav  := DOB_clsn;
              DOPB_clsn_sav := DOPB_clsn;

              elsif(SimCollisionCheck_var = 2) then

                 DOB_clsn_read_index := SLV_TO_INT(tmp_zero_read_b(4 downto 0));
                 DOA_clsn_read_index := SLV_TO_INT(tmp_zero_read_a(4 downto 0));

                 DOB_clsn(DOBW_1 downto 0) := clsn_xbufs.DO1_clsn((DOB_clsn_read_index+DOBW_1) downto DOB_clsn_read_index);
                 DOA_clsn(DOAW_1 downto 0) := clsn_xbufs.DO2_clsn((DOA_clsn_read_index+DOAW_1) downto DOA_clsn_read_index);

                 if(DOPBW_1 /= -1) then
                    DOPB_clsn_read_index := SLV_TO_INT(tmp_zero_parity_read_b(1 downto 0));
                    DOPB_clsn(DOPBW_1 downto 0) := clsn_xbufs.DOP1_clsn((DOPB_clsn_read_index+DOPBW_1) downto DOPB_clsn_read_index);
                 end if;

                 if(DOPAW_1 /= -1) then
                    DOPA_clsn_read_index := SLV_TO_INT(tmp_zero_parity_read_a(1 downto 0));
                    DOPA_clsn(DOPAW_1 downto 0) := clsn_xbufs.DOP2_clsn((DOPA_clsn_read_index+DOPAW_1) downto DOPA_clsn_read_index);
                 end if;

                 if(wr_mode_b = "10") then
                    DOB_clsn(DOBW_1 downto 0) := DOB_clsn(DOBW_1 downto 0) xor DOB_clsn_sav(DOBW_1 downto 0);
                    if(DOPBW_1 /= -1) then
                       DOPB_clsn(DOPBW_1 downto 0) := DOPB_clsn(DOPBW_1 downto 0) xor DOPB_clsn_sav(DOPBW_1 downto 0);
                    end if;
                 end if;

                 if(wr_mode_a = "10") then
                    DOA_clsn(DOAW_1 downto 0) := DOA_clsn(DOAW_1 downto 0) xor DOA_clsn_sav(DOAW_1 downto 0);
                    if(DOPAW_1 /= -1) then
                       DOPA_clsn(DOPAW_1 downto 0) := DOPA_clsn(DOPAW_1 downto 0) xor DOPA_clsn_sav(DOPAW_1 downto 0);
                    end if;
                 end if;


              elsif(SimCollisionCheck_var = 3) then
                 --- Message 
                 Memory_Collision_Msg_ramb16
                 (  collision_type => collision_msg,
                   EntityName => "X_RAMB16BWER",
                   InstanceName => X_RAMB16BWER'path_name,
                   address_1 => msg_addr1,
                   address_2 => msg_addr2
                 );


                 DOB_clsn_read_index := SLV_TO_INT(tmp_zero_read_b(4 downto 0));
                 DOA_clsn_read_index := SLV_TO_INT(tmp_zero_read_a(4 downto 0));

                 DOB_clsn(DOBW_1 downto 0) := clsn_xbufs.DO1_clsn((DOB_clsn_read_index+DOBW_1) downto DOB_clsn_read_index);
                 DOA_clsn(DOAW_1 downto 0) := clsn_xbufs.DO2_clsn((DOA_clsn_read_index+DOAW_1) downto DOA_clsn_read_index);

                 if(DOPBW_1 /= -1) then
                    DOPB_clsn_read_index := SLV_TO_INT(tmp_zero_parity_read_b(1 downto 0));
                    DOPB_clsn(DOPBW_1 downto 0) := clsn_xbufs.DOP1_clsn((DOPB_clsn_read_index+DOPBW_1) downto DOPB_clsn_read_index);
                 end if;

                 if(DOPAW_1 /= -1) then
                    DOPA_clsn_read_index := SLV_TO_INT(tmp_zero_parity_read_a(1 downto 0));
                    DOPA_clsn(DOPAW_1 downto 0) := clsn_xbufs.DOP2_clsn((DOPA_clsn_read_index+DOPAW_1) downto DOPA_clsn_read_index);
                 end if;

                 if(wr_mode_b = "10") then
                    DOB_clsn(DOBW_1 downto 0) := DOB_clsn(DOBW_1 downto 0) xor DOB_clsn_sav(DOBW_1 downto 0);
                    if(DOPBW_1 /= -1) then
                       DOPB_clsn(DOPBW_1 downto 0) := DOPB_clsn(DOPBW_1 downto 0) xor DOPB_clsn_sav(DOPBW_1 downto 0);
                    end if;
                 end if;

                 if(wr_mode_a = "10") then
                    DOA_clsn(DOAW_1 downto 0) := DOA_clsn(DOAW_1 downto 0) xor DOA_clsn_sav(DOAW_1 downto 0);
                    if(DOPAW_1 /= -1) then
                       DOPA_clsn(DOPAW_1 downto 0) := DOPA_clsn(DOPAW_1 downto 0) xor DOPA_clsn_sav(DOPAW_1 downto 0);
                    end if;
                 end if;

              end if;

           end if;

           DOB_clsn_zero  := DOB_clsn;
           DOPB_clsn_zero := DOPB_clsn;
           if(RSTA_dly_sampled = '0') then
             DOA_clsn_zero  := DOA_clsn;
             DOPA_clsn_zero := DOPA_clsn;
           end if;

        end if;

----------------  END COLLISION B ------------------------------
            if (wr_mode_b = "00") then

               case DIBW is
               ---------
               when 1|2|4|8 =>
               ---------
                  tmp_we(1 downto 0) := addrb_dly_sampled( 4 downto 3);
                  web_index := SLV_TO_INT(tmp_we);
                  if(web_dly_sampled(web_index) = '1') then
                     if(DOBW > DIBW) then
                        DOB_zd_buf(DOBW_1 downto 0) := MEM((ADDRESS_READ_B + DOBW_1) downto  ADDRESS_READ_B);
                        DOB_zd_buf(((DOB_INDEX *DIBW) + DIBW_1) downto (DOB_INDEX *DIBW)) := DIB_dly(DIBW_1 downto 0);
                        DOB_zd(DOBW_1 downto 0) := DOB_zd_buf(DOBW_1 downto 0);
                              
                        if(DOPBW_1 /= -1) then
                          DOPB_zd_buf(DOPBW_1 downto 0) := MEM((16384 + ADDRESS_PARITY_READ_B + DOPBW_1) downto  (16384 + ADDRESS_PARITY_READ_B));
                          DOPB_zd_buf(((DOPB_INDEX *DIPBW) + DIPBW_1) downto (DOPB_INDEX *DIPBW)) := DIPB_dly(DIPBW_1 downto 0);
                          DOPB_zd(DOPBW_1 downto 0) := DOPB_zd_buf(DOPBW_1 downto 0);
                        end if;
                     elsif(DOBW <= DIBW) then
--FP                        DOB_zd(DOBW_1 downto 0)   := DIB_dly(DOBW_1 downto 0);
                        DOB_zd(DOBW_1 downto 0)   := DIB_dly((((DOB_INDEX)*DOBW)+ DOBW_1) downto ((DOB_INDEX)*DOBW));
                        if(DOPBW_1 /= -1) then
                           DOPB_zd(DOPBW_1 downto 0)   := DIPB_dly(DOPBW_1 downto 0);
                        end if;
                     end if;
                  elsif(web_dly_sampled(web_index) = '0') then
                     DOB_zd(DOBW_1 downto 0) := MEM((ADDRESS_READ_B + DOBW_1) downto (ADDRESS_READ_B));
                     if(DOPBW_1 /= -1) then
                        DOPB_zd(DOPBW_1 downto 0) := MEM((16384 + ADDRESS_PARITY_READ_B + DOPBW_1) downto (16384 + ADDRESS_PARITY_READ_B));
                     end if;
                  end if;
                     
               ---------
               when 16 =>
               ---------
                  if(DOBW > DIBW) then
                     DOB_zd_buf(DOBW_1 downto 0) := MEM((ADDRESS_READ_B + DOBW_1) downto  ADDRESS_READ_B);
                     DOPB_zd_buf(DOPBW_1 downto 0) := MEM((16384 + ADDRESS_PARITY_READ_B + DOPBW_1) downto  (16384 + ADDRESS_PARITY_READ_B));
-- The following code was added to "X" the output in WRITE_FIRST_MODE when DO /= DI and the WE[--] segments are not all 0's  or all 1's

                     xout_we_seg1(1) := addrb_dly_sampled(4);
                     xout_we_seg1(0) := '0';
                     xout_we_seg2(1) := addrb_dly_sampled(4);
                     xout_we_seg2(0) := '1';

                     if(web_dly_sampled(SLV_TO_INT(xout_we_seg1)) /= web_dly_sampled(SLV_TO_INT(xout_we_seg2))) then
                        DOB_zd_buf(DOBW_1 downto 0) := (others => 'X');
                        DOPB_zd_buf(DOPBW_1 downto 0) := (others => 'X');
                     else
                        tmp_we(1) := addrb_dly_sampled(4);
                        tmp_we(0) := '0';
                        web_index := SLV_TO_INT(tmp_we);
                        if(web_dly_sampled(web_index) = '1') then
                           DOB_zd_buf(((DOB_INDEX *DIBW) + (DIBW/2 - 1)) downto (DOB_INDEX *DIBW)) := DIB_dly((DIBW/2 - 1) downto 0);
                           DOPB_zd_buf(((DOPB_INDEX *DIPBW) + (DIPBW/2 - 1)) downto (DOPB_INDEX *DIPBW)) := DIPB_dly((DIPBW/2 - 1) downto 0);
                        end if;

                        tmp_we(1) := addrb_dly_sampled(4);
                        tmp_we(0) := '1';
                        web_index := SLV_TO_INT(tmp_we);
                        if(web_dly_sampled(web_index) = '1') then
                          DOB_zd_buf(((DOB_INDEX *DIBW) + DIBW_1) downto ((DOB_INDEX *DIBW) + DIBW/2 )) := DIB_dly(DIBW_1 downto DIBW/2);
                          DOPB_zd_buf(((DOPB_INDEX *DIPBW) + DIPBW_1) downto ((DOPB_INDEX *DIPBW) + DIPBW/2 )) := DIPB_dly(DIPBW_1 downto DIPBW/2);
                        end if;

                     end if;

                     DOB_zd(DOBW_1 downto 0)   := DOB_zd_buf(DOBW_1 downto 0);
                     DOPB_zd(DOPBW_1 downto 0) := DOPB_zd_buf(DOPBW_1 downto 0);

                  end if;

-------------------
                  if(DOBW <= DIBW) then
                     DOB_zd_buf(DIBW_1 downto 0) := MEM((ADDRESS_WRITE_B + DIBW_1) downto  ADDRESS_WRITE_B);
                     if(DOPBW_1 /= -1) then
                        DOPB_zd_buf(DIPBW_1 downto 0) := MEM((16384 + ADDRESS_PARITY_WRITE_B + DIPBW_1) downto  (16384 + ADDRESS_PARITY_WRITE_B));
                     end if;
-- The following code was added to "X" the output in WRITE_FIRST_MODE when DO /= DI and the WE[--] segments are not all 0's  or all 1's
                          
                     xout_we_seg1(1) := addrb_dly_sampled(4);
                     xout_we_seg1(0) := '0';
                     xout_we_seg2(1) := addrb_dly_sampled(4);
                     xout_we_seg2(0) := '1';

                     tmp_we(1) := addrb_dly_sampled(4);
                     tmp_we(0) := '0';
                     web_index := SLV_TO_INT(tmp_we);
                     if(web_dly_sampled(web_index) = '1') then
                        DOB_zd_buf((DIBW/2 - 1) downto 0)   := DIB_dly((DIBW/2 -1 ) downto 0);
                        if(DOPBW_1 /= -1) then
                           DOPB_zd_buf((DIPBW/2 - 1) downto 0)   := DIPB_dly((DIPBW/2 -1 ) downto 0);
                        end if;
                     elsif(web_dly_sampled(web_index) = '0') then
                        if(web_dly_sampled(SLV_TO_INT(xout_we_seg1)) /= web_dly_sampled(SLV_TO_INT(xout_we_seg2))) then
                           DOB_zd_buf((DIBW/2 - 1) downto 0)   := (others => 'X');
                           if(DOPBW_1 /= -1) then
                              DOPB_zd_buf((DIPBW/2 - 1) downto 0)   := (others => 'X');
                           end if;
                        end if;
                     end if;

                     tmp_we(1) := addrb_dly_sampled(4);
                     tmp_we(0) := '1';
                     web_index := SLV_TO_INT(tmp_we);
                     if(web_dly_sampled(web_index) = '1') then
                        DOB_zd_buf(DIBW_1 downto DIBW/2 )   := DIB_dly(DIBW_1 downto DIBW/2);
                        if(DOPBW_1 /= -1) then
                           DOPB_zd_buf(DIPBW_1 downto DIPBW/2 )   := DIPB_dly(DIPBW_1 downto DIPBW/2);
                        end if;
                     elsif(web_dly_sampled(web_index) = '0') then
                        if(web_dly_sampled(SLV_TO_INT(xout_we_seg1)) /= web_dly_sampled(SLV_TO_INT(xout_we_seg2))) then
                           DOB_zd_buf(DIBW_1 downto DIBW/2 )   := (others => 'X');
                           if(DOPBW_1 /= -1) then
                              DOPB_zd_buf(DIPBW_1 downto DIPBW/2 )   := (others => 'X');
                           end if;
                        end if;
                     end if;

-- The following code was added to "X" the output in WRITE_FIRST_MODE when DO /= DI and the WE[--] segments are not all 0's  or all 1's
                     if((web_dly_sampled(SLV_TO_INT(xout_we_seg1)) /= web_dly_sampled(SLV_TO_INT(xout_we_seg2))) and (DOBW /= DIBW)) then
                        DOB_zd_buf(DIBW_1 downto 0) := (others => 'X');
                        DOPB_zd_buf(DIPBW_1 downto 0) := (others => 'X');
                     end if;

                     DOB_zd(DOBW_1 downto 0)   := DOB_zd_buf(((DOB_INDEX * DOBW) + DOBW_1) downto (DOB_INDEX * DOBW));
                     if(DOPBW_1 /= -1) then
                        DOPB_zd(DOPBW_1 downto 0) :=  DOPB_zd_buf(((DOPB_INDEX * DOPBW) + DOPBW_1) downto (DOPB_INDEX * DOPBW));
                     end if;

                  end if;

               ---------
               when 32 =>
               ---------
                  for i in 0 to 3 loop
                     if (web_dly_sampled(i) = '1') then
                        DOB_zd_buf(((DIBW/4)*(i+1) - 1) downto (DIBW/4)*i)   := DIB_dly(((DIBW/4)*(i+1) - 1) downto (DIBW/4)*i);
                        if(DOPBW_1 /= -1) then
                           DOPB_zd_buf(((DIPBW/4)*(i+1) - 1) downto (DIPBW/4)*i) := DIPB_dly(((DIPBW/4)*(i+1) - 1) downto (DIPBW/4)*i);
                        end if;
                     elsif (web_dly_sampled(i) = '0') then
-- The following code was added to "X" the output in WRITE_FIRST_MODE when DO /= DI and the WE[--] segments are not all 0's  or all 1's
                        DOB_zd_buf(((DIBW/4)*(i+1) - 1) downto (DIBW/4)*i)   := (others => 'X');
                        if(DOPBW_1 /= -1) then
                           DOPB_zd_buf(((DIPBW/4)*(i+1) - 1) downto (DIPBW/4)*i) := (others => 'X');
                        end if;
                     end if;
                  end loop;
-- The following code was added to "X" the output in WRITE_FIRST_MODE when DO /= DI and the WE[--] segments are not all 0's  or all 1's
                  if((web_dly_sampled(0) = '0') and (web_dly_sampled(1) = '0') and (web_dly_sampled(2) = '0') and  (web_dly_sampled(3) = '0')) then
                     DOB_zd_buf(DIBW_1 downto 0) := MEM((ADDRESS_WRITE_B + DIBW_1) downto  ADDRESS_WRITE_B);
                     if(DOPBW_1 /= -1) then
                        DOPB_zd_buf(DIPBW_1 downto 0) := MEM((16384 + ADDRESS_PARITY_WRITE_B + DIPBW_1) downto  (16384 + ADDRESS_PARITY_WRITE_B));
                     end if;
                  elsif(not((web_dly_sampled(0) = '1') and (web_dly_sampled(1) = '1') and (web_dly_sampled(2) = '1') and  (web_dly_sampled(3) = '1'))) then
                      if(DOBW /= DIBW) then
                         DOB_zd_buf(DIBW_1 downto 0) := (others => 'X');
                         if(DOPBW_1 /= -1) then
                            DOPB_zd_buf(DIPBW_1 downto 0) := (others => 'X');
                         end if;
                      end if;
                  end if;

                  DOB_zd(DOBW_1 downto 0)   := DOB_zd_buf(((DOB_INDEX * DOBW) + DOBW_1) downto (DOB_INDEX * DOBW));
                  if(DOPBW_1 /= -1) then
                     DOPB_zd(DOPBW_1 downto 0) :=  DOPB_zd_buf(((DOPB_INDEX * DOPBW) + DOPBW_1) downto (DOPB_INDEX * DOPBW));
                  end if;

                  when others =>
                     null;
               end case;

            elsif(wr_mode_b = "01") then
              DOB_zd(DOBW_1 downto 0) := MEM((ADDRESS_READ_B + DOBW_1) downto (ADDRESS_READ_B));
              if(DOPBW_1 /= -1) then
                  DOPB_zd(DOPBW_1 downto 0) := MEM((16384 + ADDRESS_PARITY_READ_B + DOPBW_1) downto (16384 + ADDRESS_PARITY_READ_B));
              end if;
            elsif(wr_mode_b = "10") then
              case DIBW is
                 when 1|2|4|8 =>
                    tmp_we(1 downto 0) := addrb_dly_sampled( 4 downto 3);
                    web_index := SLV_TO_INT(tmp_we);
                    if (web_dly_sampled(web_index) = '0') then
                       DOB_zd(DOBW_1 downto 0) := MEM((ADDRESS_READ_B + DOBW_1) downto (ADDRESS_READ_B));
                       if(DOPBW_1 /= -1) then
                           DOPB_zd(DOPBW_1 downto 0) := MEM((16384 + ADDRESS_PARITY_READ_B + DOPBW_1) downto (16384 + ADDRESS_PARITY_READ_B));
                       end if;
                    end if;
                 ----------
                 when 16|32 =>
                 ----------
                    if ((web_dly_sampled(0) = '0') and (web_dly_sampled(1) = '0') and (web_dly_sampled(2) = '0') and (web_dly_sampled(3) = '0'))then
                       DOB_zd(DOBW_1 downto 0) := MEM((ADDRESS_READ_B + DOBW_1) downto (ADDRESS_READ_B));
                       if(DOPBW_1 /= -1) then
                           DOPB_zd(DOPBW_1 downto 0) := MEM((16384 + ADDRESS_PARITY_READ_B + DOPBW_1) downto (16384 + ADDRESS_PARITY_READ_B));
                       end if;
                    end if;
                 ----------
                 when others =>
                 ----------
                    null;
               end case;
          end if;
          end if;
            end if; -- /* end enb_dly_sampled = '1' */
      end if;

------------------------------------------------------------------------                       
------------ Port A  -- Memory Update ----------------------------------
------------------------------------------------------------------------                       

    if((GSR_CLKA_dly = '0') and rising_edge(CLKA_dly)) then
        if (ena_dly_sampled = '1') then
                case DIAW is
                  --------------
                  when 1|2|4|8 =>
                  --------------
                      tmp_we(1 downto 0) := addra_dly_sampled( 4 downto 3);
                      wea_index := SLV_TO_INT(tmp_we);
                      if (wea_dly_sampled(wea_index) = '1') then
                         if (VALID_ADDRA) then
                            MEM((ADDRESS_WRITE_A + DIAW_1) downto (ADDRESS_WRITE_A)) := DIA_dly(DIAW_1 downto 0);
                            if(DIPAW_1 /= -1) then
                               MEM((16384 + ADDRESS_PARITY_WRITE_A + DIPAW_1) downto (16384 + ADDRESS_PARITY_WRITE_A)) := DIPA_dly(DIPAW_1 downto 0);
                            end if;
                         else
                          DOA_zd(DOAW_1 downto 0) := (others => 'X');
                          if(DOPAW_1 /= -1) then
                             DOPA_zd(DOPAW_1 downto 0) := (others => 'X');
                          end if;
                         end if; -- /* VAILD ADDRA */
                      end if; -- /*  wea_dly_sampled = '1' */ 

                  ---------
                  when 16 =>
                  ---------
                      tmp_we(1) := addra_dly_sampled(4);
                      tmp_we(0) := '0';
                      wea_index := SLV_TO_INT(tmp_we);
                      if (wea_dly_sampled(wea_index) = '1') then
                         if (VALID_ADDRA) then
                            MEM((ADDRESS_WRITE_A + DIAW/2 -1) downto (ADDRESS_WRITE_A)) := DIA_dly((DIAW/2 - 1) downto 0);
                            if(DIPAW_1 /= -1) then
                               MEM((16384 + ADDRESS_PARITY_WRITE_A + DIPAW/2 - 1) downto (16384 + ADDRESS_PARITY_WRITE_A)) := DIPA_dly((DIPAW/2 -1) downto 0);
                            end if;
                         end if; -- /* VAILD ADDRA */
                      end if; -- /*  wea_dly_sampled = '1' */ 

                      tmp_we(0) := '1';
                      wea_index := SLV_TO_INT(tmp_we);
                      if (wea_dly_sampled(wea_index) = '1') then
                         if (VALID_ADDRA) then
                            MEM((ADDRESS_WRITE_A + DIAW_1) downto (ADDRESS_WRITE_A + DIAW/2)) := DIA_dly(DIAW_1 downto DIAW/2);
                            if(DIPAW_1 /= -1) then
                               MEM((16384 + ADDRESS_PARITY_WRITE_A + DIPAW_1) downto (16384 + ADDRESS_PARITY_WRITE_A + DIPAW/2)) := DIPA_dly(DIPAW_1 downto DIPAW/2);
                            end if;
                         end if; -- /* VAILD ADDRA */
                      end if; -- /*  wea_dly_sampled = '1' */ 

                  ---------
                  when 32 =>
                  ---------
                      wea_index := 0;
                      if (wea_dly_sampled(wea_index) = '1') then
                         if (VALID_ADDRA) then
                            MEM((ADDRESS_WRITE_A + (DIAW/4)*1 -1) downto (ADDRESS_WRITE_A)) := DIA_dly((((DIAW/4)*1) - 1) downto 0);
                            if(DIPAW_1 /= -1) then
                               MEM((16384 + ADDRESS_PARITY_WRITE_A + (DIPAW/4)*1 - 1) downto (16384 + ADDRESS_PARITY_WRITE_A)) := DIPA_dly(((DIPAW/4)*1 -1) downto 0);
                            end if;
                         end if; -- /* VAILD ADDRA */
                      end if; -- /*  wea_dly_sampled = '1' */ 

                      wea_index := 1;
                      if (wea_dly_sampled(wea_index) = '1') then
                         if (VALID_ADDRA) then
                            MEM((ADDRESS_WRITE_A + (DIAW/4)*2 -1) downto (ADDRESS_WRITE_A + (DIAW/4)*1)) := DIA_dly((((DIAW/4)*2) - 1) downto (DIAW/4)*1);
                            if(DIPAW_1 /= -1) then
                               MEM((16384 + ADDRESS_PARITY_WRITE_A + (DIPAW/4)*2 - 1) downto (16384 + ADDRESS_PARITY_WRITE_A  + (DIPAW/4)*1)) := DIPA_dly(((DIPAW/4)*2 -1) downto ((DIPAW/4)*1));
                            end if;
                         end if; -- /* VAILD ADDRA */
                      end if; -- /*  wea_dly_sampled = '1' */ 

                      wea_index := 2;
                      if (wea_dly_sampled(wea_index) = '1') then
                         if (VALID_ADDRA) then
                            MEM((ADDRESS_WRITE_A + (DIAW/4)*3 -1) downto (ADDRESS_WRITE_A + (DIAW/4)*2)) := DIA_dly((((DIAW/4)*3) - 1) downto (DIAW/4)*2);
                            if(DIPAW_1 /= -1) then
                               MEM((16384 + ADDRESS_PARITY_WRITE_A + (DIPAW/4)*3 - 1) downto (16384 + ADDRESS_PARITY_WRITE_A  + (DIPAW/4)*2)) := DIPA_dly(((DIPAW/4)*3 -1) downto ((DIPAW/4)*2));
                            end if;
                         end if; -- /* VAILD ADDRA */
                      end if; -- /*  wea_dly_sampled = '1' */ 

                      wea_index := 3;
                      if (wea_dly_sampled(wea_index) = '1') then
                         if (VALID_ADDRA) then
                            MEM((ADDRESS_WRITE_A + (DIAW/4)*4 -1) downto (ADDRESS_WRITE_A + (DIAW/4)*3)) := DIA_dly((((DIAW/4)*4) - 1) downto (DIAW/4)*3);
                            if(DIPAW_1 /= -1) then
                               MEM((16384 + ADDRESS_PARITY_WRITE_A + (DIPAW/4)*4 - 1) downto (16384 + ADDRESS_PARITY_WRITE_A  + (DIPAW/4)*3)) := DIPA_dly(((DIPAW/4)*4 -1) downto ((DIPAW/4)*3));
                            end if;
                         end if; -- /* VAILD ADDRA */
                      end if; -- /*  wea_dly_sampled = '1' */ 
                  when others =>
                     null;
                end case;

-----------------------  Start COLLISION MEMORY UPDATE A ------------------------------

        if(SimCollisionCheck_var /= 0) then
           if(clsn_type.write_write) then
              tmp_membuf := (others => '0');
              DOA_clsn_write_index := SLV_TO_INT(tmp_zero_write_a(4 downto 0));
              tmp_membuf(DIAW_1 downto 0) := MEM((ADDRESS_WRITE_A + DIAW_1) downto (ADDRESS_WRITE_A));
              MEM((ADDRESS_WRITE_A + DIAW_1) downto (ADDRESS_WRITE_A)) := tmp_membuf(DIAW_1 downto 0) xor clsn_xbufs.MEM1_clsn((DOA_clsn_write_index+DIAW_1) downto DOA_clsn_write_index);

             if((DIPAW_1 /= -1) and (DIPBW_1 /= -1)) then
                tmp_membuf := (others => '0');
                DOPA_clsn_write_index := SLV_TO_INT(tmp_zero_parity_write_a(1 downto 0));
                tmp_membuf(DIPAW_1 downto 0) :=  MEM((16384 + ADDRESS_PARITY_WRITE_A + DIPAW_1) downto (16384 + ADDRESS_PARITY_WRITE_A));
                MEM((16384 + ADDRESS_PARITY_WRITE_A + DIPAW_1) downto (16384 + ADDRESS_PARITY_WRITE_A)) := tmp_membuf(DIPAW_1 downto 0) xor clsn_xbufs.MEMP1_clsn((DOPA_clsn_write_index + DIPAW_1) downto DOPA_clsn_write_index);
              end if;
           end if;
        end if;
                
-----------------------  END COLLISION MEMORY UPDATE A   ------------------------------
                 
            end if; -- /* end ena_dly_sampled = '1' */
      end if;
------------------------------------------------------------------------                       
------------ Port B  -- Memory Update ----------------------------------
------------------------------------------------------------------------                       

    if((GSR_CLKB_dly = '0') and rising_edge(CLKB_dly)) then
        if (enb_dly_sampled = '1') then
                case DIBW is
                  --------------
                  when 1|2|4|8 =>
                  --------------
                      tmp_we(1 downto 0) := addrb_dly_sampled( 4 downto 3);
                      web_index := SLV_TO_INT(tmp_we);
                      if (web_dly_sampled(web_index) = '1') then
                         if (VALID_ADDRB) then
                            MEM((ADDRESS_WRITE_B + DIBW_1) downto (ADDRESS_WRITE_B)) := DIB_dly(DIBW_1 downto 0);
                            if(DIPBW_1 /= -1) then
                               MEM((16384 + ADDRESS_PARITY_WRITE_B + DIPBW_1) downto (16384 + ADDRESS_PARITY_WRITE_B)) := DIPB_dly(DIPBW_1 downto 0);
                            end if;
                         else
                          DOB_zd(DOBW_1 downto 0) := (others => 'X');
                          if(DOPBW_1 /= -1) then
                             DOPB_zd(DOPBW_1 downto 0) := (others => 'X');
                          end if;
                         end if; -- /* VAILD ADDRB */
                      end if; -- /*  web_dly_sampled = '1' */ 

                  ---------
                  when 16 =>
                  ---------
                      tmp_we(1) := addrb_dly_sampled(4);
                      tmp_we(0) := '0';
                      web_index := SLV_TO_INT(tmp_we);
                      if (web_dly_sampled(web_index) = '1') then
                         if (VALID_ADDRB) then
                            MEM((ADDRESS_WRITE_B + DIBW/2 -1) downto (ADDRESS_WRITE_B)) := DIB_dly((DIBW/2 - 1) downto 0);
                            if(DIPBW_1 /= -1) then
                               MEM((16384 + ADDRESS_PARITY_WRITE_B + DIPBW/2 - 1) downto (16384 + ADDRESS_PARITY_WRITE_B)) := DIPB_dly((DIPBW/2 -1) downto 0);
                            end if;
                         end if; -- /* VAILD ADDRB */
                      end if; -- /*  web_dly_sampled = '1' */ 

                      tmp_we(0) := '1';
                      web_index := SLV_TO_INT(tmp_we);
                      if (web_dly_sampled(web_index) = '1') then
                         if (VALID_ADDRB) then
                            MEM((ADDRESS_WRITE_B + DIBW_1) downto (ADDRESS_WRITE_B + DIBW/2)) := DIB_dly(DIBW_1 downto DIBW/2);
                            if(DIPBW_1 /= -1) then
                               MEM((16384 + ADDRESS_PARITY_WRITE_B + DIPBW_1) downto (16384 + ADDRESS_PARITY_WRITE_B + DIPBW/2)) := DIPB_dly(DIPBW_1 downto DIPBW/2);
                            end if;
                         end if; -- /* VAILD ADDRB */
                      end if; -- /*  web_dly_sampled = '1' */ 

                  ---------
                  when 32 =>
                  ---------
                      web_index := 0;
                      if (web_dly_sampled(web_index) = '1') then
                         if (VALID_ADDRB) then
                            MEM((ADDRESS_WRITE_B + (DIBW/4)*1 -1) downto (ADDRESS_WRITE_B)) := DIB_dly((((DIBW/4)*1) - 1) downto 0);
                            if(DIPBW_1 /= -1) then
                               MEM((16384 + ADDRESS_PARITY_WRITE_B + (DIPBW/4)*1 - 1) downto (16384 + ADDRESS_PARITY_WRITE_B)) := DIPB_dly(((DIPBW/4)*1 -1) downto 0);
                            end if;
                         end if; -- /* VAILD ADDRB */
                      end if; -- /*  web_dly_sampled = '1' */ 

                      web_index := 1;
                      if (web_dly_sampled(web_index) = '1') then
                         if (VALID_ADDRB) then
                            MEM((ADDRESS_WRITE_B + (DIBW/4)*2 -1) downto (ADDRESS_WRITE_B + (DIBW/4)*1)) := DIB_dly((((DIBW/4)*2) - 1) downto (DIBW/4)*1);
                            if(DIPBW_1 /= -1) then
                               MEM((16384 + ADDRESS_PARITY_WRITE_B + (DIPBW/4)*2 - 1) downto (16384 + ADDRESS_PARITY_WRITE_B  + (DIPBW/4)*1)) := DIPB_dly(((DIPBW/4)*2 -1) downto ((DIPBW/4)*1));
                            end if;
                         end if; -- /* VAILD ADDRB */
                      end if; -- /*  web_dly_sampled = '1' */ 

                      web_index := 2;
                      if (web_dly_sampled(web_index) = '1') then
                         if (VALID_ADDRB) then
                            MEM((ADDRESS_WRITE_B + (DIBW/4)*3 -1) downto (ADDRESS_WRITE_B + (DIBW/4)*2)) := DIB_dly((((DIBW/4)*3) - 1) downto (DIBW/4)*2);
                            if(DIPBW_1 /= -1) then
                               MEM((16384 + ADDRESS_PARITY_WRITE_B + (DIPBW/4)*3 - 1) downto (16384 + ADDRESS_PARITY_WRITE_B  + (DIPBW/4)*2)) := DIPB_dly(((DIPBW/4)*3 -1) downto ((DIPBW/4)*2));
                            end if;
                         end if; -- /* VAILD ADDRB */
                      end if; -- /*  web_dly_sampled = '1' */ 

                      web_index := 3;
                      if (web_dly_sampled(web_index) = '1') then
                         if (VALID_ADDRB) then
                            MEM((ADDRESS_WRITE_B + (DIBW/4)*4 -1) downto (ADDRESS_WRITE_B + (DIBW/4)*3)) := DIB_dly((((DIBW/4)*4) - 1) downto (DIBW/4)*3);
                            if(DIPBW_1 /= -1) then
                               MEM((16384 + ADDRESS_PARITY_WRITE_B + (DIPBW/4)*4 - 1) downto (16384 + ADDRESS_PARITY_WRITE_B  + (DIPBW/4)*3)) := DIPB_dly(((DIPBW/4)*4 -1) downto ((DIPBW/4)*3));
                            end if;
                         end if; -- /* VAILD ADDRB */
                      end if; -- /*  web_dly_sampled = '1' */ 
                  when others =>
                     null;
                end case;
                 
-----------------------  Start COLLISION MEMORY UPDATE B ------------------------------

        if(SimCollisionCheck_var /= 0) then
           if(clsn_type.write_write) then
              tmp_membuf := (others => '0');
              DOB_clsn_write_index := SLV_TO_INT(tmp_zero_write_b(4 downto 0));
              tmp_membuf(DIBW_1 downto 0) := MEM((ADDRESS_WRITE_B + DIBW_1) downto (ADDRESS_WRITE_B));
              MEM((ADDRESS_WRITE_B + DIBW_1) downto (ADDRESS_WRITE_B)) := tmp_membuf(DIBW_1 downto 0) xor clsn_xbufs.MEM1_clsn((DOB_clsn_write_index+DIBW_1) downto DOB_clsn_write_index);

             if((DIPBW_1 /= -1) and (DIPAW_1 /= -1)) then
                tmp_membuf := (others => '0');
                DOPB_clsn_write_index := SLV_TO_INT(tmp_zero_parity_write_b(1 downto 0));
                tmp_membuf(DIPBW_1 downto 0) :=  MEM((16384 + ADDRESS_PARITY_WRITE_B + DIPBW_1) downto (16384 + ADDRESS_PARITY_WRITE_B));
                MEM((16384 + ADDRESS_PARITY_WRITE_B + DIPBW_1) downto (16384 + ADDRESS_PARITY_WRITE_B)) := tmp_membuf(DIPBW_1 downto 0) xor clsn_xbufs.MEMP1_clsn((DOPB_clsn_write_index + DIPBW_1) downto DOPB_clsn_write_index);
              end if;
           end if;
        end if;
                
-----------------------  END COLLISION MEMORY UPDATE B   ------------------------------

            end if; -- /* end enb_dly_sampled = '1' */
      end if;
--=======================================================================================
----- Port A

    DOA_viol(0)  <= ViolationA xor DOA_zd(0) xor DOA_clsn_zero(0);
    DOA_viol(1)  <= ViolationA xor DOA_zd(1) xor DOA_clsn_zero(1);
    DOA_viol(2)  <= ViolationA xor DOA_zd(2) xor DOA_clsn_zero(2);
    DOA_viol(3)  <= ViolationA xor DOA_zd(3) xor DOA_clsn_zero(3);
    DOA_viol(4)  <= ViolationA xor DOA_zd(4) xor DOA_clsn_zero(4);
    DOA_viol(5)  <= ViolationA xor DOA_zd(5) xor DOA_clsn_zero(5);
    DOA_viol(6)  <= ViolationA xor DOA_zd(6) xor DOA_clsn_zero(6);
    DOA_viol(7)  <= ViolationA xor DOA_zd(7) xor DOA_clsn_zero(7);
    DOA_viol(8)  <= ViolationA xor DOA_zd(8) xor DOA_clsn_zero(8);
    DOA_viol(9)  <= ViolationA xor DOA_zd(9) xor DOA_clsn_zero(9);
    DOA_viol(10) <= ViolationA xor DOA_zd(10) xor DOA_clsn_zero(10);
    DOA_viol(11) <= ViolationA xor DOA_zd(11) xor DOA_clsn_zero(11);
    DOA_viol(12) <= ViolationA xor DOA_zd(12) xor DOA_clsn_zero(12);
    DOA_viol(13) <= ViolationA xor DOA_zd(13) xor DOA_clsn_zero(13);
    DOA_viol(14) <= ViolationA xor DOA_zd(14) xor DOA_clsn_zero(14);
    DOA_viol(15) <= ViolationA xor DOA_zd(15) xor DOA_clsn_zero(15);
    DOA_viol(16) <= ViolationA xor DOA_zd(16) xor DOA_clsn_zero(16);
    DOA_viol(17) <= ViolationA xor DOA_zd(17) xor DOA_clsn_zero(17);
    DOA_viol(18) <= ViolationA xor DOA_zd(18) xor DOA_clsn_zero(18);
    DOA_viol(19) <= ViolationA xor DOA_zd(19) xor DOA_clsn_zero(19);
    DOA_viol(20) <= ViolationA xor DOA_zd(20) xor DOA_clsn_zero(20);
    DOA_viol(21) <= ViolationA xor DOA_zd(21) xor DOA_clsn_zero(21);
    DOA_viol(22) <= ViolationA xor DOA_zd(22) xor DOA_clsn_zero(22);
    DOA_viol(23) <= ViolationA xor DOA_zd(23) xor DOA_clsn_zero(23);
    DOA_viol(24) <= ViolationA xor DOA_zd(24) xor DOA_clsn_zero(24);
    DOA_viol(25) <= ViolationA xor DOA_zd(25) xor DOA_clsn_zero(25);
    DOA_viol(26) <= ViolationA xor DOA_zd(26) xor DOA_clsn_zero(26);
    DOA_viol(27) <= ViolationA xor DOA_zd(27) xor DOA_clsn_zero(27);
    DOA_viol(28) <= ViolationA xor DOA_zd(28) xor DOA_clsn_zero(28);
    DOA_viol(29) <= ViolationA xor DOA_zd(29) xor DOA_clsn_zero(29);
    DOA_viol(30) <= ViolationA xor DOA_zd(30) xor DOA_clsn_zero(30);
    DOA_viol(31) <= ViolationA xor DOA_zd(31) xor DOA_clsn_zero(31);
    DOPA_viol(0) <= ViolationA xor DOPA_zd(0) xor DOPA_clsn_zero(0);
    DOPA_viol(1) <= ViolationA xor DOPA_zd(1) xor DOPA_clsn_zero(1);
    DOPA_viol(2) <= ViolationA xor DOPA_zd(2) xor DOPA_clsn_zero(2);
    DOPA_viol(3) <= ViolationA xor DOPA_zd(3) xor DOPA_clsn_zero(3);

----- Port B

    DOB_viol(0)  <= ViolationB xor DOB_zd(0) xor DOB_clsn_zero(0);
    DOB_viol(1)  <= ViolationB xor DOB_zd(1) xor DOB_clsn_zero(1);
    DOB_viol(2)  <= ViolationB xor DOB_zd(2) xor DOB_clsn_zero(2);
    DOB_viol(3)  <= ViolationB xor DOB_zd(3) xor DOB_clsn_zero(3);
    DOB_viol(4)  <= ViolationB xor DOB_zd(4) xor DOB_clsn_zero(4);
    DOB_viol(5)  <= ViolationB xor DOB_zd(5) xor DOB_clsn_zero(5);
    DOB_viol(6)  <= ViolationB xor DOB_zd(6) xor DOB_clsn_zero(6);
    DOB_viol(7)  <= ViolationB xor DOB_zd(7) xor DOB_clsn_zero(7);
    DOB_viol(8)  <= ViolationB xor DOB_zd(8) xor DOB_clsn_zero(8);
    DOB_viol(9)  <= ViolationB xor DOB_zd(9) xor DOB_clsn_zero(9);
    DOB_viol(10) <= ViolationB xor DOB_zd(10) xor DOB_clsn_zero(10);
    DOB_viol(11) <= ViolationB xor DOB_zd(11) xor DOB_clsn_zero(11);
    DOB_viol(12) <= ViolationB xor DOB_zd(12) xor DOB_clsn_zero(12);
    DOB_viol(13) <= ViolationB xor DOB_zd(13) xor DOB_clsn_zero(13);
    DOB_viol(14) <= ViolationB xor DOB_zd(14) xor DOB_clsn_zero(14);
    DOB_viol(15) <= ViolationB xor DOB_zd(15) xor DOB_clsn_zero(15);
    DOB_viol(16) <= ViolationB xor DOB_zd(16) xor DOB_clsn_zero(16);
    DOB_viol(17) <= ViolationB xor DOB_zd(17) xor DOB_clsn_zero(17);
    DOB_viol(18) <= ViolationB xor DOB_zd(18) xor DOB_clsn_zero(18);
    DOB_viol(19) <= ViolationB xor DOB_zd(19) xor DOB_clsn_zero(19);
    DOB_viol(20) <= ViolationB xor DOB_zd(20) xor DOB_clsn_zero(20);
    DOB_viol(21) <= ViolationB xor DOB_zd(21) xor DOB_clsn_zero(21);
    DOB_viol(22) <= ViolationB xor DOB_zd(22) xor DOB_clsn_zero(22);
    DOB_viol(23) <= ViolationB xor DOB_zd(23) xor DOB_clsn_zero(23);
    DOB_viol(24) <= ViolationB xor DOB_zd(24) xor DOB_clsn_zero(24);
    DOB_viol(25) <= ViolationB xor DOB_zd(25) xor DOB_clsn_zero(25);
    DOB_viol(26) <= ViolationB xor DOB_zd(26) xor DOB_clsn_zero(26);
    DOB_viol(27) <= ViolationB xor DOB_zd(27) xor DOB_clsn_zero(27);
    DOB_viol(28) <= ViolationB xor DOB_zd(28) xor DOB_clsn_zero(28);
    DOB_viol(29) <= ViolationB xor DOB_zd(29) xor DOB_clsn_zero(29);
    DOB_viol(30) <= ViolationB xor DOB_zd(30) xor DOB_clsn_zero(30);
    DOB_viol(31) <= ViolationB xor DOB_zd(31) xor DOB_clsn_zero(31);
    DOPB_viol(0) <= ViolationB xor DOPB_zd(0) xor DOPB_clsn_zero(0);
    DOPB_viol(1) <= ViolationB xor DOPB_zd(1) xor DOPB_clsn_zero(1);
    DOPB_viol(2) <= ViolationB xor DOPB_zd(2) xor DOPB_clsn_zero(2);
    DOPB_viol(3) <= ViolationB xor DOPB_zd(3) xor DOPB_clsn_zero(3);

    wait on ADDRA_dly, ADDRB_dly, CLKA_dly, CLKB_dly, DIA_dly, DIB_dly, DIPA_dly, DIPB_dly, ENA_dly, ENB_dly, GSR_ipd, GSR_CLKA_dly, GSR_CLKB_dly, REGCEA_dly, REGCEB_dly, RSTA_dly, RSTB_dly, WEA_dly, WEB_dly;
  end process VITALBehavior;

----------------------------------------------------------------------------
------------------- Output Registers -- Port A -----------------------------
----------------------------------------------------------------------------

   prcs_regA:process (INIT_DONE, CLKA_dly, GSR_CLKA_dly, RSTA_dly)
   variable ssra_reg_var : std_ulogic := '0';
   variable FIRST_TIME : boolean := true;
   begin

-- CR 430517 - added 1 line though it may not be necessary
       ssra_reg_var := '0';

       if(FIRST_TIME and INIT_DONE) then
           DOA_regist(DOAW_1 downto 0) <= INI_A_sig(DOAW_1 downto 0);
           if(DOPAW_1 /= -1) then
             DOPA_regist(DOPAW_1 downto 0) <= INI_A_sig((DOPAW_1 + DOAW) downto DOAW);
           end if;
           FIRST_TIME := false;
       elsif(DOA_REG = 1) then
           if(GSR_CLKA_dly = '1') then
              DOA_regist(DOAW_1 downto 0) <= INI_A_sig(DOAW_1 downto 0);
              if(DOPAW_1 /= -1) then
                DOPA_regist(DOPAW_1 downto 0) <= INI_A_sig((DOPAW_1 + DOAW) downto DOAW);
              end if;
              ssra_reg_var := '0';
-- CR 426962
--           elsif((GSR_CLKA_dly = '0') and (ENA_dly = '1'))then
           elsif (GSR_CLKA_dly = '0') then
              if(ENA_dly = '1') then
                 ssra_reg_var := RSTA_dly;
              end if;
              case rst_async_flag is
                  when '1' =>
                  -----------// async reset
-- CR 427370 fix
                       if((RSTA_dly = '1') and (ENA_dly = '1'))then
                          DOA_regist(DOAW_1 downto 0) <=  SRVA_A_sig(DOAW_1 downto 0);
                          if(DOPAW_1 /= -1) then
                             DOPA_regist(DOPAW_1 downto 0) <= SRVA_A_sig((DOPAW_1 + DOAW) downto DOAW);
                          end if;
--                       elsif ((RSTA_dly = '0') and (REGCEA_dly = '1')) then
                       elsif ((ssra_reg_var = '0') and (REGCEA_dly = '1')) then
                          if(rising_edge(CLKA_dly)) then
                             DOA_regist <= DOA_viol;
                             DOPA_regist <= DOPA_viol;
                          end if;
                       end if;
                  
                  when '0' =>
                       if(rising_edge(CLKA_dly)) then
--                          if(RSTA_dly = '1') then
                          if(ssra_reg_var = '1') then
                             DOA_regist(DOAW_1 downto 0) <=  SRVA_A_sig(DOAW_1 downto 0);
                             if(DOPAW_1 /= -1) then
                                DOPA_regist(DOPAW_1 downto 0) <= SRVA_A_sig((DOPAW_1 + DOAW) downto DOAW);
                             end if;
--                          elsif ((RSTA_dly = '0') and (REGCEA_dly = '1')) then
                          elsif ((ssra_reg_var = '0') and (REGCEA_dly = '1')) then
                             DOA_regist <= DOA_viol;
                             DOPA_regist <= DOPA_viol;
                          end if;
                       end if;
                  when others => null;
              end case;

           end if;
       end if;
   end process prcs_regA;
-----------------------------------------------------------------------------------
   prcs_PipeLineA:process (INIT_DONE, DOA_viol, DOPA_viol, DOA_regist, DOPA_regist)
   variable FIRST_TIME : boolean := true;
   begin
    if(FIRST_TIME) then
      if(INIT_DONE) then
        DOA_mux(DOAW_1 downto 0) <= INI_A_sig(DOAW_1 downto 0);
        if(DOPAW_1 /= -1) then
           DOPA_mux(DOPAW_1 downto 0) <= INI_A_sig((DOPAW_1 + DOAW) downto DOAW);
        end if;
        FIRST_TIME := false;
      end if;
    else
     case DOA_REG is
       when 0 =>
            DOA_mux  <= DOA_viol;
            DOPA_mux <= DOPA_viol;

       when 1 =>
            DOA_mux  <= DOA_regist;
            DOPA_mux <= DOPA_regist;
       when others =>
            assert false
            report "Attribute Syntax Error : The allowed values for DOA_REG are 0 or 1"
            severity Failure;
     end case;
    end if;
   end process prcs_PipeLineA;

----------------------------------------------------------------------------
------------------- Output Registers -- Port B -----------------------------
----------------------------------------------------------------------------

   prcs_regB:process (INIT_DONE, CLKB_dly, GSR_CLKB_dly, RSTB_dly)
   variable ssrb_reg_var : std_ulogic := '0';
   variable FIRST_TIME : boolean := true;
   begin

-- CR 430517 - added 1 line though it may not be necessary
       ssrb_reg_var := '0';

       if(FIRST_TIME and INIT_DONE) then
           DOB_regist(DOBW_1 downto 0) <= INI_B_sig(DOBW_1 downto 0);
           if(DOPBW_1 /= -1) then
             DOPB_regist(DOPBW_1 downto 0) <= INI_B_sig((DOPBW_1 + DOBW) downto DOBW);
           end if;
           FIRST_TIME := false;
       elsif(DOB_REG = 1) then
           if(GSR_CLKB_dly = '1') then
              DOB_regist(DOBW_1 downto 0) <= INI_B_sig(DOBW_1 downto 0);
              if(DOPBW_1 /= -1) then
                DOPB_regist(DOPBW_1 downto 0) <= INI_B_sig((DOPBW_1 + DOBW) downto DOBW);
              end if;
              ssrb_reg_var := '0';
-- CR 426962
--           elsif((GSR_CLKB_dly = '0') and (ENB_dly = '1'))then
           elsif(GSR_CLKB_dly = '0') then
              if(ENB_dly = '1') then
                 ssrb_reg_var := RSTB_dly;
              end if;
              case rst_async_flag is
                  when '1' =>
                  -----------// async reset
-- CR 427370 fix
                       if((RSTB_dly = '1') and (ENB_dly = '1')) then
                          DOB_regist(DOBW_1 downto 0) <=  SRVA_B_sig(DOBW_1 downto 0);
                          if(DOPBW_1 /= -1) then
                             DOPB_regist(DOPBW_1 downto 0) <= SRVA_B_sig((DOPBW_1 + DOBW) downto DOBW);
                          end if;
--                       elsif ((RSTB_dly = '0') and (REGCEB_dly = '1')) then
                       elsif ((ssrb_reg_var = '0') and (REGCEB_dly = '1')) then
                          if(rising_edge(CLKB_dly)) then
                             DOB_regist <= DOB_viol;
                             DOPB_regist <= DOPB_viol;
                          end if;
                       end if;
                  
                  when '0' =>
                       if(rising_edge(CLKB_dly)) then
--                          if(RSTB_dly = '1') then
                          if(ssrb_reg_var = '1') then
                             DOB_regist(DOBW_1 downto 0) <=  SRVA_B_sig(DOBW_1 downto 0);
                             if(DOPBW_1 /= -1) then
                                DOPB_regist(DOPBW_1 downto 0) <= SRVA_B_sig((DOPBW_1 + DOBW) downto DOBW);
                             end if;
--                          elsif ((RSTB_dly = '0') and (REGCEB_dly = '1')) then
                          elsif ((ssrb_reg_var = '0') and (REGCEB_dly = '1')) then
                             DOB_regist <= DOB_viol;
                             DOPB_regist <= DOPB_viol;
                          end if;
                       end if;
                  when others => null;
              end case;

           end if;
       end if;
   end process prcs_regB;

----------------------------------------------------------------------------
   prcs_PipeLineB:process (INIT_DONE, DOB_viol, DOPB_viol, DOB_regist, DOPB_regist)
   variable FIRST_TIME : boolean := true;
   begin
    if(FIRST_TIME) then
      if(INIT_DONE) then
        DOB_mux(DOBW_1 downto 0) <= INI_B_sig(DOBW_1 downto 0);
        if(DOPBW_1 /= -1) then
           DOPB_mux(DOPBW_1 downto 0) <= INI_B_sig((DOPBW_1 + DOBW) downto DOBW);
        end if;
        FIRST_TIME := false;
      end if;
    else
     case DOB_REG is
       when 0 =>
            DOB_mux  <= DOB_viol;
            DOPB_mux <= DOPB_viol;

       when 1 =>
            DOB_mux  <= DOB_regist;
            DOPB_mux <= DOPB_regist;
       when others =>
            assert false
            report "Attribute Syntax Error : The allowed values for DOB_REG are 0 or 1"
            severity Failure;
     end case;
    end if;
   end process prcs_PipeLineB;

----- ###############################################################################

----- Port A
   prcs_output:process (DOA_mux, DOPA_mux, DOB_mux, DOPB_mux)

    variable ENA_dly_sampled   : std_ulogic                      := 'X';
    variable ENB_dly_sampled   : std_ulogic                      := 'X';


    variable DOA_GlitchData0  : VitalGlitchDataType;
    variable DOA_GlitchData1  : VitalGlitchDataType;
    variable DOA_GlitchData2  : VitalGlitchDataType;
    variable DOA_GlitchData3  : VitalGlitchDataType;
    variable DOA_GlitchData4  : VitalGlitchDataType;
    variable DOA_GlitchData5  : VitalGlitchDataType;
    variable DOA_GlitchData6  : VitalGlitchDataType;
    variable DOA_GlitchData7  : VitalGlitchDataType;
    variable DOA_GlitchData8  : VitalGlitchDataType;
    variable DOA_GlitchData9  : VitalGlitchDataType;
    variable DOA_GlitchData10  : VitalGlitchDataType;
    variable DOA_GlitchData11  : VitalGlitchDataType;
    variable DOA_GlitchData12  : VitalGlitchDataType;
    variable DOA_GlitchData13  : VitalGlitchDataType;
    variable DOA_GlitchData14  : VitalGlitchDataType;
    variable DOA_GlitchData15  : VitalGlitchDataType;
    variable DOA_GlitchData16  : VitalGlitchDataType;
    variable DOA_GlitchData17  : VitalGlitchDataType;
    variable DOA_GlitchData18  : VitalGlitchDataType;
    variable DOA_GlitchData19  : VitalGlitchDataType;
    variable DOA_GlitchData20  : VitalGlitchDataType;
    variable DOA_GlitchData21  : VitalGlitchDataType;
    variable DOA_GlitchData22  : VitalGlitchDataType;
    variable DOA_GlitchData23  : VitalGlitchDataType;
    variable DOA_GlitchData24  : VitalGlitchDataType;
    variable DOA_GlitchData25  : VitalGlitchDataType;
    variable DOA_GlitchData26  : VitalGlitchDataType;
    variable DOA_GlitchData27  : VitalGlitchDataType;
    variable DOA_GlitchData28  : VitalGlitchDataType;
    variable DOA_GlitchData29  : VitalGlitchDataType;
    variable DOA_GlitchData30  : VitalGlitchDataType;
    variable DOA_GlitchData31  : VitalGlitchDataType;
    variable DOPA_GlitchData0 : VitalGlitchDataType;
    variable DOPA_GlitchData1 : VitalGlitchDataType;
    variable DOPA_GlitchData2 : VitalGlitchDataType;
    variable DOPA_GlitchData3 : VitalGlitchDataType;

    variable DOB_GlitchData0  : VitalGlitchDataType;
    variable DOB_GlitchData1  : VitalGlitchDataType;
    variable DOB_GlitchData2  : VitalGlitchDataType;
    variable DOB_GlitchData3  : VitalGlitchDataType;
    variable DOB_GlitchData4  : VitalGlitchDataType;
    variable DOB_GlitchData5  : VitalGlitchDataType;
    variable DOB_GlitchData6  : VitalGlitchDataType;
    variable DOB_GlitchData7  : VitalGlitchDataType;
    variable DOB_GlitchData8  : VitalGlitchDataType;
    variable DOB_GlitchData9  : VitalGlitchDataType;
    variable DOB_GlitchData10  : VitalGlitchDataType;
    variable DOB_GlitchData11  : VitalGlitchDataType;
    variable DOB_GlitchData12  : VitalGlitchDataType;
    variable DOB_GlitchData13  : VitalGlitchDataType;
    variable DOB_GlitchData14  : VitalGlitchDataType;
    variable DOB_GlitchData15  : VitalGlitchDataType;
    variable DOB_GlitchData16  : VitalGlitchDataType;
    variable DOB_GlitchData17  : VitalGlitchDataType;
    variable DOB_GlitchData18  : VitalGlitchDataType;
    variable DOB_GlitchData19  : VitalGlitchDataType;
    variable DOB_GlitchData20  : VitalGlitchDataType;
    variable DOB_GlitchData21  : VitalGlitchDataType;
    variable DOB_GlitchData22  : VitalGlitchDataType;
    variable DOB_GlitchData23  : VitalGlitchDataType;
    variable DOB_GlitchData24  : VitalGlitchDataType;
    variable DOB_GlitchData25  : VitalGlitchDataType;
    variable DOB_GlitchData26  : VitalGlitchDataType;
    variable DOB_GlitchData27  : VitalGlitchDataType;
    variable DOB_GlitchData28  : VitalGlitchDataType;
    variable DOB_GlitchData29  : VitalGlitchDataType;
    variable DOB_GlitchData30  : VitalGlitchDataType;
    variable DOB_GlitchData31  : VitalGlitchDataType;
    variable DOPB_GlitchData0 : VitalGlitchDataType;
    variable DOPB_GlitchData1 : VitalGlitchDataType;
    variable DOPB_GlitchData2 : VitalGlitchDataType;
    variable DOPB_GlitchData3 : VitalGlitchDataType;

   begin

    ENA_dly_sampled   := ENA_dly;
    ENB_dly_sampled   := ENB_dly;

    VitalPathDelay01 (
      OutSignal     => DOA(0),
      GlitchData    => DOA_GlitchData0,
      OutSignalName => "DOA(0)",
      OutTemp       => DOA_mux(0),
      Paths         => (0 => (CLKA_dly'last_event, tpd_CLKA_DOA(0), (ena_dly_sampled /= '0' and GSR_CLKA_dly /= '1')),
                        1 => (GSR_CLKA_dly'last_event, tpd_GSR_DOA(0), true),
                        2 => (RSTA_dly'last_event, tpd_RSTA_DOA(0), (GSR_CLKA_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOA(1),
      GlitchData    => DOA_GlitchData1,
      OutSignalName => "DOA(1)",
      OutTemp       => DOA_mux(1),
      Paths         => (0 => (CLKA_dly'last_event, tpd_CLKA_DOA(1), (ena_dly_sampled /= '0' and GSR_CLKA_dly /= '1')),
                        1 => (GSR_CLKA_dly'last_event, tpd_GSR_DOA(1), true),
                        2 => (RSTA_dly'last_event, tpd_RSTA_DOA(1), (GSR_CLKA_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOA(2),
      GlitchData    => DOA_GlitchData2,
      OutSignalName => "DOA(2)",
      OutTemp       => DOA_mux(2),
      Paths         => (0 => (CLKA_dly'last_event, tpd_CLKA_DOA(2), (ena_dly_sampled /= '0' and GSR_CLKA_dly /= '1')),
                        1 => (GSR_CLKA_dly'last_event, tpd_GSR_DOA(2), true),
                        2 => (RSTA_dly'last_event, tpd_RSTA_DOA(2), (GSR_CLKA_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOA(3),
      GlitchData    => DOA_GlitchData3,
      OutSignalName => "DOA(3)",
      OutTemp       => DOA_mux(3),
      Paths         => (0 => (CLKA_dly'last_event, tpd_CLKA_DOA(3), (ena_dly_sampled /= '0' and GSR_CLKA_dly /= '1')),
                        1 => (GSR_CLKA_dly'last_event, tpd_GSR_DOA(3), true),
                        2 => (RSTA_dly'last_event, tpd_RSTA_DOA(3), (GSR_CLKA_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOA(4),
      GlitchData    => DOA_GlitchData4,
      OutSignalName => "DOA(4)",
      OutTemp       => DOA_mux(4),
      Paths         => (0 => (CLKA_dly'last_event, tpd_CLKA_DOA(4), (ena_dly_sampled /= '0' and GSR_CLKA_dly /= '1')),
                        1 => (GSR_CLKA_dly'last_event, tpd_GSR_DOA(4), true),
                        2 => (RSTA_dly'last_event, tpd_RSTA_DOA(4), (GSR_CLKA_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOA(5),
      GlitchData    => DOA_GlitchData5,
      OutSignalName => "DOA(5)",
      OutTemp       => DOA_mux(5),
      Paths         => (0 => (CLKA_dly'last_event, tpd_CLKA_DOA(5), (ena_dly_sampled /= '0' and GSR_CLKA_dly /= '1')),
                        1 => (GSR_CLKA_dly'last_event, tpd_GSR_DOA(5), true),
                        2 => (RSTA_dly'last_event, tpd_RSTA_DOA(5), (GSR_CLKA_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOA(6),
      GlitchData    => DOA_GlitchData6,
      OutSignalName => "DOA(6)",
      OutTemp       => DOA_mux(6),
      Paths         => (0 => (CLKA_dly'last_event, tpd_CLKA_DOA(6), (ena_dly_sampled /= '0' and GSR_CLKA_dly /= '1')),
                        1 => (GSR_CLKA_dly'last_event, tpd_GSR_DOA(6), true),
                        2 => (RSTA_dly'last_event, tpd_RSTA_DOA(6), (GSR_CLKA_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOA(7),
      GlitchData    => DOA_GlitchData7,
      OutSignalName => "DOA(7)",
      OutTemp       => DOA_mux(7),
      Paths         => (0 => (CLKA_dly'last_event, tpd_CLKA_DOA(7), (ena_dly_sampled /= '0' and GSR_CLKA_dly /= '1')),
                        1 => (GSR_CLKA_dly'last_event, tpd_GSR_DOA(7), true),
                        2 => (RSTA_dly'last_event, tpd_RSTA_DOA(7), (GSR_CLKA_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOA(8),
      GlitchData    => DOA_GlitchData8,
      OutSignalName => "DOA(8)",
      OutTemp       => DOA_mux(8),
      Paths         => (0 => (CLKA_dly'last_event, tpd_CLKA_DOA(8), (ena_dly_sampled /= '0' and GSR_CLKA_dly /= '1')),
                        1 => (GSR_CLKA_dly'last_event, tpd_GSR_DOA(8), true),
                        2 => (RSTA_dly'last_event, tpd_RSTA_DOA(8), (GSR_CLKA_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOA(9),
      GlitchData    => DOA_GlitchData9,
      OutSignalName => "DOA(9)",
      OutTemp       => DOA_mux(9),
      Paths         => (0 => (CLKA_dly'last_event, tpd_CLKA_DOA(9), (ena_dly_sampled /= '0' and GSR_CLKA_dly /= '1')),
                        1 => (GSR_CLKA_dly'last_event, tpd_GSR_DOA(9), true),
                        2 => (RSTA_dly'last_event, tpd_RSTA_DOA(9), (GSR_CLKA_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOA(10),
      GlitchData    => DOA_GlitchData10,
      OutSignalName => "DOA(10)",
      OutTemp       => DOA_mux(10),
      Paths         => (0 => (CLKA_dly'last_event, tpd_CLKA_DOA(10), (ena_dly_sampled /= '0' and GSR_CLKA_dly /= '1')),
                        1 => (GSR_CLKA_dly'last_event, tpd_GSR_DOA(10), true),
                        2 => (RSTA_dly'last_event, tpd_RSTA_DOA(10), (GSR_CLKA_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOA(11),
      GlitchData    => DOA_GlitchData11,
      OutSignalName => "DOA(11)",
      OutTemp       => DOA_mux(11),
      Paths         => (0 => (CLKA_dly'last_event, tpd_CLKA_DOA(11), (ena_dly_sampled /= '0' and GSR_CLKA_dly /= '1')),
                        1 => (GSR_CLKA_dly'last_event, tpd_GSR_DOA(11), true),
                        2 => (RSTA_dly'last_event, tpd_RSTA_DOA(11), (GSR_CLKA_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOA(12),
      GlitchData    => DOA_GlitchData12,
      OutSignalName => "DOA(12)",
      OutTemp       => DOA_mux(12),
      Paths         => (0 => (CLKA_dly'last_event, tpd_CLKA_DOA(12), (ena_dly_sampled /= '0' and GSR_CLKA_dly /= '1')),
                        1 => (GSR_CLKA_dly'last_event, tpd_GSR_DOA(12), true),
                        2 => (RSTA_dly'last_event, tpd_RSTA_DOA(12), (GSR_CLKA_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOA(13),
      GlitchData    => DOA_GlitchData13,
      OutSignalName => "DOA(13)",
      OutTemp       => DOA_mux(13),
      Paths         => (0 => (CLKA_dly'last_event, tpd_CLKA_DOA(13), (ena_dly_sampled /= '0' and GSR_CLKA_dly /= '1')),
                        1 => (GSR_CLKA_dly'last_event, tpd_GSR_DOA(13), true),
                        2 => (RSTA_dly'last_event, tpd_RSTA_DOA(13), (GSR_CLKA_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOA(14),
      GlitchData    => DOA_GlitchData14,
      OutSignalName => "DOA(14)",
      OutTemp       => DOA_mux(14),
      Paths         => (0 => (CLKA_dly'last_event, tpd_CLKA_DOA(14), (ena_dly_sampled /= '0' and GSR_CLKA_dly /= '1')),
                        1 => (GSR_CLKA_dly'last_event, tpd_GSR_DOA(14), true),
                        2 => (RSTA_dly'last_event, tpd_RSTA_DOA(14), (GSR_CLKA_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOA(15),
      GlitchData    => DOA_GlitchData15,
      OutSignalName => "DOA(15)",
      OutTemp       => DOA_mux(15),
      Paths         => (0 => (CLKA_dly'last_event, tpd_CLKA_DOA(15), (ena_dly_sampled /= '0' and GSR_CLKA_dly /= '1')),
                        1 => (GSR_CLKA_dly'last_event, tpd_GSR_DOA(15), true),
                        2 => (RSTA_dly'last_event, tpd_RSTA_DOA(15), (GSR_CLKA_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOA(16),
      GlitchData    => DOA_GlitchData16,
      OutSignalName => "DOA(16)",
      OutTemp       => DOA_mux(16),
      Paths         => (0 => (CLKA_dly'last_event, tpd_CLKA_DOA(16), (ena_dly_sampled /= '0' and GSR_CLKA_dly /= '1')),
                        1 => (GSR_CLKA_dly'last_event, tpd_GSR_DOA(16), true),
                        2 => (RSTA_dly'last_event, tpd_RSTA_DOA(16), (GSR_CLKA_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOA(17),
      GlitchData    => DOA_GlitchData17,
      OutSignalName => "DOA(17)",
      OutTemp       => DOA_mux(17),
      Paths         => (0 => (CLKA_dly'last_event, tpd_CLKA_DOA(17), (ena_dly_sampled /= '0' and GSR_CLKA_dly /= '1')),
                        1 => (GSR_CLKA_dly'last_event, tpd_GSR_DOA(17), true),
                        2 => (RSTA_dly'last_event, tpd_RSTA_DOA(17), (GSR_CLKA_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOA(18),
      GlitchData    => DOA_GlitchData18,
      OutSignalName => "DOA(18)",
      OutTemp       => DOA_mux(18),
      Paths         => (0 => (CLKA_dly'last_event, tpd_CLKA_DOA(18), (ena_dly_sampled /= '0' and GSR_CLKA_dly /= '1')),
                        1 => (GSR_CLKA_dly'last_event, tpd_GSR_DOA(18), true),
                        2 => (RSTA_dly'last_event, tpd_RSTA_DOA(18), (GSR_CLKA_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOA(19),
      GlitchData    => DOA_GlitchData19,
      OutSignalName => "DOA(19)",
      OutTemp       => DOA_mux(19),
      Paths         => (0 => (CLKA_dly'last_event, tpd_CLKA_DOA(19), (ena_dly_sampled /= '0' and GSR_CLKA_dly /= '1')),
                        1 => (GSR_CLKA_dly'last_event, tpd_GSR_DOA(19), true),
                        2 => (RSTA_dly'last_event, tpd_RSTA_DOA(19), (GSR_CLKA_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOA(20),
      GlitchData    => DOA_GlitchData20,
      OutSignalName => "DOA(20)",
      OutTemp       => DOA_mux(20),
      Paths         => (0 => (CLKA_dly'last_event, tpd_CLKA_DOA(20), (ena_dly_sampled /= '0' and GSR_CLKA_dly /= '1')),
                        1 => (GSR_CLKA_dly'last_event, tpd_GSR_DOA(20), true),
                        2 => (RSTA_dly'last_event, tpd_RSTA_DOA(20), (GSR_CLKA_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOA(21),
      GlitchData    => DOA_GlitchData21,
      OutSignalName => "DOA(21)",
      OutTemp       => DOA_mux(21),
      Paths         => (0 => (CLKA_dly'last_event, tpd_CLKA_DOA(21), (ena_dly_sampled /= '0' and GSR_CLKA_dly /= '1')),
                        1 => (GSR_CLKA_dly'last_event, tpd_GSR_DOA(21), true),
                        2 => (RSTA_dly'last_event, tpd_RSTA_DOA(21), (GSR_CLKA_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOA(22),
      GlitchData    => DOA_GlitchData22,
      OutSignalName => "DOA(22)",
      OutTemp       => DOA_mux(22),
      Paths         => (0 => (CLKA_dly'last_event, tpd_CLKA_DOA(22), (ena_dly_sampled /= '0' and GSR_CLKA_dly /= '1')),
                        1 => (GSR_CLKA_dly'last_event, tpd_GSR_DOA(22), true),
                        2 => (RSTA_dly'last_event, tpd_RSTA_DOA(22), (GSR_CLKA_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOA(23),
      GlitchData    => DOA_GlitchData23,
      OutSignalName => "DOA(23)",
      OutTemp       => DOA_mux(23),
      Paths         => (0 => (CLKA_dly'last_event, tpd_CLKA_DOA(23), (ena_dly_sampled /= '0' and GSR_CLKA_dly /= '1')),
                        1 => (GSR_CLKA_dly'last_event, tpd_GSR_DOA(23), true),
                        2 => (RSTA_dly'last_event, tpd_RSTA_DOA(23), (GSR_CLKA_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOA(24),
      GlitchData    => DOA_GlitchData24,
      OutSignalName => "DOA(24)",
      OutTemp       => DOA_mux(24),
      Paths         => (0 => (CLKA_dly'last_event, tpd_CLKA_DOA(24), (ena_dly_sampled /= '0' and GSR_CLKA_dly /= '1')),
                        1 => (GSR_CLKA_dly'last_event, tpd_GSR_DOA(24), true),
                        2 => (RSTA_dly'last_event, tpd_RSTA_DOA(24), (GSR_CLKA_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOA(25),
      GlitchData    => DOA_GlitchData25,
      OutSignalName => "DOA(25)",
      OutTemp       => DOA_mux(25),
      Paths         => (0 => (CLKA_dly'last_event, tpd_CLKA_DOA(25), (ena_dly_sampled /= '0' and GSR_CLKA_dly /= '1')),
                        1 => (GSR_CLKA_dly'last_event, tpd_GSR_DOA(25), true),
                        2 => (RSTA_dly'last_event, tpd_RSTA_DOA(25), (GSR_CLKA_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOA(26),
      GlitchData    => DOA_GlitchData26,
      OutSignalName => "DOA(26)",
      OutTemp       => DOA_mux(26),
      Paths         => (0 => (CLKA_dly'last_event, tpd_CLKA_DOA(26), (ena_dly_sampled /= '0' and GSR_CLKA_dly /= '1')),
                        1 => (GSR_CLKA_dly'last_event, tpd_GSR_DOA(26), true),
                        2 => (RSTA_dly'last_event, tpd_RSTA_DOA(26), (GSR_CLKA_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOA(27),
      GlitchData    => DOA_GlitchData27,
      OutSignalName => "DOA(27)",
      OutTemp       => DOA_mux(27),
      Paths         => (0 => (CLKA_dly'last_event, tpd_CLKA_DOA(27), (ena_dly_sampled /= '0' and GSR_CLKA_dly /= '1')),
                        1 => (GSR_CLKA_dly'last_event, tpd_GSR_DOA(27), true),
                        2 => (RSTA_dly'last_event, tpd_RSTA_DOA(27), (GSR_CLKA_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOA(28),
      GlitchData    => DOA_GlitchData28,
      OutSignalName => "DOA(28)",
      OutTemp       => DOA_mux(28),
      Paths         => (0 => (CLKA_dly'last_event, tpd_CLKA_DOA(28), (ena_dly_sampled /= '0' and GSR_CLKA_dly /= '1')),
                        1 => (GSR_CLKA_dly'last_event, tpd_GSR_DOA(28), true),
                        2 => (RSTA_dly'last_event, tpd_RSTA_DOA(28), (GSR_CLKA_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOA(29),
      GlitchData    => DOA_GlitchData29,
      OutSignalName => "DOA(29)",
      OutTemp       => DOA_mux(29),
      Paths         => (0 => (CLKA_dly'last_event, tpd_CLKA_DOA(29), (ena_dly_sampled /= '0' and GSR_CLKA_dly /= '1')),
                        1 => (GSR_CLKA_dly'last_event, tpd_GSR_DOA(29), true),
                        2 => (RSTA_dly'last_event, tpd_RSTA_DOA(29), (GSR_CLKA_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOA(30),
      GlitchData    => DOA_GlitchData30,
      OutSignalName => "DOA(30)",
      OutTemp       => DOA_mux(30),
      Paths         => (0 => (CLKA_dly'last_event, tpd_CLKA_DOA(30), (ena_dly_sampled /= '0' and GSR_CLKA_dly /= '1')),
                        1 => (GSR_CLKA_dly'last_event, tpd_GSR_DOA(30), true),
                        2 => (RSTA_dly'last_event, tpd_RSTA_DOA(30), (GSR_CLKA_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOA(31),
      GlitchData    => DOA_GlitchData31,
      OutSignalName => "DOA(31)",
      OutTemp       => DOA_mux(31),
      Paths         => (0 => (CLKA_dly'last_event, tpd_CLKA_DOA(31), (ena_dly_sampled /= '0' and GSR_CLKA_dly /= '1')),
                        1 => (GSR_CLKA_dly'last_event, tpd_GSR_DOA(31), true),
                        2 => (RSTA_dly'last_event, tpd_RSTA_DOA(31), (GSR_CLKA_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOPA(0),
      GlitchData    => DOPA_GlitchData0,
      OutSignalName => "DOPA(0)",
      OutTemp       => DOPA_mux(0),
      Paths         => (0 => (CLKA_dly'last_event, tpd_CLKA_DOPA(0), (ena_dly_sampled /= '0' and GSR_CLKA_dly /= '1' )),
                        1 => (GSR_CLKA_dly'last_event, tpd_GSR_DOPA(0), true),
                        2 => (RSTA_dly'last_event, tpd_RSTA_DOPA(0), (GSR_CLKA_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOPA(1),
      GlitchData    => DOPA_GlitchData1,
      OutSignalName => "DOPA(1)",
      OutTemp       => DOPA_mux(1),
      Paths         => (0 => (CLKA_dly'last_event, tpd_CLKA_DOPA(1), (ena_dly_sampled /= '0' and GSR_CLKA_dly /= '1' )),
                        1 => (GSR_CLKA_dly'last_event, tpd_GSR_DOPA(1), true),
                        2 => (RSTA_dly'last_event, tpd_RSTA_DOPA(1), (GSR_CLKA_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOPA(2),
      GlitchData    => DOPA_GlitchData2,
      OutSignalName => "DOPA(2)",
      OutTemp       => DOPA_mux(2),
      Paths         => (0 => (CLKA_dly'last_event, tpd_CLKA_DOPA(2), (ena_dly_sampled /= '0' and GSR_CLKA_dly /= '1' )),
                        1 => (GSR_CLKA_dly'last_event, tpd_GSR_DOPA(2), true),
                        2 => (RSTA_dly'last_event, tpd_RSTA_DOPA(2), (GSR_CLKA_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOPA(3),
      GlitchData    => DOPA_GlitchData3,
      OutSignalName => "DOPA(3)",
      OutTemp       => DOPA_mux(3),
      Paths         => (0 => (CLKA_dly'last_event, tpd_CLKA_DOPA(3), (ena_dly_sampled /= '0' and GSR_CLKA_dly /= '1' )),
                        1 => (GSR_CLKA_dly'last_event, tpd_GSR_DOPA(3), true),
                        2 => (RSTA_dly'last_event, tpd_RSTA_DOPA(3), (GSR_CLKA_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);

----- Port B
    VitalPathDelay01 (
      OutSignal     => DOB(0),
      GlitchData    => DOB_GlitchData0,
      OutSignalName => "DOB(0)",
      OutTemp       => DOB_mux(0),
      Paths         => (0 => (CLKB_dly'last_event, tpd_CLKB_DOB(0), (enb_dly_sampled /= '0' and GSR_CLKB_dly /= '1')),
                        1 => (GSR_CLKB_dly'last_event, tpd_GSR_DOB(0), true),
                        2 => (RSTB_dly'last_event, tpd_RSTB_DOB(0), (GSR_CLKB_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOB(1),
      GlitchData    => DOB_GlitchData1,
      OutSignalName => "DOB(1)",
      OutTemp       => DOB_mux(1),
      Paths         => (0 => (CLKB_dly'last_event, tpd_CLKB_DOB(1), (enb_dly_sampled /= '0' and GSR_CLKB_dly /= '1')),
                        1 => (GSR_CLKB_dly'last_event, tpd_GSR_DOB(1), true),
                        2 => (RSTB_dly'last_event, tpd_RSTB_DOB(1), (GSR_CLKB_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOB(2),
      GlitchData    => DOB_GlitchData2,
      OutSignalName => "DOB(2)",
      OutTemp       => DOB_mux(2),
      Paths         => (0 => (CLKB_dly'last_event, tpd_CLKB_DOB(2), (enb_dly_sampled /= '0' and GSR_CLKB_dly /= '1')),
                        1 => (GSR_CLKB_dly'last_event, tpd_GSR_DOB(2), true),
                        2 => (RSTB_dly'last_event, tpd_RSTB_DOB(2), (GSR_CLKB_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOB(3),
      GlitchData    => DOB_GlitchData3,
      OutSignalName => "DOB(3)",
      OutTemp       => DOB_mux(3),
      Paths         => (0 => (CLKB_dly'last_event, tpd_CLKB_DOB(3), (enb_dly_sampled /= '0' and GSR_CLKB_dly /= '1')),
                        1 => (GSR_CLKB_dly'last_event, tpd_GSR_DOB(3), true),
                        2 => (RSTB_dly'last_event, tpd_RSTB_DOB(3), (GSR_CLKB_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOB(4),
      GlitchData    => DOB_GlitchData4,
      OutSignalName => "DOB(4)",
      OutTemp       => DOB_mux(4),
      Paths         => (0 => (CLKB_dly'last_event, tpd_CLKB_DOB(4), (enb_dly_sampled /= '0' and GSR_CLKB_dly /= '1')),
                        1 => (GSR_CLKB_dly'last_event, tpd_GSR_DOB(4), true),
                        2 => (RSTB_dly'last_event, tpd_RSTB_DOB(4), (GSR_CLKB_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOB(5),
      GlitchData    => DOB_GlitchData5,
      OutSignalName => "DOB(5)",
      OutTemp       => DOB_mux(5),
      Paths         => (0 => (CLKB_dly'last_event, tpd_CLKB_DOB(5), (enb_dly_sampled /= '0' and GSR_CLKB_dly /= '1')),
                        1 => (GSR_CLKB_dly'last_event, tpd_GSR_DOB(5), true),
                        2 => (RSTB_dly'last_event, tpd_RSTB_DOB(5), (GSR_CLKB_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOB(6),
      GlitchData    => DOB_GlitchData6,
      OutSignalName => "DOB(6)",
      OutTemp       => DOB_mux(6),
      Paths         => (0 => (CLKB_dly'last_event, tpd_CLKB_DOB(6), (enb_dly_sampled /= '0' and GSR_CLKB_dly /= '1')),
                        1 => (GSR_CLKB_dly'last_event, tpd_GSR_DOB(6), true),
                        2 => (RSTB_dly'last_event, tpd_RSTB_DOB(6), (GSR_CLKB_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOB(7),
      GlitchData    => DOB_GlitchData7,
      OutSignalName => "DOB(7)",
      OutTemp       => DOB_mux(7),
      Paths         => (0 => (CLKB_dly'last_event, tpd_CLKB_DOB(7), (enb_dly_sampled /= '0' and GSR_CLKB_dly /= '1')),
                        1 => (GSR_CLKB_dly'last_event, tpd_GSR_DOB(7), true),
                        2 => (RSTB_dly'last_event, tpd_RSTB_DOB(7), (GSR_CLKB_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOB(8),
      GlitchData    => DOB_GlitchData8,
      OutSignalName => "DOB(8)",
      OutTemp       => DOB_mux(8),
      Paths         => (0 => (CLKB_dly'last_event, tpd_CLKB_DOB(8), (enb_dly_sampled /= '0' and GSR_CLKB_dly /= '1')),
                        1 => (GSR_CLKB_dly'last_event, tpd_GSR_DOB(8), true),
                        2 => (RSTB_dly'last_event, tpd_RSTB_DOB(8), (GSR_CLKB_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOB(9),
      GlitchData    => DOB_GlitchData9,
      OutSignalName => "DOB(9)",
      OutTemp       => DOB_mux(9),
      Paths         => (0 => (CLKB_dly'last_event, tpd_CLKB_DOB(9), (enb_dly_sampled /= '0' and GSR_CLKB_dly /= '1')),
                        1 => (GSR_CLKB_dly'last_event, tpd_GSR_DOB(9), true),
                        2 => (RSTB_dly'last_event, tpd_RSTB_DOB(9), (GSR_CLKB_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOB(10),
      GlitchData    => DOB_GlitchData10,
      OutSignalName => "DOB(10)",
      OutTemp       => DOB_mux(10),
      Paths         => (0 => (CLKB_dly'last_event, tpd_CLKB_DOB(10), (enb_dly_sampled /= '0' and GSR_CLKB_dly /= '1')),
                        1 => (GSR_CLKB_dly'last_event, tpd_GSR_DOB(10), true),
                        2 => (RSTB_dly'last_event, tpd_RSTB_DOB(10), (GSR_CLKB_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOB(11),
      GlitchData    => DOB_GlitchData11,
      OutSignalName => "DOB(11)",
      OutTemp       => DOB_mux(11),
      Paths         => (0 => (CLKB_dly'last_event, tpd_CLKB_DOB(11), (enb_dly_sampled /= '0' and GSR_CLKB_dly /= '1')),
                        1 => (GSR_CLKB_dly'last_event, tpd_GSR_DOB(11), true),
                        2 => (RSTB_dly'last_event, tpd_RSTB_DOB(11), (GSR_CLKB_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOB(12),
      GlitchData    => DOB_GlitchData12,
      OutSignalName => "DOB(12)",
      OutTemp       => DOB_mux(12),
      Paths         => (0 => (CLKB_dly'last_event, tpd_CLKB_DOB(12), (enb_dly_sampled /= '0' and GSR_CLKB_dly /= '1')),
                        1 => (GSR_CLKB_dly'last_event, tpd_GSR_DOB(12), true),
                        2 => (RSTB_dly'last_event, tpd_RSTB_DOB(12), (GSR_CLKB_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOB(13),
      GlitchData    => DOB_GlitchData13,
      OutSignalName => "DOB(13)",
      OutTemp       => DOB_mux(13),
      Paths         => (0 => (CLKB_dly'last_event, tpd_CLKB_DOB(13), (enb_dly_sampled /= '0' and GSR_CLKB_dly /= '1')),
                        1 => (GSR_CLKB_dly'last_event, tpd_GSR_DOB(13), true),
                        2 => (RSTB_dly'last_event, tpd_RSTB_DOB(13), (GSR_CLKB_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOB(14),
      GlitchData    => DOB_GlitchData14,
      OutSignalName => "DOB(14)",
      OutTemp       => DOB_mux(14),
      Paths         => (0 => (CLKB_dly'last_event, tpd_CLKB_DOB(14), (enb_dly_sampled /= '0' and GSR_CLKB_dly /= '1')),
                        1 => (GSR_CLKB_dly'last_event, tpd_GSR_DOB(14), true),
                        2 => (RSTB_dly'last_event, tpd_RSTB_DOB(14), (GSR_CLKB_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOB(15),
      GlitchData    => DOB_GlitchData15,
      OutSignalName => "DOB(15)",
      OutTemp       => DOB_mux(15),
      Paths         => (0 => (CLKB_dly'last_event, tpd_CLKB_DOB(15), (enb_dly_sampled /= '0' and GSR_CLKB_dly /= '1')),
                        1 => (GSR_CLKB_dly'last_event, tpd_GSR_DOB(15), true),
                        2 => (RSTB_dly'last_event, tpd_RSTB_DOB(15), (GSR_CLKB_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOB(16),
      GlitchData    => DOB_GlitchData16,
      OutSignalName => "DOB(16)",
      OutTemp       => DOB_mux(16),
      Paths         => (0 => (CLKB_dly'last_event, tpd_CLKB_DOB(16), (enb_dly_sampled /= '0' and GSR_CLKB_dly /= '1')),
                        1 => (GSR_CLKB_dly'last_event, tpd_GSR_DOB(16), true),
                        2 => (RSTB_dly'last_event, tpd_RSTB_DOB(16), (GSR_CLKB_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOB(17),
      GlitchData    => DOB_GlitchData17,
      OutSignalName => "DOB(17)",
      OutTemp       => DOB_mux(17),
      Paths         => (0 => (CLKB_dly'last_event, tpd_CLKB_DOB(17), (enb_dly_sampled /= '0' and GSR_CLKB_dly /= '1')),
                        1 => (GSR_CLKB_dly'last_event, tpd_GSR_DOB(17), true),
                        2 => (RSTB_dly'last_event, tpd_RSTB_DOB(17), (GSR_CLKB_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOB(18),
      GlitchData    => DOB_GlitchData18,
      OutSignalName => "DOB(18)",
      OutTemp       => DOB_mux(18),
      Paths         => (0 => (CLKB_dly'last_event, tpd_CLKB_DOB(18), (enb_dly_sampled /= '0' and GSR_CLKB_dly /= '1')),
                        1 => (GSR_CLKB_dly'last_event, tpd_GSR_DOB(18), true),
                        2 => (RSTB_dly'last_event, tpd_RSTB_DOB(18), (GSR_CLKB_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOB(19),
      GlitchData    => DOB_GlitchData19,
      OutSignalName => "DOB(19)",
      OutTemp       => DOB_mux(19),
      Paths         => (0 => (CLKB_dly'last_event, tpd_CLKB_DOB(19), (enb_dly_sampled /= '0' and GSR_CLKB_dly /= '1')),
                        1 => (GSR_CLKB_dly'last_event, tpd_GSR_DOB(19), true),
                        2 => (RSTB_dly'last_event, tpd_RSTB_DOB(19), (GSR_CLKB_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOB(20),
      GlitchData    => DOB_GlitchData20,
      OutSignalName => "DOB(20)",
      OutTemp       => DOB_mux(20),
      Paths         => (0 => (CLKB_dly'last_event, tpd_CLKB_DOB(20), (enb_dly_sampled /= '0' and GSR_CLKB_dly /= '1')),
                        1 => (GSR_CLKB_dly'last_event, tpd_GSR_DOB(20), true),
                        2 => (RSTB_dly'last_event, tpd_RSTB_DOB(20), (GSR_CLKB_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOB(21),
      GlitchData    => DOB_GlitchData21,
      OutSignalName => "DOB(21)",
      OutTemp       => DOB_mux(21),
      Paths         => (0 => (CLKB_dly'last_event, tpd_CLKB_DOB(21), (enb_dly_sampled /= '0' and GSR_CLKB_dly /= '1')),
                        1 => (GSR_CLKB_dly'last_event, tpd_GSR_DOB(21), true),
                        2 => (RSTB_dly'last_event, tpd_RSTB_DOB(21), (GSR_CLKB_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOB(22),
      GlitchData    => DOB_GlitchData22,
      OutSignalName => "DOB(22)",
      OutTemp       => DOB_mux(22),
      Paths         => (0 => (CLKB_dly'last_event, tpd_CLKB_DOB(22), (enb_dly_sampled /= '0' and GSR_CLKB_dly /= '1')),
                        1 => (GSR_CLKB_dly'last_event, tpd_GSR_DOB(22), true),
                        2 => (RSTB_dly'last_event, tpd_RSTB_DOB(22), (GSR_CLKB_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOB(23),
      GlitchData    => DOB_GlitchData23,
      OutSignalName => "DOB(23)",
      OutTemp       => DOB_mux(23),
      Paths         => (0 => (CLKB_dly'last_event, tpd_CLKB_DOB(23), (enb_dly_sampled /= '0' and GSR_CLKB_dly /= '1')),
                        1 => (GSR_CLKB_dly'last_event, tpd_GSR_DOB(23), true),
                        2 => (RSTB_dly'last_event, tpd_RSTB_DOB(23), (GSR_CLKB_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOB(24),
      GlitchData    => DOB_GlitchData24,
      OutSignalName => "DOB(24)",
      OutTemp       => DOB_mux(24),
      Paths         => (0 => (CLKB_dly'last_event, tpd_CLKB_DOB(24), (enb_dly_sampled /= '0' and GSR_CLKB_dly /= '1')),
                        1 => (GSR_CLKB_dly'last_event, tpd_GSR_DOB(24), true),
                        2 => (RSTB_dly'last_event, tpd_RSTB_DOB(24), (GSR_CLKB_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOB(25),
      GlitchData    => DOB_GlitchData25,
      OutSignalName => "DOB(25)",
      OutTemp       => DOB_mux(25),
      Paths         => (0 => (CLKB_dly'last_event, tpd_CLKB_DOB(25), (enb_dly_sampled /= '0' and GSR_CLKB_dly /= '1')),
                        1 => (GSR_CLKB_dly'last_event, tpd_GSR_DOB(25), true),
                        2 => (RSTB_dly'last_event, tpd_RSTB_DOB(25), (GSR_CLKB_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOB(26),
      GlitchData    => DOB_GlitchData26,
      OutSignalName => "DOB(26)",
      OutTemp       => DOB_mux(26),
      Paths         => (0 => (CLKB_dly'last_event, tpd_CLKB_DOB(26), (enb_dly_sampled /= '0' and GSR_CLKB_dly /= '1')),
                        1 => (GSR_CLKB_dly'last_event, tpd_GSR_DOB(26), true),
                        2 => (RSTB_dly'last_event, tpd_RSTB_DOB(26), (GSR_CLKB_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOB(27),
      GlitchData    => DOB_GlitchData27,
      OutSignalName => "DOB(27)",
      OutTemp       => DOB_mux(27),
      Paths         => (0 => (CLKB_dly'last_event, tpd_CLKB_DOB(27), (enb_dly_sampled /= '0' and GSR_CLKB_dly /= '1')),
                        1 => (GSR_CLKB_dly'last_event, tpd_GSR_DOB(27), true),
                        2 => (RSTB_dly'last_event, tpd_RSTB_DOB(27), (GSR_CLKB_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOB(28),
      GlitchData    => DOB_GlitchData28,
      OutSignalName => "DOB(28)",
      OutTemp       => DOB_mux(28),
      Paths         => (0 => (CLKB_dly'last_event, tpd_CLKB_DOB(28), (enb_dly_sampled /= '0' and GSR_CLKB_dly /= '1')),
                        1 => (GSR_CLKB_dly'last_event, tpd_GSR_DOB(28), true),
                        2 => (RSTB_dly'last_event, tpd_RSTB_DOB(28), (GSR_CLKB_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOB(29),
      GlitchData    => DOB_GlitchData29,
      OutSignalName => "DOB(29)",
      OutTemp       => DOB_mux(29),
      Paths         => (0 => (CLKB_dly'last_event, tpd_CLKB_DOB(29), (enb_dly_sampled /= '0' and GSR_CLKB_dly /= '1')),
                        1 => (GSR_CLKB_dly'last_event, tpd_GSR_DOB(29), true),
                        2 => (RSTB_dly'last_event, tpd_RSTB_DOB(29), (GSR_CLKB_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOB(30),
      GlitchData    => DOB_GlitchData30,
      OutSignalName => "DOB(30)",
      OutTemp       => DOB_mux(30),
      Paths         => (0 => (CLKB_dly'last_event, tpd_CLKB_DOB(30), (enb_dly_sampled /= '0' and GSR_CLKB_dly /= '1')),
                        1 => (GSR_CLKB_dly'last_event, tpd_GSR_DOB(30), true),
                        2 => (RSTB_dly'last_event, tpd_RSTB_DOB(30), (GSR_CLKB_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOB(31),
      GlitchData    => DOB_GlitchData31,
      OutSignalName => "DOB(31)",
      OutTemp       => DOB_mux(31),
      Paths         => (0 => (CLKB_dly'last_event, tpd_CLKB_DOB(31), (enb_dly_sampled /= '0' and GSR_CLKB_dly /= '1')),
                        1 => (GSR_CLKB_dly'last_event, tpd_GSR_DOB(31), true),
                        2 => (RSTB_dly'last_event, tpd_RSTB_DOB(31), (GSR_CLKB_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOPB(0),
      GlitchData    => DOPB_GlitchData0,
      OutSignalName => "DOPB(0)",
      OutTemp       => DOPB_mux(0),
      Paths         => (0 => (CLKB_dly'last_event, tpd_CLKB_DOPB(0), (enb_dly_sampled /= '0' and GSR_CLKB_dly /= '1')),
                        1 => (GSR_CLKB_dly'last_event, tpd_GSR_DOPB(0), true),
                        2 => (RSTB_dly'last_event, tpd_RSTB_DOPB(0), (GSR_CLKB_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOPB(1),
      GlitchData    => DOPB_GlitchData1,
      OutSignalName => "DOPB(1)",
      OutTemp       => DOPB_mux(1),
      Paths         => (0 => (CLKB_dly'last_event, tpd_CLKB_DOPB(1), (enb_dly_sampled /= '0' and GSR_CLKB_dly /= '1')),
                        1 => (GSR_CLKB_dly'last_event, tpd_GSR_DOPB(1), true),
                        2 => (RSTB_dly'last_event, tpd_RSTB_DOPB(1), (GSR_CLKB_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOPB(2),
      GlitchData    => DOPB_GlitchData2,
      OutSignalName => "DOPB(2)",
      OutTemp       => DOPB_mux(2),
      Paths         => (0 => (CLKB_dly'last_event, tpd_CLKB_DOPB(2), (enb_dly_sampled /= '0' and GSR_CLKB_dly /= '1')),
                        1 => (GSR_CLKB_dly'last_event, tpd_GSR_DOPB(2), true),
                        2 => (RSTB_dly'last_event, tpd_RSTB_DOPB(2), (GSR_CLKB_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
    VitalPathDelay01 (
      OutSignal     => DOPB(3),
      GlitchData    => DOPB_GlitchData3,
      OutSignalName => "DOPB(3)",
      OutTemp       => DOPB_mux(3),
      Paths         => (0 => (CLKB_dly'last_event, tpd_CLKB_DOPB(3), (enb_dly_sampled /= '0' and GSR_CLKB_dly /= '1')),
                        1 => (GSR_CLKB_dly'last_event, tpd_GSR_DOPB(3), true),
                        2 => (RSTB_dly'last_event, tpd_RSTB_DOPB(3), (GSR_CLKB_dly /= '1'))),
      Mode          => VitalTransport,
      Xon           => Xon,
      MsgOn         => MsgOn,
      MsgSeverity   => warning);
   end process prcs_output;

end X_RAMB16BWER_V;

